'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2032
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class Dataset9
    Inherits DataSet
    
    Private tablememberssetup As memberssetupDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("memberssetup")) Is Nothing) Then
                Me.Tables.Add(New memberssetupDataTable(ds.Tables("memberssetup")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property memberssetup As memberssetupDataTable
        Get
            Return Me.tablememberssetup
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As Dataset9 = CType(MyBase.Clone,Dataset9)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("memberssetup")) Is Nothing) Then
            Me.Tables.Add(New memberssetupDataTable(ds.Tables("memberssetup")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tablememberssetup = CType(Me.Tables("memberssetup"),memberssetupDataTable)
        If (Not (Me.tablememberssetup) Is Nothing) Then
            Me.tablememberssetup.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "Dataset9"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/Dataset9.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tablememberssetup = New memberssetupDataTable
        Me.Tables.Add(Me.tablememberssetup)
    End Sub
    
    Private Function ShouldSerializememberssetup() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub memberssetupRowChangeEventHandler(ByVal sender As Object, ByVal e As memberssetupRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class memberssetupDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnbilldate As DataColumn
        
        Private columnmonthimage As DataColumn
        
        Private columndues As DataColumn
        
        Private columnaccounts As DataColumn
        
        Private columnADD_USER As DataColumn
        
        Private columnADD_DATE As DataColumn
        
        Private columnUPD_USER As DataColumn
        
        Private columnUPD_DATE As DataColumn
        
        Private columndue_date As DataColumn
        
        Private columnaddress1 As DataColumn
        
        Private columnaddress2 As DataColumn
        
        Private columnaddress3 As DataColumn
        
        Private columnaddress4 As DataColumn
        
        Private columnDUE_DAYS As DataColumn
        
        Private columnDUE_PER As DataColumn
        
        Private columnsms As DataColumn
        
        Private columnreminder As DataColumn
        
        Private columnemailmessage As DataColumn
        
        Private columnCOUP_DEB As DataColumn
        
        Private columnCOUP_CRED As DataColumn
        
        Private columnround_deb As DataColumn
        
        Private columnround_cred As DataColumn
        
        Private columnFUNC_DEB As DataColumn
        
        Private columnFUNC_CRED As DataColumn
        
        Private columnSENIOR_AGE As DataColumn
        
        Private columnaddress5 As DataColumn
        
        Private columnpannp As DataColumn
        
        Private columntinno As DataColumn
        
        Private columnstaxno As DataColumn
        
        Private columnGSTNO As DataColumn
        
        Friend Sub New()
            MyBase.New("memberssetup")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property billdateColumn As DataColumn
            Get
                Return Me.columnbilldate
            End Get
        End Property
        
        Friend ReadOnly Property monthimageColumn As DataColumn
            Get
                Return Me.columnmonthimage
            End Get
        End Property
        
        Friend ReadOnly Property duesColumn As DataColumn
            Get
                Return Me.columndues
            End Get
        End Property
        
        Friend ReadOnly Property accountsColumn As DataColumn
            Get
                Return Me.columnaccounts
            End Get
        End Property
        
        Friend ReadOnly Property ADD_USERColumn As DataColumn
            Get
                Return Me.columnADD_USER
            End Get
        End Property
        
        Friend ReadOnly Property ADD_DATEColumn As DataColumn
            Get
                Return Me.columnADD_DATE
            End Get
        End Property
        
        Friend ReadOnly Property UPD_USERColumn As DataColumn
            Get
                Return Me.columnUPD_USER
            End Get
        End Property
        
        Friend ReadOnly Property UPD_DATEColumn As DataColumn
            Get
                Return Me.columnUPD_DATE
            End Get
        End Property
        
        Friend ReadOnly Property due_dateColumn As DataColumn
            Get
                Return Me.columndue_date
            End Get
        End Property
        
        Friend ReadOnly Property address1Column As DataColumn
            Get
                Return Me.columnaddress1
            End Get
        End Property
        
        Friend ReadOnly Property address2Column As DataColumn
            Get
                Return Me.columnaddress2
            End Get
        End Property
        
        Friend ReadOnly Property address3Column As DataColumn
            Get
                Return Me.columnaddress3
            End Get
        End Property
        
        Friend ReadOnly Property address4Column As DataColumn
            Get
                Return Me.columnaddress4
            End Get
        End Property
        
        Friend ReadOnly Property DUE_DAYSColumn As DataColumn
            Get
                Return Me.columnDUE_DAYS
            End Get
        End Property
        
        Friend ReadOnly Property DUE_PERColumn As DataColumn
            Get
                Return Me.columnDUE_PER
            End Get
        End Property
        
        Friend ReadOnly Property smsColumn As DataColumn
            Get
                Return Me.columnsms
            End Get
        End Property
        
        Friend ReadOnly Property reminderColumn As DataColumn
            Get
                Return Me.columnreminder
            End Get
        End Property
        
        Friend ReadOnly Property emailmessageColumn As DataColumn
            Get
                Return Me.columnemailmessage
            End Get
        End Property
        
        Friend ReadOnly Property COUP_DEBColumn As DataColumn
            Get
                Return Me.columnCOUP_DEB
            End Get
        End Property
        
        Friend ReadOnly Property COUP_CREDColumn As DataColumn
            Get
                Return Me.columnCOUP_CRED
            End Get
        End Property
        
        Friend ReadOnly Property round_debColumn As DataColumn
            Get
                Return Me.columnround_deb
            End Get
        End Property
        
        Friend ReadOnly Property round_credColumn As DataColumn
            Get
                Return Me.columnround_cred
            End Get
        End Property
        
        Friend ReadOnly Property FUNC_DEBColumn As DataColumn
            Get
                Return Me.columnFUNC_DEB
            End Get
        End Property
        
        Friend ReadOnly Property FUNC_CREDColumn As DataColumn
            Get
                Return Me.columnFUNC_CRED
            End Get
        End Property
        
        Friend ReadOnly Property SENIOR_AGEColumn As DataColumn
            Get
                Return Me.columnSENIOR_AGE
            End Get
        End Property
        
        Friend ReadOnly Property address5Column As DataColumn
            Get
                Return Me.columnaddress5
            End Get
        End Property
        
        Friend ReadOnly Property pannpColumn As DataColumn
            Get
                Return Me.columnpannp
            End Get
        End Property
        
        Friend ReadOnly Property tinnoColumn As DataColumn
            Get
                Return Me.columntinno
            End Get
        End Property
        
        Friend ReadOnly Property staxnoColumn As DataColumn
            Get
                Return Me.columnstaxno
            End Get
        End Property
        
        Friend ReadOnly Property GSTNOColumn As DataColumn
            Get
                Return Me.columnGSTNO
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As memberssetupRow
            Get
                Return CType(Me.Rows(index),memberssetupRow)
            End Get
        End Property
        
        Public Event memberssetupRowChanged As memberssetupRowChangeEventHandler
        
        Public Event memberssetupRowChanging As memberssetupRowChangeEventHandler
        
        Public Event memberssetupRowDeleted As memberssetupRowChangeEventHandler
        
        Public Event memberssetupRowDeleting As memberssetupRowChangeEventHandler
        
        Public Overloads Sub AddmemberssetupRow(ByVal row As memberssetupRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddmemberssetupRow( _
                    ByVal billdate As String,  _
                    ByVal monthimage() As Byte,  _
                    ByVal dues As String,  _
                    ByVal accounts As String,  _
                    ByVal ADD_USER As String,  _
                    ByVal ADD_DATE As Date,  _
                    ByVal UPD_USER As String,  _
                    ByVal UPD_DATE As Date,  _
                    ByVal due_date As Date,  _
                    ByVal address1 As String,  _
                    ByVal address2 As String,  _
                    ByVal address3 As String,  _
                    ByVal address4 As String,  _
                    ByVal DUE_DAYS As Decimal,  _
                    ByVal DUE_PER As Decimal,  _
                    ByVal sms As String,  _
                    ByVal reminder As Decimal,  _
                    ByVal emailmessage As String,  _
                    ByVal COUP_DEB As String,  _
                    ByVal COUP_CRED As String,  _
                    ByVal round_deb As String,  _
                    ByVal round_cred As String,  _
                    ByVal FUNC_DEB As String,  _
                    ByVal FUNC_CRED As String,  _
                    ByVal SENIOR_AGE As Decimal,  _
                    ByVal address5 As String,  _
                    ByVal pannp As String,  _
                    ByVal tinno As String,  _
                    ByVal staxno As String,  _
                    ByVal GSTNO As String) As memberssetupRow
            Dim rowmemberssetupRow As memberssetupRow = CType(Me.NewRow,memberssetupRow)
            rowmemberssetupRow.ItemArray = New Object() {billdate, monthimage, dues, accounts, ADD_USER, ADD_DATE, UPD_USER, UPD_DATE, due_date, address1, address2, address3, address4, DUE_DAYS, DUE_PER, sms, reminder, emailmessage, COUP_DEB, COUP_CRED, round_deb, round_cred, FUNC_DEB, FUNC_CRED, SENIOR_AGE, address5, pannp, tinno, staxno, GSTNO}
            Me.Rows.Add(rowmemberssetupRow)
            Return rowmemberssetupRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As memberssetupDataTable = CType(MyBase.Clone,memberssetupDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New memberssetupDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnbilldate = Me.Columns("billdate")
            Me.columnmonthimage = Me.Columns("monthimage")
            Me.columndues = Me.Columns("dues")
            Me.columnaccounts = Me.Columns("accounts")
            Me.columnADD_USER = Me.Columns("ADD_USER")
            Me.columnADD_DATE = Me.Columns("ADD_DATE")
            Me.columnUPD_USER = Me.Columns("UPD_USER")
            Me.columnUPD_DATE = Me.Columns("UPD_DATE")
            Me.columndue_date = Me.Columns("due_date")
            Me.columnaddress1 = Me.Columns("address1")
            Me.columnaddress2 = Me.Columns("address2")
            Me.columnaddress3 = Me.Columns("address3")
            Me.columnaddress4 = Me.Columns("address4")
            Me.columnDUE_DAYS = Me.Columns("DUE_DAYS")
            Me.columnDUE_PER = Me.Columns("DUE_PER")
            Me.columnsms = Me.Columns("sms")
            Me.columnreminder = Me.Columns("reminder")
            Me.columnemailmessage = Me.Columns("emailmessage")
            Me.columnCOUP_DEB = Me.Columns("COUP_DEB")
            Me.columnCOUP_CRED = Me.Columns("COUP_CRED")
            Me.columnround_deb = Me.Columns("round_deb")
            Me.columnround_cred = Me.Columns("round_cred")
            Me.columnFUNC_DEB = Me.Columns("FUNC_DEB")
            Me.columnFUNC_CRED = Me.Columns("FUNC_CRED")
            Me.columnSENIOR_AGE = Me.Columns("SENIOR_AGE")
            Me.columnaddress5 = Me.Columns("address5")
            Me.columnpannp = Me.Columns("pannp")
            Me.columntinno = Me.Columns("tinno")
            Me.columnstaxno = Me.Columns("staxno")
            Me.columnGSTNO = Me.Columns("GSTNO")
        End Sub
        
        Private Sub InitClass()
            Me.columnbilldate = New DataColumn("billdate", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnbilldate)
            Me.columnmonthimage = New DataColumn("monthimage", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmonthimage)
            Me.columndues = New DataColumn("dues", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndues)
            Me.columnaccounts = New DataColumn("accounts", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnaccounts)
            Me.columnADD_USER = New DataColumn("ADD_USER", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnADD_USER)
            Me.columnADD_DATE = New DataColumn("ADD_DATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnADD_DATE)
            Me.columnUPD_USER = New DataColumn("UPD_USER", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUPD_USER)
            Me.columnUPD_DATE = New DataColumn("UPD_DATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUPD_DATE)
            Me.columndue_date = New DataColumn("due_date", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndue_date)
            Me.columnaddress1 = New DataColumn("address1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnaddress1)
            Me.columnaddress2 = New DataColumn("address2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnaddress2)
            Me.columnaddress3 = New DataColumn("address3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnaddress3)
            Me.columnaddress4 = New DataColumn("address4", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnaddress4)
            Me.columnDUE_DAYS = New DataColumn("DUE_DAYS", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDUE_DAYS)
            Me.columnDUE_PER = New DataColumn("DUE_PER", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDUE_PER)
            Me.columnsms = New DataColumn("sms", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsms)
            Me.columnreminder = New DataColumn("reminder", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnreminder)
            Me.columnemailmessage = New DataColumn("emailmessage", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnemailmessage)
            Me.columnCOUP_DEB = New DataColumn("COUP_DEB", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCOUP_DEB)
            Me.columnCOUP_CRED = New DataColumn("COUP_CRED", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCOUP_CRED)
            Me.columnround_deb = New DataColumn("round_deb", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnround_deb)
            Me.columnround_cred = New DataColumn("round_cred", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnround_cred)
            Me.columnFUNC_DEB = New DataColumn("FUNC_DEB", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFUNC_DEB)
            Me.columnFUNC_CRED = New DataColumn("FUNC_CRED", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFUNC_CRED)
            Me.columnSENIOR_AGE = New DataColumn("SENIOR_AGE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSENIOR_AGE)
            Me.columnaddress5 = New DataColumn("address5", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnaddress5)
            Me.columnpannp = New DataColumn("pannp", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpannp)
            Me.columntinno = New DataColumn("tinno", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntinno)
            Me.columnstaxno = New DataColumn("staxno", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstaxno)
            Me.columnGSTNO = New DataColumn("GSTNO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGSTNO)
        End Sub
        
        Public Function NewmemberssetupRow() As memberssetupRow
            Return CType(Me.NewRow,memberssetupRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New memberssetupRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(memberssetupRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.memberssetupRowChangedEvent) Is Nothing) Then
                RaiseEvent memberssetupRowChanged(Me, New memberssetupRowChangeEvent(CType(e.Row,memberssetupRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.memberssetupRowChangingEvent) Is Nothing) Then
                RaiseEvent memberssetupRowChanging(Me, New memberssetupRowChangeEvent(CType(e.Row,memberssetupRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.memberssetupRowDeletedEvent) Is Nothing) Then
                RaiseEvent memberssetupRowDeleted(Me, New memberssetupRowChangeEvent(CType(e.Row,memberssetupRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.memberssetupRowDeletingEvent) Is Nothing) Then
                RaiseEvent memberssetupRowDeleting(Me, New memberssetupRowChangeEvent(CType(e.Row,memberssetupRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovememberssetupRow(ByVal row As memberssetupRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class memberssetupRow
        Inherits DataRow
        
        Private tablememberssetup As memberssetupDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablememberssetup = CType(Me.Table,memberssetupDataTable)
        End Sub
        
        Public Property billdate As String
            Get
                Try 
                    Return CType(Me(Me.tablememberssetup.billdateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablememberssetup.billdateColumn) = value
            End Set
        End Property
        
        Public Property monthimage As Byte()
            Get
                Try 
                    Return CType(Me(Me.tablememberssetup.monthimageColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablememberssetup.monthimageColumn) = value
            End Set
        End Property
        
        Public Property dues As String
            Get
                Try 
                    Return CType(Me(Me.tablememberssetup.duesColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablememberssetup.duesColumn) = value
            End Set
        End Property
        
        Public Property accounts As String
            Get
                Try 
                    Return CType(Me(Me.tablememberssetup.accountsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablememberssetup.accountsColumn) = value
            End Set
        End Property
        
        Public Property ADD_USER As String
            Get
                Try 
                    Return CType(Me(Me.tablememberssetup.ADD_USERColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablememberssetup.ADD_USERColumn) = value
            End Set
        End Property
        
        Public Property ADD_DATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablememberssetup.ADD_DATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablememberssetup.ADD_DATEColumn) = value
            End Set
        End Property
        
        Public Property UPD_USER As String
            Get
                Try 
                    Return CType(Me(Me.tablememberssetup.UPD_USERColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablememberssetup.UPD_USERColumn) = value
            End Set
        End Property
        
        Public Property UPD_DATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablememberssetup.UPD_DATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablememberssetup.UPD_DATEColumn) = value
            End Set
        End Property
        
        Public Property due_date As Date
            Get
                Try 
                    Return CType(Me(Me.tablememberssetup.due_dateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablememberssetup.due_dateColumn) = value
            End Set
        End Property
        
        Public Property address1 As String
            Get
                Try 
                    Return CType(Me(Me.tablememberssetup.address1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablememberssetup.address1Column) = value
            End Set
        End Property
        
        Public Property address2 As String
            Get
                Try 
                    Return CType(Me(Me.tablememberssetup.address2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablememberssetup.address2Column) = value
            End Set
        End Property
        
        Public Property address3 As String
            Get
                Try 
                    Return CType(Me(Me.tablememberssetup.address3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablememberssetup.address3Column) = value
            End Set
        End Property
        
        Public Property address4 As String
            Get
                Try 
                    Return CType(Me(Me.tablememberssetup.address4Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablememberssetup.address4Column) = value
            End Set
        End Property
        
        Public Property DUE_DAYS As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablememberssetup.DUE_DAYSColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablememberssetup.DUE_DAYSColumn) = value
            End Set
        End Property
        
        Public Property DUE_PER As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablememberssetup.DUE_PERColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablememberssetup.DUE_PERColumn) = value
            End Set
        End Property
        
        Public Property sms As String
            Get
                Try 
                    Return CType(Me(Me.tablememberssetup.smsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablememberssetup.smsColumn) = value
            End Set
        End Property
        
        Public Property reminder As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablememberssetup.reminderColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablememberssetup.reminderColumn) = value
            End Set
        End Property
        
        Public Property emailmessage As String
            Get
                Try 
                    Return CType(Me(Me.tablememberssetup.emailmessageColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablememberssetup.emailmessageColumn) = value
            End Set
        End Property
        
        Public Property COUP_DEB As String
            Get
                Try 
                    Return CType(Me(Me.tablememberssetup.COUP_DEBColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablememberssetup.COUP_DEBColumn) = value
            End Set
        End Property
        
        Public Property COUP_CRED As String
            Get
                Try 
                    Return CType(Me(Me.tablememberssetup.COUP_CREDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablememberssetup.COUP_CREDColumn) = value
            End Set
        End Property
        
        Public Property round_deb As String
            Get
                Try 
                    Return CType(Me(Me.tablememberssetup.round_debColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablememberssetup.round_debColumn) = value
            End Set
        End Property
        
        Public Property round_cred As String
            Get
                Try 
                    Return CType(Me(Me.tablememberssetup.round_credColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablememberssetup.round_credColumn) = value
            End Set
        End Property
        
        Public Property FUNC_DEB As String
            Get
                Try 
                    Return CType(Me(Me.tablememberssetup.FUNC_DEBColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablememberssetup.FUNC_DEBColumn) = value
            End Set
        End Property
        
        Public Property FUNC_CRED As String
            Get
                Try 
                    Return CType(Me(Me.tablememberssetup.FUNC_CREDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablememberssetup.FUNC_CREDColumn) = value
            End Set
        End Property
        
        Public Property SENIOR_AGE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablememberssetup.SENIOR_AGEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablememberssetup.SENIOR_AGEColumn) = value
            End Set
        End Property
        
        Public Property address5 As String
            Get
                Try 
                    Return CType(Me(Me.tablememberssetup.address5Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablememberssetup.address5Column) = value
            End Set
        End Property
        
        Public Property pannp As String
            Get
                Try 
                    Return CType(Me(Me.tablememberssetup.pannpColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablememberssetup.pannpColumn) = value
            End Set
        End Property
        
        Public Property tinno As String
            Get
                Try 
                    Return CType(Me(Me.tablememberssetup.tinnoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablememberssetup.tinnoColumn) = value
            End Set
        End Property
        
        Public Property staxno As String
            Get
                Try 
                    Return CType(Me(Me.tablememberssetup.staxnoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablememberssetup.staxnoColumn) = value
            End Set
        End Property
        
        Public Property GSTNO As String
            Get
                Try 
                    Return CType(Me(Me.tablememberssetup.GSTNOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablememberssetup.GSTNOColumn) = value
            End Set
        End Property
        
        Public Function IsbilldateNull() As Boolean
            Return Me.IsNull(Me.tablememberssetup.billdateColumn)
        End Function
        
        Public Sub SetbilldateNull()
            Me(Me.tablememberssetup.billdateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsmonthimageNull() As Boolean
            Return Me.IsNull(Me.tablememberssetup.monthimageColumn)
        End Function
        
        Public Sub SetmonthimageNull()
            Me(Me.tablememberssetup.monthimageColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsduesNull() As Boolean
            Return Me.IsNull(Me.tablememberssetup.duesColumn)
        End Function
        
        Public Sub SetduesNull()
            Me(Me.tablememberssetup.duesColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsaccountsNull() As Boolean
            Return Me.IsNull(Me.tablememberssetup.accountsColumn)
        End Function
        
        Public Sub SetaccountsNull()
            Me(Me.tablememberssetup.accountsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsADD_USERNull() As Boolean
            Return Me.IsNull(Me.tablememberssetup.ADD_USERColumn)
        End Function
        
        Public Sub SetADD_USERNull()
            Me(Me.tablememberssetup.ADD_USERColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsADD_DATENull() As Boolean
            Return Me.IsNull(Me.tablememberssetup.ADD_DATEColumn)
        End Function
        
        Public Sub SetADD_DATENull()
            Me(Me.tablememberssetup.ADD_DATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUPD_USERNull() As Boolean
            Return Me.IsNull(Me.tablememberssetup.UPD_USERColumn)
        End Function
        
        Public Sub SetUPD_USERNull()
            Me(Me.tablememberssetup.UPD_USERColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUPD_DATENull() As Boolean
            Return Me.IsNull(Me.tablememberssetup.UPD_DATEColumn)
        End Function
        
        Public Sub SetUPD_DATENull()
            Me(Me.tablememberssetup.UPD_DATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdue_dateNull() As Boolean
            Return Me.IsNull(Me.tablememberssetup.due_dateColumn)
        End Function
        
        Public Sub Setdue_dateNull()
            Me(Me.tablememberssetup.due_dateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isaddress1Null() As Boolean
            Return Me.IsNull(Me.tablememberssetup.address1Column)
        End Function
        
        Public Sub Setaddress1Null()
            Me(Me.tablememberssetup.address1Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isaddress2Null() As Boolean
            Return Me.IsNull(Me.tablememberssetup.address2Column)
        End Function
        
        Public Sub Setaddress2Null()
            Me(Me.tablememberssetup.address2Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isaddress3Null() As Boolean
            Return Me.IsNull(Me.tablememberssetup.address3Column)
        End Function
        
        Public Sub Setaddress3Null()
            Me(Me.tablememberssetup.address3Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isaddress4Null() As Boolean
            Return Me.IsNull(Me.tablememberssetup.address4Column)
        End Function
        
        Public Sub Setaddress4Null()
            Me(Me.tablememberssetup.address4Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsDUE_DAYSNull() As Boolean
            Return Me.IsNull(Me.tablememberssetup.DUE_DAYSColumn)
        End Function
        
        Public Sub SetDUE_DAYSNull()
            Me(Me.tablememberssetup.DUE_DAYSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDUE_PERNull() As Boolean
            Return Me.IsNull(Me.tablememberssetup.DUE_PERColumn)
        End Function
        
        Public Sub SetDUE_PERNull()
            Me(Me.tablememberssetup.DUE_PERColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IssmsNull() As Boolean
            Return Me.IsNull(Me.tablememberssetup.smsColumn)
        End Function
        
        Public Sub SetsmsNull()
            Me(Me.tablememberssetup.smsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsreminderNull() As Boolean
            Return Me.IsNull(Me.tablememberssetup.reminderColumn)
        End Function
        
        Public Sub SetreminderNull()
            Me(Me.tablememberssetup.reminderColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsemailmessageNull() As Boolean
            Return Me.IsNull(Me.tablememberssetup.emailmessageColumn)
        End Function
        
        Public Sub SetemailmessageNull()
            Me(Me.tablememberssetup.emailmessageColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCOUP_DEBNull() As Boolean
            Return Me.IsNull(Me.tablememberssetup.COUP_DEBColumn)
        End Function
        
        Public Sub SetCOUP_DEBNull()
            Me(Me.tablememberssetup.COUP_DEBColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCOUP_CREDNull() As Boolean
            Return Me.IsNull(Me.tablememberssetup.COUP_CREDColumn)
        End Function
        
        Public Sub SetCOUP_CREDNull()
            Me(Me.tablememberssetup.COUP_CREDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isround_debNull() As Boolean
            Return Me.IsNull(Me.tablememberssetup.round_debColumn)
        End Function
        
        Public Sub Setround_debNull()
            Me(Me.tablememberssetup.round_debColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isround_credNull() As Boolean
            Return Me.IsNull(Me.tablememberssetup.round_credColumn)
        End Function
        
        Public Sub Setround_credNull()
            Me(Me.tablememberssetup.round_credColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFUNC_DEBNull() As Boolean
            Return Me.IsNull(Me.tablememberssetup.FUNC_DEBColumn)
        End Function
        
        Public Sub SetFUNC_DEBNull()
            Me(Me.tablememberssetup.FUNC_DEBColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFUNC_CREDNull() As Boolean
            Return Me.IsNull(Me.tablememberssetup.FUNC_CREDColumn)
        End Function
        
        Public Sub SetFUNC_CREDNull()
            Me(Me.tablememberssetup.FUNC_CREDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSENIOR_AGENull() As Boolean
            Return Me.IsNull(Me.tablememberssetup.SENIOR_AGEColumn)
        End Function
        
        Public Sub SetSENIOR_AGENull()
            Me(Me.tablememberssetup.SENIOR_AGEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isaddress5Null() As Boolean
            Return Me.IsNull(Me.tablememberssetup.address5Column)
        End Function
        
        Public Sub Setaddress5Null()
            Me(Me.tablememberssetup.address5Column) = System.Convert.DBNull
        End Sub
        
        Public Function IspannpNull() As Boolean
            Return Me.IsNull(Me.tablememberssetup.pannpColumn)
        End Function
        
        Public Sub SetpannpNull()
            Me(Me.tablememberssetup.pannpColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstinnoNull() As Boolean
            Return Me.IsNull(Me.tablememberssetup.tinnoColumn)
        End Function
        
        Public Sub SettinnoNull()
            Me(Me.tablememberssetup.tinnoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsstaxnoNull() As Boolean
            Return Me.IsNull(Me.tablememberssetup.staxnoColumn)
        End Function
        
        Public Sub SetstaxnoNull()
            Me(Me.tablememberssetup.staxnoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGSTNONull() As Boolean
            Return Me.IsNull(Me.tablememberssetup.GSTNOColumn)
        End Function
        
        Public Sub SetGSTNONull()
            Me(Me.tablememberssetup.GSTNOColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class memberssetupRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As memberssetupRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As memberssetupRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As memberssetupRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
