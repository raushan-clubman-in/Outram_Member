'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2500
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class Remainderletter
    Inherits DataSet
    
    Private tableoutstandrpt_summary As outstandrpt_summaryDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("outstandrpt_summary")) Is Nothing) Then
                Me.Tables.Add(New outstandrpt_summaryDataTable(ds.Tables("outstandrpt_summary")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property outstandrpt_summary As outstandrpt_summaryDataTable
        Get
            Return Me.tableoutstandrpt_summary
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As Remainderletter = CType(MyBase.Clone,Remainderletter)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("outstandrpt_summary")) Is Nothing) Then
            Me.Tables.Add(New outstandrpt_summaryDataTable(ds.Tables("outstandrpt_summary")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableoutstandrpt_summary = CType(Me.Tables("outstandrpt_summary"),outstandrpt_summaryDataTable)
        If (Not (Me.tableoutstandrpt_summary) Is Nothing) Then
            Me.tableoutstandrpt_summary.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "Remainderletter"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/Remainderletter.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableoutstandrpt_summary = New outstandrpt_summaryDataTable
        Me.Tables.Add(Me.tableoutstandrpt_summary)
    End Sub
    
    Private Function ShouldSerializeoutstandrpt_summary() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub outstandrpt_summaryRowChangeEventHandler(ByVal sender As Object, ByVal e As outstandrpt_summaryRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class outstandrpt_summaryDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnmcode As DataColumn
        
        Private columnslname As DataColumn
        
        Private columntype As DataColumn
        
        Private columncurentstatus As DataColumn
        
        Private columnadd1 As DataColumn
        
        Private columnadd2 As DataColumn
        
        Private columnadd3 As DataColumn
        
        Private columncity As DataColumn
        
        Private columnpin As DataColumn
        
        Private columnphone As DataColumn
        
        Private columnopbal As DataColumn
        
        Private columncreditamt As DataColumn
        
        Private columndebitamt As DataColumn
        
        Private columnasoncreditamt As DataColumn
        
        Private columnasondebitamt As DataColumn
        
        Private columnclbal As DataColumn
        
        Private columnasonclbal As DataColumn
        
        Private columnorderno As DataColumn
        
        Private columnprefix As DataColumn
        
        Private columntypeorder As DataColumn
        
        Private columncatlimit As DataColumn
        
        Private columnmemlimit As DataColumn
        
        Friend Sub New()
            MyBase.New("outstandrpt_summary")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property mcodeColumn As DataColumn
            Get
                Return Me.columnmcode
            End Get
        End Property
        
        Friend ReadOnly Property slnameColumn As DataColumn
            Get
                Return Me.columnslname
            End Get
        End Property
        
        Friend ReadOnly Property typeColumn As DataColumn
            Get
                Return Me.columntype
            End Get
        End Property
        
        Friend ReadOnly Property curentstatusColumn As DataColumn
            Get
                Return Me.columncurentstatus
            End Get
        End Property
        
        Friend ReadOnly Property add1Column As DataColumn
            Get
                Return Me.columnadd1
            End Get
        End Property
        
        Friend ReadOnly Property add2Column As DataColumn
            Get
                Return Me.columnadd2
            End Get
        End Property
        
        Friend ReadOnly Property add3Column As DataColumn
            Get
                Return Me.columnadd3
            End Get
        End Property
        
        Friend ReadOnly Property cityColumn As DataColumn
            Get
                Return Me.columncity
            End Get
        End Property
        
        Friend ReadOnly Property pinColumn As DataColumn
            Get
                Return Me.columnpin
            End Get
        End Property
        
        Friend ReadOnly Property phoneColumn As DataColumn
            Get
                Return Me.columnphone
            End Get
        End Property
        
        Friend ReadOnly Property opbalColumn As DataColumn
            Get
                Return Me.columnopbal
            End Get
        End Property
        
        Friend ReadOnly Property creditamtColumn As DataColumn
            Get
                Return Me.columncreditamt
            End Get
        End Property
        
        Friend ReadOnly Property debitamtColumn As DataColumn
            Get
                Return Me.columndebitamt
            End Get
        End Property
        
        Friend ReadOnly Property asoncreditamtColumn As DataColumn
            Get
                Return Me.columnasoncreditamt
            End Get
        End Property
        
        Friend ReadOnly Property asondebitamtColumn As DataColumn
            Get
                Return Me.columnasondebitamt
            End Get
        End Property
        
        Friend ReadOnly Property clbalColumn As DataColumn
            Get
                Return Me.columnclbal
            End Get
        End Property
        
        Friend ReadOnly Property asonclbalColumn As DataColumn
            Get
                Return Me.columnasonclbal
            End Get
        End Property
        
        Friend ReadOnly Property ordernoColumn As DataColumn
            Get
                Return Me.columnorderno
            End Get
        End Property
        
        Friend ReadOnly Property prefixColumn As DataColumn
            Get
                Return Me.columnprefix
            End Get
        End Property
        
        Friend ReadOnly Property typeorderColumn As DataColumn
            Get
                Return Me.columntypeorder
            End Get
        End Property
        
        Friend ReadOnly Property catlimitColumn As DataColumn
            Get
                Return Me.columncatlimit
            End Get
        End Property
        
        Friend ReadOnly Property memlimitColumn As DataColumn
            Get
                Return Me.columnmemlimit
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As outstandrpt_summaryRow
            Get
                Return CType(Me.Rows(index),outstandrpt_summaryRow)
            End Get
        End Property
        
        Public Event outstandrpt_summaryRowChanged As outstandrpt_summaryRowChangeEventHandler
        
        Public Event outstandrpt_summaryRowChanging As outstandrpt_summaryRowChangeEventHandler
        
        Public Event outstandrpt_summaryRowDeleted As outstandrpt_summaryRowChangeEventHandler
        
        Public Event outstandrpt_summaryRowDeleting As outstandrpt_summaryRowChangeEventHandler
        
        Public Overloads Sub Addoutstandrpt_summaryRow(ByVal row As outstandrpt_summaryRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addoutstandrpt_summaryRow( _
                    ByVal mcode As String,  _
                    ByVal slname As String,  _
                    ByVal type As String,  _
                    ByVal curentstatus As String,  _
                    ByVal add1 As String,  _
                    ByVal add2 As String,  _
                    ByVal add3 As String,  _
                    ByVal city As String,  _
                    ByVal pin As String,  _
                    ByVal phone As String,  _
                    ByVal opbal As Decimal,  _
                    ByVal creditamt As Decimal,  _
                    ByVal debitamt As Decimal,  _
                    ByVal asoncreditamt As Decimal,  _
                    ByVal asondebitamt As Decimal,  _
                    ByVal clbal As Decimal,  _
                    ByVal asonclbal As Decimal,  _
                    ByVal orderno As Decimal,  _
                    ByVal prefix As String,  _
                    ByVal typeorder As Decimal,  _
                    ByVal catlimit As Decimal,  _
                    ByVal memlimit As Decimal) As outstandrpt_summaryRow
            Dim rowoutstandrpt_summaryRow As outstandrpt_summaryRow = CType(Me.NewRow,outstandrpt_summaryRow)
            rowoutstandrpt_summaryRow.ItemArray = New Object() {mcode, slname, type, curentstatus, add1, add2, add3, city, pin, phone, opbal, creditamt, debitamt, asoncreditamt, asondebitamt, clbal, asonclbal, orderno, prefix, typeorder, catlimit, memlimit}
            Me.Rows.Add(rowoutstandrpt_summaryRow)
            Return rowoutstandrpt_summaryRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As outstandrpt_summaryDataTable = CType(MyBase.Clone,outstandrpt_summaryDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New outstandrpt_summaryDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnmcode = Me.Columns("mcode")
            Me.columnslname = Me.Columns("slname")
            Me.columntype = Me.Columns("type")
            Me.columncurentstatus = Me.Columns("curentstatus")
            Me.columnadd1 = Me.Columns("add1")
            Me.columnadd2 = Me.Columns("add2")
            Me.columnadd3 = Me.Columns("add3")
            Me.columncity = Me.Columns("city")
            Me.columnpin = Me.Columns("pin")
            Me.columnphone = Me.Columns("phone")
            Me.columnopbal = Me.Columns("opbal")
            Me.columncreditamt = Me.Columns("creditamt")
            Me.columndebitamt = Me.Columns("debitamt")
            Me.columnasoncreditamt = Me.Columns("asoncreditamt")
            Me.columnasondebitamt = Me.Columns("asondebitamt")
            Me.columnclbal = Me.Columns("clbal")
            Me.columnasonclbal = Me.Columns("asonclbal")
            Me.columnorderno = Me.Columns("orderno")
            Me.columnprefix = Me.Columns("prefix")
            Me.columntypeorder = Me.Columns("typeorder")
            Me.columncatlimit = Me.Columns("catlimit")
            Me.columnmemlimit = Me.Columns("memlimit")
        End Sub
        
        Private Sub InitClass()
            Me.columnmcode = New DataColumn("mcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmcode)
            Me.columnslname = New DataColumn("slname", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnslname)
            Me.columntype = New DataColumn("type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntype)
            Me.columncurentstatus = New DataColumn("curentstatus", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncurentstatus)
            Me.columnadd1 = New DataColumn("add1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnadd1)
            Me.columnadd2 = New DataColumn("add2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnadd2)
            Me.columnadd3 = New DataColumn("add3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnadd3)
            Me.columncity = New DataColumn("city", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncity)
            Me.columnpin = New DataColumn("pin", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpin)
            Me.columnphone = New DataColumn("phone", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone)
            Me.columnopbal = New DataColumn("opbal", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnopbal)
            Me.columncreditamt = New DataColumn("creditamt", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncreditamt)
            Me.columndebitamt = New DataColumn("debitamt", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndebitamt)
            Me.columnasoncreditamt = New DataColumn("asoncreditamt", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnasoncreditamt)
            Me.columnasondebitamt = New DataColumn("asondebitamt", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnasondebitamt)
            Me.columnclbal = New DataColumn("clbal", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnclbal)
            Me.columnasonclbal = New DataColumn("asonclbal", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnasonclbal)
            Me.columnorderno = New DataColumn("orderno", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnorderno)
            Me.columnprefix = New DataColumn("prefix", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprefix)
            Me.columntypeorder = New DataColumn("typeorder", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntypeorder)
            Me.columncatlimit = New DataColumn("catlimit", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncatlimit)
            Me.columnmemlimit = New DataColumn("memlimit", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmemlimit)
        End Sub
        
        Public Function Newoutstandrpt_summaryRow() As outstandrpt_summaryRow
            Return CType(Me.NewRow,outstandrpt_summaryRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New outstandrpt_summaryRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(outstandrpt_summaryRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.outstandrpt_summaryRowChangedEvent) Is Nothing) Then
                RaiseEvent outstandrpt_summaryRowChanged(Me, New outstandrpt_summaryRowChangeEvent(CType(e.Row,outstandrpt_summaryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.outstandrpt_summaryRowChangingEvent) Is Nothing) Then
                RaiseEvent outstandrpt_summaryRowChanging(Me, New outstandrpt_summaryRowChangeEvent(CType(e.Row,outstandrpt_summaryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.outstandrpt_summaryRowDeletedEvent) Is Nothing) Then
                RaiseEvent outstandrpt_summaryRowDeleted(Me, New outstandrpt_summaryRowChangeEvent(CType(e.Row,outstandrpt_summaryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.outstandrpt_summaryRowDeletingEvent) Is Nothing) Then
                RaiseEvent outstandrpt_summaryRowDeleting(Me, New outstandrpt_summaryRowChangeEvent(CType(e.Row,outstandrpt_summaryRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeoutstandrpt_summaryRow(ByVal row As outstandrpt_summaryRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class outstandrpt_summaryRow
        Inherits DataRow
        
        Private tableoutstandrpt_summary As outstandrpt_summaryDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableoutstandrpt_summary = CType(Me.Table,outstandrpt_summaryDataTable)
        End Sub
        
        Public Property mcode As String
            Get
                Try 
                    Return CType(Me(Me.tableoutstandrpt_summary.mcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableoutstandrpt_summary.mcodeColumn) = value
            End Set
        End Property
        
        Public Property slname As String
            Get
                Try 
                    Return CType(Me(Me.tableoutstandrpt_summary.slnameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableoutstandrpt_summary.slnameColumn) = value
            End Set
        End Property
        
        Public Property type As String
            Get
                Try 
                    Return CType(Me(Me.tableoutstandrpt_summary.typeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableoutstandrpt_summary.typeColumn) = value
            End Set
        End Property
        
        Public Property curentstatus As String
            Get
                Try 
                    Return CType(Me(Me.tableoutstandrpt_summary.curentstatusColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableoutstandrpt_summary.curentstatusColumn) = value
            End Set
        End Property
        
        Public Property add1 As String
            Get
                Try 
                    Return CType(Me(Me.tableoutstandrpt_summary.add1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableoutstandrpt_summary.add1Column) = value
            End Set
        End Property
        
        Public Property add2 As String
            Get
                Try 
                    Return CType(Me(Me.tableoutstandrpt_summary.add2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableoutstandrpt_summary.add2Column) = value
            End Set
        End Property
        
        Public Property add3 As String
            Get
                Try 
                    Return CType(Me(Me.tableoutstandrpt_summary.add3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableoutstandrpt_summary.add3Column) = value
            End Set
        End Property
        
        Public Property city As String
            Get
                Try 
                    Return CType(Me(Me.tableoutstandrpt_summary.cityColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableoutstandrpt_summary.cityColumn) = value
            End Set
        End Property
        
        Public Property pin As String
            Get
                Try 
                    Return CType(Me(Me.tableoutstandrpt_summary.pinColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableoutstandrpt_summary.pinColumn) = value
            End Set
        End Property
        
        Public Property phone As String
            Get
                Try 
                    Return CType(Me(Me.tableoutstandrpt_summary.phoneColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableoutstandrpt_summary.phoneColumn) = value
            End Set
        End Property
        
        Public Property opbal As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableoutstandrpt_summary.opbalColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableoutstandrpt_summary.opbalColumn) = value
            End Set
        End Property
        
        Public Property creditamt As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableoutstandrpt_summary.creditamtColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableoutstandrpt_summary.creditamtColumn) = value
            End Set
        End Property
        
        Public Property debitamt As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableoutstandrpt_summary.debitamtColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableoutstandrpt_summary.debitamtColumn) = value
            End Set
        End Property
        
        Public Property asoncreditamt As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableoutstandrpt_summary.asoncreditamtColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableoutstandrpt_summary.asoncreditamtColumn) = value
            End Set
        End Property
        
        Public Property asondebitamt As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableoutstandrpt_summary.asondebitamtColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableoutstandrpt_summary.asondebitamtColumn) = value
            End Set
        End Property
        
        Public Property clbal As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableoutstandrpt_summary.clbalColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableoutstandrpt_summary.clbalColumn) = value
            End Set
        End Property
        
        Public Property asonclbal As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableoutstandrpt_summary.asonclbalColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableoutstandrpt_summary.asonclbalColumn) = value
            End Set
        End Property
        
        Public Property orderno As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableoutstandrpt_summary.ordernoColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableoutstandrpt_summary.ordernoColumn) = value
            End Set
        End Property
        
        Public Property prefix As String
            Get
                Try 
                    Return CType(Me(Me.tableoutstandrpt_summary.prefixColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableoutstandrpt_summary.prefixColumn) = value
            End Set
        End Property
        
        Public Property typeorder As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableoutstandrpt_summary.typeorderColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableoutstandrpt_summary.typeorderColumn) = value
            End Set
        End Property
        
        Public Property catlimit As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableoutstandrpt_summary.catlimitColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableoutstandrpt_summary.catlimitColumn) = value
            End Set
        End Property
        
        Public Property memlimit As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableoutstandrpt_summary.memlimitColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableoutstandrpt_summary.memlimitColumn) = value
            End Set
        End Property
        
        Public Function IsmcodeNull() As Boolean
            Return Me.IsNull(Me.tableoutstandrpt_summary.mcodeColumn)
        End Function
        
        Public Sub SetmcodeNull()
            Me(Me.tableoutstandrpt_summary.mcodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsslnameNull() As Boolean
            Return Me.IsNull(Me.tableoutstandrpt_summary.slnameColumn)
        End Function
        
        Public Sub SetslnameNull()
            Me(Me.tableoutstandrpt_summary.slnameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstypeNull() As Boolean
            Return Me.IsNull(Me.tableoutstandrpt_summary.typeColumn)
        End Function
        
        Public Sub SettypeNull()
            Me(Me.tableoutstandrpt_summary.typeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscurentstatusNull() As Boolean
            Return Me.IsNull(Me.tableoutstandrpt_summary.curentstatusColumn)
        End Function
        
        Public Sub SetcurentstatusNull()
            Me(Me.tableoutstandrpt_summary.curentstatusColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isadd1Null() As Boolean
            Return Me.IsNull(Me.tableoutstandrpt_summary.add1Column)
        End Function
        
        Public Sub Setadd1Null()
            Me(Me.tableoutstandrpt_summary.add1Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isadd2Null() As Boolean
            Return Me.IsNull(Me.tableoutstandrpt_summary.add2Column)
        End Function
        
        Public Sub Setadd2Null()
            Me(Me.tableoutstandrpt_summary.add2Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isadd3Null() As Boolean
            Return Me.IsNull(Me.tableoutstandrpt_summary.add3Column)
        End Function
        
        Public Sub Setadd3Null()
            Me(Me.tableoutstandrpt_summary.add3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IscityNull() As Boolean
            Return Me.IsNull(Me.tableoutstandrpt_summary.cityColumn)
        End Function
        
        Public Sub SetcityNull()
            Me(Me.tableoutstandrpt_summary.cityColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IspinNull() As Boolean
            Return Me.IsNull(Me.tableoutstandrpt_summary.pinColumn)
        End Function
        
        Public Sub SetpinNull()
            Me(Me.tableoutstandrpt_summary.pinColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsphoneNull() As Boolean
            Return Me.IsNull(Me.tableoutstandrpt_summary.phoneColumn)
        End Function
        
        Public Sub SetphoneNull()
            Me(Me.tableoutstandrpt_summary.phoneColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsopbalNull() As Boolean
            Return Me.IsNull(Me.tableoutstandrpt_summary.opbalColumn)
        End Function
        
        Public Sub SetopbalNull()
            Me(Me.tableoutstandrpt_summary.opbalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscreditamtNull() As Boolean
            Return Me.IsNull(Me.tableoutstandrpt_summary.creditamtColumn)
        End Function
        
        Public Sub SetcreditamtNull()
            Me(Me.tableoutstandrpt_summary.creditamtColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdebitamtNull() As Boolean
            Return Me.IsNull(Me.tableoutstandrpt_summary.debitamtColumn)
        End Function
        
        Public Sub SetdebitamtNull()
            Me(Me.tableoutstandrpt_summary.debitamtColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsasoncreditamtNull() As Boolean
            Return Me.IsNull(Me.tableoutstandrpt_summary.asoncreditamtColumn)
        End Function
        
        Public Sub SetasoncreditamtNull()
            Me(Me.tableoutstandrpt_summary.asoncreditamtColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsasondebitamtNull() As Boolean
            Return Me.IsNull(Me.tableoutstandrpt_summary.asondebitamtColumn)
        End Function
        
        Public Sub SetasondebitamtNull()
            Me(Me.tableoutstandrpt_summary.asondebitamtColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsclbalNull() As Boolean
            Return Me.IsNull(Me.tableoutstandrpt_summary.clbalColumn)
        End Function
        
        Public Sub SetclbalNull()
            Me(Me.tableoutstandrpt_summary.clbalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsasonclbalNull() As Boolean
            Return Me.IsNull(Me.tableoutstandrpt_summary.asonclbalColumn)
        End Function
        
        Public Sub SetasonclbalNull()
            Me(Me.tableoutstandrpt_summary.asonclbalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsordernoNull() As Boolean
            Return Me.IsNull(Me.tableoutstandrpt_summary.ordernoColumn)
        End Function
        
        Public Sub SetordernoNull()
            Me(Me.tableoutstandrpt_summary.ordernoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsprefixNull() As Boolean
            Return Me.IsNull(Me.tableoutstandrpt_summary.prefixColumn)
        End Function
        
        Public Sub SetprefixNull()
            Me(Me.tableoutstandrpt_summary.prefixColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstypeorderNull() As Boolean
            Return Me.IsNull(Me.tableoutstandrpt_summary.typeorderColumn)
        End Function
        
        Public Sub SettypeorderNull()
            Me(Me.tableoutstandrpt_summary.typeorderColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscatlimitNull() As Boolean
            Return Me.IsNull(Me.tableoutstandrpt_summary.catlimitColumn)
        End Function
        
        Public Sub SetcatlimitNull()
            Me(Me.tableoutstandrpt_summary.catlimitColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsmemlimitNull() As Boolean
            Return Me.IsNull(Me.tableoutstandrpt_summary.memlimitColumn)
        End Function
        
        Public Sub SetmemlimitNull()
            Me(Me.tableoutstandrpt_summary.memlimitColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class outstandrpt_summaryRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As outstandrpt_summaryRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As outstandrpt_summaryRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As outstandrpt_summaryRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
