'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2494
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class MemberDOB_Dataset
    Inherits DataSet
    
    Private tableVW_MEMBERDOB As VW_MEMBERDOBDataTable
    
    Private tableMM_View_Agelimit As MM_View_AgelimitDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("VW_MEMBERDOB")) Is Nothing) Then
                Me.Tables.Add(New VW_MEMBERDOBDataTable(ds.Tables("VW_MEMBERDOB")))
            End If
            If (Not (ds.Tables("MM_View_Agelimit")) Is Nothing) Then
                Me.Tables.Add(New MM_View_AgelimitDataTable(ds.Tables("MM_View_Agelimit")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VW_MEMBERDOB As VW_MEMBERDOBDataTable
        Get
            Return Me.tableVW_MEMBERDOB
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MM_View_Agelimit As MM_View_AgelimitDataTable
        Get
            Return Me.tableMM_View_Agelimit
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As MemberDOB_Dataset = CType(MyBase.Clone,MemberDOB_Dataset)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("VW_MEMBERDOB")) Is Nothing) Then
            Me.Tables.Add(New VW_MEMBERDOBDataTable(ds.Tables("VW_MEMBERDOB")))
        End If
        If (Not (ds.Tables("MM_View_Agelimit")) Is Nothing) Then
            Me.Tables.Add(New MM_View_AgelimitDataTable(ds.Tables("MM_View_Agelimit")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableVW_MEMBERDOB = CType(Me.Tables("VW_MEMBERDOB"),VW_MEMBERDOBDataTable)
        If (Not (Me.tableVW_MEMBERDOB) Is Nothing) Then
            Me.tableVW_MEMBERDOB.InitVars
        End If
        Me.tableMM_View_Agelimit = CType(Me.Tables("MM_View_Agelimit"),MM_View_AgelimitDataTable)
        If (Not (Me.tableMM_View_Agelimit) Is Nothing) Then
            Me.tableMM_View_Agelimit.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "MemberDOB_Dataset"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/MemberDOB_Dataset.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableVW_MEMBERDOB = New VW_MEMBERDOBDataTable
        Me.Tables.Add(Me.tableVW_MEMBERDOB)
        Me.tableMM_View_Agelimit = New MM_View_AgelimitDataTable
        Me.Tables.Add(Me.tableMM_View_Agelimit)
    End Sub
    
    Private Function ShouldSerializeVW_MEMBERDOB() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeMM_View_Agelimit() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub VW_MEMBERDOBRowChangeEventHandler(ByVal sender As Object, ByVal e As VW_MEMBERDOBRowChangeEvent)
    
    Public Delegate Sub MM_View_AgelimitRowChangeEventHandler(ByVal sender As Object, ByVal e As MM_View_AgelimitRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VW_MEMBERDOBDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnMCODE As DataColumn
        
        Private columnMNAME As DataColumn
        
        Private columnDOB As DataColumn
        
        Private columnSPOUSE As DataColumn
        
        Private columnPPHONE1 As DataColumn
        
        Private columnWifeDOB As DataColumn
        
        Private columnCURENTSTATUS As DataColumn
        
        Private columnWEDDING_DATE As DataColumn
        
        Private columnTYPEDESC As DataColumn
        
        Private columnChild_nm As DataColumn
        
        Private columnchild_dob As DataColumn
        
        Friend Sub New()
            MyBase.New("VW_MEMBERDOB")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property MCODEColumn As DataColumn
            Get
                Return Me.columnMCODE
            End Get
        End Property
        
        Friend ReadOnly Property MNAMEColumn As DataColumn
            Get
                Return Me.columnMNAME
            End Get
        End Property
        
        Friend ReadOnly Property DOBColumn As DataColumn
            Get
                Return Me.columnDOB
            End Get
        End Property
        
        Friend ReadOnly Property SPOUSEColumn As DataColumn
            Get
                Return Me.columnSPOUSE
            End Get
        End Property
        
        Friend ReadOnly Property PPHONE1Column As DataColumn
            Get
                Return Me.columnPPHONE1
            End Get
        End Property
        
        Friend ReadOnly Property WifeDOBColumn As DataColumn
            Get
                Return Me.columnWifeDOB
            End Get
        End Property
        
        Friend ReadOnly Property CURENTSTATUSColumn As DataColumn
            Get
                Return Me.columnCURENTSTATUS
            End Get
        End Property
        
        Friend ReadOnly Property WEDDING_DATEColumn As DataColumn
            Get
                Return Me.columnWEDDING_DATE
            End Get
        End Property
        
        Friend ReadOnly Property TYPEDESCColumn As DataColumn
            Get
                Return Me.columnTYPEDESC
            End Get
        End Property
        
        Friend ReadOnly Property Child_nmColumn As DataColumn
            Get
                Return Me.columnChild_nm
            End Get
        End Property
        
        Friend ReadOnly Property child_dobColumn As DataColumn
            Get
                Return Me.columnchild_dob
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VW_MEMBERDOBRow
            Get
                Return CType(Me.Rows(index),VW_MEMBERDOBRow)
            End Get
        End Property
        
        Public Event VW_MEMBERDOBRowChanged As VW_MEMBERDOBRowChangeEventHandler
        
        Public Event VW_MEMBERDOBRowChanging As VW_MEMBERDOBRowChangeEventHandler
        
        Public Event VW_MEMBERDOBRowDeleted As VW_MEMBERDOBRowChangeEventHandler
        
        Public Event VW_MEMBERDOBRowDeleting As VW_MEMBERDOBRowChangeEventHandler
        
        Public Overloads Sub AddVW_MEMBERDOBRow(ByVal row As VW_MEMBERDOBRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVW_MEMBERDOBRow(ByVal MCODE As String, ByVal MNAME As String, ByVal DOB As Date, ByVal SPOUSE As String, ByVal PPHONE1 As String, ByVal WifeDOB As Date, ByVal CURENTSTATUS As String, ByVal WEDDING_DATE As Date, ByVal TYPEDESC As String, ByVal Child_nm As String, ByVal child_dob As Date) As VW_MEMBERDOBRow
            Dim rowVW_MEMBERDOBRow As VW_MEMBERDOBRow = CType(Me.NewRow,VW_MEMBERDOBRow)
            rowVW_MEMBERDOBRow.ItemArray = New Object() {MCODE, MNAME, DOB, SPOUSE, PPHONE1, WifeDOB, CURENTSTATUS, WEDDING_DATE, TYPEDESC, Child_nm, child_dob}
            Me.Rows.Add(rowVW_MEMBERDOBRow)
            Return rowVW_MEMBERDOBRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VW_MEMBERDOBDataTable = CType(MyBase.Clone,VW_MEMBERDOBDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VW_MEMBERDOBDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnMCODE = Me.Columns("MCODE")
            Me.columnMNAME = Me.Columns("MNAME")
            Me.columnDOB = Me.Columns("DOB")
            Me.columnSPOUSE = Me.Columns("SPOUSE")
            Me.columnPPHONE1 = Me.Columns("PPHONE1")
            Me.columnWifeDOB = Me.Columns("WifeDOB")
            Me.columnCURENTSTATUS = Me.Columns("CURENTSTATUS")
            Me.columnWEDDING_DATE = Me.Columns("WEDDING_DATE")
            Me.columnTYPEDESC = Me.Columns("TYPEDESC")
            Me.columnChild_nm = Me.Columns("Child_nm")
            Me.columnchild_dob = Me.Columns("child_dob")
        End Sub
        
        Private Sub InitClass()
            Me.columnMCODE = New DataColumn("MCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMCODE)
            Me.columnMNAME = New DataColumn("MNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMNAME)
            Me.columnDOB = New DataColumn("DOB", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDOB)
            Me.columnSPOUSE = New DataColumn("SPOUSE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSPOUSE)
            Me.columnPPHONE1 = New DataColumn("PPHONE1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPPHONE1)
            Me.columnWifeDOB = New DataColumn("WifeDOB", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnWifeDOB)
            Me.columnCURENTSTATUS = New DataColumn("CURENTSTATUS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCURENTSTATUS)
            Me.columnWEDDING_DATE = New DataColumn("WEDDING_DATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnWEDDING_DATE)
            Me.columnTYPEDESC = New DataColumn("TYPEDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTYPEDESC)
            Me.columnChild_nm = New DataColumn("Child_nm", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnChild_nm)
            Me.columnchild_dob = New DataColumn("child_dob", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnchild_dob)
            Me.columnTYPEDESC.AllowDBNull = false
        End Sub
        
        Public Function NewVW_MEMBERDOBRow() As VW_MEMBERDOBRow
            Return CType(Me.NewRow,VW_MEMBERDOBRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VW_MEMBERDOBRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VW_MEMBERDOBRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VW_MEMBERDOBRowChangedEvent) Is Nothing) Then
                RaiseEvent VW_MEMBERDOBRowChanged(Me, New VW_MEMBERDOBRowChangeEvent(CType(e.Row,VW_MEMBERDOBRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VW_MEMBERDOBRowChangingEvent) Is Nothing) Then
                RaiseEvent VW_MEMBERDOBRowChanging(Me, New VW_MEMBERDOBRowChangeEvent(CType(e.Row,VW_MEMBERDOBRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VW_MEMBERDOBRowDeletedEvent) Is Nothing) Then
                RaiseEvent VW_MEMBERDOBRowDeleted(Me, New VW_MEMBERDOBRowChangeEvent(CType(e.Row,VW_MEMBERDOBRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VW_MEMBERDOBRowDeletingEvent) Is Nothing) Then
                RaiseEvent VW_MEMBERDOBRowDeleting(Me, New VW_MEMBERDOBRowChangeEvent(CType(e.Row,VW_MEMBERDOBRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVW_MEMBERDOBRow(ByVal row As VW_MEMBERDOBRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VW_MEMBERDOBRow
        Inherits DataRow
        
        Private tableVW_MEMBERDOB As VW_MEMBERDOBDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVW_MEMBERDOB = CType(Me.Table,VW_MEMBERDOBDataTable)
        End Sub
        
        Public Property MCODE As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_MEMBERDOB.MCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_MEMBERDOB.MCODEColumn) = value
            End Set
        End Property
        
        Public Property MNAME As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_MEMBERDOB.MNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_MEMBERDOB.MNAMEColumn) = value
            End Set
        End Property
        
        Public Property DOB As Date
            Get
                Try 
                    Return CType(Me(Me.tableVW_MEMBERDOB.DOBColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_MEMBERDOB.DOBColumn) = value
            End Set
        End Property
        
        Public Property SPOUSE As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_MEMBERDOB.SPOUSEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_MEMBERDOB.SPOUSEColumn) = value
            End Set
        End Property
        
        Public Property PPHONE1 As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_MEMBERDOB.PPHONE1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_MEMBERDOB.PPHONE1Column) = value
            End Set
        End Property
        
        Public Property WifeDOB As Date
            Get
                Try 
                    Return CType(Me(Me.tableVW_MEMBERDOB.WifeDOBColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_MEMBERDOB.WifeDOBColumn) = value
            End Set
        End Property
        
        Public Property CURENTSTATUS As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_MEMBERDOB.CURENTSTATUSColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_MEMBERDOB.CURENTSTATUSColumn) = value
            End Set
        End Property
        
        Public Property WEDDING_DATE As Date
            Get
                Try 
                    Return CType(Me(Me.tableVW_MEMBERDOB.WEDDING_DATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_MEMBERDOB.WEDDING_DATEColumn) = value
            End Set
        End Property
        
        Public Property TYPEDESC As String
            Get
                Return CType(Me(Me.tableVW_MEMBERDOB.TYPEDESCColumn),String)
            End Get
            Set
                Me(Me.tableVW_MEMBERDOB.TYPEDESCColumn) = value
            End Set
        End Property
        
        Public Property Child_nm As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_MEMBERDOB.Child_nmColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_MEMBERDOB.Child_nmColumn) = value
            End Set
        End Property
        
        Public Property child_dob As Date
            Get
                Try 
                    Return CType(Me(Me.tableVW_MEMBERDOB.child_dobColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_MEMBERDOB.child_dobColumn) = value
            End Set
        End Property
        
        Public Function IsMCODENull() As Boolean
            Return Me.IsNull(Me.tableVW_MEMBERDOB.MCODEColumn)
        End Function
        
        Public Sub SetMCODENull()
            Me(Me.tableVW_MEMBERDOB.MCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMNAMENull() As Boolean
            Return Me.IsNull(Me.tableVW_MEMBERDOB.MNAMEColumn)
        End Function
        
        Public Sub SetMNAMENull()
            Me(Me.tableVW_MEMBERDOB.MNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDOBNull() As Boolean
            Return Me.IsNull(Me.tableVW_MEMBERDOB.DOBColumn)
        End Function
        
        Public Sub SetDOBNull()
            Me(Me.tableVW_MEMBERDOB.DOBColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSPOUSENull() As Boolean
            Return Me.IsNull(Me.tableVW_MEMBERDOB.SPOUSEColumn)
        End Function
        
        Public Sub SetSPOUSENull()
            Me(Me.tableVW_MEMBERDOB.SPOUSEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPPHONE1Null() As Boolean
            Return Me.IsNull(Me.tableVW_MEMBERDOB.PPHONE1Column)
        End Function
        
        Public Sub SetPPHONE1Null()
            Me(Me.tableVW_MEMBERDOB.PPHONE1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsWifeDOBNull() As Boolean
            Return Me.IsNull(Me.tableVW_MEMBERDOB.WifeDOBColumn)
        End Function
        
        Public Sub SetWifeDOBNull()
            Me(Me.tableVW_MEMBERDOB.WifeDOBColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCURENTSTATUSNull() As Boolean
            Return Me.IsNull(Me.tableVW_MEMBERDOB.CURENTSTATUSColumn)
        End Function
        
        Public Sub SetCURENTSTATUSNull()
            Me(Me.tableVW_MEMBERDOB.CURENTSTATUSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsWEDDING_DATENull() As Boolean
            Return Me.IsNull(Me.tableVW_MEMBERDOB.WEDDING_DATEColumn)
        End Function
        
        Public Sub SetWEDDING_DATENull()
            Me(Me.tableVW_MEMBERDOB.WEDDING_DATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsChild_nmNull() As Boolean
            Return Me.IsNull(Me.tableVW_MEMBERDOB.Child_nmColumn)
        End Function
        
        Public Sub SetChild_nmNull()
            Me(Me.tableVW_MEMBERDOB.Child_nmColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ischild_dobNull() As Boolean
            Return Me.IsNull(Me.tableVW_MEMBERDOB.child_dobColumn)
        End Function
        
        Public Sub Setchild_dobNull()
            Me(Me.tableVW_MEMBERDOB.child_dobColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VW_MEMBERDOBRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VW_MEMBERDOBRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VW_MEMBERDOBRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VW_MEMBERDOBRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MM_View_AgelimitDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnmcode As DataColumn
        
        Private columnmname As DataColumn
        
        Private columncurentstatus As DataColumn
        
        Private columnAGE As DataColumn
        
        Private columndob As DataColumn
        
        Private columnmembertype As DataColumn
        
        Private columnCONTCELL As DataColumn
        
        Private columnCONTEMAIL As DataColumn
        
        Private columnbg As DataColumn
        
        Private columnbtgroup As DataColumn
        
        Friend Sub New()
            MyBase.New("MM_View_Agelimit")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property mcodeColumn As DataColumn
            Get
                Return Me.columnmcode
            End Get
        End Property
        
        Friend ReadOnly Property mnameColumn As DataColumn
            Get
                Return Me.columnmname
            End Get
        End Property
        
        Friend ReadOnly Property curentstatusColumn As DataColumn
            Get
                Return Me.columncurentstatus
            End Get
        End Property
        
        Friend ReadOnly Property AGEColumn As DataColumn
            Get
                Return Me.columnAGE
            End Get
        End Property
        
        Friend ReadOnly Property dobColumn As DataColumn
            Get
                Return Me.columndob
            End Get
        End Property
        
        Friend ReadOnly Property membertypeColumn As DataColumn
            Get
                Return Me.columnmembertype
            End Get
        End Property
        
        Friend ReadOnly Property CONTCELLColumn As DataColumn
            Get
                Return Me.columnCONTCELL
            End Get
        End Property
        
        Friend ReadOnly Property CONTEMAILColumn As DataColumn
            Get
                Return Me.columnCONTEMAIL
            End Get
        End Property
        
        Friend ReadOnly Property bgColumn As DataColumn
            Get
                Return Me.columnbg
            End Get
        End Property
        
        Friend ReadOnly Property btgroupColumn As DataColumn
            Get
                Return Me.columnbtgroup
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As MM_View_AgelimitRow
            Get
                Return CType(Me.Rows(index),MM_View_AgelimitRow)
            End Get
        End Property
        
        Public Event MM_View_AgelimitRowChanged As MM_View_AgelimitRowChangeEventHandler
        
        Public Event MM_View_AgelimitRowChanging As MM_View_AgelimitRowChangeEventHandler
        
        Public Event MM_View_AgelimitRowDeleted As MM_View_AgelimitRowChangeEventHandler
        
        Public Event MM_View_AgelimitRowDeleting As MM_View_AgelimitRowChangeEventHandler
        
        Public Overloads Sub AddMM_View_AgelimitRow(ByVal row As MM_View_AgelimitRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddMM_View_AgelimitRow(ByVal mcode As String, ByVal mname As String, ByVal curentstatus As String, ByVal AGE As Integer, ByVal dob As Date, ByVal membertype As String, ByVal CONTCELL As String, ByVal CONTEMAIL As String, ByVal bg As String, ByVal btgroup As String) As MM_View_AgelimitRow
            Dim rowMM_View_AgelimitRow As MM_View_AgelimitRow = CType(Me.NewRow,MM_View_AgelimitRow)
            rowMM_View_AgelimitRow.ItemArray = New Object() {mcode, mname, curentstatus, AGE, dob, membertype, CONTCELL, CONTEMAIL, bg, btgroup}
            Me.Rows.Add(rowMM_View_AgelimitRow)
            Return rowMM_View_AgelimitRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As MM_View_AgelimitDataTable = CType(MyBase.Clone,MM_View_AgelimitDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New MM_View_AgelimitDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnmcode = Me.Columns("mcode")
            Me.columnmname = Me.Columns("mname")
            Me.columncurentstatus = Me.Columns("curentstatus")
            Me.columnAGE = Me.Columns("AGE")
            Me.columndob = Me.Columns("dob")
            Me.columnmembertype = Me.Columns("membertype")
            Me.columnCONTCELL = Me.Columns("CONTCELL")
            Me.columnCONTEMAIL = Me.Columns("CONTEMAIL")
            Me.columnbg = Me.Columns("bg")
            Me.columnbtgroup = Me.Columns("btgroup")
        End Sub
        
        Private Sub InitClass()
            Me.columnmcode = New DataColumn("mcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmcode)
            Me.columnmname = New DataColumn("mname", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmname)
            Me.columncurentstatus = New DataColumn("curentstatus", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncurentstatus)
            Me.columnAGE = New DataColumn("AGE", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAGE)
            Me.columndob = New DataColumn("dob", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndob)
            Me.columnmembertype = New DataColumn("membertype", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmembertype)
            Me.columnCONTCELL = New DataColumn("CONTCELL", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCONTCELL)
            Me.columnCONTEMAIL = New DataColumn("CONTEMAIL", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCONTEMAIL)
            Me.columnbg = New DataColumn("bg", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnbg)
            Me.columnbtgroup = New DataColumn("btgroup", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnbtgroup)
        End Sub
        
        Public Function NewMM_View_AgelimitRow() As MM_View_AgelimitRow
            Return CType(Me.NewRow,MM_View_AgelimitRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New MM_View_AgelimitRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(MM_View_AgelimitRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MM_View_AgelimitRowChangedEvent) Is Nothing) Then
                RaiseEvent MM_View_AgelimitRowChanged(Me, New MM_View_AgelimitRowChangeEvent(CType(e.Row,MM_View_AgelimitRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MM_View_AgelimitRowChangingEvent) Is Nothing) Then
                RaiseEvent MM_View_AgelimitRowChanging(Me, New MM_View_AgelimitRowChangeEvent(CType(e.Row,MM_View_AgelimitRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MM_View_AgelimitRowDeletedEvent) Is Nothing) Then
                RaiseEvent MM_View_AgelimitRowDeleted(Me, New MM_View_AgelimitRowChangeEvent(CType(e.Row,MM_View_AgelimitRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MM_View_AgelimitRowDeletingEvent) Is Nothing) Then
                RaiseEvent MM_View_AgelimitRowDeleting(Me, New MM_View_AgelimitRowChangeEvent(CType(e.Row,MM_View_AgelimitRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveMM_View_AgelimitRow(ByVal row As MM_View_AgelimitRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MM_View_AgelimitRow
        Inherits DataRow
        
        Private tableMM_View_Agelimit As MM_View_AgelimitDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableMM_View_Agelimit = CType(Me.Table,MM_View_AgelimitDataTable)
        End Sub
        
        Public Property mcode As String
            Get
                Try 
                    Return CType(Me(Me.tableMM_View_Agelimit.mcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMM_View_Agelimit.mcodeColumn) = value
            End Set
        End Property
        
        Public Property mname As String
            Get
                Try 
                    Return CType(Me(Me.tableMM_View_Agelimit.mnameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMM_View_Agelimit.mnameColumn) = value
            End Set
        End Property
        
        Public Property curentstatus As String
            Get
                Try 
                    Return CType(Me(Me.tableMM_View_Agelimit.curentstatusColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMM_View_Agelimit.curentstatusColumn) = value
            End Set
        End Property
        
        Public Property AGE As Integer
            Get
                Try 
                    Return CType(Me(Me.tableMM_View_Agelimit.AGEColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMM_View_Agelimit.AGEColumn) = value
            End Set
        End Property
        
        Public Property dob As Date
            Get
                Try 
                    Return CType(Me(Me.tableMM_View_Agelimit.dobColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMM_View_Agelimit.dobColumn) = value
            End Set
        End Property
        
        Public Property membertype As String
            Get
                Try 
                    Return CType(Me(Me.tableMM_View_Agelimit.membertypeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMM_View_Agelimit.membertypeColumn) = value
            End Set
        End Property
        
        Public Property CONTCELL As String
            Get
                Try 
                    Return CType(Me(Me.tableMM_View_Agelimit.CONTCELLColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMM_View_Agelimit.CONTCELLColumn) = value
            End Set
        End Property
        
        Public Property CONTEMAIL As String
            Get
                Try 
                    Return CType(Me(Me.tableMM_View_Agelimit.CONTEMAILColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMM_View_Agelimit.CONTEMAILColumn) = value
            End Set
        End Property
        
        Public Property bg As String
            Get
                Try 
                    Return CType(Me(Me.tableMM_View_Agelimit.bgColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMM_View_Agelimit.bgColumn) = value
            End Set
        End Property
        
        Public Property btgroup As String
            Get
                Try 
                    Return CType(Me(Me.tableMM_View_Agelimit.btgroupColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMM_View_Agelimit.btgroupColumn) = value
            End Set
        End Property
        
        Public Function IsmcodeNull() As Boolean
            Return Me.IsNull(Me.tableMM_View_Agelimit.mcodeColumn)
        End Function
        
        Public Sub SetmcodeNull()
            Me(Me.tableMM_View_Agelimit.mcodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsmnameNull() As Boolean
            Return Me.IsNull(Me.tableMM_View_Agelimit.mnameColumn)
        End Function
        
        Public Sub SetmnameNull()
            Me(Me.tableMM_View_Agelimit.mnameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscurentstatusNull() As Boolean
            Return Me.IsNull(Me.tableMM_View_Agelimit.curentstatusColumn)
        End Function
        
        Public Sub SetcurentstatusNull()
            Me(Me.tableMM_View_Agelimit.curentstatusColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAGENull() As Boolean
            Return Me.IsNull(Me.tableMM_View_Agelimit.AGEColumn)
        End Function
        
        Public Sub SetAGENull()
            Me(Me.tableMM_View_Agelimit.AGEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdobNull() As Boolean
            Return Me.IsNull(Me.tableMM_View_Agelimit.dobColumn)
        End Function
        
        Public Sub SetdobNull()
            Me(Me.tableMM_View_Agelimit.dobColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsmembertypeNull() As Boolean
            Return Me.IsNull(Me.tableMM_View_Agelimit.membertypeColumn)
        End Function
        
        Public Sub SetmembertypeNull()
            Me(Me.tableMM_View_Agelimit.membertypeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCONTCELLNull() As Boolean
            Return Me.IsNull(Me.tableMM_View_Agelimit.CONTCELLColumn)
        End Function
        
        Public Sub SetCONTCELLNull()
            Me(Me.tableMM_View_Agelimit.CONTCELLColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCONTEMAILNull() As Boolean
            Return Me.IsNull(Me.tableMM_View_Agelimit.CONTEMAILColumn)
        End Function
        
        Public Sub SetCONTEMAILNull()
            Me(Me.tableMM_View_Agelimit.CONTEMAILColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsbgNull() As Boolean
            Return Me.IsNull(Me.tableMM_View_Agelimit.bgColumn)
        End Function
        
        Public Sub SetbgNull()
            Me(Me.tableMM_View_Agelimit.bgColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsbtgroupNull() As Boolean
            Return Me.IsNull(Me.tableMM_View_Agelimit.btgroupColumn)
        End Function
        
        Public Sub SetbtgroupNull()
            Me(Me.tableMM_View_Agelimit.btgroupColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MM_View_AgelimitRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As MM_View_AgelimitRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As MM_View_AgelimitRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As MM_View_AgelimitRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
