'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2470
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class Reports
    Inherits DataSet
    
    Private tableVW_REMINDER As VW_REMINDERDataTable
    
    Private tablePARTY_BILLTAX As PARTY_BILLTAXDataTable
    
    Private tablePARTY_BILL As PARTY_BILLDataTable
    
    Private tablePARTY_MEMBER As PARTY_MEMBERDataTable
    
    Private tableFINAL_PARTY_BILLTAX As FINAL_PARTY_BILLTAXDataTable
    
    Private tableHALL_CHARGE As HALL_CHARGEDataTable
    
    Private tablePARTY_ADV As PARTY_ADVDataTable
    
    Private tablemembermaster As membermasterDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("VW_REMINDER")) Is Nothing) Then
                Me.Tables.Add(New VW_REMINDERDataTable(ds.Tables("VW_REMINDER")))
            End If
            If (Not (ds.Tables("PARTY_BILLTAX")) Is Nothing) Then
                Me.Tables.Add(New PARTY_BILLTAXDataTable(ds.Tables("PARTY_BILLTAX")))
            End If
            If (Not (ds.Tables("PARTY_BILL")) Is Nothing) Then
                Me.Tables.Add(New PARTY_BILLDataTable(ds.Tables("PARTY_BILL")))
            End If
            If (Not (ds.Tables("PARTY_MEMBER")) Is Nothing) Then
                Me.Tables.Add(New PARTY_MEMBERDataTable(ds.Tables("PARTY_MEMBER")))
            End If
            If (Not (ds.Tables("FINAL_PARTY_BILLTAX")) Is Nothing) Then
                Me.Tables.Add(New FINAL_PARTY_BILLTAXDataTable(ds.Tables("FINAL_PARTY_BILLTAX")))
            End If
            If (Not (ds.Tables("HALL_CHARGE")) Is Nothing) Then
                Me.Tables.Add(New HALL_CHARGEDataTable(ds.Tables("HALL_CHARGE")))
            End If
            If (Not (ds.Tables("PARTY_ADV")) Is Nothing) Then
                Me.Tables.Add(New PARTY_ADVDataTable(ds.Tables("PARTY_ADV")))
            End If
            If (Not (ds.Tables("membermaster")) Is Nothing) Then
                Me.Tables.Add(New membermasterDataTable(ds.Tables("membermaster")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VW_REMINDER As VW_REMINDERDataTable
        Get
            Return Me.tableVW_REMINDER
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PARTY_BILLTAX As PARTY_BILLTAXDataTable
        Get
            Return Me.tablePARTY_BILLTAX
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PARTY_BILL As PARTY_BILLDataTable
        Get
            Return Me.tablePARTY_BILL
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PARTY_MEMBER As PARTY_MEMBERDataTable
        Get
            Return Me.tablePARTY_MEMBER
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FINAL_PARTY_BILLTAX As FINAL_PARTY_BILLTAXDataTable
        Get
            Return Me.tableFINAL_PARTY_BILLTAX
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property HALL_CHARGE As HALL_CHARGEDataTable
        Get
            Return Me.tableHALL_CHARGE
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PARTY_ADV As PARTY_ADVDataTable
        Get
            Return Me.tablePARTY_ADV
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property membermaster As membermasterDataTable
        Get
            Return Me.tablemembermaster
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As Reports = CType(MyBase.Clone,Reports)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("VW_REMINDER")) Is Nothing) Then
            Me.Tables.Add(New VW_REMINDERDataTable(ds.Tables("VW_REMINDER")))
        End If
        If (Not (ds.Tables("PARTY_BILLTAX")) Is Nothing) Then
            Me.Tables.Add(New PARTY_BILLTAXDataTable(ds.Tables("PARTY_BILLTAX")))
        End If
        If (Not (ds.Tables("PARTY_BILL")) Is Nothing) Then
            Me.Tables.Add(New PARTY_BILLDataTable(ds.Tables("PARTY_BILL")))
        End If
        If (Not (ds.Tables("PARTY_MEMBER")) Is Nothing) Then
            Me.Tables.Add(New PARTY_MEMBERDataTable(ds.Tables("PARTY_MEMBER")))
        End If
        If (Not (ds.Tables("FINAL_PARTY_BILLTAX")) Is Nothing) Then
            Me.Tables.Add(New FINAL_PARTY_BILLTAXDataTable(ds.Tables("FINAL_PARTY_BILLTAX")))
        End If
        If (Not (ds.Tables("HALL_CHARGE")) Is Nothing) Then
            Me.Tables.Add(New HALL_CHARGEDataTable(ds.Tables("HALL_CHARGE")))
        End If
        If (Not (ds.Tables("PARTY_ADV")) Is Nothing) Then
            Me.Tables.Add(New PARTY_ADVDataTable(ds.Tables("PARTY_ADV")))
        End If
        If (Not (ds.Tables("membermaster")) Is Nothing) Then
            Me.Tables.Add(New membermasterDataTable(ds.Tables("membermaster")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableVW_REMINDER = CType(Me.Tables("VW_REMINDER"),VW_REMINDERDataTable)
        If (Not (Me.tableVW_REMINDER) Is Nothing) Then
            Me.tableVW_REMINDER.InitVars
        End If
        Me.tablePARTY_BILLTAX = CType(Me.Tables("PARTY_BILLTAX"),PARTY_BILLTAXDataTable)
        If (Not (Me.tablePARTY_BILLTAX) Is Nothing) Then
            Me.tablePARTY_BILLTAX.InitVars
        End If
        Me.tablePARTY_BILL = CType(Me.Tables("PARTY_BILL"),PARTY_BILLDataTable)
        If (Not (Me.tablePARTY_BILL) Is Nothing) Then
            Me.tablePARTY_BILL.InitVars
        End If
        Me.tablePARTY_MEMBER = CType(Me.Tables("PARTY_MEMBER"),PARTY_MEMBERDataTable)
        If (Not (Me.tablePARTY_MEMBER) Is Nothing) Then
            Me.tablePARTY_MEMBER.InitVars
        End If
        Me.tableFINAL_PARTY_BILLTAX = CType(Me.Tables("FINAL_PARTY_BILLTAX"),FINAL_PARTY_BILLTAXDataTable)
        If (Not (Me.tableFINAL_PARTY_BILLTAX) Is Nothing) Then
            Me.tableFINAL_PARTY_BILLTAX.InitVars
        End If
        Me.tableHALL_CHARGE = CType(Me.Tables("HALL_CHARGE"),HALL_CHARGEDataTable)
        If (Not (Me.tableHALL_CHARGE) Is Nothing) Then
            Me.tableHALL_CHARGE.InitVars
        End If
        Me.tablePARTY_ADV = CType(Me.Tables("PARTY_ADV"),PARTY_ADVDataTable)
        If (Not (Me.tablePARTY_ADV) Is Nothing) Then
            Me.tablePARTY_ADV.InitVars
        End If
        Me.tablemembermaster = CType(Me.Tables("membermaster"),membermasterDataTable)
        If (Not (Me.tablemembermaster) Is Nothing) Then
            Me.tablemembermaster.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "Reports"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/Reports.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableVW_REMINDER = New VW_REMINDERDataTable
        Me.Tables.Add(Me.tableVW_REMINDER)
        Me.tablePARTY_BILLTAX = New PARTY_BILLTAXDataTable
        Me.Tables.Add(Me.tablePARTY_BILLTAX)
        Me.tablePARTY_BILL = New PARTY_BILLDataTable
        Me.Tables.Add(Me.tablePARTY_BILL)
        Me.tablePARTY_MEMBER = New PARTY_MEMBERDataTable
        Me.Tables.Add(Me.tablePARTY_MEMBER)
        Me.tableFINAL_PARTY_BILLTAX = New FINAL_PARTY_BILLTAXDataTable
        Me.Tables.Add(Me.tableFINAL_PARTY_BILLTAX)
        Me.tableHALL_CHARGE = New HALL_CHARGEDataTable
        Me.Tables.Add(Me.tableHALL_CHARGE)
        Me.tablePARTY_ADV = New PARTY_ADVDataTable
        Me.Tables.Add(Me.tablePARTY_ADV)
        Me.tablemembermaster = New membermasterDataTable
        Me.Tables.Add(Me.tablemembermaster)
    End Sub
    
    Private Function ShouldSerializeVW_REMINDER() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePARTY_BILLTAX() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePARTY_BILL() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePARTY_MEMBER() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeFINAL_PARTY_BILLTAX() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeHALL_CHARGE() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePARTY_ADV() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializemembermaster() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub VW_REMINDERRowChangeEventHandler(ByVal sender As Object, ByVal e As VW_REMINDERRowChangeEvent)
    
    Public Delegate Sub PARTY_BILLTAXRowChangeEventHandler(ByVal sender As Object, ByVal e As PARTY_BILLTAXRowChangeEvent)
    
    Public Delegate Sub PARTY_BILLRowChangeEventHandler(ByVal sender As Object, ByVal e As PARTY_BILLRowChangeEvent)
    
    Public Delegate Sub PARTY_MEMBERRowChangeEventHandler(ByVal sender As Object, ByVal e As PARTY_MEMBERRowChangeEvent)
    
    Public Delegate Sub FINAL_PARTY_BILLTAXRowChangeEventHandler(ByVal sender As Object, ByVal e As FINAL_PARTY_BILLTAXRowChangeEvent)
    
    Public Delegate Sub HALL_CHARGERowChangeEventHandler(ByVal sender As Object, ByVal e As HALL_CHARGERowChangeEvent)
    
    Public Delegate Sub PARTY_ADVRowChangeEventHandler(ByVal sender As Object, ByVal e As PARTY_ADVRowChangeEvent)
    
    Public Delegate Sub membermasterRowChangeEventHandler(ByVal sender As Object, ByVal e As membermasterRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VW_REMINDERDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnMCODE As DataColumn
        
        Private columnMNAME As DataColumn
        
        Private columnMEMBERTYPECODE As DataColumn
        
        Private columnADD1 As DataColumn
        
        Private columnADD2 As DataColumn
        
        Private columnADD3 As DataColumn
        
        Private columnCITY As DataColumn
        
        Private columnPIN As DataColumn
        
        Private columnCLOSINGBALANCE As DataColumn
        
        Private columnSMONTH As DataColumn
        
        Private columnRMONTH As DataColumn
        
        Private columnPHONE As DataColumn
        
        Private columnTYPE As DataColumn
        
        Friend Sub New()
            MyBase.New("VW_REMINDER")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property MCODEColumn As DataColumn
            Get
                Return Me.columnMCODE
            End Get
        End Property
        
        Friend ReadOnly Property MNAMEColumn As DataColumn
            Get
                Return Me.columnMNAME
            End Get
        End Property
        
        Friend ReadOnly Property MEMBERTYPECODEColumn As DataColumn
            Get
                Return Me.columnMEMBERTYPECODE
            End Get
        End Property
        
        Friend ReadOnly Property ADD1Column As DataColumn
            Get
                Return Me.columnADD1
            End Get
        End Property
        
        Friend ReadOnly Property ADD2Column As DataColumn
            Get
                Return Me.columnADD2
            End Get
        End Property
        
        Friend ReadOnly Property ADD3Column As DataColumn
            Get
                Return Me.columnADD3
            End Get
        End Property
        
        Friend ReadOnly Property CITYColumn As DataColumn
            Get
                Return Me.columnCITY
            End Get
        End Property
        
        Friend ReadOnly Property PINColumn As DataColumn
            Get
                Return Me.columnPIN
            End Get
        End Property
        
        Friend ReadOnly Property CLOSINGBALANCEColumn As DataColumn
            Get
                Return Me.columnCLOSINGBALANCE
            End Get
        End Property
        
        Friend ReadOnly Property SMONTHColumn As DataColumn
            Get
                Return Me.columnSMONTH
            End Get
        End Property
        
        Friend ReadOnly Property RMONTHColumn As DataColumn
            Get
                Return Me.columnRMONTH
            End Get
        End Property
        
        Friend ReadOnly Property PHONEColumn As DataColumn
            Get
                Return Me.columnPHONE
            End Get
        End Property
        
        Friend ReadOnly Property TYPEColumn As DataColumn
            Get
                Return Me.columnTYPE
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VW_REMINDERRow
            Get
                Return CType(Me.Rows(index),VW_REMINDERRow)
            End Get
        End Property
        
        Public Event VW_REMINDERRowChanged As VW_REMINDERRowChangeEventHandler
        
        Public Event VW_REMINDERRowChanging As VW_REMINDERRowChangeEventHandler
        
        Public Event VW_REMINDERRowDeleted As VW_REMINDERRowChangeEventHandler
        
        Public Event VW_REMINDERRowDeleting As VW_REMINDERRowChangeEventHandler
        
        Public Overloads Sub AddVW_REMINDERRow(ByVal row As VW_REMINDERRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVW_REMINDERRow(ByVal MCODE As String, ByVal MNAME As String, ByVal MEMBERTYPECODE As String, ByVal ADD1 As String, ByVal ADD2 As String, ByVal ADD3 As String, ByVal CITY As String, ByVal PIN As String, ByVal CLOSINGBALANCE As Decimal, ByVal SMONTH As Date, ByVal RMONTH As Date, ByVal PHONE As String, ByVal TYPE As String) As VW_REMINDERRow
            Dim rowVW_REMINDERRow As VW_REMINDERRow = CType(Me.NewRow,VW_REMINDERRow)
            rowVW_REMINDERRow.ItemArray = New Object() {MCODE, MNAME, MEMBERTYPECODE, ADD1, ADD2, ADD3, CITY, PIN, CLOSINGBALANCE, SMONTH, RMONTH, PHONE, TYPE}
            Me.Rows.Add(rowVW_REMINDERRow)
            Return rowVW_REMINDERRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VW_REMINDERDataTable = CType(MyBase.Clone,VW_REMINDERDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VW_REMINDERDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnMCODE = Me.Columns("MCODE")
            Me.columnMNAME = Me.Columns("MNAME")
            Me.columnMEMBERTYPECODE = Me.Columns("MEMBERTYPECODE")
            Me.columnADD1 = Me.Columns("ADD1")
            Me.columnADD2 = Me.Columns("ADD2")
            Me.columnADD3 = Me.Columns("ADD3")
            Me.columnCITY = Me.Columns("CITY")
            Me.columnPIN = Me.Columns("PIN")
            Me.columnCLOSINGBALANCE = Me.Columns("CLOSINGBALANCE")
            Me.columnSMONTH = Me.Columns("SMONTH")
            Me.columnRMONTH = Me.Columns("RMONTH")
            Me.columnPHONE = Me.Columns("PHONE")
            Me.columnTYPE = Me.Columns("TYPE")
        End Sub
        
        Private Sub InitClass()
            Me.columnMCODE = New DataColumn("MCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMCODE)
            Me.columnMNAME = New DataColumn("MNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMNAME)
            Me.columnMEMBERTYPECODE = New DataColumn("MEMBERTYPECODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEMBERTYPECODE)
            Me.columnADD1 = New DataColumn("ADD1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnADD1)
            Me.columnADD2 = New DataColumn("ADD2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnADD2)
            Me.columnADD3 = New DataColumn("ADD3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnADD3)
            Me.columnCITY = New DataColumn("CITY", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCITY)
            Me.columnPIN = New DataColumn("PIN", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPIN)
            Me.columnCLOSINGBALANCE = New DataColumn("CLOSINGBALANCE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCLOSINGBALANCE)
            Me.columnSMONTH = New DataColumn("SMONTH", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSMONTH)
            Me.columnRMONTH = New DataColumn("RMONTH", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRMONTH)
            Me.columnPHONE = New DataColumn("PHONE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPHONE)
            Me.columnTYPE = New DataColumn("TYPE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTYPE)
            Me.columnMCODE.ReadOnly = true
            Me.columnMNAME.ReadOnly = true
            Me.columnMEMBERTYPECODE.ReadOnly = true
            Me.columnADD1.ReadOnly = true
            Me.columnADD2.ReadOnly = true
            Me.columnADD3.ReadOnly = true
            Me.columnCITY.ReadOnly = true
            Me.columnPIN.ReadOnly = true
            Me.columnCLOSINGBALANCE.ReadOnly = true
        End Sub
        
        Public Function NewVW_REMINDERRow() As VW_REMINDERRow
            Return CType(Me.NewRow,VW_REMINDERRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VW_REMINDERRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VW_REMINDERRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VW_REMINDERRowChangedEvent) Is Nothing) Then
                RaiseEvent VW_REMINDERRowChanged(Me, New VW_REMINDERRowChangeEvent(CType(e.Row,VW_REMINDERRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VW_REMINDERRowChangingEvent) Is Nothing) Then
                RaiseEvent VW_REMINDERRowChanging(Me, New VW_REMINDERRowChangeEvent(CType(e.Row,VW_REMINDERRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VW_REMINDERRowDeletedEvent) Is Nothing) Then
                RaiseEvent VW_REMINDERRowDeleted(Me, New VW_REMINDERRowChangeEvent(CType(e.Row,VW_REMINDERRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VW_REMINDERRowDeletingEvent) Is Nothing) Then
                RaiseEvent VW_REMINDERRowDeleting(Me, New VW_REMINDERRowChangeEvent(CType(e.Row,VW_REMINDERRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVW_REMINDERRow(ByVal row As VW_REMINDERRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VW_REMINDERRow
        Inherits DataRow
        
        Private tableVW_REMINDER As VW_REMINDERDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVW_REMINDER = CType(Me.Table,VW_REMINDERDataTable)
        End Sub
        
        Public Property MCODE As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_REMINDER.MCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_REMINDER.MCODEColumn) = value
            End Set
        End Property
        
        Public Property MNAME As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_REMINDER.MNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_REMINDER.MNAMEColumn) = value
            End Set
        End Property
        
        Public Property MEMBERTYPECODE As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_REMINDER.MEMBERTYPECODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_REMINDER.MEMBERTYPECODEColumn) = value
            End Set
        End Property
        
        Public Property ADD1 As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_REMINDER.ADD1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_REMINDER.ADD1Column) = value
            End Set
        End Property
        
        Public Property ADD2 As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_REMINDER.ADD2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_REMINDER.ADD2Column) = value
            End Set
        End Property
        
        Public Property ADD3 As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_REMINDER.ADD3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_REMINDER.ADD3Column) = value
            End Set
        End Property
        
        Public Property CITY As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_REMINDER.CITYColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_REMINDER.CITYColumn) = value
            End Set
        End Property
        
        Public Property PIN As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_REMINDER.PINColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_REMINDER.PINColumn) = value
            End Set
        End Property
        
        Public Property CLOSINGBALANCE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVW_REMINDER.CLOSINGBALANCEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_REMINDER.CLOSINGBALANCEColumn) = value
            End Set
        End Property
        
        Public Property SMONTH As Date
            Get
                Try 
                    Return CType(Me(Me.tableVW_REMINDER.SMONTHColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_REMINDER.SMONTHColumn) = value
            End Set
        End Property
        
        Public Property RMONTH As Date
            Get
                Try 
                    Return CType(Me(Me.tableVW_REMINDER.RMONTHColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_REMINDER.RMONTHColumn) = value
            End Set
        End Property
        
        Public Property PHONE As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_REMINDER.PHONEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_REMINDER.PHONEColumn) = value
            End Set
        End Property
        
        Public Property TYPE As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_REMINDER.TYPEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_REMINDER.TYPEColumn) = value
            End Set
        End Property
        
        Public Function IsMCODENull() As Boolean
            Return Me.IsNull(Me.tableVW_REMINDER.MCODEColumn)
        End Function
        
        Public Sub SetMCODENull()
            Me(Me.tableVW_REMINDER.MCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMNAMENull() As Boolean
            Return Me.IsNull(Me.tableVW_REMINDER.MNAMEColumn)
        End Function
        
        Public Sub SetMNAMENull()
            Me(Me.tableVW_REMINDER.MNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMEMBERTYPECODENull() As Boolean
            Return Me.IsNull(Me.tableVW_REMINDER.MEMBERTYPECODEColumn)
        End Function
        
        Public Sub SetMEMBERTYPECODENull()
            Me(Me.tableVW_REMINDER.MEMBERTYPECODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsADD1Null() As Boolean
            Return Me.IsNull(Me.tableVW_REMINDER.ADD1Column)
        End Function
        
        Public Sub SetADD1Null()
            Me(Me.tableVW_REMINDER.ADD1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsADD2Null() As Boolean
            Return Me.IsNull(Me.tableVW_REMINDER.ADD2Column)
        End Function
        
        Public Sub SetADD2Null()
            Me(Me.tableVW_REMINDER.ADD2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsADD3Null() As Boolean
            Return Me.IsNull(Me.tableVW_REMINDER.ADD3Column)
        End Function
        
        Public Sub SetADD3Null()
            Me(Me.tableVW_REMINDER.ADD3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsCITYNull() As Boolean
            Return Me.IsNull(Me.tableVW_REMINDER.CITYColumn)
        End Function
        
        Public Sub SetCITYNull()
            Me(Me.tableVW_REMINDER.CITYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPINNull() As Boolean
            Return Me.IsNull(Me.tableVW_REMINDER.PINColumn)
        End Function
        
        Public Sub SetPINNull()
            Me(Me.tableVW_REMINDER.PINColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCLOSINGBALANCENull() As Boolean
            Return Me.IsNull(Me.tableVW_REMINDER.CLOSINGBALANCEColumn)
        End Function
        
        Public Sub SetCLOSINGBALANCENull()
            Me(Me.tableVW_REMINDER.CLOSINGBALANCEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSMONTHNull() As Boolean
            Return Me.IsNull(Me.tableVW_REMINDER.SMONTHColumn)
        End Function
        
        Public Sub SetSMONTHNull()
            Me(Me.tableVW_REMINDER.SMONTHColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRMONTHNull() As Boolean
            Return Me.IsNull(Me.tableVW_REMINDER.RMONTHColumn)
        End Function
        
        Public Sub SetRMONTHNull()
            Me(Me.tableVW_REMINDER.RMONTHColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPHONENull() As Boolean
            Return Me.IsNull(Me.tableVW_REMINDER.PHONEColumn)
        End Function
        
        Public Sub SetPHONENull()
            Me(Me.tableVW_REMINDER.PHONEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTYPENull() As Boolean
            Return Me.IsNull(Me.tableVW_REMINDER.TYPEColumn)
        End Function
        
        Public Sub SetTYPENull()
            Me(Me.tableVW_REMINDER.TYPEColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VW_REMINDERRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VW_REMINDERRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VW_REMINDERRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VW_REMINDERRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_BILLTAXDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnKOTDATE As DataColumn
        
        Private columnBILLDETAILS As DataColumn
        
        Private columnMCODE As DataColumn
        
        Private columnTAXCODE As DataColumn
        
        Private columnTAXPERC As DataColumn
        
        Private columnTAXAMOUNT As DataColumn
        
        Private columnTAXDESC As DataColumn
        
        Friend Sub New()
            MyBase.New("PARTY_BILLTAX")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property KOTDATEColumn As DataColumn
            Get
                Return Me.columnKOTDATE
            End Get
        End Property
        
        Friend ReadOnly Property BILLDETAILSColumn As DataColumn
            Get
                Return Me.columnBILLDETAILS
            End Get
        End Property
        
        Friend ReadOnly Property MCODEColumn As DataColumn
            Get
                Return Me.columnMCODE
            End Get
        End Property
        
        Friend ReadOnly Property TAXCODEColumn As DataColumn
            Get
                Return Me.columnTAXCODE
            End Get
        End Property
        
        Friend ReadOnly Property TAXPERCColumn As DataColumn
            Get
                Return Me.columnTAXPERC
            End Get
        End Property
        
        Friend ReadOnly Property TAXAMOUNTColumn As DataColumn
            Get
                Return Me.columnTAXAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property TAXDESCColumn As DataColumn
            Get
                Return Me.columnTAXDESC
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PARTY_BILLTAXRow
            Get
                Return CType(Me.Rows(index),PARTY_BILLTAXRow)
            End Get
        End Property
        
        Public Event PARTY_BILLTAXRowChanged As PARTY_BILLTAXRowChangeEventHandler
        
        Public Event PARTY_BILLTAXRowChanging As PARTY_BILLTAXRowChangeEventHandler
        
        Public Event PARTY_BILLTAXRowDeleted As PARTY_BILLTAXRowChangeEventHandler
        
        Public Event PARTY_BILLTAXRowDeleting As PARTY_BILLTAXRowChangeEventHandler
        
        Public Overloads Sub AddPARTY_BILLTAXRow(ByVal row As PARTY_BILLTAXRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPARTY_BILLTAXRow(ByVal KOTDATE As Date, ByVal BILLDETAILS As String, ByVal MCODE As String, ByVal TAXCODE As String, ByVal TAXPERC As Decimal, ByVal TAXAMOUNT As Decimal, ByVal TAXDESC As String) As PARTY_BILLTAXRow
            Dim rowPARTY_BILLTAXRow As PARTY_BILLTAXRow = CType(Me.NewRow,PARTY_BILLTAXRow)
            rowPARTY_BILLTAXRow.ItemArray = New Object() {KOTDATE, BILLDETAILS, MCODE, TAXCODE, TAXPERC, TAXAMOUNT, TAXDESC}
            Me.Rows.Add(rowPARTY_BILLTAXRow)
            Return rowPARTY_BILLTAXRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PARTY_BILLTAXDataTable = CType(MyBase.Clone,PARTY_BILLTAXDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PARTY_BILLTAXDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnKOTDATE = Me.Columns("KOTDATE")
            Me.columnBILLDETAILS = Me.Columns("BILLDETAILS")
            Me.columnMCODE = Me.Columns("MCODE")
            Me.columnTAXCODE = Me.Columns("TAXCODE")
            Me.columnTAXPERC = Me.Columns("TAXPERC")
            Me.columnTAXAMOUNT = Me.Columns("TAXAMOUNT")
            Me.columnTAXDESC = Me.Columns("TAXDESC")
        End Sub
        
        Private Sub InitClass()
            Me.columnKOTDATE = New DataColumn("KOTDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnKOTDATE)
            Me.columnBILLDETAILS = New DataColumn("BILLDETAILS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBILLDETAILS)
            Me.columnMCODE = New DataColumn("MCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMCODE)
            Me.columnTAXCODE = New DataColumn("TAXCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTAXCODE)
            Me.columnTAXPERC = New DataColumn("TAXPERC", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTAXPERC)
            Me.columnTAXAMOUNT = New DataColumn("TAXAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTAXAMOUNT)
            Me.columnTAXDESC = New DataColumn("TAXDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTAXDESC)
            Me.columnKOTDATE.AllowDBNull = false
        End Sub
        
        Public Function NewPARTY_BILLTAXRow() As PARTY_BILLTAXRow
            Return CType(Me.NewRow,PARTY_BILLTAXRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PARTY_BILLTAXRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PARTY_BILLTAXRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PARTY_BILLTAXRowChangedEvent) Is Nothing) Then
                RaiseEvent PARTY_BILLTAXRowChanged(Me, New PARTY_BILLTAXRowChangeEvent(CType(e.Row,PARTY_BILLTAXRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PARTY_BILLTAXRowChangingEvent) Is Nothing) Then
                RaiseEvent PARTY_BILLTAXRowChanging(Me, New PARTY_BILLTAXRowChangeEvent(CType(e.Row,PARTY_BILLTAXRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PARTY_BILLTAXRowDeletedEvent) Is Nothing) Then
                RaiseEvent PARTY_BILLTAXRowDeleted(Me, New PARTY_BILLTAXRowChangeEvent(CType(e.Row,PARTY_BILLTAXRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PARTY_BILLTAXRowDeletingEvent) Is Nothing) Then
                RaiseEvent PARTY_BILLTAXRowDeleting(Me, New PARTY_BILLTAXRowChangeEvent(CType(e.Row,PARTY_BILLTAXRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePARTY_BILLTAXRow(ByVal row As PARTY_BILLTAXRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_BILLTAXRow
        Inherits DataRow
        
        Private tablePARTY_BILLTAX As PARTY_BILLTAXDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePARTY_BILLTAX = CType(Me.Table,PARTY_BILLTAXDataTable)
        End Sub
        
        Public Property KOTDATE As Date
            Get
                Return CType(Me(Me.tablePARTY_BILLTAX.KOTDATEColumn),Date)
            End Get
            Set
                Me(Me.tablePARTY_BILLTAX.KOTDATEColumn) = value
            End Set
        End Property
        
        Public Property BILLDETAILS As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BILLTAX.BILLDETAILSColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BILLTAX.BILLDETAILSColumn) = value
            End Set
        End Property
        
        Public Property MCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BILLTAX.MCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BILLTAX.MCODEColumn) = value
            End Set
        End Property
        
        Public Property TAXCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BILLTAX.TAXCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BILLTAX.TAXCODEColumn) = value
            End Set
        End Property
        
        Public Property TAXPERC As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BILLTAX.TAXPERCColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BILLTAX.TAXPERCColumn) = value
            End Set
        End Property
        
        Public Property TAXAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BILLTAX.TAXAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BILLTAX.TAXAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property TAXDESC As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BILLTAX.TAXDESCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BILLTAX.TAXDESCColumn) = value
            End Set
        End Property
        
        Public Function IsBILLDETAILSNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BILLTAX.BILLDETAILSColumn)
        End Function
        
        Public Sub SetBILLDETAILSNull()
            Me(Me.tablePARTY_BILLTAX.BILLDETAILSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMCODENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BILLTAX.MCODEColumn)
        End Function
        
        Public Sub SetMCODENull()
            Me(Me.tablePARTY_BILLTAX.MCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTAXCODENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BILLTAX.TAXCODEColumn)
        End Function
        
        Public Sub SetTAXCODENull()
            Me(Me.tablePARTY_BILLTAX.TAXCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTAXPERCNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BILLTAX.TAXPERCColumn)
        End Function
        
        Public Sub SetTAXPERCNull()
            Me(Me.tablePARTY_BILLTAX.TAXPERCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTAXAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BILLTAX.TAXAMOUNTColumn)
        End Function
        
        Public Sub SetTAXAMOUNTNull()
            Me(Me.tablePARTY_BILLTAX.TAXAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTAXDESCNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BILLTAX.TAXDESCColumn)
        End Function
        
        Public Sub SetTAXDESCNull()
            Me(Me.tablePARTY_BILLTAX.TAXDESCColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_BILLTAXRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PARTY_BILLTAXRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PARTY_BILLTAXRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PARTY_BILLTAXRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_BILLDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnKOTNO As DataColumn
        
        Private columnKOTDETAILS As DataColumn
        
        Private columnKOTDATE As DataColumn
        
        Private columnBILLDETAILS As DataColumn
        
        Private columnITEMCODE As DataColumn
        
        Private columnITEMDESC As DataColumn
        
        Private columnPOSCODE As DataColumn
        
        Private columnPOSDESC As DataColumn
        
        Private columnQTY As DataColumn
        
        Private columnRATE As DataColumn
        
        Private columnAMOUNT As DataColumn
        
        Private columnTAXPERC As DataColumn
        
        Private columnTAXCODE As DataColumn
        
        Private columnTAXAMOUNT As DataColumn
        
        Private columnMCODE As DataColumn
        
        Private columnMNAME As DataColumn
        
        Private columnCONTADD1 As DataColumn
        
        Private columnCONTADD2 As DataColumn
        
        Private columnCONTADD3 As DataColumn
        
        Private columnCONTCITY As DataColumn
        
        Private columnCONTPIN As DataColumn
        
        Friend Sub New()
            MyBase.New("PARTY_BILL")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property KOTNOColumn As DataColumn
            Get
                Return Me.columnKOTNO
            End Get
        End Property
        
        Friend ReadOnly Property KOTDETAILSColumn As DataColumn
            Get
                Return Me.columnKOTDETAILS
            End Get
        End Property
        
        Friend ReadOnly Property KOTDATEColumn As DataColumn
            Get
                Return Me.columnKOTDATE
            End Get
        End Property
        
        Friend ReadOnly Property BILLDETAILSColumn As DataColumn
            Get
                Return Me.columnBILLDETAILS
            End Get
        End Property
        
        Friend ReadOnly Property ITEMCODEColumn As DataColumn
            Get
                Return Me.columnITEMCODE
            End Get
        End Property
        
        Friend ReadOnly Property ITEMDESCColumn As DataColumn
            Get
                Return Me.columnITEMDESC
            End Get
        End Property
        
        Friend ReadOnly Property POSCODEColumn As DataColumn
            Get
                Return Me.columnPOSCODE
            End Get
        End Property
        
        Friend ReadOnly Property POSDESCColumn As DataColumn
            Get
                Return Me.columnPOSDESC
            End Get
        End Property
        
        Friend ReadOnly Property QTYColumn As DataColumn
            Get
                Return Me.columnQTY
            End Get
        End Property
        
        Friend ReadOnly Property RATEColumn As DataColumn
            Get
                Return Me.columnRATE
            End Get
        End Property
        
        Friend ReadOnly Property AMOUNTColumn As DataColumn
            Get
                Return Me.columnAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property TAXPERCColumn As DataColumn
            Get
                Return Me.columnTAXPERC
            End Get
        End Property
        
        Friend ReadOnly Property TAXCODEColumn As DataColumn
            Get
                Return Me.columnTAXCODE
            End Get
        End Property
        
        Friend ReadOnly Property TAXAMOUNTColumn As DataColumn
            Get
                Return Me.columnTAXAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property MCODEColumn As DataColumn
            Get
                Return Me.columnMCODE
            End Get
        End Property
        
        Friend ReadOnly Property MNAMEColumn As DataColumn
            Get
                Return Me.columnMNAME
            End Get
        End Property
        
        Friend ReadOnly Property CONTADD1Column As DataColumn
            Get
                Return Me.columnCONTADD1
            End Get
        End Property
        
        Friend ReadOnly Property CONTADD2Column As DataColumn
            Get
                Return Me.columnCONTADD2
            End Get
        End Property
        
        Friend ReadOnly Property CONTADD3Column As DataColumn
            Get
                Return Me.columnCONTADD3
            End Get
        End Property
        
        Friend ReadOnly Property CONTCITYColumn As DataColumn
            Get
                Return Me.columnCONTCITY
            End Get
        End Property
        
        Friend ReadOnly Property CONTPINColumn As DataColumn
            Get
                Return Me.columnCONTPIN
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PARTY_BILLRow
            Get
                Return CType(Me.Rows(index),PARTY_BILLRow)
            End Get
        End Property
        
        Public Event PARTY_BILLRowChanged As PARTY_BILLRowChangeEventHandler
        
        Public Event PARTY_BILLRowChanging As PARTY_BILLRowChangeEventHandler
        
        Public Event PARTY_BILLRowDeleted As PARTY_BILLRowChangeEventHandler
        
        Public Event PARTY_BILLRowDeleting As PARTY_BILLRowChangeEventHandler
        
        Public Overloads Sub AddPARTY_BILLRow(ByVal row As PARTY_BILLRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPARTY_BILLRow( _
                    ByVal KOTNO As String,  _
                    ByVal KOTDETAILS As String,  _
                    ByVal KOTDATE As Date,  _
                    ByVal BILLDETAILS As String,  _
                    ByVal ITEMCODE As String,  _
                    ByVal ITEMDESC As String,  _
                    ByVal POSCODE As String,  _
                    ByVal POSDESC As String,  _
                    ByVal QTY As Decimal,  _
                    ByVal RATE As Decimal,  _
                    ByVal AMOUNT As Decimal,  _
                    ByVal TAXPERC As Decimal,  _
                    ByVal TAXCODE As String,  _
                    ByVal TAXAMOUNT As Decimal,  _
                    ByVal MCODE As String,  _
                    ByVal MNAME As String,  _
                    ByVal CONTADD1 As String,  _
                    ByVal CONTADD2 As String,  _
                    ByVal CONTADD3 As String,  _
                    ByVal CONTCITY As String,  _
                    ByVal CONTPIN As String) As PARTY_BILLRow
            Dim rowPARTY_BILLRow As PARTY_BILLRow = CType(Me.NewRow,PARTY_BILLRow)
            rowPARTY_BILLRow.ItemArray = New Object() {KOTNO, KOTDETAILS, KOTDATE, BILLDETAILS, ITEMCODE, ITEMDESC, POSCODE, POSDESC, QTY, RATE, AMOUNT, TAXPERC, TAXCODE, TAXAMOUNT, MCODE, MNAME, CONTADD1, CONTADD2, CONTADD3, CONTCITY, CONTPIN}
            Me.Rows.Add(rowPARTY_BILLRow)
            Return rowPARTY_BILLRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PARTY_BILLDataTable = CType(MyBase.Clone,PARTY_BILLDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PARTY_BILLDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnKOTNO = Me.Columns("KOTNO")
            Me.columnKOTDETAILS = Me.Columns("KOTDETAILS")
            Me.columnKOTDATE = Me.Columns("KOTDATE")
            Me.columnBILLDETAILS = Me.Columns("BILLDETAILS")
            Me.columnITEMCODE = Me.Columns("ITEMCODE")
            Me.columnITEMDESC = Me.Columns("ITEMDESC")
            Me.columnPOSCODE = Me.Columns("POSCODE")
            Me.columnPOSDESC = Me.Columns("POSDESC")
            Me.columnQTY = Me.Columns("QTY")
            Me.columnRATE = Me.Columns("RATE")
            Me.columnAMOUNT = Me.Columns("AMOUNT")
            Me.columnTAXPERC = Me.Columns("TAXPERC")
            Me.columnTAXCODE = Me.Columns("TAXCODE")
            Me.columnTAXAMOUNT = Me.Columns("TAXAMOUNT")
            Me.columnMCODE = Me.Columns("MCODE")
            Me.columnMNAME = Me.Columns("MNAME")
            Me.columnCONTADD1 = Me.Columns("CONTADD1")
            Me.columnCONTADD2 = Me.Columns("CONTADD2")
            Me.columnCONTADD3 = Me.Columns("CONTADD3")
            Me.columnCONTCITY = Me.Columns("CONTCITY")
            Me.columnCONTPIN = Me.Columns("CONTPIN")
        End Sub
        
        Private Sub InitClass()
            Me.columnKOTNO = New DataColumn("KOTNO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnKOTNO)
            Me.columnKOTDETAILS = New DataColumn("KOTDETAILS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnKOTDETAILS)
            Me.columnKOTDATE = New DataColumn("KOTDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnKOTDATE)
            Me.columnBILLDETAILS = New DataColumn("BILLDETAILS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBILLDETAILS)
            Me.columnITEMCODE = New DataColumn("ITEMCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnITEMCODE)
            Me.columnITEMDESC = New DataColumn("ITEMDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnITEMDESC)
            Me.columnPOSCODE = New DataColumn("POSCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPOSCODE)
            Me.columnPOSDESC = New DataColumn("POSDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPOSDESC)
            Me.columnQTY = New DataColumn("QTY", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQTY)
            Me.columnRATE = New DataColumn("RATE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRATE)
            Me.columnAMOUNT = New DataColumn("AMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAMOUNT)
            Me.columnTAXPERC = New DataColumn("TAXPERC", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTAXPERC)
            Me.columnTAXCODE = New DataColumn("TAXCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTAXCODE)
            Me.columnTAXAMOUNT = New DataColumn("TAXAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTAXAMOUNT)
            Me.columnMCODE = New DataColumn("MCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMCODE)
            Me.columnMNAME = New DataColumn("MNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMNAME)
            Me.columnCONTADD1 = New DataColumn("CONTADD1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCONTADD1)
            Me.columnCONTADD2 = New DataColumn("CONTADD2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCONTADD2)
            Me.columnCONTADD3 = New DataColumn("CONTADD3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCONTADD3)
            Me.columnCONTCITY = New DataColumn("CONTCITY", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCONTCITY)
            Me.columnCONTPIN = New DataColumn("CONTPIN", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCONTPIN)
            Me.columnKOTNO.ReadOnly = true
            Me.columnKOTDETAILS.ReadOnly = true
            Me.columnKOTDATE.ReadOnly = true
            Me.columnBILLDETAILS.ReadOnly = true
            Me.columnITEMCODE.ReadOnly = true
            Me.columnITEMDESC.ReadOnly = true
            Me.columnPOSCODE.ReadOnly = true
            Me.columnPOSDESC.ReadOnly = true
            Me.columnQTY.ReadOnly = true
            Me.columnRATE.ReadOnly = true
            Me.columnAMOUNT.ReadOnly = true
            Me.columnTAXPERC.ReadOnly = true
            Me.columnTAXCODE.ReadOnly = true
            Me.columnTAXAMOUNT.ReadOnly = true
            Me.columnMCODE.ReadOnly = true
            Me.columnMNAME.ReadOnly = true
            Me.columnCONTADD1.ReadOnly = true
            Me.columnCONTADD2.ReadOnly = true
            Me.columnCONTADD3.ReadOnly = true
            Me.columnCONTCITY.ReadOnly = true
            Me.columnCONTPIN.ReadOnly = true
        End Sub
        
        Public Function NewPARTY_BILLRow() As PARTY_BILLRow
            Return CType(Me.NewRow,PARTY_BILLRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PARTY_BILLRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PARTY_BILLRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PARTY_BILLRowChangedEvent) Is Nothing) Then
                RaiseEvent PARTY_BILLRowChanged(Me, New PARTY_BILLRowChangeEvent(CType(e.Row,PARTY_BILLRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PARTY_BILLRowChangingEvent) Is Nothing) Then
                RaiseEvent PARTY_BILLRowChanging(Me, New PARTY_BILLRowChangeEvent(CType(e.Row,PARTY_BILLRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PARTY_BILLRowDeletedEvent) Is Nothing) Then
                RaiseEvent PARTY_BILLRowDeleted(Me, New PARTY_BILLRowChangeEvent(CType(e.Row,PARTY_BILLRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PARTY_BILLRowDeletingEvent) Is Nothing) Then
                RaiseEvent PARTY_BILLRowDeleting(Me, New PARTY_BILLRowChangeEvent(CType(e.Row,PARTY_BILLRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePARTY_BILLRow(ByVal row As PARTY_BILLRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_BILLRow
        Inherits DataRow
        
        Private tablePARTY_BILL As PARTY_BILLDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePARTY_BILL = CType(Me.Table,PARTY_BILLDataTable)
        End Sub
        
        Public Property KOTNO As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BILL.KOTNOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BILL.KOTNOColumn) = value
            End Set
        End Property
        
        Public Property KOTDETAILS As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BILL.KOTDETAILSColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BILL.KOTDETAILSColumn) = value
            End Set
        End Property
        
        Public Property KOTDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BILL.KOTDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BILL.KOTDATEColumn) = value
            End Set
        End Property
        
        Public Property BILLDETAILS As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BILL.BILLDETAILSColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BILL.BILLDETAILSColumn) = value
            End Set
        End Property
        
        Public Property ITEMCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BILL.ITEMCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BILL.ITEMCODEColumn) = value
            End Set
        End Property
        
        Public Property ITEMDESC As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BILL.ITEMDESCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BILL.ITEMDESCColumn) = value
            End Set
        End Property
        
        Public Property POSCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BILL.POSCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BILL.POSCODEColumn) = value
            End Set
        End Property
        
        Public Property POSDESC As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BILL.POSDESCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BILL.POSDESCColumn) = value
            End Set
        End Property
        
        Public Property QTY As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BILL.QTYColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BILL.QTYColumn) = value
            End Set
        End Property
        
        Public Property RATE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BILL.RATEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BILL.RATEColumn) = value
            End Set
        End Property
        
        Public Property AMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BILL.AMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BILL.AMOUNTColumn) = value
            End Set
        End Property
        
        Public Property TAXPERC As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BILL.TAXPERCColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BILL.TAXPERCColumn) = value
            End Set
        End Property
        
        Public Property TAXCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BILL.TAXCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BILL.TAXCODEColumn) = value
            End Set
        End Property
        
        Public Property TAXAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BILL.TAXAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BILL.TAXAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property MCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BILL.MCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BILL.MCODEColumn) = value
            End Set
        End Property
        
        Public Property MNAME As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BILL.MNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BILL.MNAMEColumn) = value
            End Set
        End Property
        
        Public Property CONTADD1 As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BILL.CONTADD1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BILL.CONTADD1Column) = value
            End Set
        End Property
        
        Public Property CONTADD2 As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BILL.CONTADD2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BILL.CONTADD2Column) = value
            End Set
        End Property
        
        Public Property CONTADD3 As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BILL.CONTADD3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BILL.CONTADD3Column) = value
            End Set
        End Property
        
        Public Property CONTCITY As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BILL.CONTCITYColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BILL.CONTCITYColumn) = value
            End Set
        End Property
        
        Public Property CONTPIN As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BILL.CONTPINColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BILL.CONTPINColumn) = value
            End Set
        End Property
        
        Public Function IsKOTNONull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BILL.KOTNOColumn)
        End Function
        
        Public Sub SetKOTNONull()
            Me(Me.tablePARTY_BILL.KOTNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsKOTDETAILSNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BILL.KOTDETAILSColumn)
        End Function
        
        Public Sub SetKOTDETAILSNull()
            Me(Me.tablePARTY_BILL.KOTDETAILSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsKOTDATENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BILL.KOTDATEColumn)
        End Function
        
        Public Sub SetKOTDATENull()
            Me(Me.tablePARTY_BILL.KOTDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBILLDETAILSNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BILL.BILLDETAILSColumn)
        End Function
        
        Public Sub SetBILLDETAILSNull()
            Me(Me.tablePARTY_BILL.BILLDETAILSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsITEMCODENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BILL.ITEMCODEColumn)
        End Function
        
        Public Sub SetITEMCODENull()
            Me(Me.tablePARTY_BILL.ITEMCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsITEMDESCNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BILL.ITEMDESCColumn)
        End Function
        
        Public Sub SetITEMDESCNull()
            Me(Me.tablePARTY_BILL.ITEMDESCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPOSCODENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BILL.POSCODEColumn)
        End Function
        
        Public Sub SetPOSCODENull()
            Me(Me.tablePARTY_BILL.POSCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPOSDESCNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BILL.POSDESCColumn)
        End Function
        
        Public Sub SetPOSDESCNull()
            Me(Me.tablePARTY_BILL.POSDESCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsQTYNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BILL.QTYColumn)
        End Function
        
        Public Sub SetQTYNull()
            Me(Me.tablePARTY_BILL.QTYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRATENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BILL.RATEColumn)
        End Function
        
        Public Sub SetRATENull()
            Me(Me.tablePARTY_BILL.RATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BILL.AMOUNTColumn)
        End Function
        
        Public Sub SetAMOUNTNull()
            Me(Me.tablePARTY_BILL.AMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTAXPERCNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BILL.TAXPERCColumn)
        End Function
        
        Public Sub SetTAXPERCNull()
            Me(Me.tablePARTY_BILL.TAXPERCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTAXCODENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BILL.TAXCODEColumn)
        End Function
        
        Public Sub SetTAXCODENull()
            Me(Me.tablePARTY_BILL.TAXCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTAXAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BILL.TAXAMOUNTColumn)
        End Function
        
        Public Sub SetTAXAMOUNTNull()
            Me(Me.tablePARTY_BILL.TAXAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMCODENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BILL.MCODEColumn)
        End Function
        
        Public Sub SetMCODENull()
            Me(Me.tablePARTY_BILL.MCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMNAMENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BILL.MNAMEColumn)
        End Function
        
        Public Sub SetMNAMENull()
            Me(Me.tablePARTY_BILL.MNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCONTADD1Null() As Boolean
            Return Me.IsNull(Me.tablePARTY_BILL.CONTADD1Column)
        End Function
        
        Public Sub SetCONTADD1Null()
            Me(Me.tablePARTY_BILL.CONTADD1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsCONTADD2Null() As Boolean
            Return Me.IsNull(Me.tablePARTY_BILL.CONTADD2Column)
        End Function
        
        Public Sub SetCONTADD2Null()
            Me(Me.tablePARTY_BILL.CONTADD2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsCONTADD3Null() As Boolean
            Return Me.IsNull(Me.tablePARTY_BILL.CONTADD3Column)
        End Function
        
        Public Sub SetCONTADD3Null()
            Me(Me.tablePARTY_BILL.CONTADD3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsCONTCITYNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BILL.CONTCITYColumn)
        End Function
        
        Public Sub SetCONTCITYNull()
            Me(Me.tablePARTY_BILL.CONTCITYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCONTPINNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BILL.CONTPINColumn)
        End Function
        
        Public Sub SetCONTPINNull()
            Me(Me.tablePARTY_BILL.CONTPINColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_BILLRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PARTY_BILLRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PARTY_BILLRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PARTY_BILLRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_MEMBERDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnBILLDETAILS As DataColumn
        
        Private columnKOTDATE As DataColumn
        
        Private columnMCODE As DataColumn
        
        Private columnMNAME As DataColumn
        
        Private columnCONTADD1 As DataColumn
        
        Private columnCONTADD2 As DataColumn
        
        Private columnCONTADD3 As DataColumn
        
        Private columnCONTCITY As DataColumn
        
        Private columnCONTPIN As DataColumn
        
        Friend Sub New()
            MyBase.New("PARTY_MEMBER")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property BILLDETAILSColumn As DataColumn
            Get
                Return Me.columnBILLDETAILS
            End Get
        End Property
        
        Friend ReadOnly Property KOTDATEColumn As DataColumn
            Get
                Return Me.columnKOTDATE
            End Get
        End Property
        
        Friend ReadOnly Property MCODEColumn As DataColumn
            Get
                Return Me.columnMCODE
            End Get
        End Property
        
        Friend ReadOnly Property MNAMEColumn As DataColumn
            Get
                Return Me.columnMNAME
            End Get
        End Property
        
        Friend ReadOnly Property CONTADD1Column As DataColumn
            Get
                Return Me.columnCONTADD1
            End Get
        End Property
        
        Friend ReadOnly Property CONTADD2Column As DataColumn
            Get
                Return Me.columnCONTADD2
            End Get
        End Property
        
        Friend ReadOnly Property CONTADD3Column As DataColumn
            Get
                Return Me.columnCONTADD3
            End Get
        End Property
        
        Friend ReadOnly Property CONTCITYColumn As DataColumn
            Get
                Return Me.columnCONTCITY
            End Get
        End Property
        
        Friend ReadOnly Property CONTPINColumn As DataColumn
            Get
                Return Me.columnCONTPIN
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PARTY_MEMBERRow
            Get
                Return CType(Me.Rows(index),PARTY_MEMBERRow)
            End Get
        End Property
        
        Public Event PARTY_MEMBERRowChanged As PARTY_MEMBERRowChangeEventHandler
        
        Public Event PARTY_MEMBERRowChanging As PARTY_MEMBERRowChangeEventHandler
        
        Public Event PARTY_MEMBERRowDeleted As PARTY_MEMBERRowChangeEventHandler
        
        Public Event PARTY_MEMBERRowDeleting As PARTY_MEMBERRowChangeEventHandler
        
        Public Overloads Sub AddPARTY_MEMBERRow(ByVal row As PARTY_MEMBERRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPARTY_MEMBERRow(ByVal BILLDETAILS As String, ByVal KOTDATE As Date, ByVal MCODE As String, ByVal MNAME As String, ByVal CONTADD1 As String, ByVal CONTADD2 As String, ByVal CONTADD3 As String, ByVal CONTCITY As String, ByVal CONTPIN As String) As PARTY_MEMBERRow
            Dim rowPARTY_MEMBERRow As PARTY_MEMBERRow = CType(Me.NewRow,PARTY_MEMBERRow)
            rowPARTY_MEMBERRow.ItemArray = New Object() {BILLDETAILS, KOTDATE, MCODE, MNAME, CONTADD1, CONTADD2, CONTADD3, CONTCITY, CONTPIN}
            Me.Rows.Add(rowPARTY_MEMBERRow)
            Return rowPARTY_MEMBERRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PARTY_MEMBERDataTable = CType(MyBase.Clone,PARTY_MEMBERDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PARTY_MEMBERDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnBILLDETAILS = Me.Columns("BILLDETAILS")
            Me.columnKOTDATE = Me.Columns("KOTDATE")
            Me.columnMCODE = Me.Columns("MCODE")
            Me.columnMNAME = Me.Columns("MNAME")
            Me.columnCONTADD1 = Me.Columns("CONTADD1")
            Me.columnCONTADD2 = Me.Columns("CONTADD2")
            Me.columnCONTADD3 = Me.Columns("CONTADD3")
            Me.columnCONTCITY = Me.Columns("CONTCITY")
            Me.columnCONTPIN = Me.Columns("CONTPIN")
        End Sub
        
        Private Sub InitClass()
            Me.columnBILLDETAILS = New DataColumn("BILLDETAILS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBILLDETAILS)
            Me.columnKOTDATE = New DataColumn("KOTDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnKOTDATE)
            Me.columnMCODE = New DataColumn("MCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMCODE)
            Me.columnMNAME = New DataColumn("MNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMNAME)
            Me.columnCONTADD1 = New DataColumn("CONTADD1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCONTADD1)
            Me.columnCONTADD2 = New DataColumn("CONTADD2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCONTADD2)
            Me.columnCONTADD3 = New DataColumn("CONTADD3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCONTADD3)
            Me.columnCONTCITY = New DataColumn("CONTCITY", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCONTCITY)
            Me.columnCONTPIN = New DataColumn("CONTPIN", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCONTPIN)
        End Sub
        
        Public Function NewPARTY_MEMBERRow() As PARTY_MEMBERRow
            Return CType(Me.NewRow,PARTY_MEMBERRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PARTY_MEMBERRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PARTY_MEMBERRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PARTY_MEMBERRowChangedEvent) Is Nothing) Then
                RaiseEvent PARTY_MEMBERRowChanged(Me, New PARTY_MEMBERRowChangeEvent(CType(e.Row,PARTY_MEMBERRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PARTY_MEMBERRowChangingEvent) Is Nothing) Then
                RaiseEvent PARTY_MEMBERRowChanging(Me, New PARTY_MEMBERRowChangeEvent(CType(e.Row,PARTY_MEMBERRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PARTY_MEMBERRowDeletedEvent) Is Nothing) Then
                RaiseEvent PARTY_MEMBERRowDeleted(Me, New PARTY_MEMBERRowChangeEvent(CType(e.Row,PARTY_MEMBERRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PARTY_MEMBERRowDeletingEvent) Is Nothing) Then
                RaiseEvent PARTY_MEMBERRowDeleting(Me, New PARTY_MEMBERRowChangeEvent(CType(e.Row,PARTY_MEMBERRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePARTY_MEMBERRow(ByVal row As PARTY_MEMBERRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_MEMBERRow
        Inherits DataRow
        
        Private tablePARTY_MEMBER As PARTY_MEMBERDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePARTY_MEMBER = CType(Me.Table,PARTY_MEMBERDataTable)
        End Sub
        
        Public Property BILLDETAILS As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_MEMBER.BILLDETAILSColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_MEMBER.BILLDETAILSColumn) = value
            End Set
        End Property
        
        Public Property KOTDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_MEMBER.KOTDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_MEMBER.KOTDATEColumn) = value
            End Set
        End Property
        
        Public Property MCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_MEMBER.MCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_MEMBER.MCODEColumn) = value
            End Set
        End Property
        
        Public Property MNAME As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_MEMBER.MNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_MEMBER.MNAMEColumn) = value
            End Set
        End Property
        
        Public Property CONTADD1 As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_MEMBER.CONTADD1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_MEMBER.CONTADD1Column) = value
            End Set
        End Property
        
        Public Property CONTADD2 As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_MEMBER.CONTADD2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_MEMBER.CONTADD2Column) = value
            End Set
        End Property
        
        Public Property CONTADD3 As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_MEMBER.CONTADD3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_MEMBER.CONTADD3Column) = value
            End Set
        End Property
        
        Public Property CONTCITY As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_MEMBER.CONTCITYColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_MEMBER.CONTCITYColumn) = value
            End Set
        End Property
        
        Public Property CONTPIN As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_MEMBER.CONTPINColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_MEMBER.CONTPINColumn) = value
            End Set
        End Property
        
        Public Function IsBILLDETAILSNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_MEMBER.BILLDETAILSColumn)
        End Function
        
        Public Sub SetBILLDETAILSNull()
            Me(Me.tablePARTY_MEMBER.BILLDETAILSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsKOTDATENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_MEMBER.KOTDATEColumn)
        End Function
        
        Public Sub SetKOTDATENull()
            Me(Me.tablePARTY_MEMBER.KOTDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMCODENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_MEMBER.MCODEColumn)
        End Function
        
        Public Sub SetMCODENull()
            Me(Me.tablePARTY_MEMBER.MCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMNAMENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_MEMBER.MNAMEColumn)
        End Function
        
        Public Sub SetMNAMENull()
            Me(Me.tablePARTY_MEMBER.MNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCONTADD1Null() As Boolean
            Return Me.IsNull(Me.tablePARTY_MEMBER.CONTADD1Column)
        End Function
        
        Public Sub SetCONTADD1Null()
            Me(Me.tablePARTY_MEMBER.CONTADD1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsCONTADD2Null() As Boolean
            Return Me.IsNull(Me.tablePARTY_MEMBER.CONTADD2Column)
        End Function
        
        Public Sub SetCONTADD2Null()
            Me(Me.tablePARTY_MEMBER.CONTADD2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsCONTADD3Null() As Boolean
            Return Me.IsNull(Me.tablePARTY_MEMBER.CONTADD3Column)
        End Function
        
        Public Sub SetCONTADD3Null()
            Me(Me.tablePARTY_MEMBER.CONTADD3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsCONTCITYNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_MEMBER.CONTCITYColumn)
        End Function
        
        Public Sub SetCONTCITYNull()
            Me(Me.tablePARTY_MEMBER.CONTCITYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCONTPINNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_MEMBER.CONTPINColumn)
        End Function
        
        Public Sub SetCONTPINNull()
            Me(Me.tablePARTY_MEMBER.CONTPINColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_MEMBERRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PARTY_MEMBERRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PARTY_MEMBERRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PARTY_MEMBERRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class FINAL_PARTY_BILLTAXDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnKOTDATE As DataColumn
        
        Private columnBILLDETAILS As DataColumn
        
        Private columnMCODE As DataColumn
        
        Private columnSERVICETAX As DataColumn
        
        Private columnSALESTAX As DataColumn
        
        Friend Sub New()
            MyBase.New("FINAL_PARTY_BILLTAX")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property KOTDATEColumn As DataColumn
            Get
                Return Me.columnKOTDATE
            End Get
        End Property
        
        Friend ReadOnly Property BILLDETAILSColumn As DataColumn
            Get
                Return Me.columnBILLDETAILS
            End Get
        End Property
        
        Friend ReadOnly Property MCODEColumn As DataColumn
            Get
                Return Me.columnMCODE
            End Get
        End Property
        
        Friend ReadOnly Property SERVICETAXColumn As DataColumn
            Get
                Return Me.columnSERVICETAX
            End Get
        End Property
        
        Friend ReadOnly Property SALESTAXColumn As DataColumn
            Get
                Return Me.columnSALESTAX
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As FINAL_PARTY_BILLTAXRow
            Get
                Return CType(Me.Rows(index),FINAL_PARTY_BILLTAXRow)
            End Get
        End Property
        
        Public Event FINAL_PARTY_BILLTAXRowChanged As FINAL_PARTY_BILLTAXRowChangeEventHandler
        
        Public Event FINAL_PARTY_BILLTAXRowChanging As FINAL_PARTY_BILLTAXRowChangeEventHandler
        
        Public Event FINAL_PARTY_BILLTAXRowDeleted As FINAL_PARTY_BILLTAXRowChangeEventHandler
        
        Public Event FINAL_PARTY_BILLTAXRowDeleting As FINAL_PARTY_BILLTAXRowChangeEventHandler
        
        Public Overloads Sub AddFINAL_PARTY_BILLTAXRow(ByVal row As FINAL_PARTY_BILLTAXRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddFINAL_PARTY_BILLTAXRow(ByVal KOTDATE As Date, ByVal BILLDETAILS As String, ByVal MCODE As String, ByVal SERVICETAX As Decimal, ByVal SALESTAX As Decimal) As FINAL_PARTY_BILLTAXRow
            Dim rowFINAL_PARTY_BILLTAXRow As FINAL_PARTY_BILLTAXRow = CType(Me.NewRow,FINAL_PARTY_BILLTAXRow)
            rowFINAL_PARTY_BILLTAXRow.ItemArray = New Object() {KOTDATE, BILLDETAILS, MCODE, SERVICETAX, SALESTAX}
            Me.Rows.Add(rowFINAL_PARTY_BILLTAXRow)
            Return rowFINAL_PARTY_BILLTAXRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As FINAL_PARTY_BILLTAXDataTable = CType(MyBase.Clone,FINAL_PARTY_BILLTAXDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New FINAL_PARTY_BILLTAXDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnKOTDATE = Me.Columns("KOTDATE")
            Me.columnBILLDETAILS = Me.Columns("BILLDETAILS")
            Me.columnMCODE = Me.Columns("MCODE")
            Me.columnSERVICETAX = Me.Columns("SERVICETAX")
            Me.columnSALESTAX = Me.Columns("SALESTAX")
        End Sub
        
        Private Sub InitClass()
            Me.columnKOTDATE = New DataColumn("KOTDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnKOTDATE)
            Me.columnBILLDETAILS = New DataColumn("BILLDETAILS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBILLDETAILS)
            Me.columnMCODE = New DataColumn("MCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMCODE)
            Me.columnSERVICETAX = New DataColumn("SERVICETAX", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSERVICETAX)
            Me.columnSALESTAX = New DataColumn("SALESTAX", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSALESTAX)
        End Sub
        
        Public Function NewFINAL_PARTY_BILLTAXRow() As FINAL_PARTY_BILLTAXRow
            Return CType(Me.NewRow,FINAL_PARTY_BILLTAXRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New FINAL_PARTY_BILLTAXRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(FINAL_PARTY_BILLTAXRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FINAL_PARTY_BILLTAXRowChangedEvent) Is Nothing) Then
                RaiseEvent FINAL_PARTY_BILLTAXRowChanged(Me, New FINAL_PARTY_BILLTAXRowChangeEvent(CType(e.Row,FINAL_PARTY_BILLTAXRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FINAL_PARTY_BILLTAXRowChangingEvent) Is Nothing) Then
                RaiseEvent FINAL_PARTY_BILLTAXRowChanging(Me, New FINAL_PARTY_BILLTAXRowChangeEvent(CType(e.Row,FINAL_PARTY_BILLTAXRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FINAL_PARTY_BILLTAXRowDeletedEvent) Is Nothing) Then
                RaiseEvent FINAL_PARTY_BILLTAXRowDeleted(Me, New FINAL_PARTY_BILLTAXRowChangeEvent(CType(e.Row,FINAL_PARTY_BILLTAXRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FINAL_PARTY_BILLTAXRowDeletingEvent) Is Nothing) Then
                RaiseEvent FINAL_PARTY_BILLTAXRowDeleting(Me, New FINAL_PARTY_BILLTAXRowChangeEvent(CType(e.Row,FINAL_PARTY_BILLTAXRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveFINAL_PARTY_BILLTAXRow(ByVal row As FINAL_PARTY_BILLTAXRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class FINAL_PARTY_BILLTAXRow
        Inherits DataRow
        
        Private tableFINAL_PARTY_BILLTAX As FINAL_PARTY_BILLTAXDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableFINAL_PARTY_BILLTAX = CType(Me.Table,FINAL_PARTY_BILLTAXDataTable)
        End Sub
        
        Public Property KOTDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tableFINAL_PARTY_BILLTAX.KOTDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFINAL_PARTY_BILLTAX.KOTDATEColumn) = value
            End Set
        End Property
        
        Public Property BILLDETAILS As String
            Get
                Try 
                    Return CType(Me(Me.tableFINAL_PARTY_BILLTAX.BILLDETAILSColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFINAL_PARTY_BILLTAX.BILLDETAILSColumn) = value
            End Set
        End Property
        
        Public Property MCODE As String
            Get
                Try 
                    Return CType(Me(Me.tableFINAL_PARTY_BILLTAX.MCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFINAL_PARTY_BILLTAX.MCODEColumn) = value
            End Set
        End Property
        
        Public Property SERVICETAX As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableFINAL_PARTY_BILLTAX.SERVICETAXColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFINAL_PARTY_BILLTAX.SERVICETAXColumn) = value
            End Set
        End Property
        
        Public Property SALESTAX As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableFINAL_PARTY_BILLTAX.SALESTAXColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFINAL_PARTY_BILLTAX.SALESTAXColumn) = value
            End Set
        End Property
        
        Public Function IsKOTDATENull() As Boolean
            Return Me.IsNull(Me.tableFINAL_PARTY_BILLTAX.KOTDATEColumn)
        End Function
        
        Public Sub SetKOTDATENull()
            Me(Me.tableFINAL_PARTY_BILLTAX.KOTDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBILLDETAILSNull() As Boolean
            Return Me.IsNull(Me.tableFINAL_PARTY_BILLTAX.BILLDETAILSColumn)
        End Function
        
        Public Sub SetBILLDETAILSNull()
            Me(Me.tableFINAL_PARTY_BILLTAX.BILLDETAILSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMCODENull() As Boolean
            Return Me.IsNull(Me.tableFINAL_PARTY_BILLTAX.MCODEColumn)
        End Function
        
        Public Sub SetMCODENull()
            Me(Me.tableFINAL_PARTY_BILLTAX.MCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSERVICETAXNull() As Boolean
            Return Me.IsNull(Me.tableFINAL_PARTY_BILLTAX.SERVICETAXColumn)
        End Function
        
        Public Sub SetSERVICETAXNull()
            Me(Me.tableFINAL_PARTY_BILLTAX.SERVICETAXColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSALESTAXNull() As Boolean
            Return Me.IsNull(Me.tableFINAL_PARTY_BILLTAX.SALESTAXColumn)
        End Function
        
        Public Sub SetSALESTAXNull()
            Me(Me.tableFINAL_PARTY_BILLTAX.SALESTAXColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class FINAL_PARTY_BILLTAXRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As FINAL_PARTY_BILLTAXRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As FINAL_PARTY_BILLTAXRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As FINAL_PARTY_BILLTAXRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class HALL_CHARGEDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnKOTDATE As DataColumn
        
        Private columnBILLDETAILS As DataColumn
        
        Private columnMCODE As DataColumn
        
        Private columnITEMCODE As DataColumn
        
        Private columnITEMDESC As DataColumn
        
        Private columnAMOUNT As DataColumn
        
        Friend Sub New()
            MyBase.New("HALL_CHARGE")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property KOTDATEColumn As DataColumn
            Get
                Return Me.columnKOTDATE
            End Get
        End Property
        
        Friend ReadOnly Property BILLDETAILSColumn As DataColumn
            Get
                Return Me.columnBILLDETAILS
            End Get
        End Property
        
        Friend ReadOnly Property MCODEColumn As DataColumn
            Get
                Return Me.columnMCODE
            End Get
        End Property
        
        Friend ReadOnly Property ITEMCODEColumn As DataColumn
            Get
                Return Me.columnITEMCODE
            End Get
        End Property
        
        Friend ReadOnly Property ITEMDESCColumn As DataColumn
            Get
                Return Me.columnITEMDESC
            End Get
        End Property
        
        Friend ReadOnly Property AMOUNTColumn As DataColumn
            Get
                Return Me.columnAMOUNT
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As HALL_CHARGERow
            Get
                Return CType(Me.Rows(index),HALL_CHARGERow)
            End Get
        End Property
        
        Public Event HALL_CHARGERowChanged As HALL_CHARGERowChangeEventHandler
        
        Public Event HALL_CHARGERowChanging As HALL_CHARGERowChangeEventHandler
        
        Public Event HALL_CHARGERowDeleted As HALL_CHARGERowChangeEventHandler
        
        Public Event HALL_CHARGERowDeleting As HALL_CHARGERowChangeEventHandler
        
        Public Overloads Sub AddHALL_CHARGERow(ByVal row As HALL_CHARGERow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddHALL_CHARGERow(ByVal KOTDATE As Date, ByVal BILLDETAILS As String, ByVal MCODE As String, ByVal ITEMCODE As String, ByVal ITEMDESC As String, ByVal AMOUNT As Decimal) As HALL_CHARGERow
            Dim rowHALL_CHARGERow As HALL_CHARGERow = CType(Me.NewRow,HALL_CHARGERow)
            rowHALL_CHARGERow.ItemArray = New Object() {KOTDATE, BILLDETAILS, MCODE, ITEMCODE, ITEMDESC, AMOUNT}
            Me.Rows.Add(rowHALL_CHARGERow)
            Return rowHALL_CHARGERow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As HALL_CHARGEDataTable = CType(MyBase.Clone,HALL_CHARGEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New HALL_CHARGEDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnKOTDATE = Me.Columns("KOTDATE")
            Me.columnBILLDETAILS = Me.Columns("BILLDETAILS")
            Me.columnMCODE = Me.Columns("MCODE")
            Me.columnITEMCODE = Me.Columns("ITEMCODE")
            Me.columnITEMDESC = Me.Columns("ITEMDESC")
            Me.columnAMOUNT = Me.Columns("AMOUNT")
        End Sub
        
        Private Sub InitClass()
            Me.columnKOTDATE = New DataColumn("KOTDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnKOTDATE)
            Me.columnBILLDETAILS = New DataColumn("BILLDETAILS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBILLDETAILS)
            Me.columnMCODE = New DataColumn("MCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMCODE)
            Me.columnITEMCODE = New DataColumn("ITEMCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnITEMCODE)
            Me.columnITEMDESC = New DataColumn("ITEMDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnITEMDESC)
            Me.columnAMOUNT = New DataColumn("AMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAMOUNT)
            Me.columnKOTDATE.ReadOnly = true
            Me.columnBILLDETAILS.ReadOnly = true
            Me.columnMCODE.ReadOnly = true
            Me.columnITEMCODE.ReadOnly = true
            Me.columnITEMDESC.ReadOnly = true
            Me.columnAMOUNT.ReadOnly = true
        End Sub
        
        Public Function NewHALL_CHARGERow() As HALL_CHARGERow
            Return CType(Me.NewRow,HALL_CHARGERow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New HALL_CHARGERow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(HALL_CHARGERow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.HALL_CHARGERowChangedEvent) Is Nothing) Then
                RaiseEvent HALL_CHARGERowChanged(Me, New HALL_CHARGERowChangeEvent(CType(e.Row,HALL_CHARGERow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.HALL_CHARGERowChangingEvent) Is Nothing) Then
                RaiseEvent HALL_CHARGERowChanging(Me, New HALL_CHARGERowChangeEvent(CType(e.Row,HALL_CHARGERow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.HALL_CHARGERowDeletedEvent) Is Nothing) Then
                RaiseEvent HALL_CHARGERowDeleted(Me, New HALL_CHARGERowChangeEvent(CType(e.Row,HALL_CHARGERow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.HALL_CHARGERowDeletingEvent) Is Nothing) Then
                RaiseEvent HALL_CHARGERowDeleting(Me, New HALL_CHARGERowChangeEvent(CType(e.Row,HALL_CHARGERow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveHALL_CHARGERow(ByVal row As HALL_CHARGERow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class HALL_CHARGERow
        Inherits DataRow
        
        Private tableHALL_CHARGE As HALL_CHARGEDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableHALL_CHARGE = CType(Me.Table,HALL_CHARGEDataTable)
        End Sub
        
        Public Property KOTDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tableHALL_CHARGE.KOTDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableHALL_CHARGE.KOTDATEColumn) = value
            End Set
        End Property
        
        Public Property BILLDETAILS As String
            Get
                Try 
                    Return CType(Me(Me.tableHALL_CHARGE.BILLDETAILSColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableHALL_CHARGE.BILLDETAILSColumn) = value
            End Set
        End Property
        
        Public Property MCODE As String
            Get
                Try 
                    Return CType(Me(Me.tableHALL_CHARGE.MCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableHALL_CHARGE.MCODEColumn) = value
            End Set
        End Property
        
        Public Property ITEMCODE As String
            Get
                Try 
                    Return CType(Me(Me.tableHALL_CHARGE.ITEMCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableHALL_CHARGE.ITEMCODEColumn) = value
            End Set
        End Property
        
        Public Property ITEMDESC As String
            Get
                Try 
                    Return CType(Me(Me.tableHALL_CHARGE.ITEMDESCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableHALL_CHARGE.ITEMDESCColumn) = value
            End Set
        End Property
        
        Public Property AMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableHALL_CHARGE.AMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableHALL_CHARGE.AMOUNTColumn) = value
            End Set
        End Property
        
        Public Function IsKOTDATENull() As Boolean
            Return Me.IsNull(Me.tableHALL_CHARGE.KOTDATEColumn)
        End Function
        
        Public Sub SetKOTDATENull()
            Me(Me.tableHALL_CHARGE.KOTDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBILLDETAILSNull() As Boolean
            Return Me.IsNull(Me.tableHALL_CHARGE.BILLDETAILSColumn)
        End Function
        
        Public Sub SetBILLDETAILSNull()
            Me(Me.tableHALL_CHARGE.BILLDETAILSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMCODENull() As Boolean
            Return Me.IsNull(Me.tableHALL_CHARGE.MCODEColumn)
        End Function
        
        Public Sub SetMCODENull()
            Me(Me.tableHALL_CHARGE.MCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsITEMCODENull() As Boolean
            Return Me.IsNull(Me.tableHALL_CHARGE.ITEMCODEColumn)
        End Function
        
        Public Sub SetITEMCODENull()
            Me(Me.tableHALL_CHARGE.ITEMCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsITEMDESCNull() As Boolean
            Return Me.IsNull(Me.tableHALL_CHARGE.ITEMDESCColumn)
        End Function
        
        Public Sub SetITEMDESCNull()
            Me(Me.tableHALL_CHARGE.ITEMDESCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableHALL_CHARGE.AMOUNTColumn)
        End Function
        
        Public Sub SetAMOUNTNull()
            Me(Me.tableHALL_CHARGE.AMOUNTColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class HALL_CHARGERowChangeEvent
        Inherits EventArgs
        
        Private eventRow As HALL_CHARGERow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As HALL_CHARGERow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As HALL_CHARGERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_ADVDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnMCODE As DataColumn
        
        Private columnVOUCHERNO As DataColumn
        
        Private columnAMOUNT As DataColumn
        
        Friend Sub New()
            MyBase.New("PARTY_ADV")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property MCODEColumn As DataColumn
            Get
                Return Me.columnMCODE
            End Get
        End Property
        
        Friend ReadOnly Property VOUCHERNOColumn As DataColumn
            Get
                Return Me.columnVOUCHERNO
            End Get
        End Property
        
        Friend ReadOnly Property AMOUNTColumn As DataColumn
            Get
                Return Me.columnAMOUNT
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PARTY_ADVRow
            Get
                Return CType(Me.Rows(index),PARTY_ADVRow)
            End Get
        End Property
        
        Public Event PARTY_ADVRowChanged As PARTY_ADVRowChangeEventHandler
        
        Public Event PARTY_ADVRowChanging As PARTY_ADVRowChangeEventHandler
        
        Public Event PARTY_ADVRowDeleted As PARTY_ADVRowChangeEventHandler
        
        Public Event PARTY_ADVRowDeleting As PARTY_ADVRowChangeEventHandler
        
        Public Overloads Sub AddPARTY_ADVRow(ByVal row As PARTY_ADVRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPARTY_ADVRow(ByVal MCODE As String, ByVal VOUCHERNO As String, ByVal AMOUNT As Integer) As PARTY_ADVRow
            Dim rowPARTY_ADVRow As PARTY_ADVRow = CType(Me.NewRow,PARTY_ADVRow)
            rowPARTY_ADVRow.ItemArray = New Object() {MCODE, VOUCHERNO, AMOUNT}
            Me.Rows.Add(rowPARTY_ADVRow)
            Return rowPARTY_ADVRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PARTY_ADVDataTable = CType(MyBase.Clone,PARTY_ADVDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PARTY_ADVDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnMCODE = Me.Columns("MCODE")
            Me.columnVOUCHERNO = Me.Columns("VOUCHERNO")
            Me.columnAMOUNT = Me.Columns("AMOUNT")
        End Sub
        
        Private Sub InitClass()
            Me.columnMCODE = New DataColumn("MCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMCODE)
            Me.columnVOUCHERNO = New DataColumn("VOUCHERNO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVOUCHERNO)
            Me.columnAMOUNT = New DataColumn("AMOUNT", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAMOUNT)
        End Sub
        
        Public Function NewPARTY_ADVRow() As PARTY_ADVRow
            Return CType(Me.NewRow,PARTY_ADVRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PARTY_ADVRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PARTY_ADVRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PARTY_ADVRowChangedEvent) Is Nothing) Then
                RaiseEvent PARTY_ADVRowChanged(Me, New PARTY_ADVRowChangeEvent(CType(e.Row,PARTY_ADVRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PARTY_ADVRowChangingEvent) Is Nothing) Then
                RaiseEvent PARTY_ADVRowChanging(Me, New PARTY_ADVRowChangeEvent(CType(e.Row,PARTY_ADVRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PARTY_ADVRowDeletedEvent) Is Nothing) Then
                RaiseEvent PARTY_ADVRowDeleted(Me, New PARTY_ADVRowChangeEvent(CType(e.Row,PARTY_ADVRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PARTY_ADVRowDeletingEvent) Is Nothing) Then
                RaiseEvent PARTY_ADVRowDeleting(Me, New PARTY_ADVRowChangeEvent(CType(e.Row,PARTY_ADVRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePARTY_ADVRow(ByVal row As PARTY_ADVRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_ADVRow
        Inherits DataRow
        
        Private tablePARTY_ADV As PARTY_ADVDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePARTY_ADV = CType(Me.Table,PARTY_ADVDataTable)
        End Sub
        
        Public Property MCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADV.MCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADV.MCODEColumn) = value
            End Set
        End Property
        
        Public Property VOUCHERNO As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADV.VOUCHERNOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADV.VOUCHERNOColumn) = value
            End Set
        End Property
        
        Public Property AMOUNT As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADV.AMOUNTColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADV.AMOUNTColumn) = value
            End Set
        End Property
        
        Public Function IsMCODENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADV.MCODEColumn)
        End Function
        
        Public Sub SetMCODENull()
            Me(Me.tablePARTY_ADV.MCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVOUCHERNONull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADV.VOUCHERNOColumn)
        End Function
        
        Public Sub SetVOUCHERNONull()
            Me(Me.tablePARTY_ADV.VOUCHERNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADV.AMOUNTColumn)
        End Function
        
        Public Sub SetAMOUNTNull()
            Me(Me.tablePARTY_ADV.AMOUNTColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_ADVRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PARTY_ADVRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PARTY_ADVRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PARTY_ADVRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class membermasterDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSequenceNo As DataColumn
        
        Private columnTAG As DataColumn
        
        Private columnMEMBERTYPECODE As DataColumn
        
        Private columnCOMPANY As DataColumn
        
        Private columnSUBCD As DataColumn
        
        Private columnMCODE As DataColumn
        
        Private columnMNAME As DataColumn
        
        Private columnMID As DataColumn
        
        Private columnDOB As DataColumn
        
        Private columnDOJ As DataColumn
        
        Private columnSEX As DataColumn
        
        Private columnMARITALSTATUS As DataColumn
        
        Private columnSPOUSE As DataColumn
        
        Private columnBG As DataColumn
        
        Private columnOCCUPATION As DataColumn
        
        Private columnBANKER As DataColumn
        
        Private columnBANKACNO As DataColumn
        
        Private columnHOBBIES As DataColumn
        
        Private columnOTHERINFO As DataColumn
        
        Private columnRESIDENT As DataColumn
        
        Private columnEQUALIFICATION As DataColumn
        
        Private columnPQUALIFICATION As DataColumn
        
        Private columnPROPOSER As DataColumn
        
        Private columnPROPOSERNAME As DataColumn
        
        Private columnSECONDER As DataColumn
        
        Private columnSECONDERNAME As DataColumn
        
        Private columnPAcopyst As DataColumn
        
        Private columnPADD1 As DataColumn
        
        Private columnPADD2 As DataColumn
        
        Private columnPADD3 As DataColumn
        
        Private columnPCITY As DataColumn
        
        Private columnPSTATE As DataColumn
        
        Private columnPCOUNTRY As DataColumn
        
        Private columnPPIN As DataColumn
        
        Private columnPPHONE1 As DataColumn
        
        Private columnPPHONE2 As DataColumn
        
        Private columnPCELL As DataColumn
        
        Private columnPEMAIL As DataColumn
        
        Private columnRAcopyst As DataColumn
        
        Private columnCADD1 As DataColumn
        
        Private columnCADD2 As DataColumn
        
        Private columnCADD3 As DataColumn
        
        Private columnCCITY As DataColumn
        
        Private columnCSTATE As DataColumn
        
        Private columnCCOUNTRY As DataColumn
        
        Private columnCPIN As DataColumn
        
        Private columnCPHONE1 As DataColumn
        
        Private columnCPHONE2 As DataColumn
        
        Private columnCCELL As DataColumn
        
        Private columnCEMAIL As DataColumn
        
        Private columnCONTADD1 As DataColumn
        
        Private columnCONTADD2 As DataColumn
        
        Private columnCONTADD3 As DataColumn
        
        Private columnCONTCITY As DataColumn
        
        Private columnCONTSTATE As DataColumn
        
        Private columnCONTCOUNTRY As DataColumn
        
        Private columnCONTPIN As DataColumn
        
        Private columnCONTPHONE1 As DataColumn
        
        Private columnCONTPHONE2 As DataColumn
        
        Private columnCONTCELL As DataColumn
        
        Private columnCONTEMAIL As DataColumn
        
        Private columnEMPTYPE As DataColumn
        
        Private columnBUSINESSNAME As DataColumn
        
        Private columnBAcopyst As DataColumn
        
        Private columnOADD1 As DataColumn
        
        Private columnOADD2 As DataColumn
        
        Private columnOADD3 As DataColumn
        
        Private columnOCITY As DataColumn
        
        Private columnOSTATE As DataColumn
        
        Private columnOCOUNTRY As DataColumn
        
        Private columnOPIN As DataColumn
        
        Private columnOPHONE1 As DataColumn
        
        Private columnOPHONE2 As DataColumn
        
        Private columnOCELL As DataColumn
        
        Private columnOEMAIL As DataColumn
        
        Private columnDOEPROFESSION As DataColumn
        
        Private columnBUSINESSNATURE As DataColumn
        
        Private columnPOSITIONHELD As DataColumn
        
        Private columnSERVICENAME As DataColumn
        
        Private columnSERVICEYEAR As DataColumn
        
        Private columnPANO As DataColumn
        
        Private columnBBANKER As DataColumn
        
        Private columnCCNO As DataColumn
        
        Private columnANNUALINCOME As DataColumn
        
        Private columnUPDUSERID As DataColumn
        
        Private columnUPDDATETIME As DataColumn
        
        Private columnTERMINATION As DataColumn
        
        Private columnTRN_CON_DATE As DataColumn
        
        Private columnCON_MCODE As DataColumn
        
        Private columnPFAX As DataColumn
        
        Private columnCFAX As DataColumn
        
        Private columnCONTFAX As DataColumn
        
        Private columnREASON As DataColumn
        
        Private columnPHOTO As DataColumn
        
        Private columnCREDITLIMIT As DataColumn
        
        Private columnLIMITAMOUNT As DataColumn
        
        Private columnWEBSITE As DataColumn
        
        Private columnImagefile As DataColumn
        
        Private columnsizefield As DataColumn
        
        Private columnVdate As DataColumn
        
        Private columnVyear As DataColumn
        
        Private columnValiddate As DataColumn
        
        Private columnTempTermination As DataColumn
        
        Private columnTempTermDate As DataColumn
        
        Private columnTempTermReason As DataColumn
        
        Private columnMemberid As DataColumn
        
        Private columnEndingDate As DataColumn
        
        Private columnTotalYears As DataColumn
        
        Private columnCardNo As DataColumn
        
        Private columnCardExpDate As DataColumn
        
        Private columnValidity As DataColumn
        
        Private columnPeriod As DataColumn
        
        Private columnCreditcardno As DataColumn
        
        Private columnCreditExpDt As DataColumn
        
        Private columnType As DataColumn
        
        Private columnSTATUSDATEFROM As DataColumn
        
        Private columnSTATUSDATETO As DataColumn
        
        Private columnCurentStatus As DataColumn
        
        Private columnFirstName As DataColumn
        
        Private columnMiddleName As DataColumn
        
        Private columnSurname As DataColumn
        
        Private column_Alias As DataColumn
        
        Private columnPrefix As DataColumn
        
        Private columnBillType As DataColumn
        
        Private columnNationality As DataColumn
        
        Private columnNationalityAtbirth As DataColumn
        
        Private columnBillbasis As DataColumn
        
        Private columnBillHead As DataColumn
        
        Private columnGDRLocker As DataColumn
        
        Private columnLDRLocker As DataColumn
        
        Private columnHPLocker As DataColumn
        
        Private columnMembershipTo As DataColumn
        
        Private columnsalut As DataColumn
        
        Private columnEntranceFee As DataColumn
        
        Private columnDevelopmentFee As DataColumn
        
        Private columnCriditNumber As DataColumn
        
        Private columnSecurityDeposit As DataColumn
        
        Private columnPlaceOfBirth As DataColumn
        
        Private columnCountryOfBirth As DataColumn
        
        Private columnLastArrivalInCal As DataColumn
        
        Private columnPeriodOfStay_year As DataColumn
        
        Private columnPeriodOfStay_Month As DataColumn
        
        Private columnPreviouslyProposed As DataColumn
        
        Private columnNoOfTimesProposed As DataColumn
        
        Private columnDateOfProposal As DataColumn
        
        Private columnResultOfProposal As DataColumn
        
        Private columnElected As DataColumn
        
        Private columnFatherName As DataColumn
        
        Private columnDOBfather As DataColumn
        
        Private columnWifeDOB As DataColumn
        
        Private columnMaidenNameWife As DataColumn
        
        Private columnNationalityWife As DataColumn
        
        Private columnWifesFatherName As DataColumn
        
        Private columnWifeFatherDOB As DataColumn
        
        Private columnApplNo As DataColumn
        
        Private columnApplDate As DataColumn
        
        Private columnCorporatest As DataColumn
        
        Private columnCorporateCode As DataColumn
        
        Private columnCompName As DataColumn
        
        Private columnDesignation As DataColumn
        
        Private columnProfessionInfo As DataColumn
        
        Private columnBuisnessInfo As DataColumn
        
        Private columnProducts As DataColumn
        
        Private columnAgentsDealers As DataColumn
        
        Private columnESTDdate As DataColumn
        
        Private columnNoOfEmp As DataColumn
        
        Private columnTurnover As DataColumn
        
        Private columnClient As DataColumn
        
        Private columnAppliedBut As DataColumn
        
        Private columnPositionInChamber As DataColumn
        
        Private columnQulificationstatus As DataColumn
        
        Private columnQualification1 As DataColumn
        
        Private columnDetails1 As DataColumn
        
        Private columnYearOfPassing1 As DataColumn
        
        Private columnInstitute1 As DataColumn
        
        Private columnDivision1 As DataColumn
        
        Private columnQualification2 As DataColumn
        
        Private columnDetails2 As DataColumn
        
        Private columnYearOfPassing2 As DataColumn
        
        Private columnInstitute2 As DataColumn
        
        Private columnDivision2 As DataColumn
        
        Private columnQualification3 As DataColumn
        
        Private columnDetails3 As DataColumn
        
        Private columnYearOfPassing3 As DataColumn
        
        Private columnInstitute3 As DataColumn
        
        Private columnDivision3 As DataColumn
        
        Private columnsportstatus As DataColumn
        
        Private columnGameType1 As DataColumn
        
        Private columnNameOfGame1 As DataColumn
        
        Private columnDescription1 As DataColumn
        
        Private columnGameType2 As DataColumn
        
        Private columnNameofGame2 As DataColumn
        
        Private columnDescription2 As DataColumn
        
        Private columnGameType3 As DataColumn
        
        Private columnNameOfGame3 As DataColumn
        
        Private columnDescription3 As DataColumn
        
        Private columnChildstatus As DataColumn
        
        Private columnChildName1 As DataColumn
        
        Private columnChildDob1 As DataColumn
        
        Private columnChildSex1 As DataColumn
        
        Private columnChildExpairy1 As DataColumn
        
        Private columnChildName2 As DataColumn
        
        Private columnChildDob2 As DataColumn
        
        Private columnChildSex2 As DataColumn
        
        Private columnChildExpairy2 As DataColumn
        
        Private columnChildName3 As DataColumn
        
        Private columnChildDob3 As DataColumn
        
        Private columnChildSex3 As DataColumn
        
        Private columnchildExpairy3 As DataColumn
        
        Private columnClubstatus As DataColumn
        
        Private columnOtherClubName1 As DataColumn
        
        Private columnOCAddress1 As DataColumn
        
        Private columnOCStatus1 As DataColumn
        
        Private columnOtherClubName2 As DataColumn
        
        Private columnOCAddress2 As DataColumn
        
        Private columnOCStatus2 As DataColumn
        
        Private columnOtherClubname3 As DataColumn
        
        Private columnOCAddress3 As DataColumn
        
        Private columnOCStataus As DataColumn
        
        Private columnadduser As DataColumn
        
        Private columnadddate As DataColumn
        
        Private columnfreeze As DataColumn
        
        Private columnRelativestatus As DataColumn
        
        Private columnRelativeName1 As DataColumn
        
        Private columnRelation1 As DataColumn
        
        Private columndateofbirth1 As DataColumn
        
        Private columnRelativeage1 As DataColumn
        
        Private columnRelativeSex1 As DataColumn
        
        Private columnRelativeaddress1 As DataColumn
        
        Private columnRelativeName2 As DataColumn
        
        Private columnRelation2 As DataColumn
        
        Private columndateofbirth2 As DataColumn
        
        Private columnRelativeage2 As DataColumn
        
        Private columnRelativeSex2 As DataColumn
        
        Private columnRelativeaddress2 As DataColumn
        
        Private columnRelativeName3 As DataColumn
        
        Private columnRelation3 As DataColumn
        
        Private columndateofbirth3 As DataColumn
        
        Private columnRelativeage3 As DataColumn
        
        Private columnRelativeSex3 As DataColumn
        
        Private columnRelativeaddress3 As DataColumn
        
        Private columnreferentialst As DataColumn
        
        Private columnmem_code1 As DataColumn
        
        Private columnmem_name1 As DataColumn
        
        Private columnrefmem_date1 As DataColumn
        
        Private columndeleted1 As DataColumn
        
        Private columnmem_code2 As DataColumn
        
        Private columnmem_name2 As DataColumn
        
        Private columnrefmem_date2 As DataColumn
        
        Private columndeleted2 As DataColumn
        
        Private columnmem_code3 As DataColumn
        
        Private columnmem_name3 As DataColumn
        
        Private columnrefmem_date3 As DataColumn
        
        Private columndeleted3 As DataColumn
        
        Private columnentrancefeest As DataColumn
        
        Private columnreceiptno1 As DataColumn
        
        Private columnstartdate1 As DataColumn
        
        Private columnamount1 As DataColumn
        
        Private columnreceiptno2 As DataColumn
        
        Private columnstartdate2 As DataColumn
        
        Private columnamount2 As DataColumn
        
        Private columnreceiptno3 As DataColumn
        
        Private columnstartdate3 As DataColumn
        
        Private columnamount3 As DataColumn
        
        Private columnOLD As DataColumn
        
        Private columnCardAmt As DataColumn
        
        Private columnMINIMUMUSAGE As DataColumn
        
        Private columnCREDITNO As DataColumn
        
        Private columnSPOUSEMOBILE As DataColumn
        
        Private columnPADD4 As DataColumn
        
        Private columnCADD4 As DataColumn
        
        Private columnADD1 As DataColumn
        
        Private columnADD2 As DataColumn
        
        Private columnADD3 As DataColumn
        
        Private columnCITY As DataColumn
        
        Private columnSTATE As DataColumn
        
        Private columncountry As DataColumn
        
        Private columnPINCODE As DataColumn
        
        Private columnPHONE1 As DataColumn
        
        Private columnPHONE2 As DataColumn
        
        Friend Sub New()
            MyBase.New("membermaster")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property SequenceNoColumn As DataColumn
            Get
                Return Me.columnSequenceNo
            End Get
        End Property
        
        Friend ReadOnly Property TAGColumn As DataColumn
            Get
                Return Me.columnTAG
            End Get
        End Property
        
        Friend ReadOnly Property MEMBERTYPECODEColumn As DataColumn
            Get
                Return Me.columnMEMBERTYPECODE
            End Get
        End Property
        
        Friend ReadOnly Property COMPANYColumn As DataColumn
            Get
                Return Me.columnCOMPANY
            End Get
        End Property
        
        Friend ReadOnly Property SUBCDColumn As DataColumn
            Get
                Return Me.columnSUBCD
            End Get
        End Property
        
        Friend ReadOnly Property MCODEColumn As DataColumn
            Get
                Return Me.columnMCODE
            End Get
        End Property
        
        Friend ReadOnly Property MNAMEColumn As DataColumn
            Get
                Return Me.columnMNAME
            End Get
        End Property
        
        Friend ReadOnly Property MIDColumn As DataColumn
            Get
                Return Me.columnMID
            End Get
        End Property
        
        Friend ReadOnly Property DOBColumn As DataColumn
            Get
                Return Me.columnDOB
            End Get
        End Property
        
        Friend ReadOnly Property DOJColumn As DataColumn
            Get
                Return Me.columnDOJ
            End Get
        End Property
        
        Friend ReadOnly Property SEXColumn As DataColumn
            Get
                Return Me.columnSEX
            End Get
        End Property
        
        Friend ReadOnly Property MARITALSTATUSColumn As DataColumn
            Get
                Return Me.columnMARITALSTATUS
            End Get
        End Property
        
        Friend ReadOnly Property SPOUSEColumn As DataColumn
            Get
                Return Me.columnSPOUSE
            End Get
        End Property
        
        Friend ReadOnly Property BGColumn As DataColumn
            Get
                Return Me.columnBG
            End Get
        End Property
        
        Friend ReadOnly Property OCCUPATIONColumn As DataColumn
            Get
                Return Me.columnOCCUPATION
            End Get
        End Property
        
        Friend ReadOnly Property BANKERColumn As DataColumn
            Get
                Return Me.columnBANKER
            End Get
        End Property
        
        Friend ReadOnly Property BANKACNOColumn As DataColumn
            Get
                Return Me.columnBANKACNO
            End Get
        End Property
        
        Friend ReadOnly Property HOBBIESColumn As DataColumn
            Get
                Return Me.columnHOBBIES
            End Get
        End Property
        
        Friend ReadOnly Property OTHERINFOColumn As DataColumn
            Get
                Return Me.columnOTHERINFO
            End Get
        End Property
        
        Friend ReadOnly Property RESIDENTColumn As DataColumn
            Get
                Return Me.columnRESIDENT
            End Get
        End Property
        
        Friend ReadOnly Property EQUALIFICATIONColumn As DataColumn
            Get
                Return Me.columnEQUALIFICATION
            End Get
        End Property
        
        Friend ReadOnly Property PQUALIFICATIONColumn As DataColumn
            Get
                Return Me.columnPQUALIFICATION
            End Get
        End Property
        
        Friend ReadOnly Property PROPOSERColumn As DataColumn
            Get
                Return Me.columnPROPOSER
            End Get
        End Property
        
        Friend ReadOnly Property PROPOSERNAMEColumn As DataColumn
            Get
                Return Me.columnPROPOSERNAME
            End Get
        End Property
        
        Friend ReadOnly Property SECONDERColumn As DataColumn
            Get
                Return Me.columnSECONDER
            End Get
        End Property
        
        Friend ReadOnly Property SECONDERNAMEColumn As DataColumn
            Get
                Return Me.columnSECONDERNAME
            End Get
        End Property
        
        Friend ReadOnly Property PAcopystColumn As DataColumn
            Get
                Return Me.columnPAcopyst
            End Get
        End Property
        
        Friend ReadOnly Property PADD1Column As DataColumn
            Get
                Return Me.columnPADD1
            End Get
        End Property
        
        Friend ReadOnly Property PADD2Column As DataColumn
            Get
                Return Me.columnPADD2
            End Get
        End Property
        
        Friend ReadOnly Property PADD3Column As DataColumn
            Get
                Return Me.columnPADD3
            End Get
        End Property
        
        Friend ReadOnly Property PCITYColumn As DataColumn
            Get
                Return Me.columnPCITY
            End Get
        End Property
        
        Friend ReadOnly Property PSTATEColumn As DataColumn
            Get
                Return Me.columnPSTATE
            End Get
        End Property
        
        Friend ReadOnly Property PCOUNTRYColumn As DataColumn
            Get
                Return Me.columnPCOUNTRY
            End Get
        End Property
        
        Friend ReadOnly Property PPINColumn As DataColumn
            Get
                Return Me.columnPPIN
            End Get
        End Property
        
        Friend ReadOnly Property PPHONE1Column As DataColumn
            Get
                Return Me.columnPPHONE1
            End Get
        End Property
        
        Friend ReadOnly Property PPHONE2Column As DataColumn
            Get
                Return Me.columnPPHONE2
            End Get
        End Property
        
        Friend ReadOnly Property PCELLColumn As DataColumn
            Get
                Return Me.columnPCELL
            End Get
        End Property
        
        Friend ReadOnly Property PEMAILColumn As DataColumn
            Get
                Return Me.columnPEMAIL
            End Get
        End Property
        
        Friend ReadOnly Property RAcopystColumn As DataColumn
            Get
                Return Me.columnRAcopyst
            End Get
        End Property
        
        Friend ReadOnly Property CADD1Column As DataColumn
            Get
                Return Me.columnCADD1
            End Get
        End Property
        
        Friend ReadOnly Property CADD2Column As DataColumn
            Get
                Return Me.columnCADD2
            End Get
        End Property
        
        Friend ReadOnly Property CADD3Column As DataColumn
            Get
                Return Me.columnCADD3
            End Get
        End Property
        
        Friend ReadOnly Property CCITYColumn As DataColumn
            Get
                Return Me.columnCCITY
            End Get
        End Property
        
        Friend ReadOnly Property CSTATEColumn As DataColumn
            Get
                Return Me.columnCSTATE
            End Get
        End Property
        
        Friend ReadOnly Property CCOUNTRYColumn As DataColumn
            Get
                Return Me.columnCCOUNTRY
            End Get
        End Property
        
        Friend ReadOnly Property CPINColumn As DataColumn
            Get
                Return Me.columnCPIN
            End Get
        End Property
        
        Friend ReadOnly Property CPHONE1Column As DataColumn
            Get
                Return Me.columnCPHONE1
            End Get
        End Property
        
        Friend ReadOnly Property CPHONE2Column As DataColumn
            Get
                Return Me.columnCPHONE2
            End Get
        End Property
        
        Friend ReadOnly Property CCELLColumn As DataColumn
            Get
                Return Me.columnCCELL
            End Get
        End Property
        
        Friend ReadOnly Property CEMAILColumn As DataColumn
            Get
                Return Me.columnCEMAIL
            End Get
        End Property
        
        Friend ReadOnly Property CONTADD1Column As DataColumn
            Get
                Return Me.columnCONTADD1
            End Get
        End Property
        
        Friend ReadOnly Property CONTADD2Column As DataColumn
            Get
                Return Me.columnCONTADD2
            End Get
        End Property
        
        Friend ReadOnly Property CONTADD3Column As DataColumn
            Get
                Return Me.columnCONTADD3
            End Get
        End Property
        
        Friend ReadOnly Property CONTCITYColumn As DataColumn
            Get
                Return Me.columnCONTCITY
            End Get
        End Property
        
        Friend ReadOnly Property CONTSTATEColumn As DataColumn
            Get
                Return Me.columnCONTSTATE
            End Get
        End Property
        
        Friend ReadOnly Property CONTCOUNTRYColumn As DataColumn
            Get
                Return Me.columnCONTCOUNTRY
            End Get
        End Property
        
        Friend ReadOnly Property CONTPINColumn As DataColumn
            Get
                Return Me.columnCONTPIN
            End Get
        End Property
        
        Friend ReadOnly Property CONTPHONE1Column As DataColumn
            Get
                Return Me.columnCONTPHONE1
            End Get
        End Property
        
        Friend ReadOnly Property CONTPHONE2Column As DataColumn
            Get
                Return Me.columnCONTPHONE2
            End Get
        End Property
        
        Friend ReadOnly Property CONTCELLColumn As DataColumn
            Get
                Return Me.columnCONTCELL
            End Get
        End Property
        
        Friend ReadOnly Property CONTEMAILColumn As DataColumn
            Get
                Return Me.columnCONTEMAIL
            End Get
        End Property
        
        Friend ReadOnly Property EMPTYPEColumn As DataColumn
            Get
                Return Me.columnEMPTYPE
            End Get
        End Property
        
        Friend ReadOnly Property BUSINESSNAMEColumn As DataColumn
            Get
                Return Me.columnBUSINESSNAME
            End Get
        End Property
        
        Friend ReadOnly Property BAcopystColumn As DataColumn
            Get
                Return Me.columnBAcopyst
            End Get
        End Property
        
        Friend ReadOnly Property OADD1Column As DataColumn
            Get
                Return Me.columnOADD1
            End Get
        End Property
        
        Friend ReadOnly Property OADD2Column As DataColumn
            Get
                Return Me.columnOADD2
            End Get
        End Property
        
        Friend ReadOnly Property OADD3Column As DataColumn
            Get
                Return Me.columnOADD3
            End Get
        End Property
        
        Friend ReadOnly Property OCITYColumn As DataColumn
            Get
                Return Me.columnOCITY
            End Get
        End Property
        
        Friend ReadOnly Property OSTATEColumn As DataColumn
            Get
                Return Me.columnOSTATE
            End Get
        End Property
        
        Friend ReadOnly Property OCOUNTRYColumn As DataColumn
            Get
                Return Me.columnOCOUNTRY
            End Get
        End Property
        
        Friend ReadOnly Property OPINColumn As DataColumn
            Get
                Return Me.columnOPIN
            End Get
        End Property
        
        Friend ReadOnly Property OPHONE1Column As DataColumn
            Get
                Return Me.columnOPHONE1
            End Get
        End Property
        
        Friend ReadOnly Property OPHONE2Column As DataColumn
            Get
                Return Me.columnOPHONE2
            End Get
        End Property
        
        Friend ReadOnly Property OCELLColumn As DataColumn
            Get
                Return Me.columnOCELL
            End Get
        End Property
        
        Friend ReadOnly Property OEMAILColumn As DataColumn
            Get
                Return Me.columnOEMAIL
            End Get
        End Property
        
        Friend ReadOnly Property DOEPROFESSIONColumn As DataColumn
            Get
                Return Me.columnDOEPROFESSION
            End Get
        End Property
        
        Friend ReadOnly Property BUSINESSNATUREColumn As DataColumn
            Get
                Return Me.columnBUSINESSNATURE
            End Get
        End Property
        
        Friend ReadOnly Property POSITIONHELDColumn As DataColumn
            Get
                Return Me.columnPOSITIONHELD
            End Get
        End Property
        
        Friend ReadOnly Property SERVICENAMEColumn As DataColumn
            Get
                Return Me.columnSERVICENAME
            End Get
        End Property
        
        Friend ReadOnly Property SERVICEYEARColumn As DataColumn
            Get
                Return Me.columnSERVICEYEAR
            End Get
        End Property
        
        Friend ReadOnly Property PANOColumn As DataColumn
            Get
                Return Me.columnPANO
            End Get
        End Property
        
        Friend ReadOnly Property BBANKERColumn As DataColumn
            Get
                Return Me.columnBBANKER
            End Get
        End Property
        
        Friend ReadOnly Property CCNOColumn As DataColumn
            Get
                Return Me.columnCCNO
            End Get
        End Property
        
        Friend ReadOnly Property ANNUALINCOMEColumn As DataColumn
            Get
                Return Me.columnANNUALINCOME
            End Get
        End Property
        
        Friend ReadOnly Property UPDUSERIDColumn As DataColumn
            Get
                Return Me.columnUPDUSERID
            End Get
        End Property
        
        Friend ReadOnly Property UPDDATETIMEColumn As DataColumn
            Get
                Return Me.columnUPDDATETIME
            End Get
        End Property
        
        Friend ReadOnly Property TERMINATIONColumn As DataColumn
            Get
                Return Me.columnTERMINATION
            End Get
        End Property
        
        Friend ReadOnly Property TRN_CON_DATEColumn As DataColumn
            Get
                Return Me.columnTRN_CON_DATE
            End Get
        End Property
        
        Friend ReadOnly Property CON_MCODEColumn As DataColumn
            Get
                Return Me.columnCON_MCODE
            End Get
        End Property
        
        Friend ReadOnly Property PFAXColumn As DataColumn
            Get
                Return Me.columnPFAX
            End Get
        End Property
        
        Friend ReadOnly Property CFAXColumn As DataColumn
            Get
                Return Me.columnCFAX
            End Get
        End Property
        
        Friend ReadOnly Property CONTFAXColumn As DataColumn
            Get
                Return Me.columnCONTFAX
            End Get
        End Property
        
        Friend ReadOnly Property REASONColumn As DataColumn
            Get
                Return Me.columnREASON
            End Get
        End Property
        
        Friend ReadOnly Property PHOTOColumn As DataColumn
            Get
                Return Me.columnPHOTO
            End Get
        End Property
        
        Friend ReadOnly Property CREDITLIMITColumn As DataColumn
            Get
                Return Me.columnCREDITLIMIT
            End Get
        End Property
        
        Friend ReadOnly Property LIMITAMOUNTColumn As DataColumn
            Get
                Return Me.columnLIMITAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property WEBSITEColumn As DataColumn
            Get
                Return Me.columnWEBSITE
            End Get
        End Property
        
        Friend ReadOnly Property ImagefileColumn As DataColumn
            Get
                Return Me.columnImagefile
            End Get
        End Property
        
        Friend ReadOnly Property sizefieldColumn As DataColumn
            Get
                Return Me.columnsizefield
            End Get
        End Property
        
        Friend ReadOnly Property VdateColumn As DataColumn
            Get
                Return Me.columnVdate
            End Get
        End Property
        
        Friend ReadOnly Property VyearColumn As DataColumn
            Get
                Return Me.columnVyear
            End Get
        End Property
        
        Friend ReadOnly Property ValiddateColumn As DataColumn
            Get
                Return Me.columnValiddate
            End Get
        End Property
        
        Friend ReadOnly Property TempTerminationColumn As DataColumn
            Get
                Return Me.columnTempTermination
            End Get
        End Property
        
        Friend ReadOnly Property TempTermDateColumn As DataColumn
            Get
                Return Me.columnTempTermDate
            End Get
        End Property
        
        Friend ReadOnly Property TempTermReasonColumn As DataColumn
            Get
                Return Me.columnTempTermReason
            End Get
        End Property
        
        Friend ReadOnly Property MemberidColumn As DataColumn
            Get
                Return Me.columnMemberid
            End Get
        End Property
        
        Friend ReadOnly Property EndingDateColumn As DataColumn
            Get
                Return Me.columnEndingDate
            End Get
        End Property
        
        Friend ReadOnly Property TotalYearsColumn As DataColumn
            Get
                Return Me.columnTotalYears
            End Get
        End Property
        
        Friend ReadOnly Property CardNoColumn As DataColumn
            Get
                Return Me.columnCardNo
            End Get
        End Property
        
        Friend ReadOnly Property CardExpDateColumn As DataColumn
            Get
                Return Me.columnCardExpDate
            End Get
        End Property
        
        Friend ReadOnly Property ValidityColumn As DataColumn
            Get
                Return Me.columnValidity
            End Get
        End Property
        
        Friend ReadOnly Property PeriodColumn As DataColumn
            Get
                Return Me.columnPeriod
            End Get
        End Property
        
        Friend ReadOnly Property CreditcardnoColumn As DataColumn
            Get
                Return Me.columnCreditcardno
            End Get
        End Property
        
        Friend ReadOnly Property CreditExpDtColumn As DataColumn
            Get
                Return Me.columnCreditExpDt
            End Get
        End Property
        
        Friend ReadOnly Property TypeColumn As DataColumn
            Get
                Return Me.columnType
            End Get
        End Property
        
        Friend ReadOnly Property STATUSDATEFROMColumn As DataColumn
            Get
                Return Me.columnSTATUSDATEFROM
            End Get
        End Property
        
        Friend ReadOnly Property STATUSDATETOColumn As DataColumn
            Get
                Return Me.columnSTATUSDATETO
            End Get
        End Property
        
        Friend ReadOnly Property CurentStatusColumn As DataColumn
            Get
                Return Me.columnCurentStatus
            End Get
        End Property
        
        Friend ReadOnly Property FirstNameColumn As DataColumn
            Get
                Return Me.columnFirstName
            End Get
        End Property
        
        Friend ReadOnly Property MiddleNameColumn As DataColumn
            Get
                Return Me.columnMiddleName
            End Get
        End Property
        
        Friend ReadOnly Property SurnameColumn As DataColumn
            Get
                Return Me.columnSurname
            End Get
        End Property
        
        Friend ReadOnly Property _AliasColumn As DataColumn
            Get
                Return Me.column_Alias
            End Get
        End Property
        
        Friend ReadOnly Property PrefixColumn As DataColumn
            Get
                Return Me.columnPrefix
            End Get
        End Property
        
        Friend ReadOnly Property BillTypeColumn As DataColumn
            Get
                Return Me.columnBillType
            End Get
        End Property
        
        Friend ReadOnly Property NationalityColumn As DataColumn
            Get
                Return Me.columnNationality
            End Get
        End Property
        
        Friend ReadOnly Property NationalityAtbirthColumn As DataColumn
            Get
                Return Me.columnNationalityAtbirth
            End Get
        End Property
        
        Friend ReadOnly Property BillbasisColumn As DataColumn
            Get
                Return Me.columnBillbasis
            End Get
        End Property
        
        Friend ReadOnly Property BillHeadColumn As DataColumn
            Get
                Return Me.columnBillHead
            End Get
        End Property
        
        Friend ReadOnly Property GDRLockerColumn As DataColumn
            Get
                Return Me.columnGDRLocker
            End Get
        End Property
        
        Friend ReadOnly Property LDRLockerColumn As DataColumn
            Get
                Return Me.columnLDRLocker
            End Get
        End Property
        
        Friend ReadOnly Property HPLockerColumn As DataColumn
            Get
                Return Me.columnHPLocker
            End Get
        End Property
        
        Friend ReadOnly Property MembershipToColumn As DataColumn
            Get
                Return Me.columnMembershipTo
            End Get
        End Property
        
        Friend ReadOnly Property salutColumn As DataColumn
            Get
                Return Me.columnsalut
            End Get
        End Property
        
        Friend ReadOnly Property EntranceFeeColumn As DataColumn
            Get
                Return Me.columnEntranceFee
            End Get
        End Property
        
        Friend ReadOnly Property DevelopmentFeeColumn As DataColumn
            Get
                Return Me.columnDevelopmentFee
            End Get
        End Property
        
        Friend ReadOnly Property CriditNumberColumn As DataColumn
            Get
                Return Me.columnCriditNumber
            End Get
        End Property
        
        Friend ReadOnly Property SecurityDepositColumn As DataColumn
            Get
                Return Me.columnSecurityDeposit
            End Get
        End Property
        
        Friend ReadOnly Property PlaceOfBirthColumn As DataColumn
            Get
                Return Me.columnPlaceOfBirth
            End Get
        End Property
        
        Friend ReadOnly Property CountryOfBirthColumn As DataColumn
            Get
                Return Me.columnCountryOfBirth
            End Get
        End Property
        
        Friend ReadOnly Property LastArrivalInCalColumn As DataColumn
            Get
                Return Me.columnLastArrivalInCal
            End Get
        End Property
        
        Friend ReadOnly Property PeriodOfStay_yearColumn As DataColumn
            Get
                Return Me.columnPeriodOfStay_year
            End Get
        End Property
        
        Friend ReadOnly Property PeriodOfStay_MonthColumn As DataColumn
            Get
                Return Me.columnPeriodOfStay_Month
            End Get
        End Property
        
        Friend ReadOnly Property PreviouslyProposedColumn As DataColumn
            Get
                Return Me.columnPreviouslyProposed
            End Get
        End Property
        
        Friend ReadOnly Property NoOfTimesProposedColumn As DataColumn
            Get
                Return Me.columnNoOfTimesProposed
            End Get
        End Property
        
        Friend ReadOnly Property DateOfProposalColumn As DataColumn
            Get
                Return Me.columnDateOfProposal
            End Get
        End Property
        
        Friend ReadOnly Property ResultOfProposalColumn As DataColumn
            Get
                Return Me.columnResultOfProposal
            End Get
        End Property
        
        Friend ReadOnly Property ElectedColumn As DataColumn
            Get
                Return Me.columnElected
            End Get
        End Property
        
        Friend ReadOnly Property FatherNameColumn As DataColumn
            Get
                Return Me.columnFatherName
            End Get
        End Property
        
        Friend ReadOnly Property DOBfatherColumn As DataColumn
            Get
                Return Me.columnDOBfather
            End Get
        End Property
        
        Friend ReadOnly Property WifeDOBColumn As DataColumn
            Get
                Return Me.columnWifeDOB
            End Get
        End Property
        
        Friend ReadOnly Property MaidenNameWifeColumn As DataColumn
            Get
                Return Me.columnMaidenNameWife
            End Get
        End Property
        
        Friend ReadOnly Property NationalityWifeColumn As DataColumn
            Get
                Return Me.columnNationalityWife
            End Get
        End Property
        
        Friend ReadOnly Property WifesFatherNameColumn As DataColumn
            Get
                Return Me.columnWifesFatherName
            End Get
        End Property
        
        Friend ReadOnly Property WifeFatherDOBColumn As DataColumn
            Get
                Return Me.columnWifeFatherDOB
            End Get
        End Property
        
        Friend ReadOnly Property ApplNoColumn As DataColumn
            Get
                Return Me.columnApplNo
            End Get
        End Property
        
        Friend ReadOnly Property ApplDateColumn As DataColumn
            Get
                Return Me.columnApplDate
            End Get
        End Property
        
        Friend ReadOnly Property CorporatestColumn As DataColumn
            Get
                Return Me.columnCorporatest
            End Get
        End Property
        
        Friend ReadOnly Property CorporateCodeColumn As DataColumn
            Get
                Return Me.columnCorporateCode
            End Get
        End Property
        
        Friend ReadOnly Property CompNameColumn As DataColumn
            Get
                Return Me.columnCompName
            End Get
        End Property
        
        Friend ReadOnly Property DesignationColumn As DataColumn
            Get
                Return Me.columnDesignation
            End Get
        End Property
        
        Friend ReadOnly Property ProfessionInfoColumn As DataColumn
            Get
                Return Me.columnProfessionInfo
            End Get
        End Property
        
        Friend ReadOnly Property BuisnessInfoColumn As DataColumn
            Get
                Return Me.columnBuisnessInfo
            End Get
        End Property
        
        Friend ReadOnly Property ProductsColumn As DataColumn
            Get
                Return Me.columnProducts
            End Get
        End Property
        
        Friend ReadOnly Property AgentsDealersColumn As DataColumn
            Get
                Return Me.columnAgentsDealers
            End Get
        End Property
        
        Friend ReadOnly Property ESTDdateColumn As DataColumn
            Get
                Return Me.columnESTDdate
            End Get
        End Property
        
        Friend ReadOnly Property NoOfEmpColumn As DataColumn
            Get
                Return Me.columnNoOfEmp
            End Get
        End Property
        
        Friend ReadOnly Property TurnoverColumn As DataColumn
            Get
                Return Me.columnTurnover
            End Get
        End Property
        
        Friend ReadOnly Property ClientColumn As DataColumn
            Get
                Return Me.columnClient
            End Get
        End Property
        
        Friend ReadOnly Property AppliedButColumn As DataColumn
            Get
                Return Me.columnAppliedBut
            End Get
        End Property
        
        Friend ReadOnly Property PositionInChamberColumn As DataColumn
            Get
                Return Me.columnPositionInChamber
            End Get
        End Property
        
        Friend ReadOnly Property QulificationstatusColumn As DataColumn
            Get
                Return Me.columnQulificationstatus
            End Get
        End Property
        
        Friend ReadOnly Property Qualification1Column As DataColumn
            Get
                Return Me.columnQualification1
            End Get
        End Property
        
        Friend ReadOnly Property Details1Column As DataColumn
            Get
                Return Me.columnDetails1
            End Get
        End Property
        
        Friend ReadOnly Property YearOfPassing1Column As DataColumn
            Get
                Return Me.columnYearOfPassing1
            End Get
        End Property
        
        Friend ReadOnly Property Institute1Column As DataColumn
            Get
                Return Me.columnInstitute1
            End Get
        End Property
        
        Friend ReadOnly Property Division1Column As DataColumn
            Get
                Return Me.columnDivision1
            End Get
        End Property
        
        Friend ReadOnly Property Qualification2Column As DataColumn
            Get
                Return Me.columnQualification2
            End Get
        End Property
        
        Friend ReadOnly Property Details2Column As DataColumn
            Get
                Return Me.columnDetails2
            End Get
        End Property
        
        Friend ReadOnly Property YearOfPassing2Column As DataColumn
            Get
                Return Me.columnYearOfPassing2
            End Get
        End Property
        
        Friend ReadOnly Property Institute2Column As DataColumn
            Get
                Return Me.columnInstitute2
            End Get
        End Property
        
        Friend ReadOnly Property Division2Column As DataColumn
            Get
                Return Me.columnDivision2
            End Get
        End Property
        
        Friend ReadOnly Property Qualification3Column As DataColumn
            Get
                Return Me.columnQualification3
            End Get
        End Property
        
        Friend ReadOnly Property Details3Column As DataColumn
            Get
                Return Me.columnDetails3
            End Get
        End Property
        
        Friend ReadOnly Property YearOfPassing3Column As DataColumn
            Get
                Return Me.columnYearOfPassing3
            End Get
        End Property
        
        Friend ReadOnly Property Institute3Column As DataColumn
            Get
                Return Me.columnInstitute3
            End Get
        End Property
        
        Friend ReadOnly Property Division3Column As DataColumn
            Get
                Return Me.columnDivision3
            End Get
        End Property
        
        Friend ReadOnly Property sportstatusColumn As DataColumn
            Get
                Return Me.columnsportstatus
            End Get
        End Property
        
        Friend ReadOnly Property GameType1Column As DataColumn
            Get
                Return Me.columnGameType1
            End Get
        End Property
        
        Friend ReadOnly Property NameOfGame1Column As DataColumn
            Get
                Return Me.columnNameOfGame1
            End Get
        End Property
        
        Friend ReadOnly Property Description1Column As DataColumn
            Get
                Return Me.columnDescription1
            End Get
        End Property
        
        Friend ReadOnly Property GameType2Column As DataColumn
            Get
                Return Me.columnGameType2
            End Get
        End Property
        
        Friend ReadOnly Property NameofGame2Column As DataColumn
            Get
                Return Me.columnNameofGame2
            End Get
        End Property
        
        Friend ReadOnly Property Description2Column As DataColumn
            Get
                Return Me.columnDescription2
            End Get
        End Property
        
        Friend ReadOnly Property GameType3Column As DataColumn
            Get
                Return Me.columnGameType3
            End Get
        End Property
        
        Friend ReadOnly Property NameOfGame3Column As DataColumn
            Get
                Return Me.columnNameOfGame3
            End Get
        End Property
        
        Friend ReadOnly Property Description3Column As DataColumn
            Get
                Return Me.columnDescription3
            End Get
        End Property
        
        Friend ReadOnly Property ChildstatusColumn As DataColumn
            Get
                Return Me.columnChildstatus
            End Get
        End Property
        
        Friend ReadOnly Property ChildName1Column As DataColumn
            Get
                Return Me.columnChildName1
            End Get
        End Property
        
        Friend ReadOnly Property ChildDob1Column As DataColumn
            Get
                Return Me.columnChildDob1
            End Get
        End Property
        
        Friend ReadOnly Property ChildSex1Column As DataColumn
            Get
                Return Me.columnChildSex1
            End Get
        End Property
        
        Friend ReadOnly Property ChildExpairy1Column As DataColumn
            Get
                Return Me.columnChildExpairy1
            End Get
        End Property
        
        Friend ReadOnly Property ChildName2Column As DataColumn
            Get
                Return Me.columnChildName2
            End Get
        End Property
        
        Friend ReadOnly Property ChildDob2Column As DataColumn
            Get
                Return Me.columnChildDob2
            End Get
        End Property
        
        Friend ReadOnly Property ChildSex2Column As DataColumn
            Get
                Return Me.columnChildSex2
            End Get
        End Property
        
        Friend ReadOnly Property ChildExpairy2Column As DataColumn
            Get
                Return Me.columnChildExpairy2
            End Get
        End Property
        
        Friend ReadOnly Property ChildName3Column As DataColumn
            Get
                Return Me.columnChildName3
            End Get
        End Property
        
        Friend ReadOnly Property ChildDob3Column As DataColumn
            Get
                Return Me.columnChildDob3
            End Get
        End Property
        
        Friend ReadOnly Property ChildSex3Column As DataColumn
            Get
                Return Me.columnChildSex3
            End Get
        End Property
        
        Friend ReadOnly Property childExpairy3Column As DataColumn
            Get
                Return Me.columnchildExpairy3
            End Get
        End Property
        
        Friend ReadOnly Property ClubstatusColumn As DataColumn
            Get
                Return Me.columnClubstatus
            End Get
        End Property
        
        Friend ReadOnly Property OtherClubName1Column As DataColumn
            Get
                Return Me.columnOtherClubName1
            End Get
        End Property
        
        Friend ReadOnly Property OCAddress1Column As DataColumn
            Get
                Return Me.columnOCAddress1
            End Get
        End Property
        
        Friend ReadOnly Property OCStatus1Column As DataColumn
            Get
                Return Me.columnOCStatus1
            End Get
        End Property
        
        Friend ReadOnly Property OtherClubName2Column As DataColumn
            Get
                Return Me.columnOtherClubName2
            End Get
        End Property
        
        Friend ReadOnly Property OCAddress2Column As DataColumn
            Get
                Return Me.columnOCAddress2
            End Get
        End Property
        
        Friend ReadOnly Property OCStatus2Column As DataColumn
            Get
                Return Me.columnOCStatus2
            End Get
        End Property
        
        Friend ReadOnly Property OtherClubname3Column As DataColumn
            Get
                Return Me.columnOtherClubname3
            End Get
        End Property
        
        Friend ReadOnly Property OCAddress3Column As DataColumn
            Get
                Return Me.columnOCAddress3
            End Get
        End Property
        
        Friend ReadOnly Property OCStatausColumn As DataColumn
            Get
                Return Me.columnOCStataus
            End Get
        End Property
        
        Friend ReadOnly Property adduserColumn As DataColumn
            Get
                Return Me.columnadduser
            End Get
        End Property
        
        Friend ReadOnly Property adddateColumn As DataColumn
            Get
                Return Me.columnadddate
            End Get
        End Property
        
        Friend ReadOnly Property freezeColumn As DataColumn
            Get
                Return Me.columnfreeze
            End Get
        End Property
        
        Friend ReadOnly Property RelativestatusColumn As DataColumn
            Get
                Return Me.columnRelativestatus
            End Get
        End Property
        
        Friend ReadOnly Property RelativeName1Column As DataColumn
            Get
                Return Me.columnRelativeName1
            End Get
        End Property
        
        Friend ReadOnly Property Relation1Column As DataColumn
            Get
                Return Me.columnRelation1
            End Get
        End Property
        
        Friend ReadOnly Property dateofbirth1Column As DataColumn
            Get
                Return Me.columndateofbirth1
            End Get
        End Property
        
        Friend ReadOnly Property Relativeage1Column As DataColumn
            Get
                Return Me.columnRelativeage1
            End Get
        End Property
        
        Friend ReadOnly Property RelativeSex1Column As DataColumn
            Get
                Return Me.columnRelativeSex1
            End Get
        End Property
        
        Friend ReadOnly Property Relativeaddress1Column As DataColumn
            Get
                Return Me.columnRelativeaddress1
            End Get
        End Property
        
        Friend ReadOnly Property RelativeName2Column As DataColumn
            Get
                Return Me.columnRelativeName2
            End Get
        End Property
        
        Friend ReadOnly Property Relation2Column As DataColumn
            Get
                Return Me.columnRelation2
            End Get
        End Property
        
        Friend ReadOnly Property dateofbirth2Column As DataColumn
            Get
                Return Me.columndateofbirth2
            End Get
        End Property
        
        Friend ReadOnly Property Relativeage2Column As DataColumn
            Get
                Return Me.columnRelativeage2
            End Get
        End Property
        
        Friend ReadOnly Property RelativeSex2Column As DataColumn
            Get
                Return Me.columnRelativeSex2
            End Get
        End Property
        
        Friend ReadOnly Property Relativeaddress2Column As DataColumn
            Get
                Return Me.columnRelativeaddress2
            End Get
        End Property
        
        Friend ReadOnly Property RelativeName3Column As DataColumn
            Get
                Return Me.columnRelativeName3
            End Get
        End Property
        
        Friend ReadOnly Property Relation3Column As DataColumn
            Get
                Return Me.columnRelation3
            End Get
        End Property
        
        Friend ReadOnly Property dateofbirth3Column As DataColumn
            Get
                Return Me.columndateofbirth3
            End Get
        End Property
        
        Friend ReadOnly Property Relativeage3Column As DataColumn
            Get
                Return Me.columnRelativeage3
            End Get
        End Property
        
        Friend ReadOnly Property RelativeSex3Column As DataColumn
            Get
                Return Me.columnRelativeSex3
            End Get
        End Property
        
        Friend ReadOnly Property Relativeaddress3Column As DataColumn
            Get
                Return Me.columnRelativeaddress3
            End Get
        End Property
        
        Friend ReadOnly Property referentialstColumn As DataColumn
            Get
                Return Me.columnreferentialst
            End Get
        End Property
        
        Friend ReadOnly Property mem_code1Column As DataColumn
            Get
                Return Me.columnmem_code1
            End Get
        End Property
        
        Friend ReadOnly Property mem_name1Column As DataColumn
            Get
                Return Me.columnmem_name1
            End Get
        End Property
        
        Friend ReadOnly Property refmem_date1Column As DataColumn
            Get
                Return Me.columnrefmem_date1
            End Get
        End Property
        
        Friend ReadOnly Property deleted1Column As DataColumn
            Get
                Return Me.columndeleted1
            End Get
        End Property
        
        Friend ReadOnly Property mem_code2Column As DataColumn
            Get
                Return Me.columnmem_code2
            End Get
        End Property
        
        Friend ReadOnly Property mem_name2Column As DataColumn
            Get
                Return Me.columnmem_name2
            End Get
        End Property
        
        Friend ReadOnly Property refmem_date2Column As DataColumn
            Get
                Return Me.columnrefmem_date2
            End Get
        End Property
        
        Friend ReadOnly Property deleted2Column As DataColumn
            Get
                Return Me.columndeleted2
            End Get
        End Property
        
        Friend ReadOnly Property mem_code3Column As DataColumn
            Get
                Return Me.columnmem_code3
            End Get
        End Property
        
        Friend ReadOnly Property mem_name3Column As DataColumn
            Get
                Return Me.columnmem_name3
            End Get
        End Property
        
        Friend ReadOnly Property refmem_date3Column As DataColumn
            Get
                Return Me.columnrefmem_date3
            End Get
        End Property
        
        Friend ReadOnly Property deleted3Column As DataColumn
            Get
                Return Me.columndeleted3
            End Get
        End Property
        
        Friend ReadOnly Property entrancefeestColumn As DataColumn
            Get
                Return Me.columnentrancefeest
            End Get
        End Property
        
        Friend ReadOnly Property receiptno1Column As DataColumn
            Get
                Return Me.columnreceiptno1
            End Get
        End Property
        
        Friend ReadOnly Property startdate1Column As DataColumn
            Get
                Return Me.columnstartdate1
            End Get
        End Property
        
        Friend ReadOnly Property amount1Column As DataColumn
            Get
                Return Me.columnamount1
            End Get
        End Property
        
        Friend ReadOnly Property receiptno2Column As DataColumn
            Get
                Return Me.columnreceiptno2
            End Get
        End Property
        
        Friend ReadOnly Property startdate2Column As DataColumn
            Get
                Return Me.columnstartdate2
            End Get
        End Property
        
        Friend ReadOnly Property amount2Column As DataColumn
            Get
                Return Me.columnamount2
            End Get
        End Property
        
        Friend ReadOnly Property receiptno3Column As DataColumn
            Get
                Return Me.columnreceiptno3
            End Get
        End Property
        
        Friend ReadOnly Property startdate3Column As DataColumn
            Get
                Return Me.columnstartdate3
            End Get
        End Property
        
        Friend ReadOnly Property amount3Column As DataColumn
            Get
                Return Me.columnamount3
            End Get
        End Property
        
        Friend ReadOnly Property OLDColumn As DataColumn
            Get
                Return Me.columnOLD
            End Get
        End Property
        
        Friend ReadOnly Property CardAmtColumn As DataColumn
            Get
                Return Me.columnCardAmt
            End Get
        End Property
        
        Friend ReadOnly Property MINIMUMUSAGEColumn As DataColumn
            Get
                Return Me.columnMINIMUMUSAGE
            End Get
        End Property
        
        Friend ReadOnly Property CREDITNOColumn As DataColumn
            Get
                Return Me.columnCREDITNO
            End Get
        End Property
        
        Friend ReadOnly Property SPOUSEMOBILEColumn As DataColumn
            Get
                Return Me.columnSPOUSEMOBILE
            End Get
        End Property
        
        Friend ReadOnly Property PADD4Column As DataColumn
            Get
                Return Me.columnPADD4
            End Get
        End Property
        
        Friend ReadOnly Property CADD4Column As DataColumn
            Get
                Return Me.columnCADD4
            End Get
        End Property
        
        Friend ReadOnly Property ADD1Column As DataColumn
            Get
                Return Me.columnADD1
            End Get
        End Property
        
        Friend ReadOnly Property ADD2Column As DataColumn
            Get
                Return Me.columnADD2
            End Get
        End Property
        
        Friend ReadOnly Property ADD3Column As DataColumn
            Get
                Return Me.columnADD3
            End Get
        End Property
        
        Friend ReadOnly Property CITYColumn As DataColumn
            Get
                Return Me.columnCITY
            End Get
        End Property
        
        Friend ReadOnly Property STATEColumn As DataColumn
            Get
                Return Me.columnSTATE
            End Get
        End Property
        
        Friend ReadOnly Property countryColumn As DataColumn
            Get
                Return Me.columncountry
            End Get
        End Property
        
        Friend ReadOnly Property PINCODEColumn As DataColumn
            Get
                Return Me.columnPINCODE
            End Get
        End Property
        
        Friend ReadOnly Property PHONE1Column As DataColumn
            Get
                Return Me.columnPHONE1
            End Get
        End Property
        
        Friend ReadOnly Property PHONE2Column As DataColumn
            Get
                Return Me.columnPHONE2
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As membermasterRow
            Get
                Return CType(Me.Rows(index),membermasterRow)
            End Get
        End Property
        
        Public Event membermasterRowChanged As membermasterRowChangeEventHandler
        
        Public Event membermasterRowChanging As membermasterRowChangeEventHandler
        
        Public Event membermasterRowDeleted As membermasterRowChangeEventHandler
        
        Public Event membermasterRowDeleting As membermasterRowChangeEventHandler
        
        Public Overloads Sub AddmembermasterRow(ByVal row As membermasterRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddmembermasterRow( _
                    ByVal TAG As String,  _
                    ByVal MEMBERTYPECODE As String,  _
                    ByVal COMPANY As String,  _
                    ByVal SUBCD As String,  _
                    ByVal MCODE As String,  _
                    ByVal MNAME As String,  _
                    ByVal MID As String,  _
                    ByVal DOB As Date,  _
                    ByVal DOJ As Date,  _
                    ByVal SEX As String,  _
                    ByVal MARITALSTATUS As String,  _
                    ByVal SPOUSE As String,  _
                    ByVal BG As String,  _
                    ByVal OCCUPATION As String,  _
                    ByVal BANKER As String,  _
                    ByVal BANKACNO As String,  _
                    ByVal HOBBIES As String,  _
                    ByVal OTHERINFO As String,  _
                    ByVal RESIDENT As String,  _
                    ByVal EQUALIFICATION As String,  _
                    ByVal PQUALIFICATION As String,  _
                    ByVal PROPOSER As String,  _
                    ByVal PROPOSERNAME As String,  _
                    ByVal SECONDER As String,  _
                    ByVal SECONDERNAME As String,  _
                    ByVal PAcopyst As String,  _
                    ByVal PADD1 As String,  _
                    ByVal PADD2 As String,  _
                    ByVal PADD3 As String,  _
                    ByVal PCITY As String,  _
                    ByVal PSTATE As String,  _
                    ByVal PCOUNTRY As String,  _
                    ByVal PPIN As String,  _
                    ByVal PPHONE1 As String,  _
                    ByVal PPHONE2 As String,  _
                    ByVal PCELL As String,  _
                    ByVal PEMAIL As String,  _
                    ByVal RAcopyst As String,  _
                    ByVal CADD1 As String,  _
                    ByVal CADD2 As String,  _
                    ByVal CADD3 As String,  _
                    ByVal CCITY As String,  _
                    ByVal CSTATE As String,  _
                    ByVal CCOUNTRY As String,  _
                    ByVal CPIN As String,  _
                    ByVal CPHONE1 As String,  _
                    ByVal CPHONE2 As String,  _
                    ByVal CCELL As String,  _
                    ByVal CEMAIL As String,  _
                    ByVal CONTADD1 As String,  _
                    ByVal CONTADD2 As String,  _
                    ByVal CONTADD3 As String,  _
                    ByVal CONTCITY As String,  _
                    ByVal CONTSTATE As String,  _
                    ByVal CONTCOUNTRY As String,  _
                    ByVal CONTPIN As String,  _
                    ByVal CONTPHONE1 As String,  _
                    ByVal CONTPHONE2 As String,  _
                    ByVal CONTCELL As String,  _
                    ByVal CONTEMAIL As String,  _
                    ByVal EMPTYPE As String,  _
                    ByVal BUSINESSNAME As String,  _
                    ByVal BAcopyst As String,  _
                    ByVal OADD1 As String,  _
                    ByVal OADD2 As String,  _
                    ByVal OADD3 As String,  _
                    ByVal OCITY As String,  _
                    ByVal OSTATE As String,  _
                    ByVal OCOUNTRY As String,  _
                    ByVal OPIN As String,  _
                    ByVal OPHONE1 As String,  _
                    ByVal OPHONE2 As String,  _
                    ByVal OCELL As String,  _
                    ByVal OEMAIL As String,  _
                    ByVal DOEPROFESSION As Date,  _
                    ByVal BUSINESSNATURE As String,  _
                    ByVal POSITIONHELD As String,  _
                    ByVal SERVICENAME As String,  _
                    ByVal SERVICEYEAR As Decimal,  _
                    ByVal PANO As String,  _
                    ByVal BBANKER As String,  _
                    ByVal CCNO As String,  _
                    ByVal ANNUALINCOME As Decimal,  _
                    ByVal UPDUSERID As String,  _
                    ByVal UPDDATETIME As Date,  _
                    ByVal TERMINATION As String,  _
                    ByVal TRN_CON_DATE As Date,  _
                    ByVal CON_MCODE As String,  _
                    ByVal PFAX As String,  _
                    ByVal CFAX As String,  _
                    ByVal CONTFAX As String,  _
                    ByVal REASON As String,  _
                    ByVal PHOTO As String,  _
                    ByVal CREDITLIMIT As Decimal,  _
                    ByVal LIMITAMOUNT As Decimal,  _
                    ByVal WEBSITE As String,  _
                    ByVal Imagefile() As Byte,  _
                    ByVal sizefield As Decimal,  _
                    ByVal Vdate As Date,  _
                    ByVal Vyear As Decimal,  _
                    ByVal Validdate As Date,  _
                    ByVal TempTermination As String,  _
                    ByVal TempTermDate As Date,  _
                    ByVal TempTermReason As String,  _
                    ByVal Memberid As String,  _
                    ByVal EndingDate As Date,  _
                    ByVal TotalYears As Decimal,  _
                    ByVal CardNo As String,  _
                    ByVal CardExpDate As Date,  _
                    ByVal Validity As String,  _
                    ByVal Period As String,  _
                    ByVal Creditcardno As String,  _
                    ByVal CreditExpDt As Date,  _
                    ByVal Type As String,  _
                    ByVal STATUSDATEFROM As Date,  _
                    ByVal STATUSDATETO As Date,  _
                    ByVal CurentStatus As String,  _
                    ByVal FirstName As String,  _
                    ByVal MiddleName As String,  _
                    ByVal Surname As String,  _
                    ByVal _Alias As String,  _
                    ByVal Prefix As String,  _
                    ByVal BillType As String,  _
                    ByVal Nationality As String,  _
                    ByVal NationalityAtbirth As String,  _
                    ByVal Billbasis As String,  _
                    ByVal BillHead As String,  _
                    ByVal GDRLocker As String,  _
                    ByVal LDRLocker As String,  _
                    ByVal HPLocker As String,  _
                    ByVal MembershipTo As Date,  _
                    ByVal salut As String,  _
                    ByVal EntranceFee As Double,  _
                    ByVal DevelopmentFee As Double,  _
                    ByVal CriditNumber As String,  _
                    ByVal SecurityDeposit As Decimal,  _
                    ByVal PlaceOfBirth As String,  _
                    ByVal CountryOfBirth As String,  _
                    ByVal LastArrivalInCal As Date,  _
                    ByVal PeriodOfStay_year As Decimal,  _
                    ByVal PeriodOfStay_Month As Decimal,  _
                    ByVal PreviouslyProposed As String,  _
                    ByVal NoOfTimesProposed As Decimal,  _
                    ByVal DateOfProposal As Date,  _
                    ByVal ResultOfProposal As String,  _
                    ByVal Elected As String,  _
                    ByVal FatherName As String,  _
                    ByVal DOBfather As Date,  _
                    ByVal WifeDOB As Date,  _
                    ByVal MaidenNameWife As String,  _
                    ByVal NationalityWife As String,  _
                    ByVal WifesFatherName As String,  _
                    ByVal WifeFatherDOB As Date,  _
                    ByVal ApplNo As String,  _
                    ByVal ApplDate As Date,  _
                    ByVal Corporatest As String,  _
                    ByVal CorporateCode As String,  _
                    ByVal CompName As String,  _
                    ByVal Designation As String,  _
                    ByVal ProfessionInfo As String,  _
                    ByVal BuisnessInfo As String,  _
                    ByVal Products As String,  _
                    ByVal AgentsDealers As String,  _
                    ByVal ESTDdate As Date,  _
                    ByVal NoOfEmp As Decimal,  _
                    ByVal Turnover As Double,  _
                    ByVal Client As String,  _
                    ByVal AppliedBut As String,  _
                    ByVal PositionInChamber As String,  _
                    ByVal Qulificationstatus As String,  _
                    ByVal Qualification1 As String,  _
                    ByVal Details1 As String,  _
                    ByVal YearOfPassing1 As String,  _
                    ByVal Institute1 As String,  _
                    ByVal Division1 As String,  _
                    ByVal Qualification2 As String,  _
                    ByVal Details2 As String,  _
                    ByVal YearOfPassing2 As String,  _
                    ByVal Institute2 As String,  _
                    ByVal Division2 As String,  _
                    ByVal Qualification3 As String,  _
                    ByVal Details3 As String,  _
                    ByVal YearOfPassing3 As String,  _
                    ByVal Institute3 As String,  _
                    ByVal Division3 As String,  _
                    ByVal sportstatus As String,  _
                    ByVal GameType1 As String,  _
                    ByVal NameOfGame1 As String,  _
                    ByVal Description1 As String,  _
                    ByVal GameType2 As String,  _
                    ByVal NameofGame2 As String,  _
                    ByVal Description2 As String,  _
                    ByVal GameType3 As String,  _
                    ByVal NameOfGame3 As String,  _
                    ByVal Description3 As String,  _
                    ByVal Childstatus As String,  _
                    ByVal ChildName1 As String,  _
                    ByVal ChildDob1 As String,  _
                    ByVal ChildSex1 As String,  _
                    ByVal ChildExpairy1 As String,  _
                    ByVal ChildName2 As String,  _
                    ByVal ChildDob2 As String,  _
                    ByVal ChildSex2 As String,  _
                    ByVal ChildExpairy2 As String,  _
                    ByVal ChildName3 As String,  _
                    ByVal ChildDob3 As String,  _
                    ByVal ChildSex3 As String,  _
                    ByVal childExpairy3 As String,  _
                    ByVal Clubstatus As String,  _
                    ByVal OtherClubName1 As String,  _
                    ByVal OCAddress1 As String,  _
                    ByVal OCStatus1 As String,  _
                    ByVal OtherClubName2 As String,  _
                    ByVal OCAddress2 As String,  _
                    ByVal OCStatus2 As String,  _
                    ByVal OtherClubname3 As String,  _
                    ByVal OCAddress3 As String,  _
                    ByVal OCStataus As String,  _
                    ByVal adduser As String,  _
                    ByVal adddate As Date,  _
                    ByVal freeze As String,  _
                    ByVal Relativestatus As String,  _
                    ByVal RelativeName1 As String,  _
                    ByVal Relation1 As String,  _
                    ByVal dateofbirth1 As String,  _
                    ByVal Relativeage1 As String,  _
                    ByVal RelativeSex1 As String,  _
                    ByVal Relativeaddress1 As String,  _
                    ByVal RelativeName2 As String,  _
                    ByVal Relation2 As String,  _
                    ByVal dateofbirth2 As String,  _
                    ByVal Relativeage2 As String,  _
                    ByVal RelativeSex2 As String,  _
                    ByVal Relativeaddress2 As String,  _
                    ByVal RelativeName3 As String,  _
                    ByVal Relation3 As String,  _
                    ByVal dateofbirth3 As String,  _
                    ByVal Relativeage3 As String,  _
                    ByVal RelativeSex3 As String,  _
                    ByVal Relativeaddress3 As String,  _
                    ByVal referentialst As String,  _
                    ByVal mem_code1 As String,  _
                    ByVal mem_name1 As String,  _
                    ByVal refmem_date1 As String,  _
                    ByVal deleted1 As String,  _
                    ByVal mem_code2 As String,  _
                    ByVal mem_name2 As String,  _
                    ByVal refmem_date2 As String,  _
                    ByVal deleted2 As String,  _
                    ByVal mem_code3 As String,  _
                    ByVal mem_name3 As String,  _
                    ByVal refmem_date3 As String,  _
                    ByVal deleted3 As String,  _
                    ByVal entrancefeest As String,  _
                    ByVal receiptno1 As String,  _
                    ByVal startdate1 As String,  _
                    ByVal amount1 As String,  _
                    ByVal receiptno2 As String,  _
                    ByVal startdate2 As String,  _
                    ByVal amount2 As String,  _
                    ByVal receiptno3 As String,  _
                    ByVal startdate3 As String,  _
                    ByVal amount3 As String,  _
                    ByVal OLD As String,  _
                    ByVal CardAmt As Decimal,  _
                    ByVal MINIMUMUSAGE As Decimal,  _
                    ByVal CREDITNO As String,  _
                    ByVal SPOUSEMOBILE As String,  _
                    ByVal PADD4 As String,  _
                    ByVal CADD4 As String,  _
                    ByVal ADD1 As String,  _
                    ByVal ADD2 As String,  _
                    ByVal ADD3 As String,  _
                    ByVal CITY As String,  _
                    ByVal STATE As String,  _
                    ByVal country As String,  _
                    ByVal PINCODE As String,  _
                    ByVal PHONE1 As String,  _
                    ByVal PHONE2 As String) As membermasterRow
            Dim rowmembermasterRow As membermasterRow = CType(Me.NewRow,membermasterRow)
            rowmembermasterRow.ItemArray = New Object() {Nothing, TAG, MEMBERTYPECODE, COMPANY, SUBCD, MCODE, MNAME, MID, DOB, DOJ, SEX, MARITALSTATUS, SPOUSE, BG, OCCUPATION, BANKER, BANKACNO, HOBBIES, OTHERINFO, RESIDENT, EQUALIFICATION, PQUALIFICATION, PROPOSER, PROPOSERNAME, SECONDER, SECONDERNAME, PAcopyst, PADD1, PADD2, PADD3, PCITY, PSTATE, PCOUNTRY, PPIN, PPHONE1, PPHONE2, PCELL, PEMAIL, RAcopyst, CADD1, CADD2, CADD3, CCITY, CSTATE, CCOUNTRY, CPIN, CPHONE1, CPHONE2, CCELL, CEMAIL, CONTADD1, CONTADD2, CONTADD3, CONTCITY, CONTSTATE, CONTCOUNTRY, CONTPIN, CONTPHONE1, CONTPHONE2, CONTCELL, CONTEMAIL, EMPTYPE, BUSINESSNAME, BAcopyst, OADD1, OADD2, OADD3, OCITY, OSTATE, OCOUNTRY, OPIN, OPHONE1, OPHONE2, OCELL, OEMAIL, DOEPROFESSION, BUSINESSNATURE, POSITIONHELD, SERVICENAME, SERVICEYEAR, PANO, BBANKER, CCNO, ANNUALINCOME, UPDUSERID, UPDDATETIME, TERMINATION, TRN_CON_DATE, CON_MCODE, PFAX, CFAX, CONTFAX, REASON, PHOTO, CREDITLIMIT, LIMITAMOUNT, WEBSITE, Imagefile, sizefield, Vdate, Vyear, Validdate, TempTermination, TempTermDate, TempTermReason, Memberid, EndingDate, TotalYears, CardNo, CardExpDate, Validity, Period, Creditcardno, CreditExpDt, Type, STATUSDATEFROM, STATUSDATETO, CurentStatus, FirstName, MiddleName, Surname, _Alias, Prefix, BillType, Nationality, NationalityAtbirth, Billbasis, BillHead, GDRLocker, LDRLocker, HPLocker, MembershipTo, salut, EntranceFee, DevelopmentFee, CriditNumber, SecurityDeposit, PlaceOfBirth, CountryOfBirth, LastArrivalInCal, PeriodOfStay_year, PeriodOfStay_Month, PreviouslyProposed, NoOfTimesProposed, DateOfProposal, ResultOfProposal, Elected, FatherName, DOBfather, WifeDOB, MaidenNameWife, NationalityWife, WifesFatherName, WifeFatherDOB, ApplNo, ApplDate, Corporatest, CorporateCode, CompName, Designation, ProfessionInfo, BuisnessInfo, Products, AgentsDealers, ESTDdate, NoOfEmp, Turnover, Client, AppliedBut, PositionInChamber, Qulificationstatus, Qualification1, Details1, YearOfPassing1, Institute1, Division1, Qualification2, Details2, YearOfPassing2, Institute2, Division2, Qualification3, Details3, YearOfPassing3, Institute3, Division3, sportstatus, GameType1, NameOfGame1, Description1, GameType2, NameofGame2, Description2, GameType3, NameOfGame3, Description3, Childstatus, ChildName1, ChildDob1, ChildSex1, ChildExpairy1, ChildName2, ChildDob2, ChildSex2, ChildExpairy2, ChildName3, ChildDob3, ChildSex3, childExpairy3, Clubstatus, OtherClubName1, OCAddress1, OCStatus1, OtherClubName2, OCAddress2, OCStatus2, OtherClubname3, OCAddress3, OCStataus, adduser, adddate, freeze, Relativestatus, RelativeName1, Relation1, dateofbirth1, Relativeage1, RelativeSex1, Relativeaddress1, RelativeName2, Relation2, dateofbirth2, Relativeage2, RelativeSex2, Relativeaddress2, RelativeName3, Relation3, dateofbirth3, Relativeage3, RelativeSex3, Relativeaddress3, referentialst, mem_code1, mem_name1, refmem_date1, deleted1, mem_code2, mem_name2, refmem_date2, deleted2, mem_code3, mem_name3, refmem_date3, deleted3, entrancefeest, receiptno1, startdate1, amount1, receiptno2, startdate2, amount2, receiptno3, startdate3, amount3, OLD, CardAmt, MINIMUMUSAGE, CREDITNO, SPOUSEMOBILE, PADD4, CADD4, ADD1, ADD2, ADD3, CITY, STATE, country, PINCODE, PHONE1, PHONE2}
            Me.Rows.Add(rowmembermasterRow)
            Return rowmembermasterRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As membermasterDataTable = CType(MyBase.Clone,membermasterDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New membermasterDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnSequenceNo = Me.Columns("SequenceNo")
            Me.columnTAG = Me.Columns("TAG")
            Me.columnMEMBERTYPECODE = Me.Columns("MEMBERTYPECODE")
            Me.columnCOMPANY = Me.Columns("COMPANY")
            Me.columnSUBCD = Me.Columns("SUBCD")
            Me.columnMCODE = Me.Columns("MCODE")
            Me.columnMNAME = Me.Columns("MNAME")
            Me.columnMID = Me.Columns("MID")
            Me.columnDOB = Me.Columns("DOB")
            Me.columnDOJ = Me.Columns("DOJ")
            Me.columnSEX = Me.Columns("SEX")
            Me.columnMARITALSTATUS = Me.Columns("MARITALSTATUS")
            Me.columnSPOUSE = Me.Columns("SPOUSE")
            Me.columnBG = Me.Columns("BG")
            Me.columnOCCUPATION = Me.Columns("OCCUPATION")
            Me.columnBANKER = Me.Columns("BANKER")
            Me.columnBANKACNO = Me.Columns("BANKACNO")
            Me.columnHOBBIES = Me.Columns("HOBBIES")
            Me.columnOTHERINFO = Me.Columns("OTHERINFO")
            Me.columnRESIDENT = Me.Columns("RESIDENT")
            Me.columnEQUALIFICATION = Me.Columns("EQUALIFICATION")
            Me.columnPQUALIFICATION = Me.Columns("PQUALIFICATION")
            Me.columnPROPOSER = Me.Columns("PROPOSER")
            Me.columnPROPOSERNAME = Me.Columns("PROPOSERNAME")
            Me.columnSECONDER = Me.Columns("SECONDER")
            Me.columnSECONDERNAME = Me.Columns("SECONDERNAME")
            Me.columnPAcopyst = Me.Columns("PAcopyst")
            Me.columnPADD1 = Me.Columns("PADD1")
            Me.columnPADD2 = Me.Columns("PADD2")
            Me.columnPADD3 = Me.Columns("PADD3")
            Me.columnPCITY = Me.Columns("PCITY")
            Me.columnPSTATE = Me.Columns("PSTATE")
            Me.columnPCOUNTRY = Me.Columns("PCOUNTRY")
            Me.columnPPIN = Me.Columns("PPIN")
            Me.columnPPHONE1 = Me.Columns("PPHONE1")
            Me.columnPPHONE2 = Me.Columns("PPHONE2")
            Me.columnPCELL = Me.Columns("PCELL")
            Me.columnPEMAIL = Me.Columns("PEMAIL")
            Me.columnRAcopyst = Me.Columns("RAcopyst")
            Me.columnCADD1 = Me.Columns("CADD1")
            Me.columnCADD2 = Me.Columns("CADD2")
            Me.columnCADD3 = Me.Columns("CADD3")
            Me.columnCCITY = Me.Columns("CCITY")
            Me.columnCSTATE = Me.Columns("CSTATE")
            Me.columnCCOUNTRY = Me.Columns("CCOUNTRY")
            Me.columnCPIN = Me.Columns("CPIN")
            Me.columnCPHONE1 = Me.Columns("CPHONE1")
            Me.columnCPHONE2 = Me.Columns("CPHONE2")
            Me.columnCCELL = Me.Columns("CCELL")
            Me.columnCEMAIL = Me.Columns("CEMAIL")
            Me.columnCONTADD1 = Me.Columns("CONTADD1")
            Me.columnCONTADD2 = Me.Columns("CONTADD2")
            Me.columnCONTADD3 = Me.Columns("CONTADD3")
            Me.columnCONTCITY = Me.Columns("CONTCITY")
            Me.columnCONTSTATE = Me.Columns("CONTSTATE")
            Me.columnCONTCOUNTRY = Me.Columns("CONTCOUNTRY")
            Me.columnCONTPIN = Me.Columns("CONTPIN")
            Me.columnCONTPHONE1 = Me.Columns("CONTPHONE1")
            Me.columnCONTPHONE2 = Me.Columns("CONTPHONE2")
            Me.columnCONTCELL = Me.Columns("CONTCELL")
            Me.columnCONTEMAIL = Me.Columns("CONTEMAIL")
            Me.columnEMPTYPE = Me.Columns("EMPTYPE")
            Me.columnBUSINESSNAME = Me.Columns("BUSINESSNAME")
            Me.columnBAcopyst = Me.Columns("BAcopyst")
            Me.columnOADD1 = Me.Columns("OADD1")
            Me.columnOADD2 = Me.Columns("OADD2")
            Me.columnOADD3 = Me.Columns("OADD3")
            Me.columnOCITY = Me.Columns("OCITY")
            Me.columnOSTATE = Me.Columns("OSTATE")
            Me.columnOCOUNTRY = Me.Columns("OCOUNTRY")
            Me.columnOPIN = Me.Columns("OPIN")
            Me.columnOPHONE1 = Me.Columns("OPHONE1")
            Me.columnOPHONE2 = Me.Columns("OPHONE2")
            Me.columnOCELL = Me.Columns("OCELL")
            Me.columnOEMAIL = Me.Columns("OEMAIL")
            Me.columnDOEPROFESSION = Me.Columns("DOEPROFESSION")
            Me.columnBUSINESSNATURE = Me.Columns("BUSINESSNATURE")
            Me.columnPOSITIONHELD = Me.Columns("POSITIONHELD")
            Me.columnSERVICENAME = Me.Columns("SERVICENAME")
            Me.columnSERVICEYEAR = Me.Columns("SERVICEYEAR")
            Me.columnPANO = Me.Columns("PANO")
            Me.columnBBANKER = Me.Columns("BBANKER")
            Me.columnCCNO = Me.Columns("CCNO")
            Me.columnANNUALINCOME = Me.Columns("ANNUALINCOME")
            Me.columnUPDUSERID = Me.Columns("UPDUSERID")
            Me.columnUPDDATETIME = Me.Columns("UPDDATETIME")
            Me.columnTERMINATION = Me.Columns("TERMINATION")
            Me.columnTRN_CON_DATE = Me.Columns("TRN_CON_DATE")
            Me.columnCON_MCODE = Me.Columns("CON_MCODE")
            Me.columnPFAX = Me.Columns("PFAX")
            Me.columnCFAX = Me.Columns("CFAX")
            Me.columnCONTFAX = Me.Columns("CONTFAX")
            Me.columnREASON = Me.Columns("REASON")
            Me.columnPHOTO = Me.Columns("PHOTO")
            Me.columnCREDITLIMIT = Me.Columns("CREDITLIMIT")
            Me.columnLIMITAMOUNT = Me.Columns("LIMITAMOUNT")
            Me.columnWEBSITE = Me.Columns("WEBSITE")
            Me.columnImagefile = Me.Columns("Imagefile")
            Me.columnsizefield = Me.Columns("sizefield")
            Me.columnVdate = Me.Columns("Vdate")
            Me.columnVyear = Me.Columns("Vyear")
            Me.columnValiddate = Me.Columns("Validdate")
            Me.columnTempTermination = Me.Columns("TempTermination")
            Me.columnTempTermDate = Me.Columns("TempTermDate")
            Me.columnTempTermReason = Me.Columns("TempTermReason")
            Me.columnMemberid = Me.Columns("Memberid")
            Me.columnEndingDate = Me.Columns("EndingDate")
            Me.columnTotalYears = Me.Columns("TotalYears")
            Me.columnCardNo = Me.Columns("CardNo")
            Me.columnCardExpDate = Me.Columns("CardExpDate")
            Me.columnValidity = Me.Columns("Validity")
            Me.columnPeriod = Me.Columns("Period")
            Me.columnCreditcardno = Me.Columns("Creditcardno")
            Me.columnCreditExpDt = Me.Columns("CreditExpDt")
            Me.columnType = Me.Columns("Type")
            Me.columnSTATUSDATEFROM = Me.Columns("STATUSDATEFROM")
            Me.columnSTATUSDATETO = Me.Columns("STATUSDATETO")
            Me.columnCurentStatus = Me.Columns("CurentStatus")
            Me.columnFirstName = Me.Columns("FirstName")
            Me.columnMiddleName = Me.Columns("MiddleName")
            Me.columnSurname = Me.Columns("Surname")
            Me.column_Alias = Me.Columns("Alias")
            Me.columnPrefix = Me.Columns("Prefix")
            Me.columnBillType = Me.Columns("BillType")
            Me.columnNationality = Me.Columns("Nationality")
            Me.columnNationalityAtbirth = Me.Columns("NationalityAtbirth")
            Me.columnBillbasis = Me.Columns("Billbasis")
            Me.columnBillHead = Me.Columns("BillHead")
            Me.columnGDRLocker = Me.Columns("GDRLocker")
            Me.columnLDRLocker = Me.Columns("LDRLocker")
            Me.columnHPLocker = Me.Columns("HPLocker")
            Me.columnMembershipTo = Me.Columns("MembershipTo")
            Me.columnsalut = Me.Columns("salut")
            Me.columnEntranceFee = Me.Columns("EntranceFee")
            Me.columnDevelopmentFee = Me.Columns("DevelopmentFee")
            Me.columnCriditNumber = Me.Columns("CriditNumber")
            Me.columnSecurityDeposit = Me.Columns("SecurityDeposit")
            Me.columnPlaceOfBirth = Me.Columns("PlaceOfBirth")
            Me.columnCountryOfBirth = Me.Columns("CountryOfBirth")
            Me.columnLastArrivalInCal = Me.Columns("LastArrivalInCal")
            Me.columnPeriodOfStay_year = Me.Columns("PeriodOfStay_year")
            Me.columnPeriodOfStay_Month = Me.Columns("PeriodOfStay_Month")
            Me.columnPreviouslyProposed = Me.Columns("PreviouslyProposed")
            Me.columnNoOfTimesProposed = Me.Columns("NoOfTimesProposed")
            Me.columnDateOfProposal = Me.Columns("DateOfProposal")
            Me.columnResultOfProposal = Me.Columns("ResultOfProposal")
            Me.columnElected = Me.Columns("Elected")
            Me.columnFatherName = Me.Columns("FatherName")
            Me.columnDOBfather = Me.Columns("DOBfather")
            Me.columnWifeDOB = Me.Columns("WifeDOB")
            Me.columnMaidenNameWife = Me.Columns("MaidenNameWife")
            Me.columnNationalityWife = Me.Columns("NationalityWife")
            Me.columnWifesFatherName = Me.Columns("WifesFatherName")
            Me.columnWifeFatherDOB = Me.Columns("WifeFatherDOB")
            Me.columnApplNo = Me.Columns("ApplNo")
            Me.columnApplDate = Me.Columns("ApplDate")
            Me.columnCorporatest = Me.Columns("Corporatest")
            Me.columnCorporateCode = Me.Columns("CorporateCode")
            Me.columnCompName = Me.Columns("CompName")
            Me.columnDesignation = Me.Columns("Designation")
            Me.columnProfessionInfo = Me.Columns("ProfessionInfo")
            Me.columnBuisnessInfo = Me.Columns("BuisnessInfo")
            Me.columnProducts = Me.Columns("Products")
            Me.columnAgentsDealers = Me.Columns("AgentsDealers")
            Me.columnESTDdate = Me.Columns("ESTDdate")
            Me.columnNoOfEmp = Me.Columns("NoOfEmp")
            Me.columnTurnover = Me.Columns("Turnover")
            Me.columnClient = Me.Columns("Client")
            Me.columnAppliedBut = Me.Columns("AppliedBut")
            Me.columnPositionInChamber = Me.Columns("PositionInChamber")
            Me.columnQulificationstatus = Me.Columns("Qulificationstatus")
            Me.columnQualification1 = Me.Columns("Qualification1")
            Me.columnDetails1 = Me.Columns("Details1")
            Me.columnYearOfPassing1 = Me.Columns("YearOfPassing1")
            Me.columnInstitute1 = Me.Columns("Institute1")
            Me.columnDivision1 = Me.Columns("Division1")
            Me.columnQualification2 = Me.Columns("Qualification2")
            Me.columnDetails2 = Me.Columns("Details2")
            Me.columnYearOfPassing2 = Me.Columns("YearOfPassing2")
            Me.columnInstitute2 = Me.Columns("Institute2")
            Me.columnDivision2 = Me.Columns("Division2")
            Me.columnQualification3 = Me.Columns("Qualification3")
            Me.columnDetails3 = Me.Columns("Details3")
            Me.columnYearOfPassing3 = Me.Columns("YearOfPassing3")
            Me.columnInstitute3 = Me.Columns("Institute3")
            Me.columnDivision3 = Me.Columns("Division3")
            Me.columnsportstatus = Me.Columns("sportstatus")
            Me.columnGameType1 = Me.Columns("GameType1")
            Me.columnNameOfGame1 = Me.Columns("NameOfGame1")
            Me.columnDescription1 = Me.Columns("Description1")
            Me.columnGameType2 = Me.Columns("GameType2")
            Me.columnNameofGame2 = Me.Columns("NameofGame2")
            Me.columnDescription2 = Me.Columns("Description2")
            Me.columnGameType3 = Me.Columns("GameType3")
            Me.columnNameOfGame3 = Me.Columns("NameOfGame3")
            Me.columnDescription3 = Me.Columns("Description3")
            Me.columnChildstatus = Me.Columns("Childstatus")
            Me.columnChildName1 = Me.Columns("ChildName1")
            Me.columnChildDob1 = Me.Columns("ChildDob1")
            Me.columnChildSex1 = Me.Columns("ChildSex1")
            Me.columnChildExpairy1 = Me.Columns("ChildExpairy1")
            Me.columnChildName2 = Me.Columns("ChildName2")
            Me.columnChildDob2 = Me.Columns("ChildDob2")
            Me.columnChildSex2 = Me.Columns("ChildSex2")
            Me.columnChildExpairy2 = Me.Columns("ChildExpairy2")
            Me.columnChildName3 = Me.Columns("ChildName3")
            Me.columnChildDob3 = Me.Columns("ChildDob3")
            Me.columnChildSex3 = Me.Columns("ChildSex3")
            Me.columnchildExpairy3 = Me.Columns("childExpairy3")
            Me.columnClubstatus = Me.Columns("Clubstatus")
            Me.columnOtherClubName1 = Me.Columns("OtherClubName1")
            Me.columnOCAddress1 = Me.Columns("OCAddress1")
            Me.columnOCStatus1 = Me.Columns("OCStatus1")
            Me.columnOtherClubName2 = Me.Columns("OtherClubName2")
            Me.columnOCAddress2 = Me.Columns("OCAddress2")
            Me.columnOCStatus2 = Me.Columns("OCStatus2")
            Me.columnOtherClubname3 = Me.Columns("OtherClubname3")
            Me.columnOCAddress3 = Me.Columns("OCAddress3")
            Me.columnOCStataus = Me.Columns("OCStataus")
            Me.columnadduser = Me.Columns("adduser")
            Me.columnadddate = Me.Columns("adddate")
            Me.columnfreeze = Me.Columns("freeze")
            Me.columnRelativestatus = Me.Columns("Relativestatus")
            Me.columnRelativeName1 = Me.Columns("RelativeName1")
            Me.columnRelation1 = Me.Columns("Relation1")
            Me.columndateofbirth1 = Me.Columns("dateofbirth1")
            Me.columnRelativeage1 = Me.Columns("Relativeage1")
            Me.columnRelativeSex1 = Me.Columns("RelativeSex1")
            Me.columnRelativeaddress1 = Me.Columns("Relativeaddress1")
            Me.columnRelativeName2 = Me.Columns("RelativeName2")
            Me.columnRelation2 = Me.Columns("Relation2")
            Me.columndateofbirth2 = Me.Columns("dateofbirth2")
            Me.columnRelativeage2 = Me.Columns("Relativeage2")
            Me.columnRelativeSex2 = Me.Columns("RelativeSex2")
            Me.columnRelativeaddress2 = Me.Columns("Relativeaddress2")
            Me.columnRelativeName3 = Me.Columns("RelativeName3")
            Me.columnRelation3 = Me.Columns("Relation3")
            Me.columndateofbirth3 = Me.Columns("dateofbirth3")
            Me.columnRelativeage3 = Me.Columns("Relativeage3")
            Me.columnRelativeSex3 = Me.Columns("RelativeSex3")
            Me.columnRelativeaddress3 = Me.Columns("Relativeaddress3")
            Me.columnreferentialst = Me.Columns("referentialst")
            Me.columnmem_code1 = Me.Columns("mem_code1")
            Me.columnmem_name1 = Me.Columns("mem_name1")
            Me.columnrefmem_date1 = Me.Columns("refmem_date1")
            Me.columndeleted1 = Me.Columns("deleted1")
            Me.columnmem_code2 = Me.Columns("mem_code2")
            Me.columnmem_name2 = Me.Columns("mem_name2")
            Me.columnrefmem_date2 = Me.Columns("refmem_date2")
            Me.columndeleted2 = Me.Columns("deleted2")
            Me.columnmem_code3 = Me.Columns("mem_code3")
            Me.columnmem_name3 = Me.Columns("mem_name3")
            Me.columnrefmem_date3 = Me.Columns("refmem_date3")
            Me.columndeleted3 = Me.Columns("deleted3")
            Me.columnentrancefeest = Me.Columns("entrancefeest")
            Me.columnreceiptno1 = Me.Columns("receiptno1")
            Me.columnstartdate1 = Me.Columns("startdate1")
            Me.columnamount1 = Me.Columns("amount1")
            Me.columnreceiptno2 = Me.Columns("receiptno2")
            Me.columnstartdate2 = Me.Columns("startdate2")
            Me.columnamount2 = Me.Columns("amount2")
            Me.columnreceiptno3 = Me.Columns("receiptno3")
            Me.columnstartdate3 = Me.Columns("startdate3")
            Me.columnamount3 = Me.Columns("amount3")
            Me.columnOLD = Me.Columns("OLD")
            Me.columnCardAmt = Me.Columns("CardAmt")
            Me.columnMINIMUMUSAGE = Me.Columns("MINIMUMUSAGE")
            Me.columnCREDITNO = Me.Columns("CREDITNO")
            Me.columnSPOUSEMOBILE = Me.Columns("SPOUSEMOBILE")
            Me.columnPADD4 = Me.Columns("PADD4")
            Me.columnCADD4 = Me.Columns("CADD4")
            Me.columnADD1 = Me.Columns("ADD1")
            Me.columnADD2 = Me.Columns("ADD2")
            Me.columnADD3 = Me.Columns("ADD3")
            Me.columnCITY = Me.Columns("CITY")
            Me.columnSTATE = Me.Columns("STATE")
            Me.columncountry = Me.Columns("country")
            Me.columnPINCODE = Me.Columns("PINCODE")
            Me.columnPHONE1 = Me.Columns("PHONE1")
            Me.columnPHONE2 = Me.Columns("PHONE2")
        End Sub
        
        Private Sub InitClass()
            Me.columnSequenceNo = New DataColumn("SequenceNo", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSequenceNo)
            Me.columnTAG = New DataColumn("TAG", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTAG)
            Me.columnMEMBERTYPECODE = New DataColumn("MEMBERTYPECODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEMBERTYPECODE)
            Me.columnCOMPANY = New DataColumn("COMPANY", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCOMPANY)
            Me.columnSUBCD = New DataColumn("SUBCD", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSUBCD)
            Me.columnMCODE = New DataColumn("MCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMCODE)
            Me.columnMNAME = New DataColumn("MNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMNAME)
            Me.columnMID = New DataColumn("MID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMID)
            Me.columnDOB = New DataColumn("DOB", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDOB)
            Me.columnDOJ = New DataColumn("DOJ", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDOJ)
            Me.columnSEX = New DataColumn("SEX", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSEX)
            Me.columnMARITALSTATUS = New DataColumn("MARITALSTATUS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMARITALSTATUS)
            Me.columnSPOUSE = New DataColumn("SPOUSE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSPOUSE)
            Me.columnBG = New DataColumn("BG", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBG)
            Me.columnOCCUPATION = New DataColumn("OCCUPATION", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOCCUPATION)
            Me.columnBANKER = New DataColumn("BANKER", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBANKER)
            Me.columnBANKACNO = New DataColumn("BANKACNO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBANKACNO)
            Me.columnHOBBIES = New DataColumn("HOBBIES", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHOBBIES)
            Me.columnOTHERINFO = New DataColumn("OTHERINFO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOTHERINFO)
            Me.columnRESIDENT = New DataColumn("RESIDENT", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRESIDENT)
            Me.columnEQUALIFICATION = New DataColumn("EQUALIFICATION", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEQUALIFICATION)
            Me.columnPQUALIFICATION = New DataColumn("PQUALIFICATION", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPQUALIFICATION)
            Me.columnPROPOSER = New DataColumn("PROPOSER", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPROPOSER)
            Me.columnPROPOSERNAME = New DataColumn("PROPOSERNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPROPOSERNAME)
            Me.columnSECONDER = New DataColumn("SECONDER", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSECONDER)
            Me.columnSECONDERNAME = New DataColumn("SECONDERNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSECONDERNAME)
            Me.columnPAcopyst = New DataColumn("PAcopyst", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPAcopyst)
            Me.columnPADD1 = New DataColumn("PADD1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPADD1)
            Me.columnPADD2 = New DataColumn("PADD2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPADD2)
            Me.columnPADD3 = New DataColumn("PADD3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPADD3)
            Me.columnPCITY = New DataColumn("PCITY", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPCITY)
            Me.columnPSTATE = New DataColumn("PSTATE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPSTATE)
            Me.columnPCOUNTRY = New DataColumn("PCOUNTRY", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPCOUNTRY)
            Me.columnPPIN = New DataColumn("PPIN", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPPIN)
            Me.columnPPHONE1 = New DataColumn("PPHONE1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPPHONE1)
            Me.columnPPHONE2 = New DataColumn("PPHONE2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPPHONE2)
            Me.columnPCELL = New DataColumn("PCELL", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPCELL)
            Me.columnPEMAIL = New DataColumn("PEMAIL", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPEMAIL)
            Me.columnRAcopyst = New DataColumn("RAcopyst", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRAcopyst)
            Me.columnCADD1 = New DataColumn("CADD1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCADD1)
            Me.columnCADD2 = New DataColumn("CADD2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCADD2)
            Me.columnCADD3 = New DataColumn("CADD3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCADD3)
            Me.columnCCITY = New DataColumn("CCITY", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCCITY)
            Me.columnCSTATE = New DataColumn("CSTATE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCSTATE)
            Me.columnCCOUNTRY = New DataColumn("CCOUNTRY", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCCOUNTRY)
            Me.columnCPIN = New DataColumn("CPIN", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCPIN)
            Me.columnCPHONE1 = New DataColumn("CPHONE1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCPHONE1)
            Me.columnCPHONE2 = New DataColumn("CPHONE2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCPHONE2)
            Me.columnCCELL = New DataColumn("CCELL", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCCELL)
            Me.columnCEMAIL = New DataColumn("CEMAIL", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCEMAIL)
            Me.columnCONTADD1 = New DataColumn("CONTADD1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCONTADD1)
            Me.columnCONTADD2 = New DataColumn("CONTADD2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCONTADD2)
            Me.columnCONTADD3 = New DataColumn("CONTADD3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCONTADD3)
            Me.columnCONTCITY = New DataColumn("CONTCITY", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCONTCITY)
            Me.columnCONTSTATE = New DataColumn("CONTSTATE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCONTSTATE)
            Me.columnCONTCOUNTRY = New DataColumn("CONTCOUNTRY", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCONTCOUNTRY)
            Me.columnCONTPIN = New DataColumn("CONTPIN", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCONTPIN)
            Me.columnCONTPHONE1 = New DataColumn("CONTPHONE1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCONTPHONE1)
            Me.columnCONTPHONE2 = New DataColumn("CONTPHONE2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCONTPHONE2)
            Me.columnCONTCELL = New DataColumn("CONTCELL", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCONTCELL)
            Me.columnCONTEMAIL = New DataColumn("CONTEMAIL", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCONTEMAIL)
            Me.columnEMPTYPE = New DataColumn("EMPTYPE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEMPTYPE)
            Me.columnBUSINESSNAME = New DataColumn("BUSINESSNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBUSINESSNAME)
            Me.columnBAcopyst = New DataColumn("BAcopyst", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBAcopyst)
            Me.columnOADD1 = New DataColumn("OADD1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOADD1)
            Me.columnOADD2 = New DataColumn("OADD2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOADD2)
            Me.columnOADD3 = New DataColumn("OADD3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOADD3)
            Me.columnOCITY = New DataColumn("OCITY", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOCITY)
            Me.columnOSTATE = New DataColumn("OSTATE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOSTATE)
            Me.columnOCOUNTRY = New DataColumn("OCOUNTRY", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOCOUNTRY)
            Me.columnOPIN = New DataColumn("OPIN", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOPIN)
            Me.columnOPHONE1 = New DataColumn("OPHONE1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOPHONE1)
            Me.columnOPHONE2 = New DataColumn("OPHONE2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOPHONE2)
            Me.columnOCELL = New DataColumn("OCELL", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOCELL)
            Me.columnOEMAIL = New DataColumn("OEMAIL", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOEMAIL)
            Me.columnDOEPROFESSION = New DataColumn("DOEPROFESSION", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDOEPROFESSION)
            Me.columnBUSINESSNATURE = New DataColumn("BUSINESSNATURE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBUSINESSNATURE)
            Me.columnPOSITIONHELD = New DataColumn("POSITIONHELD", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPOSITIONHELD)
            Me.columnSERVICENAME = New DataColumn("SERVICENAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSERVICENAME)
            Me.columnSERVICEYEAR = New DataColumn("SERVICEYEAR", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSERVICEYEAR)
            Me.columnPANO = New DataColumn("PANO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPANO)
            Me.columnBBANKER = New DataColumn("BBANKER", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBBANKER)
            Me.columnCCNO = New DataColumn("CCNO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCCNO)
            Me.columnANNUALINCOME = New DataColumn("ANNUALINCOME", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnANNUALINCOME)
            Me.columnUPDUSERID = New DataColumn("UPDUSERID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUPDUSERID)
            Me.columnUPDDATETIME = New DataColumn("UPDDATETIME", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUPDDATETIME)
            Me.columnTERMINATION = New DataColumn("TERMINATION", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTERMINATION)
            Me.columnTRN_CON_DATE = New DataColumn("TRN_CON_DATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTRN_CON_DATE)
            Me.columnCON_MCODE = New DataColumn("CON_MCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCON_MCODE)
            Me.columnPFAX = New DataColumn("PFAX", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPFAX)
            Me.columnCFAX = New DataColumn("CFAX", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCFAX)
            Me.columnCONTFAX = New DataColumn("CONTFAX", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCONTFAX)
            Me.columnREASON = New DataColumn("REASON", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnREASON)
            Me.columnPHOTO = New DataColumn("PHOTO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPHOTO)
            Me.columnCREDITLIMIT = New DataColumn("CREDITLIMIT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCREDITLIMIT)
            Me.columnLIMITAMOUNT = New DataColumn("LIMITAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLIMITAMOUNT)
            Me.columnWEBSITE = New DataColumn("WEBSITE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnWEBSITE)
            Me.columnImagefile = New DataColumn("Imagefile", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnImagefile)
            Me.columnsizefield = New DataColumn("sizefield", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsizefield)
            Me.columnVdate = New DataColumn("Vdate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVdate)
            Me.columnVyear = New DataColumn("Vyear", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVyear)
            Me.columnValiddate = New DataColumn("Validdate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnValiddate)
            Me.columnTempTermination = New DataColumn("TempTermination", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTempTermination)
            Me.columnTempTermDate = New DataColumn("TempTermDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTempTermDate)
            Me.columnTempTermReason = New DataColumn("TempTermReason", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTempTermReason)
            Me.columnMemberid = New DataColumn("Memberid", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMemberid)
            Me.columnEndingDate = New DataColumn("EndingDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEndingDate)
            Me.columnTotalYears = New DataColumn("TotalYears", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTotalYears)
            Me.columnCardNo = New DataColumn("CardNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCardNo)
            Me.columnCardExpDate = New DataColumn("CardExpDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCardExpDate)
            Me.columnValidity = New DataColumn("Validity", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnValidity)
            Me.columnPeriod = New DataColumn("Period", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPeriod)
            Me.columnCreditcardno = New DataColumn("Creditcardno", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCreditcardno)
            Me.columnCreditExpDt = New DataColumn("CreditExpDt", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCreditExpDt)
            Me.columnType = New DataColumn("Type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnType)
            Me.columnSTATUSDATEFROM = New DataColumn("STATUSDATEFROM", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSTATUSDATEFROM)
            Me.columnSTATUSDATETO = New DataColumn("STATUSDATETO", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSTATUSDATETO)
            Me.columnCurentStatus = New DataColumn("CurentStatus", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCurentStatus)
            Me.columnFirstName = New DataColumn("FirstName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFirstName)
            Me.columnMiddleName = New DataColumn("MiddleName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMiddleName)
            Me.columnSurname = New DataColumn("Surname", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSurname)
            Me.column_Alias = New DataColumn("Alias", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column_Alias)
            Me.columnPrefix = New DataColumn("Prefix", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPrefix)
            Me.columnBillType = New DataColumn("BillType", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBillType)
            Me.columnNationality = New DataColumn("Nationality", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNationality)
            Me.columnNationalityAtbirth = New DataColumn("NationalityAtbirth", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNationalityAtbirth)
            Me.columnBillbasis = New DataColumn("Billbasis", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBillbasis)
            Me.columnBillHead = New DataColumn("BillHead", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBillHead)
            Me.columnGDRLocker = New DataColumn("GDRLocker", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGDRLocker)
            Me.columnLDRLocker = New DataColumn("LDRLocker", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLDRLocker)
            Me.columnHPLocker = New DataColumn("HPLocker", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHPLocker)
            Me.columnMembershipTo = New DataColumn("MembershipTo", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMembershipTo)
            Me.columnsalut = New DataColumn("salut", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsalut)
            Me.columnEntranceFee = New DataColumn("EntranceFee", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEntranceFee)
            Me.columnDevelopmentFee = New DataColumn("DevelopmentFee", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDevelopmentFee)
            Me.columnCriditNumber = New DataColumn("CriditNumber", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCriditNumber)
            Me.columnSecurityDeposit = New DataColumn("SecurityDeposit", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSecurityDeposit)
            Me.columnPlaceOfBirth = New DataColumn("PlaceOfBirth", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPlaceOfBirth)
            Me.columnCountryOfBirth = New DataColumn("CountryOfBirth", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCountryOfBirth)
            Me.columnLastArrivalInCal = New DataColumn("LastArrivalInCal", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLastArrivalInCal)
            Me.columnPeriodOfStay_year = New DataColumn("PeriodOfStay_year", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPeriodOfStay_year)
            Me.columnPeriodOfStay_Month = New DataColumn("PeriodOfStay_Month", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPeriodOfStay_Month)
            Me.columnPreviouslyProposed = New DataColumn("PreviouslyProposed", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPreviouslyProposed)
            Me.columnNoOfTimesProposed = New DataColumn("NoOfTimesProposed", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNoOfTimesProposed)
            Me.columnDateOfProposal = New DataColumn("DateOfProposal", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDateOfProposal)
            Me.columnResultOfProposal = New DataColumn("ResultOfProposal", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnResultOfProposal)
            Me.columnElected = New DataColumn("Elected", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnElected)
            Me.columnFatherName = New DataColumn("FatherName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFatherName)
            Me.columnDOBfather = New DataColumn("DOBfather", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDOBfather)
            Me.columnWifeDOB = New DataColumn("WifeDOB", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnWifeDOB)
            Me.columnMaidenNameWife = New DataColumn("MaidenNameWife", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMaidenNameWife)
            Me.columnNationalityWife = New DataColumn("NationalityWife", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNationalityWife)
            Me.columnWifesFatherName = New DataColumn("WifesFatherName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnWifesFatherName)
            Me.columnWifeFatherDOB = New DataColumn("WifeFatherDOB", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnWifeFatherDOB)
            Me.columnApplNo = New DataColumn("ApplNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnApplNo)
            Me.columnApplDate = New DataColumn("ApplDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnApplDate)
            Me.columnCorporatest = New DataColumn("Corporatest", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCorporatest)
            Me.columnCorporateCode = New DataColumn("CorporateCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCorporateCode)
            Me.columnCompName = New DataColumn("CompName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCompName)
            Me.columnDesignation = New DataColumn("Designation", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDesignation)
            Me.columnProfessionInfo = New DataColumn("ProfessionInfo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnProfessionInfo)
            Me.columnBuisnessInfo = New DataColumn("BuisnessInfo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBuisnessInfo)
            Me.columnProducts = New DataColumn("Products", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnProducts)
            Me.columnAgentsDealers = New DataColumn("AgentsDealers", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAgentsDealers)
            Me.columnESTDdate = New DataColumn("ESTDdate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnESTDdate)
            Me.columnNoOfEmp = New DataColumn("NoOfEmp", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNoOfEmp)
            Me.columnTurnover = New DataColumn("Turnover", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTurnover)
            Me.columnClient = New DataColumn("Client", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnClient)
            Me.columnAppliedBut = New DataColumn("AppliedBut", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAppliedBut)
            Me.columnPositionInChamber = New DataColumn("PositionInChamber", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPositionInChamber)
            Me.columnQulificationstatus = New DataColumn("Qulificationstatus", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQulificationstatus)
            Me.columnQualification1 = New DataColumn("Qualification1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQualification1)
            Me.columnDetails1 = New DataColumn("Details1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDetails1)
            Me.columnYearOfPassing1 = New DataColumn("YearOfPassing1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnYearOfPassing1)
            Me.columnInstitute1 = New DataColumn("Institute1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnInstitute1)
            Me.columnDivision1 = New DataColumn("Division1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDivision1)
            Me.columnQualification2 = New DataColumn("Qualification2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQualification2)
            Me.columnDetails2 = New DataColumn("Details2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDetails2)
            Me.columnYearOfPassing2 = New DataColumn("YearOfPassing2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnYearOfPassing2)
            Me.columnInstitute2 = New DataColumn("Institute2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnInstitute2)
            Me.columnDivision2 = New DataColumn("Division2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDivision2)
            Me.columnQualification3 = New DataColumn("Qualification3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQualification3)
            Me.columnDetails3 = New DataColumn("Details3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDetails3)
            Me.columnYearOfPassing3 = New DataColumn("YearOfPassing3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnYearOfPassing3)
            Me.columnInstitute3 = New DataColumn("Institute3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnInstitute3)
            Me.columnDivision3 = New DataColumn("Division3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDivision3)
            Me.columnsportstatus = New DataColumn("sportstatus", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsportstatus)
            Me.columnGameType1 = New DataColumn("GameType1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGameType1)
            Me.columnNameOfGame1 = New DataColumn("NameOfGame1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNameOfGame1)
            Me.columnDescription1 = New DataColumn("Description1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescription1)
            Me.columnGameType2 = New DataColumn("GameType2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGameType2)
            Me.columnNameofGame2 = New DataColumn("NameofGame2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNameofGame2)
            Me.columnDescription2 = New DataColumn("Description2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescription2)
            Me.columnGameType3 = New DataColumn("GameType3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGameType3)
            Me.columnNameOfGame3 = New DataColumn("NameOfGame3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNameOfGame3)
            Me.columnDescription3 = New DataColumn("Description3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescription3)
            Me.columnChildstatus = New DataColumn("Childstatus", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnChildstatus)
            Me.columnChildName1 = New DataColumn("ChildName1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnChildName1)
            Me.columnChildDob1 = New DataColumn("ChildDob1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnChildDob1)
            Me.columnChildSex1 = New DataColumn("ChildSex1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnChildSex1)
            Me.columnChildExpairy1 = New DataColumn("ChildExpairy1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnChildExpairy1)
            Me.columnChildName2 = New DataColumn("ChildName2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnChildName2)
            Me.columnChildDob2 = New DataColumn("ChildDob2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnChildDob2)
            Me.columnChildSex2 = New DataColumn("ChildSex2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnChildSex2)
            Me.columnChildExpairy2 = New DataColumn("ChildExpairy2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnChildExpairy2)
            Me.columnChildName3 = New DataColumn("ChildName3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnChildName3)
            Me.columnChildDob3 = New DataColumn("ChildDob3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnChildDob3)
            Me.columnChildSex3 = New DataColumn("ChildSex3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnChildSex3)
            Me.columnchildExpairy3 = New DataColumn("childExpairy3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnchildExpairy3)
            Me.columnClubstatus = New DataColumn("Clubstatus", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnClubstatus)
            Me.columnOtherClubName1 = New DataColumn("OtherClubName1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOtherClubName1)
            Me.columnOCAddress1 = New DataColumn("OCAddress1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOCAddress1)
            Me.columnOCStatus1 = New DataColumn("OCStatus1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOCStatus1)
            Me.columnOtherClubName2 = New DataColumn("OtherClubName2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOtherClubName2)
            Me.columnOCAddress2 = New DataColumn("OCAddress2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOCAddress2)
            Me.columnOCStatus2 = New DataColumn("OCStatus2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOCStatus2)
            Me.columnOtherClubname3 = New DataColumn("OtherClubname3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOtherClubname3)
            Me.columnOCAddress3 = New DataColumn("OCAddress3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOCAddress3)
            Me.columnOCStataus = New DataColumn("OCStataus", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOCStataus)
            Me.columnadduser = New DataColumn("adduser", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnadduser)
            Me.columnadddate = New DataColumn("adddate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnadddate)
            Me.columnfreeze = New DataColumn("freeze", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfreeze)
            Me.columnRelativestatus = New DataColumn("Relativestatus", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRelativestatus)
            Me.columnRelativeName1 = New DataColumn("RelativeName1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRelativeName1)
            Me.columnRelation1 = New DataColumn("Relation1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRelation1)
            Me.columndateofbirth1 = New DataColumn("dateofbirth1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndateofbirth1)
            Me.columnRelativeage1 = New DataColumn("Relativeage1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRelativeage1)
            Me.columnRelativeSex1 = New DataColumn("RelativeSex1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRelativeSex1)
            Me.columnRelativeaddress1 = New DataColumn("Relativeaddress1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRelativeaddress1)
            Me.columnRelativeName2 = New DataColumn("RelativeName2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRelativeName2)
            Me.columnRelation2 = New DataColumn("Relation2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRelation2)
            Me.columndateofbirth2 = New DataColumn("dateofbirth2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndateofbirth2)
            Me.columnRelativeage2 = New DataColumn("Relativeage2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRelativeage2)
            Me.columnRelativeSex2 = New DataColumn("RelativeSex2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRelativeSex2)
            Me.columnRelativeaddress2 = New DataColumn("Relativeaddress2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRelativeaddress2)
            Me.columnRelativeName3 = New DataColumn("RelativeName3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRelativeName3)
            Me.columnRelation3 = New DataColumn("Relation3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRelation3)
            Me.columndateofbirth3 = New DataColumn("dateofbirth3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndateofbirth3)
            Me.columnRelativeage3 = New DataColumn("Relativeage3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRelativeage3)
            Me.columnRelativeSex3 = New DataColumn("RelativeSex3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRelativeSex3)
            Me.columnRelativeaddress3 = New DataColumn("Relativeaddress3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRelativeaddress3)
            Me.columnreferentialst = New DataColumn("referentialst", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnreferentialst)
            Me.columnmem_code1 = New DataColumn("mem_code1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmem_code1)
            Me.columnmem_name1 = New DataColumn("mem_name1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmem_name1)
            Me.columnrefmem_date1 = New DataColumn("refmem_date1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrefmem_date1)
            Me.columndeleted1 = New DataColumn("deleted1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndeleted1)
            Me.columnmem_code2 = New DataColumn("mem_code2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmem_code2)
            Me.columnmem_name2 = New DataColumn("mem_name2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmem_name2)
            Me.columnrefmem_date2 = New DataColumn("refmem_date2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrefmem_date2)
            Me.columndeleted2 = New DataColumn("deleted2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndeleted2)
            Me.columnmem_code3 = New DataColumn("mem_code3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmem_code3)
            Me.columnmem_name3 = New DataColumn("mem_name3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmem_name3)
            Me.columnrefmem_date3 = New DataColumn("refmem_date3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrefmem_date3)
            Me.columndeleted3 = New DataColumn("deleted3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndeleted3)
            Me.columnentrancefeest = New DataColumn("entrancefeest", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnentrancefeest)
            Me.columnreceiptno1 = New DataColumn("receiptno1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnreceiptno1)
            Me.columnstartdate1 = New DataColumn("startdate1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstartdate1)
            Me.columnamount1 = New DataColumn("amount1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount1)
            Me.columnreceiptno2 = New DataColumn("receiptno2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnreceiptno2)
            Me.columnstartdate2 = New DataColumn("startdate2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstartdate2)
            Me.columnamount2 = New DataColumn("amount2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount2)
            Me.columnreceiptno3 = New DataColumn("receiptno3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnreceiptno3)
            Me.columnstartdate3 = New DataColumn("startdate3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstartdate3)
            Me.columnamount3 = New DataColumn("amount3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount3)
            Me.columnOLD = New DataColumn("OLD", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOLD)
            Me.columnCardAmt = New DataColumn("CardAmt", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCardAmt)
            Me.columnMINIMUMUSAGE = New DataColumn("MINIMUMUSAGE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMINIMUMUSAGE)
            Me.columnCREDITNO = New DataColumn("CREDITNO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCREDITNO)
            Me.columnSPOUSEMOBILE = New DataColumn("SPOUSEMOBILE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSPOUSEMOBILE)
            Me.columnPADD4 = New DataColumn("PADD4", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPADD4)
            Me.columnCADD4 = New DataColumn("CADD4", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCADD4)
            Me.columnADD1 = New DataColumn("ADD1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnADD1)
            Me.columnADD2 = New DataColumn("ADD2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnADD2)
            Me.columnADD3 = New DataColumn("ADD3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnADD3)
            Me.columnCITY = New DataColumn("CITY", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCITY)
            Me.columnSTATE = New DataColumn("STATE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSTATE)
            Me.columncountry = New DataColumn("country", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncountry)
            Me.columnPINCODE = New DataColumn("PINCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPINCODE)
            Me.columnPHONE1 = New DataColumn("PHONE1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPHONE1)
            Me.columnPHONE2 = New DataColumn("PHONE2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPHONE2)
            Me.columnSequenceNo.AutoIncrement = true
            Me.columnSequenceNo.AllowDBNull = false
            Me.columnSequenceNo.ReadOnly = true
            Me.columnMCODE.AllowDBNull = false
        End Sub
        
        Public Function NewmembermasterRow() As membermasterRow
            Return CType(Me.NewRow,membermasterRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New membermasterRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(membermasterRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.membermasterRowChangedEvent) Is Nothing) Then
                RaiseEvent membermasterRowChanged(Me, New membermasterRowChangeEvent(CType(e.Row,membermasterRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.membermasterRowChangingEvent) Is Nothing) Then
                RaiseEvent membermasterRowChanging(Me, New membermasterRowChangeEvent(CType(e.Row,membermasterRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.membermasterRowDeletedEvent) Is Nothing) Then
                RaiseEvent membermasterRowDeleted(Me, New membermasterRowChangeEvent(CType(e.Row,membermasterRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.membermasterRowDeletingEvent) Is Nothing) Then
                RaiseEvent membermasterRowDeleting(Me, New membermasterRowChangeEvent(CType(e.Row,membermasterRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovemembermasterRow(ByVal row As membermasterRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class membermasterRow
        Inherits DataRow
        
        Private tablemembermaster As membermasterDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablemembermaster = CType(Me.Table,membermasterDataTable)
        End Sub
        
        Public Property SequenceNo As Decimal
            Get
                Return CType(Me(Me.tablemembermaster.SequenceNoColumn),Decimal)
            End Get
            Set
                Me(Me.tablemembermaster.SequenceNoColumn) = value
            End Set
        End Property
        
        Public Property TAG As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.TAGColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.TAGColumn) = value
            End Set
        End Property
        
        Public Property MEMBERTYPECODE As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.MEMBERTYPECODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.MEMBERTYPECODEColumn) = value
            End Set
        End Property
        
        Public Property COMPANY As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.COMPANYColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.COMPANYColumn) = value
            End Set
        End Property
        
        Public Property SUBCD As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.SUBCDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.SUBCDColumn) = value
            End Set
        End Property
        
        Public Property MCODE As String
            Get
                Return CType(Me(Me.tablemembermaster.MCODEColumn),String)
            End Get
            Set
                Me(Me.tablemembermaster.MCODEColumn) = value
            End Set
        End Property
        
        Public Property MNAME As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.MNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.MNAMEColumn) = value
            End Set
        End Property
        
        Public Property MID As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.MIDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.MIDColumn) = value
            End Set
        End Property
        
        Public Property DOB As Date
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.DOBColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.DOBColumn) = value
            End Set
        End Property
        
        Public Property DOJ As Date
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.DOJColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.DOJColumn) = value
            End Set
        End Property
        
        Public Property SEX As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.SEXColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.SEXColumn) = value
            End Set
        End Property
        
        Public Property MARITALSTATUS As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.MARITALSTATUSColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.MARITALSTATUSColumn) = value
            End Set
        End Property
        
        Public Property SPOUSE As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.SPOUSEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.SPOUSEColumn) = value
            End Set
        End Property
        
        Public Property BG As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.BGColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.BGColumn) = value
            End Set
        End Property
        
        Public Property OCCUPATION As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.OCCUPATIONColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.OCCUPATIONColumn) = value
            End Set
        End Property
        
        Public Property BANKER As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.BANKERColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.BANKERColumn) = value
            End Set
        End Property
        
        Public Property BANKACNO As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.BANKACNOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.BANKACNOColumn) = value
            End Set
        End Property
        
        Public Property HOBBIES As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.HOBBIESColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.HOBBIESColumn) = value
            End Set
        End Property
        
        Public Property OTHERINFO As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.OTHERINFOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.OTHERINFOColumn) = value
            End Set
        End Property
        
        Public Property RESIDENT As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.RESIDENTColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.RESIDENTColumn) = value
            End Set
        End Property
        
        Public Property EQUALIFICATION As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.EQUALIFICATIONColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.EQUALIFICATIONColumn) = value
            End Set
        End Property
        
        Public Property PQUALIFICATION As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.PQUALIFICATIONColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.PQUALIFICATIONColumn) = value
            End Set
        End Property
        
        Public Property PROPOSER As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.PROPOSERColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.PROPOSERColumn) = value
            End Set
        End Property
        
        Public Property PROPOSERNAME As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.PROPOSERNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.PROPOSERNAMEColumn) = value
            End Set
        End Property
        
        Public Property SECONDER As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.SECONDERColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.SECONDERColumn) = value
            End Set
        End Property
        
        Public Property SECONDERNAME As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.SECONDERNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.SECONDERNAMEColumn) = value
            End Set
        End Property
        
        Public Property PAcopyst As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.PAcopystColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.PAcopystColumn) = value
            End Set
        End Property
        
        Public Property PADD1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.PADD1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.PADD1Column) = value
            End Set
        End Property
        
        Public Property PADD2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.PADD2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.PADD2Column) = value
            End Set
        End Property
        
        Public Property PADD3 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.PADD3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.PADD3Column) = value
            End Set
        End Property
        
        Public Property PCITY As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.PCITYColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.PCITYColumn) = value
            End Set
        End Property
        
        Public Property PSTATE As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.PSTATEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.PSTATEColumn) = value
            End Set
        End Property
        
        Public Property PCOUNTRY As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.PCOUNTRYColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.PCOUNTRYColumn) = value
            End Set
        End Property
        
        Public Property PPIN As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.PPINColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.PPINColumn) = value
            End Set
        End Property
        
        Public Property PPHONE1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.PPHONE1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.PPHONE1Column) = value
            End Set
        End Property
        
        Public Property PPHONE2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.PPHONE2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.PPHONE2Column) = value
            End Set
        End Property
        
        Public Property PCELL As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.PCELLColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.PCELLColumn) = value
            End Set
        End Property
        
        Public Property PEMAIL As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.PEMAILColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.PEMAILColumn) = value
            End Set
        End Property
        
        Public Property RAcopyst As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.RAcopystColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.RAcopystColumn) = value
            End Set
        End Property
        
        Public Property CADD1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.CADD1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.CADD1Column) = value
            End Set
        End Property
        
        Public Property CADD2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.CADD2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.CADD2Column) = value
            End Set
        End Property
        
        Public Property CADD3 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.CADD3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.CADD3Column) = value
            End Set
        End Property
        
        Public Property CCITY As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.CCITYColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.CCITYColumn) = value
            End Set
        End Property
        
        Public Property CSTATE As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.CSTATEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.CSTATEColumn) = value
            End Set
        End Property
        
        Public Property CCOUNTRY As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.CCOUNTRYColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.CCOUNTRYColumn) = value
            End Set
        End Property
        
        Public Property CPIN As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.CPINColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.CPINColumn) = value
            End Set
        End Property
        
        Public Property CPHONE1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.CPHONE1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.CPHONE1Column) = value
            End Set
        End Property
        
        Public Property CPHONE2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.CPHONE2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.CPHONE2Column) = value
            End Set
        End Property
        
        Public Property CCELL As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.CCELLColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.CCELLColumn) = value
            End Set
        End Property
        
        Public Property CEMAIL As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.CEMAILColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.CEMAILColumn) = value
            End Set
        End Property
        
        Public Property CONTADD1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.CONTADD1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.CONTADD1Column) = value
            End Set
        End Property
        
        Public Property CONTADD2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.CONTADD2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.CONTADD2Column) = value
            End Set
        End Property
        
        Public Property CONTADD3 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.CONTADD3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.CONTADD3Column) = value
            End Set
        End Property
        
        Public Property CONTCITY As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.CONTCITYColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.CONTCITYColumn) = value
            End Set
        End Property
        
        Public Property CONTSTATE As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.CONTSTATEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.CONTSTATEColumn) = value
            End Set
        End Property
        
        Public Property CONTCOUNTRY As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.CONTCOUNTRYColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.CONTCOUNTRYColumn) = value
            End Set
        End Property
        
        Public Property CONTPIN As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.CONTPINColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.CONTPINColumn) = value
            End Set
        End Property
        
        Public Property CONTPHONE1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.CONTPHONE1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.CONTPHONE1Column) = value
            End Set
        End Property
        
        Public Property CONTPHONE2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.CONTPHONE2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.CONTPHONE2Column) = value
            End Set
        End Property
        
        Public Property CONTCELL As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.CONTCELLColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.CONTCELLColumn) = value
            End Set
        End Property
        
        Public Property CONTEMAIL As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.CONTEMAILColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.CONTEMAILColumn) = value
            End Set
        End Property
        
        Public Property EMPTYPE As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.EMPTYPEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.EMPTYPEColumn) = value
            End Set
        End Property
        
        Public Property BUSINESSNAME As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.BUSINESSNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.BUSINESSNAMEColumn) = value
            End Set
        End Property
        
        Public Property BAcopyst As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.BAcopystColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.BAcopystColumn) = value
            End Set
        End Property
        
        Public Property OADD1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.OADD1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.OADD1Column) = value
            End Set
        End Property
        
        Public Property OADD2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.OADD2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.OADD2Column) = value
            End Set
        End Property
        
        Public Property OADD3 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.OADD3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.OADD3Column) = value
            End Set
        End Property
        
        Public Property OCITY As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.OCITYColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.OCITYColumn) = value
            End Set
        End Property
        
        Public Property OSTATE As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.OSTATEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.OSTATEColumn) = value
            End Set
        End Property
        
        Public Property OCOUNTRY As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.OCOUNTRYColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.OCOUNTRYColumn) = value
            End Set
        End Property
        
        Public Property OPIN As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.OPINColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.OPINColumn) = value
            End Set
        End Property
        
        Public Property OPHONE1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.OPHONE1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.OPHONE1Column) = value
            End Set
        End Property
        
        Public Property OPHONE2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.OPHONE2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.OPHONE2Column) = value
            End Set
        End Property
        
        Public Property OCELL As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.OCELLColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.OCELLColumn) = value
            End Set
        End Property
        
        Public Property OEMAIL As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.OEMAILColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.OEMAILColumn) = value
            End Set
        End Property
        
        Public Property DOEPROFESSION As Date
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.DOEPROFESSIONColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.DOEPROFESSIONColumn) = value
            End Set
        End Property
        
        Public Property BUSINESSNATURE As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.BUSINESSNATUREColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.BUSINESSNATUREColumn) = value
            End Set
        End Property
        
        Public Property POSITIONHELD As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.POSITIONHELDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.POSITIONHELDColumn) = value
            End Set
        End Property
        
        Public Property SERVICENAME As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.SERVICENAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.SERVICENAMEColumn) = value
            End Set
        End Property
        
        Public Property SERVICEYEAR As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.SERVICEYEARColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.SERVICEYEARColumn) = value
            End Set
        End Property
        
        Public Property PANO As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.PANOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.PANOColumn) = value
            End Set
        End Property
        
        Public Property BBANKER As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.BBANKERColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.BBANKERColumn) = value
            End Set
        End Property
        
        Public Property CCNO As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.CCNOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.CCNOColumn) = value
            End Set
        End Property
        
        Public Property ANNUALINCOME As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.ANNUALINCOMEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.ANNUALINCOMEColumn) = value
            End Set
        End Property
        
        Public Property UPDUSERID As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.UPDUSERIDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.UPDUSERIDColumn) = value
            End Set
        End Property
        
        Public Property UPDDATETIME As Date
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.UPDDATETIMEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.UPDDATETIMEColumn) = value
            End Set
        End Property
        
        Public Property TERMINATION As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.TERMINATIONColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.TERMINATIONColumn) = value
            End Set
        End Property
        
        Public Property TRN_CON_DATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.TRN_CON_DATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.TRN_CON_DATEColumn) = value
            End Set
        End Property
        
        Public Property CON_MCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.CON_MCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.CON_MCODEColumn) = value
            End Set
        End Property
        
        Public Property PFAX As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.PFAXColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.PFAXColumn) = value
            End Set
        End Property
        
        Public Property CFAX As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.CFAXColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.CFAXColumn) = value
            End Set
        End Property
        
        Public Property CONTFAX As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.CONTFAXColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.CONTFAXColumn) = value
            End Set
        End Property
        
        Public Property REASON As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.REASONColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.REASONColumn) = value
            End Set
        End Property
        
        Public Property PHOTO As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.PHOTOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.PHOTOColumn) = value
            End Set
        End Property
        
        Public Property CREDITLIMIT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.CREDITLIMITColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.CREDITLIMITColumn) = value
            End Set
        End Property
        
        Public Property LIMITAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.LIMITAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.LIMITAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property WEBSITE As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.WEBSITEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.WEBSITEColumn) = value
            End Set
        End Property
        
        Public Property Imagefile As Byte()
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.ImagefileColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.ImagefileColumn) = value
            End Set
        End Property
        
        Public Property sizefield As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.sizefieldColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.sizefieldColumn) = value
            End Set
        End Property
        
        Public Property Vdate As Date
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.VdateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.VdateColumn) = value
            End Set
        End Property
        
        Public Property Vyear As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.VyearColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.VyearColumn) = value
            End Set
        End Property
        
        Public Property Validdate As Date
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.ValiddateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.ValiddateColumn) = value
            End Set
        End Property
        
        Public Property TempTermination As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.TempTerminationColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.TempTerminationColumn) = value
            End Set
        End Property
        
        Public Property TempTermDate As Date
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.TempTermDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.TempTermDateColumn) = value
            End Set
        End Property
        
        Public Property TempTermReason As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.TempTermReasonColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.TempTermReasonColumn) = value
            End Set
        End Property
        
        Public Property Memberid As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.MemberidColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.MemberidColumn) = value
            End Set
        End Property
        
        Public Property EndingDate As Date
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.EndingDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.EndingDateColumn) = value
            End Set
        End Property
        
        Public Property TotalYears As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.TotalYearsColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.TotalYearsColumn) = value
            End Set
        End Property
        
        Public Property CardNo As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.CardNoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.CardNoColumn) = value
            End Set
        End Property
        
        Public Property CardExpDate As Date
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.CardExpDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.CardExpDateColumn) = value
            End Set
        End Property
        
        Public Property Validity As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.ValidityColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.ValidityColumn) = value
            End Set
        End Property
        
        Public Property Period As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.PeriodColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.PeriodColumn) = value
            End Set
        End Property
        
        Public Property Creditcardno As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.CreditcardnoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.CreditcardnoColumn) = value
            End Set
        End Property
        
        Public Property CreditExpDt As Date
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.CreditExpDtColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.CreditExpDtColumn) = value
            End Set
        End Property
        
        Public Property Type As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.TypeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.TypeColumn) = value
            End Set
        End Property
        
        Public Property STATUSDATEFROM As Date
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.STATUSDATEFROMColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.STATUSDATEFROMColumn) = value
            End Set
        End Property
        
        Public Property STATUSDATETO As Date
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.STATUSDATETOColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.STATUSDATETOColumn) = value
            End Set
        End Property
        
        Public Property CurentStatus As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.CurentStatusColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.CurentStatusColumn) = value
            End Set
        End Property
        
        Public Property FirstName As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.FirstNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.FirstNameColumn) = value
            End Set
        End Property
        
        Public Property MiddleName As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.MiddleNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.MiddleNameColumn) = value
            End Set
        End Property
        
        Public Property Surname As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.SurnameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.SurnameColumn) = value
            End Set
        End Property
        
        Public Property _Alias As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster._AliasColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster._AliasColumn) = value
            End Set
        End Property
        
        Public Property Prefix As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.PrefixColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.PrefixColumn) = value
            End Set
        End Property
        
        Public Property BillType As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.BillTypeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.BillTypeColumn) = value
            End Set
        End Property
        
        Public Property Nationality As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.NationalityColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.NationalityColumn) = value
            End Set
        End Property
        
        Public Property NationalityAtbirth As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.NationalityAtbirthColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.NationalityAtbirthColumn) = value
            End Set
        End Property
        
        Public Property Billbasis As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.BillbasisColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.BillbasisColumn) = value
            End Set
        End Property
        
        Public Property BillHead As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.BillHeadColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.BillHeadColumn) = value
            End Set
        End Property
        
        Public Property GDRLocker As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.GDRLockerColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.GDRLockerColumn) = value
            End Set
        End Property
        
        Public Property LDRLocker As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.LDRLockerColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.LDRLockerColumn) = value
            End Set
        End Property
        
        Public Property HPLocker As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.HPLockerColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.HPLockerColumn) = value
            End Set
        End Property
        
        Public Property MembershipTo As Date
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.MembershipToColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.MembershipToColumn) = value
            End Set
        End Property
        
        Public Property salut As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.salutColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.salutColumn) = value
            End Set
        End Property
        
        Public Property EntranceFee As Double
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.EntranceFeeColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.EntranceFeeColumn) = value
            End Set
        End Property
        
        Public Property DevelopmentFee As Double
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.DevelopmentFeeColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.DevelopmentFeeColumn) = value
            End Set
        End Property
        
        Public Property CriditNumber As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.CriditNumberColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.CriditNumberColumn) = value
            End Set
        End Property
        
        Public Property SecurityDeposit As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.SecurityDepositColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.SecurityDepositColumn) = value
            End Set
        End Property
        
        Public Property PlaceOfBirth As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.PlaceOfBirthColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.PlaceOfBirthColumn) = value
            End Set
        End Property
        
        Public Property CountryOfBirth As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.CountryOfBirthColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.CountryOfBirthColumn) = value
            End Set
        End Property
        
        Public Property LastArrivalInCal As Date
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.LastArrivalInCalColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.LastArrivalInCalColumn) = value
            End Set
        End Property
        
        Public Property PeriodOfStay_year As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.PeriodOfStay_yearColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.PeriodOfStay_yearColumn) = value
            End Set
        End Property
        
        Public Property PeriodOfStay_Month As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.PeriodOfStay_MonthColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.PeriodOfStay_MonthColumn) = value
            End Set
        End Property
        
        Public Property PreviouslyProposed As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.PreviouslyProposedColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.PreviouslyProposedColumn) = value
            End Set
        End Property
        
        Public Property NoOfTimesProposed As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.NoOfTimesProposedColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.NoOfTimesProposedColumn) = value
            End Set
        End Property
        
        Public Property DateOfProposal As Date
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.DateOfProposalColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.DateOfProposalColumn) = value
            End Set
        End Property
        
        Public Property ResultOfProposal As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.ResultOfProposalColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.ResultOfProposalColumn) = value
            End Set
        End Property
        
        Public Property Elected As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.ElectedColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.ElectedColumn) = value
            End Set
        End Property
        
        Public Property FatherName As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.FatherNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.FatherNameColumn) = value
            End Set
        End Property
        
        Public Property DOBfather As Date
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.DOBfatherColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.DOBfatherColumn) = value
            End Set
        End Property
        
        Public Property WifeDOB As Date
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.WifeDOBColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.WifeDOBColumn) = value
            End Set
        End Property
        
        Public Property MaidenNameWife As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.MaidenNameWifeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.MaidenNameWifeColumn) = value
            End Set
        End Property
        
        Public Property NationalityWife As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.NationalityWifeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.NationalityWifeColumn) = value
            End Set
        End Property
        
        Public Property WifesFatherName As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.WifesFatherNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.WifesFatherNameColumn) = value
            End Set
        End Property
        
        Public Property WifeFatherDOB As Date
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.WifeFatherDOBColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.WifeFatherDOBColumn) = value
            End Set
        End Property
        
        Public Property ApplNo As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.ApplNoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.ApplNoColumn) = value
            End Set
        End Property
        
        Public Property ApplDate As Date
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.ApplDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.ApplDateColumn) = value
            End Set
        End Property
        
        Public Property Corporatest As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.CorporatestColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.CorporatestColumn) = value
            End Set
        End Property
        
        Public Property CorporateCode As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.CorporateCodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.CorporateCodeColumn) = value
            End Set
        End Property
        
        Public Property CompName As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.CompNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.CompNameColumn) = value
            End Set
        End Property
        
        Public Property Designation As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.DesignationColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.DesignationColumn) = value
            End Set
        End Property
        
        Public Property ProfessionInfo As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.ProfessionInfoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.ProfessionInfoColumn) = value
            End Set
        End Property
        
        Public Property BuisnessInfo As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.BuisnessInfoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.BuisnessInfoColumn) = value
            End Set
        End Property
        
        Public Property Products As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.ProductsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.ProductsColumn) = value
            End Set
        End Property
        
        Public Property AgentsDealers As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.AgentsDealersColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.AgentsDealersColumn) = value
            End Set
        End Property
        
        Public Property ESTDdate As Date
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.ESTDdateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.ESTDdateColumn) = value
            End Set
        End Property
        
        Public Property NoOfEmp As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.NoOfEmpColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.NoOfEmpColumn) = value
            End Set
        End Property
        
        Public Property Turnover As Double
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.TurnoverColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.TurnoverColumn) = value
            End Set
        End Property
        
        Public Property Client As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.ClientColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.ClientColumn) = value
            End Set
        End Property
        
        Public Property AppliedBut As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.AppliedButColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.AppliedButColumn) = value
            End Set
        End Property
        
        Public Property PositionInChamber As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.PositionInChamberColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.PositionInChamberColumn) = value
            End Set
        End Property
        
        Public Property Qulificationstatus As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.QulificationstatusColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.QulificationstatusColumn) = value
            End Set
        End Property
        
        Public Property Qualification1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.Qualification1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.Qualification1Column) = value
            End Set
        End Property
        
        Public Property Details1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.Details1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.Details1Column) = value
            End Set
        End Property
        
        Public Property YearOfPassing1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.YearOfPassing1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.YearOfPassing1Column) = value
            End Set
        End Property
        
        Public Property Institute1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.Institute1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.Institute1Column) = value
            End Set
        End Property
        
        Public Property Division1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.Division1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.Division1Column) = value
            End Set
        End Property
        
        Public Property Qualification2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.Qualification2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.Qualification2Column) = value
            End Set
        End Property
        
        Public Property Details2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.Details2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.Details2Column) = value
            End Set
        End Property
        
        Public Property YearOfPassing2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.YearOfPassing2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.YearOfPassing2Column) = value
            End Set
        End Property
        
        Public Property Institute2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.Institute2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.Institute2Column) = value
            End Set
        End Property
        
        Public Property Division2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.Division2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.Division2Column) = value
            End Set
        End Property
        
        Public Property Qualification3 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.Qualification3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.Qualification3Column) = value
            End Set
        End Property
        
        Public Property Details3 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.Details3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.Details3Column) = value
            End Set
        End Property
        
        Public Property YearOfPassing3 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.YearOfPassing3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.YearOfPassing3Column) = value
            End Set
        End Property
        
        Public Property Institute3 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.Institute3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.Institute3Column) = value
            End Set
        End Property
        
        Public Property Division3 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.Division3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.Division3Column) = value
            End Set
        End Property
        
        Public Property sportstatus As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.sportstatusColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.sportstatusColumn) = value
            End Set
        End Property
        
        Public Property GameType1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.GameType1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.GameType1Column) = value
            End Set
        End Property
        
        Public Property NameOfGame1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.NameOfGame1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.NameOfGame1Column) = value
            End Set
        End Property
        
        Public Property Description1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.Description1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.Description1Column) = value
            End Set
        End Property
        
        Public Property GameType2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.GameType2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.GameType2Column) = value
            End Set
        End Property
        
        Public Property NameofGame2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.NameofGame2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.NameofGame2Column) = value
            End Set
        End Property
        
        Public Property Description2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.Description2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.Description2Column) = value
            End Set
        End Property
        
        Public Property GameType3 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.GameType3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.GameType3Column) = value
            End Set
        End Property
        
        Public Property NameOfGame3 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.NameOfGame3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.NameOfGame3Column) = value
            End Set
        End Property
        
        Public Property Description3 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.Description3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.Description3Column) = value
            End Set
        End Property
        
        Public Property Childstatus As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.ChildstatusColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.ChildstatusColumn) = value
            End Set
        End Property
        
        Public Property ChildName1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.ChildName1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.ChildName1Column) = value
            End Set
        End Property
        
        Public Property ChildDob1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.ChildDob1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.ChildDob1Column) = value
            End Set
        End Property
        
        Public Property ChildSex1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.ChildSex1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.ChildSex1Column) = value
            End Set
        End Property
        
        Public Property ChildExpairy1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.ChildExpairy1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.ChildExpairy1Column) = value
            End Set
        End Property
        
        Public Property ChildName2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.ChildName2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.ChildName2Column) = value
            End Set
        End Property
        
        Public Property ChildDob2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.ChildDob2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.ChildDob2Column) = value
            End Set
        End Property
        
        Public Property ChildSex2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.ChildSex2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.ChildSex2Column) = value
            End Set
        End Property
        
        Public Property ChildExpairy2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.ChildExpairy2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.ChildExpairy2Column) = value
            End Set
        End Property
        
        Public Property ChildName3 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.ChildName3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.ChildName3Column) = value
            End Set
        End Property
        
        Public Property ChildDob3 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.ChildDob3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.ChildDob3Column) = value
            End Set
        End Property
        
        Public Property ChildSex3 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.ChildSex3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.ChildSex3Column) = value
            End Set
        End Property
        
        Public Property childExpairy3 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.childExpairy3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.childExpairy3Column) = value
            End Set
        End Property
        
        Public Property Clubstatus As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.ClubstatusColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.ClubstatusColumn) = value
            End Set
        End Property
        
        Public Property OtherClubName1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.OtherClubName1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.OtherClubName1Column) = value
            End Set
        End Property
        
        Public Property OCAddress1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.OCAddress1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.OCAddress1Column) = value
            End Set
        End Property
        
        Public Property OCStatus1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.OCStatus1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.OCStatus1Column) = value
            End Set
        End Property
        
        Public Property OtherClubName2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.OtherClubName2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.OtherClubName2Column) = value
            End Set
        End Property
        
        Public Property OCAddress2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.OCAddress2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.OCAddress2Column) = value
            End Set
        End Property
        
        Public Property OCStatus2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.OCStatus2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.OCStatus2Column) = value
            End Set
        End Property
        
        Public Property OtherClubname3 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.OtherClubname3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.OtherClubname3Column) = value
            End Set
        End Property
        
        Public Property OCAddress3 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.OCAddress3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.OCAddress3Column) = value
            End Set
        End Property
        
        Public Property OCStataus As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.OCStatausColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.OCStatausColumn) = value
            End Set
        End Property
        
        Public Property adduser As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.adduserColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.adduserColumn) = value
            End Set
        End Property
        
        Public Property adddate As Date
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.adddateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.adddateColumn) = value
            End Set
        End Property
        
        Public Property freeze As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.freezeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.freezeColumn) = value
            End Set
        End Property
        
        Public Property Relativestatus As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.RelativestatusColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.RelativestatusColumn) = value
            End Set
        End Property
        
        Public Property RelativeName1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.RelativeName1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.RelativeName1Column) = value
            End Set
        End Property
        
        Public Property Relation1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.Relation1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.Relation1Column) = value
            End Set
        End Property
        
        Public Property dateofbirth1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.dateofbirth1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.dateofbirth1Column) = value
            End Set
        End Property
        
        Public Property Relativeage1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.Relativeage1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.Relativeage1Column) = value
            End Set
        End Property
        
        Public Property RelativeSex1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.RelativeSex1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.RelativeSex1Column) = value
            End Set
        End Property
        
        Public Property Relativeaddress1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.Relativeaddress1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.Relativeaddress1Column) = value
            End Set
        End Property
        
        Public Property RelativeName2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.RelativeName2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.RelativeName2Column) = value
            End Set
        End Property
        
        Public Property Relation2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.Relation2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.Relation2Column) = value
            End Set
        End Property
        
        Public Property dateofbirth2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.dateofbirth2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.dateofbirth2Column) = value
            End Set
        End Property
        
        Public Property Relativeage2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.Relativeage2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.Relativeage2Column) = value
            End Set
        End Property
        
        Public Property RelativeSex2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.RelativeSex2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.RelativeSex2Column) = value
            End Set
        End Property
        
        Public Property Relativeaddress2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.Relativeaddress2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.Relativeaddress2Column) = value
            End Set
        End Property
        
        Public Property RelativeName3 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.RelativeName3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.RelativeName3Column) = value
            End Set
        End Property
        
        Public Property Relation3 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.Relation3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.Relation3Column) = value
            End Set
        End Property
        
        Public Property dateofbirth3 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.dateofbirth3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.dateofbirth3Column) = value
            End Set
        End Property
        
        Public Property Relativeage3 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.Relativeage3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.Relativeage3Column) = value
            End Set
        End Property
        
        Public Property RelativeSex3 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.RelativeSex3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.RelativeSex3Column) = value
            End Set
        End Property
        
        Public Property Relativeaddress3 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.Relativeaddress3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.Relativeaddress3Column) = value
            End Set
        End Property
        
        Public Property referentialst As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.referentialstColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.referentialstColumn) = value
            End Set
        End Property
        
        Public Property mem_code1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.mem_code1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.mem_code1Column) = value
            End Set
        End Property
        
        Public Property mem_name1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.mem_name1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.mem_name1Column) = value
            End Set
        End Property
        
        Public Property refmem_date1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.refmem_date1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.refmem_date1Column) = value
            End Set
        End Property
        
        Public Property deleted1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.deleted1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.deleted1Column) = value
            End Set
        End Property
        
        Public Property mem_code2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.mem_code2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.mem_code2Column) = value
            End Set
        End Property
        
        Public Property mem_name2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.mem_name2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.mem_name2Column) = value
            End Set
        End Property
        
        Public Property refmem_date2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.refmem_date2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.refmem_date2Column) = value
            End Set
        End Property
        
        Public Property deleted2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.deleted2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.deleted2Column) = value
            End Set
        End Property
        
        Public Property mem_code3 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.mem_code3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.mem_code3Column) = value
            End Set
        End Property
        
        Public Property mem_name3 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.mem_name3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.mem_name3Column) = value
            End Set
        End Property
        
        Public Property refmem_date3 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.refmem_date3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.refmem_date3Column) = value
            End Set
        End Property
        
        Public Property deleted3 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.deleted3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.deleted3Column) = value
            End Set
        End Property
        
        Public Property entrancefeest As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.entrancefeestColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.entrancefeestColumn) = value
            End Set
        End Property
        
        Public Property receiptno1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.receiptno1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.receiptno1Column) = value
            End Set
        End Property
        
        Public Property startdate1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.startdate1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.startdate1Column) = value
            End Set
        End Property
        
        Public Property amount1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.amount1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.amount1Column) = value
            End Set
        End Property
        
        Public Property receiptno2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.receiptno2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.receiptno2Column) = value
            End Set
        End Property
        
        Public Property startdate2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.startdate2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.startdate2Column) = value
            End Set
        End Property
        
        Public Property amount2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.amount2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.amount2Column) = value
            End Set
        End Property
        
        Public Property receiptno3 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.receiptno3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.receiptno3Column) = value
            End Set
        End Property
        
        Public Property startdate3 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.startdate3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.startdate3Column) = value
            End Set
        End Property
        
        Public Property amount3 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.amount3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.amount3Column) = value
            End Set
        End Property
        
        Public Property OLD As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.OLDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.OLDColumn) = value
            End Set
        End Property
        
        Public Property CardAmt As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.CardAmtColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.CardAmtColumn) = value
            End Set
        End Property
        
        Public Property MINIMUMUSAGE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.MINIMUMUSAGEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.MINIMUMUSAGEColumn) = value
            End Set
        End Property
        
        Public Property CREDITNO As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.CREDITNOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.CREDITNOColumn) = value
            End Set
        End Property
        
        Public Property SPOUSEMOBILE As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.SPOUSEMOBILEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.SPOUSEMOBILEColumn) = value
            End Set
        End Property
        
        Public Property PADD4 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.PADD4Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.PADD4Column) = value
            End Set
        End Property
        
        Public Property CADD4 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.CADD4Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.CADD4Column) = value
            End Set
        End Property
        
        Public Property ADD1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.ADD1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.ADD1Column) = value
            End Set
        End Property
        
        Public Property ADD2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.ADD2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.ADD2Column) = value
            End Set
        End Property
        
        Public Property ADD3 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.ADD3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.ADD3Column) = value
            End Set
        End Property
        
        Public Property CITY As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.CITYColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.CITYColumn) = value
            End Set
        End Property
        
        Public Property STATE As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.STATEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.STATEColumn) = value
            End Set
        End Property
        
        Public Property country As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.countryColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.countryColumn) = value
            End Set
        End Property
        
        Public Property PINCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.PINCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.PINCODEColumn) = value
            End Set
        End Property
        
        Public Property PHONE1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.PHONE1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.PHONE1Column) = value
            End Set
        End Property
        
        Public Property PHONE2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.PHONE2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.PHONE2Column) = value
            End Set
        End Property
        
        Public Function IsTAGNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.TAGColumn)
        End Function
        
        Public Sub SetTAGNull()
            Me(Me.tablemembermaster.TAGColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMEMBERTYPECODENull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.MEMBERTYPECODEColumn)
        End Function
        
        Public Sub SetMEMBERTYPECODENull()
            Me(Me.tablemembermaster.MEMBERTYPECODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCOMPANYNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.COMPANYColumn)
        End Function
        
        Public Sub SetCOMPANYNull()
            Me(Me.tablemembermaster.COMPANYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSUBCDNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.SUBCDColumn)
        End Function
        
        Public Sub SetSUBCDNull()
            Me(Me.tablemembermaster.SUBCDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMNAMENull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.MNAMEColumn)
        End Function
        
        Public Sub SetMNAMENull()
            Me(Me.tablemembermaster.MNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMIDNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.MIDColumn)
        End Function
        
        Public Sub SetMIDNull()
            Me(Me.tablemembermaster.MIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDOBNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.DOBColumn)
        End Function
        
        Public Sub SetDOBNull()
            Me(Me.tablemembermaster.DOBColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDOJNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.DOJColumn)
        End Function
        
        Public Sub SetDOJNull()
            Me(Me.tablemembermaster.DOJColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSEXNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.SEXColumn)
        End Function
        
        Public Sub SetSEXNull()
            Me(Me.tablemembermaster.SEXColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMARITALSTATUSNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.MARITALSTATUSColumn)
        End Function
        
        Public Sub SetMARITALSTATUSNull()
            Me(Me.tablemembermaster.MARITALSTATUSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSPOUSENull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.SPOUSEColumn)
        End Function
        
        Public Sub SetSPOUSENull()
            Me(Me.tablemembermaster.SPOUSEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBGNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.BGColumn)
        End Function
        
        Public Sub SetBGNull()
            Me(Me.tablemembermaster.BGColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOCCUPATIONNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.OCCUPATIONColumn)
        End Function
        
        Public Sub SetOCCUPATIONNull()
            Me(Me.tablemembermaster.OCCUPATIONColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBANKERNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.BANKERColumn)
        End Function
        
        Public Sub SetBANKERNull()
            Me(Me.tablemembermaster.BANKERColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBANKACNONull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.BANKACNOColumn)
        End Function
        
        Public Sub SetBANKACNONull()
            Me(Me.tablemembermaster.BANKACNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHOBBIESNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.HOBBIESColumn)
        End Function
        
        Public Sub SetHOBBIESNull()
            Me(Me.tablemembermaster.HOBBIESColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOTHERINFONull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.OTHERINFOColumn)
        End Function
        
        Public Sub SetOTHERINFONull()
            Me(Me.tablemembermaster.OTHERINFOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRESIDENTNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.RESIDENTColumn)
        End Function
        
        Public Sub SetRESIDENTNull()
            Me(Me.tablemembermaster.RESIDENTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEQUALIFICATIONNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.EQUALIFICATIONColumn)
        End Function
        
        Public Sub SetEQUALIFICATIONNull()
            Me(Me.tablemembermaster.EQUALIFICATIONColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPQUALIFICATIONNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.PQUALIFICATIONColumn)
        End Function
        
        Public Sub SetPQUALIFICATIONNull()
            Me(Me.tablemembermaster.PQUALIFICATIONColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPROPOSERNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.PROPOSERColumn)
        End Function
        
        Public Sub SetPROPOSERNull()
            Me(Me.tablemembermaster.PROPOSERColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPROPOSERNAMENull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.PROPOSERNAMEColumn)
        End Function
        
        Public Sub SetPROPOSERNAMENull()
            Me(Me.tablemembermaster.PROPOSERNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSECONDERNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.SECONDERColumn)
        End Function
        
        Public Sub SetSECONDERNull()
            Me(Me.tablemembermaster.SECONDERColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSECONDERNAMENull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.SECONDERNAMEColumn)
        End Function
        
        Public Sub SetSECONDERNAMENull()
            Me(Me.tablemembermaster.SECONDERNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPAcopystNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.PAcopystColumn)
        End Function
        
        Public Sub SetPAcopystNull()
            Me(Me.tablemembermaster.PAcopystColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPADD1Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.PADD1Column)
        End Function
        
        Public Sub SetPADD1Null()
            Me(Me.tablemembermaster.PADD1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsPADD2Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.PADD2Column)
        End Function
        
        Public Sub SetPADD2Null()
            Me(Me.tablemembermaster.PADD2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsPADD3Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.PADD3Column)
        End Function
        
        Public Sub SetPADD3Null()
            Me(Me.tablemembermaster.PADD3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsPCITYNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.PCITYColumn)
        End Function
        
        Public Sub SetPCITYNull()
            Me(Me.tablemembermaster.PCITYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPSTATENull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.PSTATEColumn)
        End Function
        
        Public Sub SetPSTATENull()
            Me(Me.tablemembermaster.PSTATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPCOUNTRYNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.PCOUNTRYColumn)
        End Function
        
        Public Sub SetPCOUNTRYNull()
            Me(Me.tablemembermaster.PCOUNTRYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPPINNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.PPINColumn)
        End Function
        
        Public Sub SetPPINNull()
            Me(Me.tablemembermaster.PPINColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPPHONE1Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.PPHONE1Column)
        End Function
        
        Public Sub SetPPHONE1Null()
            Me(Me.tablemembermaster.PPHONE1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsPPHONE2Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.PPHONE2Column)
        End Function
        
        Public Sub SetPPHONE2Null()
            Me(Me.tablemembermaster.PPHONE2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsPCELLNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.PCELLColumn)
        End Function
        
        Public Sub SetPCELLNull()
            Me(Me.tablemembermaster.PCELLColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPEMAILNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.PEMAILColumn)
        End Function
        
        Public Sub SetPEMAILNull()
            Me(Me.tablemembermaster.PEMAILColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRAcopystNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.RAcopystColumn)
        End Function
        
        Public Sub SetRAcopystNull()
            Me(Me.tablemembermaster.RAcopystColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCADD1Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.CADD1Column)
        End Function
        
        Public Sub SetCADD1Null()
            Me(Me.tablemembermaster.CADD1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsCADD2Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.CADD2Column)
        End Function
        
        Public Sub SetCADD2Null()
            Me(Me.tablemembermaster.CADD2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsCADD3Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.CADD3Column)
        End Function
        
        Public Sub SetCADD3Null()
            Me(Me.tablemembermaster.CADD3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsCCITYNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.CCITYColumn)
        End Function
        
        Public Sub SetCCITYNull()
            Me(Me.tablemembermaster.CCITYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCSTATENull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.CSTATEColumn)
        End Function
        
        Public Sub SetCSTATENull()
            Me(Me.tablemembermaster.CSTATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCCOUNTRYNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.CCOUNTRYColumn)
        End Function
        
        Public Sub SetCCOUNTRYNull()
            Me(Me.tablemembermaster.CCOUNTRYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCPINNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.CPINColumn)
        End Function
        
        Public Sub SetCPINNull()
            Me(Me.tablemembermaster.CPINColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCPHONE1Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.CPHONE1Column)
        End Function
        
        Public Sub SetCPHONE1Null()
            Me(Me.tablemembermaster.CPHONE1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsCPHONE2Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.CPHONE2Column)
        End Function
        
        Public Sub SetCPHONE2Null()
            Me(Me.tablemembermaster.CPHONE2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsCCELLNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.CCELLColumn)
        End Function
        
        Public Sub SetCCELLNull()
            Me(Me.tablemembermaster.CCELLColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCEMAILNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.CEMAILColumn)
        End Function
        
        Public Sub SetCEMAILNull()
            Me(Me.tablemembermaster.CEMAILColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCONTADD1Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.CONTADD1Column)
        End Function
        
        Public Sub SetCONTADD1Null()
            Me(Me.tablemembermaster.CONTADD1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsCONTADD2Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.CONTADD2Column)
        End Function
        
        Public Sub SetCONTADD2Null()
            Me(Me.tablemembermaster.CONTADD2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsCONTADD3Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.CONTADD3Column)
        End Function
        
        Public Sub SetCONTADD3Null()
            Me(Me.tablemembermaster.CONTADD3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsCONTCITYNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.CONTCITYColumn)
        End Function
        
        Public Sub SetCONTCITYNull()
            Me(Me.tablemembermaster.CONTCITYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCONTSTATENull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.CONTSTATEColumn)
        End Function
        
        Public Sub SetCONTSTATENull()
            Me(Me.tablemembermaster.CONTSTATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCONTCOUNTRYNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.CONTCOUNTRYColumn)
        End Function
        
        Public Sub SetCONTCOUNTRYNull()
            Me(Me.tablemembermaster.CONTCOUNTRYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCONTPINNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.CONTPINColumn)
        End Function
        
        Public Sub SetCONTPINNull()
            Me(Me.tablemembermaster.CONTPINColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCONTPHONE1Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.CONTPHONE1Column)
        End Function
        
        Public Sub SetCONTPHONE1Null()
            Me(Me.tablemembermaster.CONTPHONE1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsCONTPHONE2Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.CONTPHONE2Column)
        End Function
        
        Public Sub SetCONTPHONE2Null()
            Me(Me.tablemembermaster.CONTPHONE2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsCONTCELLNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.CONTCELLColumn)
        End Function
        
        Public Sub SetCONTCELLNull()
            Me(Me.tablemembermaster.CONTCELLColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCONTEMAILNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.CONTEMAILColumn)
        End Function
        
        Public Sub SetCONTEMAILNull()
            Me(Me.tablemembermaster.CONTEMAILColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEMPTYPENull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.EMPTYPEColumn)
        End Function
        
        Public Sub SetEMPTYPENull()
            Me(Me.tablemembermaster.EMPTYPEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBUSINESSNAMENull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.BUSINESSNAMEColumn)
        End Function
        
        Public Sub SetBUSINESSNAMENull()
            Me(Me.tablemembermaster.BUSINESSNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBAcopystNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.BAcopystColumn)
        End Function
        
        Public Sub SetBAcopystNull()
            Me(Me.tablemembermaster.BAcopystColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOADD1Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.OADD1Column)
        End Function
        
        Public Sub SetOADD1Null()
            Me(Me.tablemembermaster.OADD1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsOADD2Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.OADD2Column)
        End Function
        
        Public Sub SetOADD2Null()
            Me(Me.tablemembermaster.OADD2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsOADD3Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.OADD3Column)
        End Function
        
        Public Sub SetOADD3Null()
            Me(Me.tablemembermaster.OADD3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsOCITYNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.OCITYColumn)
        End Function
        
        Public Sub SetOCITYNull()
            Me(Me.tablemembermaster.OCITYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOSTATENull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.OSTATEColumn)
        End Function
        
        Public Sub SetOSTATENull()
            Me(Me.tablemembermaster.OSTATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOCOUNTRYNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.OCOUNTRYColumn)
        End Function
        
        Public Sub SetOCOUNTRYNull()
            Me(Me.tablemembermaster.OCOUNTRYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOPINNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.OPINColumn)
        End Function
        
        Public Sub SetOPINNull()
            Me(Me.tablemembermaster.OPINColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOPHONE1Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.OPHONE1Column)
        End Function
        
        Public Sub SetOPHONE1Null()
            Me(Me.tablemembermaster.OPHONE1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsOPHONE2Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.OPHONE2Column)
        End Function
        
        Public Sub SetOPHONE2Null()
            Me(Me.tablemembermaster.OPHONE2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsOCELLNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.OCELLColumn)
        End Function
        
        Public Sub SetOCELLNull()
            Me(Me.tablemembermaster.OCELLColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOEMAILNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.OEMAILColumn)
        End Function
        
        Public Sub SetOEMAILNull()
            Me(Me.tablemembermaster.OEMAILColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDOEPROFESSIONNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.DOEPROFESSIONColumn)
        End Function
        
        Public Sub SetDOEPROFESSIONNull()
            Me(Me.tablemembermaster.DOEPROFESSIONColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBUSINESSNATURENull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.BUSINESSNATUREColumn)
        End Function
        
        Public Sub SetBUSINESSNATURENull()
            Me(Me.tablemembermaster.BUSINESSNATUREColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPOSITIONHELDNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.POSITIONHELDColumn)
        End Function
        
        Public Sub SetPOSITIONHELDNull()
            Me(Me.tablemembermaster.POSITIONHELDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSERVICENAMENull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.SERVICENAMEColumn)
        End Function
        
        Public Sub SetSERVICENAMENull()
            Me(Me.tablemembermaster.SERVICENAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSERVICEYEARNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.SERVICEYEARColumn)
        End Function
        
        Public Sub SetSERVICEYEARNull()
            Me(Me.tablemembermaster.SERVICEYEARColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPANONull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.PANOColumn)
        End Function
        
        Public Sub SetPANONull()
            Me(Me.tablemembermaster.PANOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBBANKERNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.BBANKERColumn)
        End Function
        
        Public Sub SetBBANKERNull()
            Me(Me.tablemembermaster.BBANKERColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCCNONull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.CCNOColumn)
        End Function
        
        Public Sub SetCCNONull()
            Me(Me.tablemembermaster.CCNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsANNUALINCOMENull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.ANNUALINCOMEColumn)
        End Function
        
        Public Sub SetANNUALINCOMENull()
            Me(Me.tablemembermaster.ANNUALINCOMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUPDUSERIDNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.UPDUSERIDColumn)
        End Function
        
        Public Sub SetUPDUSERIDNull()
            Me(Me.tablemembermaster.UPDUSERIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUPDDATETIMENull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.UPDDATETIMEColumn)
        End Function
        
        Public Sub SetUPDDATETIMENull()
            Me(Me.tablemembermaster.UPDDATETIMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTERMINATIONNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.TERMINATIONColumn)
        End Function
        
        Public Sub SetTERMINATIONNull()
            Me(Me.tablemembermaster.TERMINATIONColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTRN_CON_DATENull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.TRN_CON_DATEColumn)
        End Function
        
        Public Sub SetTRN_CON_DATENull()
            Me(Me.tablemembermaster.TRN_CON_DATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCON_MCODENull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.CON_MCODEColumn)
        End Function
        
        Public Sub SetCON_MCODENull()
            Me(Me.tablemembermaster.CON_MCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPFAXNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.PFAXColumn)
        End Function
        
        Public Sub SetPFAXNull()
            Me(Me.tablemembermaster.PFAXColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCFAXNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.CFAXColumn)
        End Function
        
        Public Sub SetCFAXNull()
            Me(Me.tablemembermaster.CFAXColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCONTFAXNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.CONTFAXColumn)
        End Function
        
        Public Sub SetCONTFAXNull()
            Me(Me.tablemembermaster.CONTFAXColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsREASONNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.REASONColumn)
        End Function
        
        Public Sub SetREASONNull()
            Me(Me.tablemembermaster.REASONColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPHOTONull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.PHOTOColumn)
        End Function
        
        Public Sub SetPHOTONull()
            Me(Me.tablemembermaster.PHOTOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCREDITLIMITNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.CREDITLIMITColumn)
        End Function
        
        Public Sub SetCREDITLIMITNull()
            Me(Me.tablemembermaster.CREDITLIMITColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLIMITAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.LIMITAMOUNTColumn)
        End Function
        
        Public Sub SetLIMITAMOUNTNull()
            Me(Me.tablemembermaster.LIMITAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsWEBSITENull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.WEBSITEColumn)
        End Function
        
        Public Sub SetWEBSITENull()
            Me(Me.tablemembermaster.WEBSITEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsImagefileNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.ImagefileColumn)
        End Function
        
        Public Sub SetImagefileNull()
            Me(Me.tablemembermaster.ImagefileColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IssizefieldNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.sizefieldColumn)
        End Function
        
        Public Sub SetsizefieldNull()
            Me(Me.tablemembermaster.sizefieldColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVdateNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.VdateColumn)
        End Function
        
        Public Sub SetVdateNull()
            Me(Me.tablemembermaster.VdateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVyearNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.VyearColumn)
        End Function
        
        Public Sub SetVyearNull()
            Me(Me.tablemembermaster.VyearColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsValiddateNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.ValiddateColumn)
        End Function
        
        Public Sub SetValiddateNull()
            Me(Me.tablemembermaster.ValiddateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTempTerminationNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.TempTerminationColumn)
        End Function
        
        Public Sub SetTempTerminationNull()
            Me(Me.tablemembermaster.TempTerminationColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTempTermDateNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.TempTermDateColumn)
        End Function
        
        Public Sub SetTempTermDateNull()
            Me(Me.tablemembermaster.TempTermDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTempTermReasonNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.TempTermReasonColumn)
        End Function
        
        Public Sub SetTempTermReasonNull()
            Me(Me.tablemembermaster.TempTermReasonColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMemberidNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.MemberidColumn)
        End Function
        
        Public Sub SetMemberidNull()
            Me(Me.tablemembermaster.MemberidColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEndingDateNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.EndingDateColumn)
        End Function
        
        Public Sub SetEndingDateNull()
            Me(Me.tablemembermaster.EndingDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTotalYearsNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.TotalYearsColumn)
        End Function
        
        Public Sub SetTotalYearsNull()
            Me(Me.tablemembermaster.TotalYearsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCardNoNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.CardNoColumn)
        End Function
        
        Public Sub SetCardNoNull()
            Me(Me.tablemembermaster.CardNoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCardExpDateNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.CardExpDateColumn)
        End Function
        
        Public Sub SetCardExpDateNull()
            Me(Me.tablemembermaster.CardExpDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsValidityNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.ValidityColumn)
        End Function
        
        Public Sub SetValidityNull()
            Me(Me.tablemembermaster.ValidityColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPeriodNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.PeriodColumn)
        End Function
        
        Public Sub SetPeriodNull()
            Me(Me.tablemembermaster.PeriodColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCreditcardnoNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.CreditcardnoColumn)
        End Function
        
        Public Sub SetCreditcardnoNull()
            Me(Me.tablemembermaster.CreditcardnoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCreditExpDtNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.CreditExpDtColumn)
        End Function
        
        Public Sub SetCreditExpDtNull()
            Me(Me.tablemembermaster.CreditExpDtColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTypeNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.TypeColumn)
        End Function
        
        Public Sub SetTypeNull()
            Me(Me.tablemembermaster.TypeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSTATUSDATEFROMNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.STATUSDATEFROMColumn)
        End Function
        
        Public Sub SetSTATUSDATEFROMNull()
            Me(Me.tablemembermaster.STATUSDATEFROMColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSTATUSDATETONull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.STATUSDATETOColumn)
        End Function
        
        Public Sub SetSTATUSDATETONull()
            Me(Me.tablemembermaster.STATUSDATETOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCurentStatusNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.CurentStatusColumn)
        End Function
        
        Public Sub SetCurentStatusNull()
            Me(Me.tablemembermaster.CurentStatusColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFirstNameNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.FirstNameColumn)
        End Function
        
        Public Sub SetFirstNameNull()
            Me(Me.tablemembermaster.FirstNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMiddleNameNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.MiddleNameColumn)
        End Function
        
        Public Sub SetMiddleNameNull()
            Me(Me.tablemembermaster.MiddleNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSurnameNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.SurnameColumn)
        End Function
        
        Public Sub SetSurnameNull()
            Me(Me.tablemembermaster.SurnameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Is_AliasNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster._AliasColumn)
        End Function
        
        Public Sub Set_AliasNull()
            Me(Me.tablemembermaster._AliasColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPrefixNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.PrefixColumn)
        End Function
        
        Public Sub SetPrefixNull()
            Me(Me.tablemembermaster.PrefixColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBillTypeNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.BillTypeColumn)
        End Function
        
        Public Sub SetBillTypeNull()
            Me(Me.tablemembermaster.BillTypeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNationalityNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.NationalityColumn)
        End Function
        
        Public Sub SetNationalityNull()
            Me(Me.tablemembermaster.NationalityColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNationalityAtbirthNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.NationalityAtbirthColumn)
        End Function
        
        Public Sub SetNationalityAtbirthNull()
            Me(Me.tablemembermaster.NationalityAtbirthColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBillbasisNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.BillbasisColumn)
        End Function
        
        Public Sub SetBillbasisNull()
            Me(Me.tablemembermaster.BillbasisColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBillHeadNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.BillHeadColumn)
        End Function
        
        Public Sub SetBillHeadNull()
            Me(Me.tablemembermaster.BillHeadColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGDRLockerNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.GDRLockerColumn)
        End Function
        
        Public Sub SetGDRLockerNull()
            Me(Me.tablemembermaster.GDRLockerColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLDRLockerNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.LDRLockerColumn)
        End Function
        
        Public Sub SetLDRLockerNull()
            Me(Me.tablemembermaster.LDRLockerColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHPLockerNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.HPLockerColumn)
        End Function
        
        Public Sub SetHPLockerNull()
            Me(Me.tablemembermaster.HPLockerColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMembershipToNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.MembershipToColumn)
        End Function
        
        Public Sub SetMembershipToNull()
            Me(Me.tablemembermaster.MembershipToColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IssalutNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.salutColumn)
        End Function
        
        Public Sub SetsalutNull()
            Me(Me.tablemembermaster.salutColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEntranceFeeNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.EntranceFeeColumn)
        End Function
        
        Public Sub SetEntranceFeeNull()
            Me(Me.tablemembermaster.EntranceFeeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDevelopmentFeeNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.DevelopmentFeeColumn)
        End Function
        
        Public Sub SetDevelopmentFeeNull()
            Me(Me.tablemembermaster.DevelopmentFeeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCriditNumberNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.CriditNumberColumn)
        End Function
        
        Public Sub SetCriditNumberNull()
            Me(Me.tablemembermaster.CriditNumberColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSecurityDepositNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.SecurityDepositColumn)
        End Function
        
        Public Sub SetSecurityDepositNull()
            Me(Me.tablemembermaster.SecurityDepositColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPlaceOfBirthNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.PlaceOfBirthColumn)
        End Function
        
        Public Sub SetPlaceOfBirthNull()
            Me(Me.tablemembermaster.PlaceOfBirthColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCountryOfBirthNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.CountryOfBirthColumn)
        End Function
        
        Public Sub SetCountryOfBirthNull()
            Me(Me.tablemembermaster.CountryOfBirthColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLastArrivalInCalNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.LastArrivalInCalColumn)
        End Function
        
        Public Sub SetLastArrivalInCalNull()
            Me(Me.tablemembermaster.LastArrivalInCalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPeriodOfStay_yearNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.PeriodOfStay_yearColumn)
        End Function
        
        Public Sub SetPeriodOfStay_yearNull()
            Me(Me.tablemembermaster.PeriodOfStay_yearColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPeriodOfStay_MonthNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.PeriodOfStay_MonthColumn)
        End Function
        
        Public Sub SetPeriodOfStay_MonthNull()
            Me(Me.tablemembermaster.PeriodOfStay_MonthColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPreviouslyProposedNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.PreviouslyProposedColumn)
        End Function
        
        Public Sub SetPreviouslyProposedNull()
            Me(Me.tablemembermaster.PreviouslyProposedColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNoOfTimesProposedNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.NoOfTimesProposedColumn)
        End Function
        
        Public Sub SetNoOfTimesProposedNull()
            Me(Me.tablemembermaster.NoOfTimesProposedColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDateOfProposalNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.DateOfProposalColumn)
        End Function
        
        Public Sub SetDateOfProposalNull()
            Me(Me.tablemembermaster.DateOfProposalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsResultOfProposalNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.ResultOfProposalColumn)
        End Function
        
        Public Sub SetResultOfProposalNull()
            Me(Me.tablemembermaster.ResultOfProposalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsElectedNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.ElectedColumn)
        End Function
        
        Public Sub SetElectedNull()
            Me(Me.tablemembermaster.ElectedColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFatherNameNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.FatherNameColumn)
        End Function
        
        Public Sub SetFatherNameNull()
            Me(Me.tablemembermaster.FatherNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDOBfatherNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.DOBfatherColumn)
        End Function
        
        Public Sub SetDOBfatherNull()
            Me(Me.tablemembermaster.DOBfatherColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsWifeDOBNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.WifeDOBColumn)
        End Function
        
        Public Sub SetWifeDOBNull()
            Me(Me.tablemembermaster.WifeDOBColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMaidenNameWifeNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.MaidenNameWifeColumn)
        End Function
        
        Public Sub SetMaidenNameWifeNull()
            Me(Me.tablemembermaster.MaidenNameWifeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNationalityWifeNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.NationalityWifeColumn)
        End Function
        
        Public Sub SetNationalityWifeNull()
            Me(Me.tablemembermaster.NationalityWifeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsWifesFatherNameNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.WifesFatherNameColumn)
        End Function
        
        Public Sub SetWifesFatherNameNull()
            Me(Me.tablemembermaster.WifesFatherNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsWifeFatherDOBNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.WifeFatherDOBColumn)
        End Function
        
        Public Sub SetWifeFatherDOBNull()
            Me(Me.tablemembermaster.WifeFatherDOBColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsApplNoNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.ApplNoColumn)
        End Function
        
        Public Sub SetApplNoNull()
            Me(Me.tablemembermaster.ApplNoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsApplDateNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.ApplDateColumn)
        End Function
        
        Public Sub SetApplDateNull()
            Me(Me.tablemembermaster.ApplDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCorporatestNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.CorporatestColumn)
        End Function
        
        Public Sub SetCorporatestNull()
            Me(Me.tablemembermaster.CorporatestColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCorporateCodeNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.CorporateCodeColumn)
        End Function
        
        Public Sub SetCorporateCodeNull()
            Me(Me.tablemembermaster.CorporateCodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCompNameNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.CompNameColumn)
        End Function
        
        Public Sub SetCompNameNull()
            Me(Me.tablemembermaster.CompNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDesignationNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.DesignationColumn)
        End Function
        
        Public Sub SetDesignationNull()
            Me(Me.tablemembermaster.DesignationColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsProfessionInfoNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.ProfessionInfoColumn)
        End Function
        
        Public Sub SetProfessionInfoNull()
            Me(Me.tablemembermaster.ProfessionInfoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBuisnessInfoNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.BuisnessInfoColumn)
        End Function
        
        Public Sub SetBuisnessInfoNull()
            Me(Me.tablemembermaster.BuisnessInfoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsProductsNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.ProductsColumn)
        End Function
        
        Public Sub SetProductsNull()
            Me(Me.tablemembermaster.ProductsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAgentsDealersNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.AgentsDealersColumn)
        End Function
        
        Public Sub SetAgentsDealersNull()
            Me(Me.tablemembermaster.AgentsDealersColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsESTDdateNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.ESTDdateColumn)
        End Function
        
        Public Sub SetESTDdateNull()
            Me(Me.tablemembermaster.ESTDdateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNoOfEmpNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.NoOfEmpColumn)
        End Function
        
        Public Sub SetNoOfEmpNull()
            Me(Me.tablemembermaster.NoOfEmpColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTurnoverNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.TurnoverColumn)
        End Function
        
        Public Sub SetTurnoverNull()
            Me(Me.tablemembermaster.TurnoverColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsClientNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.ClientColumn)
        End Function
        
        Public Sub SetClientNull()
            Me(Me.tablemembermaster.ClientColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAppliedButNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.AppliedButColumn)
        End Function
        
        Public Sub SetAppliedButNull()
            Me(Me.tablemembermaster.AppliedButColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPositionInChamberNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.PositionInChamberColumn)
        End Function
        
        Public Sub SetPositionInChamberNull()
            Me(Me.tablemembermaster.PositionInChamberColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsQulificationstatusNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.QulificationstatusColumn)
        End Function
        
        Public Sub SetQulificationstatusNull()
            Me(Me.tablemembermaster.QulificationstatusColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsQualification1Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.Qualification1Column)
        End Function
        
        Public Sub SetQualification1Null()
            Me(Me.tablemembermaster.Qualification1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsDetails1Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.Details1Column)
        End Function
        
        Public Sub SetDetails1Null()
            Me(Me.tablemembermaster.Details1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsYearOfPassing1Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.YearOfPassing1Column)
        End Function
        
        Public Sub SetYearOfPassing1Null()
            Me(Me.tablemembermaster.YearOfPassing1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsInstitute1Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.Institute1Column)
        End Function
        
        Public Sub SetInstitute1Null()
            Me(Me.tablemembermaster.Institute1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsDivision1Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.Division1Column)
        End Function
        
        Public Sub SetDivision1Null()
            Me(Me.tablemembermaster.Division1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsQualification2Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.Qualification2Column)
        End Function
        
        Public Sub SetQualification2Null()
            Me(Me.tablemembermaster.Qualification2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsDetails2Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.Details2Column)
        End Function
        
        Public Sub SetDetails2Null()
            Me(Me.tablemembermaster.Details2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsYearOfPassing2Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.YearOfPassing2Column)
        End Function
        
        Public Sub SetYearOfPassing2Null()
            Me(Me.tablemembermaster.YearOfPassing2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsInstitute2Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.Institute2Column)
        End Function
        
        Public Sub SetInstitute2Null()
            Me(Me.tablemembermaster.Institute2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsDivision2Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.Division2Column)
        End Function
        
        Public Sub SetDivision2Null()
            Me(Me.tablemembermaster.Division2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsQualification3Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.Qualification3Column)
        End Function
        
        Public Sub SetQualification3Null()
            Me(Me.tablemembermaster.Qualification3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsDetails3Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.Details3Column)
        End Function
        
        Public Sub SetDetails3Null()
            Me(Me.tablemembermaster.Details3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsYearOfPassing3Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.YearOfPassing3Column)
        End Function
        
        Public Sub SetYearOfPassing3Null()
            Me(Me.tablemembermaster.YearOfPassing3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsInstitute3Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.Institute3Column)
        End Function
        
        Public Sub SetInstitute3Null()
            Me(Me.tablemembermaster.Institute3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsDivision3Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.Division3Column)
        End Function
        
        Public Sub SetDivision3Null()
            Me(Me.tablemembermaster.Division3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IssportstatusNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.sportstatusColumn)
        End Function
        
        Public Sub SetsportstatusNull()
            Me(Me.tablemembermaster.sportstatusColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGameType1Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.GameType1Column)
        End Function
        
        Public Sub SetGameType1Null()
            Me(Me.tablemembermaster.GameType1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsNameOfGame1Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.NameOfGame1Column)
        End Function
        
        Public Sub SetNameOfGame1Null()
            Me(Me.tablemembermaster.NameOfGame1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsDescription1Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.Description1Column)
        End Function
        
        Public Sub SetDescription1Null()
            Me(Me.tablemembermaster.Description1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsGameType2Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.GameType2Column)
        End Function
        
        Public Sub SetGameType2Null()
            Me(Me.tablemembermaster.GameType2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsNameofGame2Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.NameofGame2Column)
        End Function
        
        Public Sub SetNameofGame2Null()
            Me(Me.tablemembermaster.NameofGame2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsDescription2Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.Description2Column)
        End Function
        
        Public Sub SetDescription2Null()
            Me(Me.tablemembermaster.Description2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsGameType3Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.GameType3Column)
        End Function
        
        Public Sub SetGameType3Null()
            Me(Me.tablemembermaster.GameType3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsNameOfGame3Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.NameOfGame3Column)
        End Function
        
        Public Sub SetNameOfGame3Null()
            Me(Me.tablemembermaster.NameOfGame3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsDescription3Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.Description3Column)
        End Function
        
        Public Sub SetDescription3Null()
            Me(Me.tablemembermaster.Description3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsChildstatusNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.ChildstatusColumn)
        End Function
        
        Public Sub SetChildstatusNull()
            Me(Me.tablemembermaster.ChildstatusColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsChildName1Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.ChildName1Column)
        End Function
        
        Public Sub SetChildName1Null()
            Me(Me.tablemembermaster.ChildName1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsChildDob1Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.ChildDob1Column)
        End Function
        
        Public Sub SetChildDob1Null()
            Me(Me.tablemembermaster.ChildDob1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsChildSex1Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.ChildSex1Column)
        End Function
        
        Public Sub SetChildSex1Null()
            Me(Me.tablemembermaster.ChildSex1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsChildExpairy1Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.ChildExpairy1Column)
        End Function
        
        Public Sub SetChildExpairy1Null()
            Me(Me.tablemembermaster.ChildExpairy1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsChildName2Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.ChildName2Column)
        End Function
        
        Public Sub SetChildName2Null()
            Me(Me.tablemembermaster.ChildName2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsChildDob2Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.ChildDob2Column)
        End Function
        
        Public Sub SetChildDob2Null()
            Me(Me.tablemembermaster.ChildDob2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsChildSex2Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.ChildSex2Column)
        End Function
        
        Public Sub SetChildSex2Null()
            Me(Me.tablemembermaster.ChildSex2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsChildExpairy2Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.ChildExpairy2Column)
        End Function
        
        Public Sub SetChildExpairy2Null()
            Me(Me.tablemembermaster.ChildExpairy2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsChildName3Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.ChildName3Column)
        End Function
        
        Public Sub SetChildName3Null()
            Me(Me.tablemembermaster.ChildName3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsChildDob3Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.ChildDob3Column)
        End Function
        
        Public Sub SetChildDob3Null()
            Me(Me.tablemembermaster.ChildDob3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsChildSex3Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.ChildSex3Column)
        End Function
        
        Public Sub SetChildSex3Null()
            Me(Me.tablemembermaster.ChildSex3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IschildExpairy3Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.childExpairy3Column)
        End Function
        
        Public Sub SetchildExpairy3Null()
            Me(Me.tablemembermaster.childExpairy3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsClubstatusNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.ClubstatusColumn)
        End Function
        
        Public Sub SetClubstatusNull()
            Me(Me.tablemembermaster.ClubstatusColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOtherClubName1Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.OtherClubName1Column)
        End Function
        
        Public Sub SetOtherClubName1Null()
            Me(Me.tablemembermaster.OtherClubName1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsOCAddress1Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.OCAddress1Column)
        End Function
        
        Public Sub SetOCAddress1Null()
            Me(Me.tablemembermaster.OCAddress1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsOCStatus1Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.OCStatus1Column)
        End Function
        
        Public Sub SetOCStatus1Null()
            Me(Me.tablemembermaster.OCStatus1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsOtherClubName2Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.OtherClubName2Column)
        End Function
        
        Public Sub SetOtherClubName2Null()
            Me(Me.tablemembermaster.OtherClubName2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsOCAddress2Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.OCAddress2Column)
        End Function
        
        Public Sub SetOCAddress2Null()
            Me(Me.tablemembermaster.OCAddress2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsOCStatus2Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.OCStatus2Column)
        End Function
        
        Public Sub SetOCStatus2Null()
            Me(Me.tablemembermaster.OCStatus2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsOtherClubname3Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.OtherClubname3Column)
        End Function
        
        Public Sub SetOtherClubname3Null()
            Me(Me.tablemembermaster.OtherClubname3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsOCAddress3Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.OCAddress3Column)
        End Function
        
        Public Sub SetOCAddress3Null()
            Me(Me.tablemembermaster.OCAddress3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsOCStatausNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.OCStatausColumn)
        End Function
        
        Public Sub SetOCStatausNull()
            Me(Me.tablemembermaster.OCStatausColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsadduserNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.adduserColumn)
        End Function
        
        Public Sub SetadduserNull()
            Me(Me.tablemembermaster.adduserColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsadddateNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.adddateColumn)
        End Function
        
        Public Sub SetadddateNull()
            Me(Me.tablemembermaster.adddateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsfreezeNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.freezeColumn)
        End Function
        
        Public Sub SetfreezeNull()
            Me(Me.tablemembermaster.freezeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRelativestatusNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.RelativestatusColumn)
        End Function
        
        Public Sub SetRelativestatusNull()
            Me(Me.tablemembermaster.RelativestatusColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRelativeName1Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.RelativeName1Column)
        End Function
        
        Public Sub SetRelativeName1Null()
            Me(Me.tablemembermaster.RelativeName1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsRelation1Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.Relation1Column)
        End Function
        
        Public Sub SetRelation1Null()
            Me(Me.tablemembermaster.Relation1Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isdateofbirth1Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.dateofbirth1Column)
        End Function
        
        Public Sub Setdateofbirth1Null()
            Me(Me.tablemembermaster.dateofbirth1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsRelativeage1Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.Relativeage1Column)
        End Function
        
        Public Sub SetRelativeage1Null()
            Me(Me.tablemembermaster.Relativeage1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsRelativeSex1Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.RelativeSex1Column)
        End Function
        
        Public Sub SetRelativeSex1Null()
            Me(Me.tablemembermaster.RelativeSex1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsRelativeaddress1Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.Relativeaddress1Column)
        End Function
        
        Public Sub SetRelativeaddress1Null()
            Me(Me.tablemembermaster.Relativeaddress1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsRelativeName2Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.RelativeName2Column)
        End Function
        
        Public Sub SetRelativeName2Null()
            Me(Me.tablemembermaster.RelativeName2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsRelation2Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.Relation2Column)
        End Function
        
        Public Sub SetRelation2Null()
            Me(Me.tablemembermaster.Relation2Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isdateofbirth2Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.dateofbirth2Column)
        End Function
        
        Public Sub Setdateofbirth2Null()
            Me(Me.tablemembermaster.dateofbirth2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsRelativeage2Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.Relativeage2Column)
        End Function
        
        Public Sub SetRelativeage2Null()
            Me(Me.tablemembermaster.Relativeage2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsRelativeSex2Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.RelativeSex2Column)
        End Function
        
        Public Sub SetRelativeSex2Null()
            Me(Me.tablemembermaster.RelativeSex2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsRelativeaddress2Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.Relativeaddress2Column)
        End Function
        
        Public Sub SetRelativeaddress2Null()
            Me(Me.tablemembermaster.Relativeaddress2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsRelativeName3Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.RelativeName3Column)
        End Function
        
        Public Sub SetRelativeName3Null()
            Me(Me.tablemembermaster.RelativeName3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsRelation3Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.Relation3Column)
        End Function
        
        Public Sub SetRelation3Null()
            Me(Me.tablemembermaster.Relation3Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isdateofbirth3Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.dateofbirth3Column)
        End Function
        
        Public Sub Setdateofbirth3Null()
            Me(Me.tablemembermaster.dateofbirth3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsRelativeage3Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.Relativeage3Column)
        End Function
        
        Public Sub SetRelativeage3Null()
            Me(Me.tablemembermaster.Relativeage3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsRelativeSex3Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.RelativeSex3Column)
        End Function
        
        Public Sub SetRelativeSex3Null()
            Me(Me.tablemembermaster.RelativeSex3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsRelativeaddress3Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.Relativeaddress3Column)
        End Function
        
        Public Sub SetRelativeaddress3Null()
            Me(Me.tablemembermaster.Relativeaddress3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsreferentialstNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.referentialstColumn)
        End Function
        
        Public Sub SetreferentialstNull()
            Me(Me.tablemembermaster.referentialstColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ismem_code1Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.mem_code1Column)
        End Function
        
        Public Sub Setmem_code1Null()
            Me(Me.tablemembermaster.mem_code1Column) = System.Convert.DBNull
        End Sub
        
        Public Function Ismem_name1Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.mem_name1Column)
        End Function
        
        Public Sub Setmem_name1Null()
            Me(Me.tablemembermaster.mem_name1Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isrefmem_date1Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.refmem_date1Column)
        End Function
        
        Public Sub Setrefmem_date1Null()
            Me(Me.tablemembermaster.refmem_date1Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isdeleted1Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.deleted1Column)
        End Function
        
        Public Sub Setdeleted1Null()
            Me(Me.tablemembermaster.deleted1Column) = System.Convert.DBNull
        End Sub
        
        Public Function Ismem_code2Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.mem_code2Column)
        End Function
        
        Public Sub Setmem_code2Null()
            Me(Me.tablemembermaster.mem_code2Column) = System.Convert.DBNull
        End Sub
        
        Public Function Ismem_name2Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.mem_name2Column)
        End Function
        
        Public Sub Setmem_name2Null()
            Me(Me.tablemembermaster.mem_name2Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isrefmem_date2Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.refmem_date2Column)
        End Function
        
        Public Sub Setrefmem_date2Null()
            Me(Me.tablemembermaster.refmem_date2Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isdeleted2Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.deleted2Column)
        End Function
        
        Public Sub Setdeleted2Null()
            Me(Me.tablemembermaster.deleted2Column) = System.Convert.DBNull
        End Sub
        
        Public Function Ismem_code3Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.mem_code3Column)
        End Function
        
        Public Sub Setmem_code3Null()
            Me(Me.tablemembermaster.mem_code3Column) = System.Convert.DBNull
        End Sub
        
        Public Function Ismem_name3Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.mem_name3Column)
        End Function
        
        Public Sub Setmem_name3Null()
            Me(Me.tablemembermaster.mem_name3Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isrefmem_date3Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.refmem_date3Column)
        End Function
        
        Public Sub Setrefmem_date3Null()
            Me(Me.tablemembermaster.refmem_date3Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isdeleted3Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.deleted3Column)
        End Function
        
        Public Sub Setdeleted3Null()
            Me(Me.tablemembermaster.deleted3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsentrancefeestNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.entrancefeestColumn)
        End Function
        
        Public Sub SetentrancefeestNull()
            Me(Me.tablemembermaster.entrancefeestColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isreceiptno1Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.receiptno1Column)
        End Function
        
        Public Sub Setreceiptno1Null()
            Me(Me.tablemembermaster.receiptno1Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isstartdate1Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.startdate1Column)
        End Function
        
        Public Sub Setstartdate1Null()
            Me(Me.tablemembermaster.startdate1Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isamount1Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.amount1Column)
        End Function
        
        Public Sub Setamount1Null()
            Me(Me.tablemembermaster.amount1Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isreceiptno2Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.receiptno2Column)
        End Function
        
        Public Sub Setreceiptno2Null()
            Me(Me.tablemembermaster.receiptno2Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isstartdate2Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.startdate2Column)
        End Function
        
        Public Sub Setstartdate2Null()
            Me(Me.tablemembermaster.startdate2Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isamount2Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.amount2Column)
        End Function
        
        Public Sub Setamount2Null()
            Me(Me.tablemembermaster.amount2Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isreceiptno3Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.receiptno3Column)
        End Function
        
        Public Sub Setreceiptno3Null()
            Me(Me.tablemembermaster.receiptno3Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isstartdate3Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.startdate3Column)
        End Function
        
        Public Sub Setstartdate3Null()
            Me(Me.tablemembermaster.startdate3Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isamount3Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.amount3Column)
        End Function
        
        Public Sub Setamount3Null()
            Me(Me.tablemembermaster.amount3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsOLDNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.OLDColumn)
        End Function
        
        Public Sub SetOLDNull()
            Me(Me.tablemembermaster.OLDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCardAmtNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.CardAmtColumn)
        End Function
        
        Public Sub SetCardAmtNull()
            Me(Me.tablemembermaster.CardAmtColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMINIMUMUSAGENull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.MINIMUMUSAGEColumn)
        End Function
        
        Public Sub SetMINIMUMUSAGENull()
            Me(Me.tablemembermaster.MINIMUMUSAGEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCREDITNONull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.CREDITNOColumn)
        End Function
        
        Public Sub SetCREDITNONull()
            Me(Me.tablemembermaster.CREDITNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSPOUSEMOBILENull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.SPOUSEMOBILEColumn)
        End Function
        
        Public Sub SetSPOUSEMOBILENull()
            Me(Me.tablemembermaster.SPOUSEMOBILEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPADD4Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.PADD4Column)
        End Function
        
        Public Sub SetPADD4Null()
            Me(Me.tablemembermaster.PADD4Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsCADD4Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.CADD4Column)
        End Function
        
        Public Sub SetCADD4Null()
            Me(Me.tablemembermaster.CADD4Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsADD1Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.ADD1Column)
        End Function
        
        Public Sub SetADD1Null()
            Me(Me.tablemembermaster.ADD1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsADD2Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.ADD2Column)
        End Function
        
        Public Sub SetADD2Null()
            Me(Me.tablemembermaster.ADD2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsADD3Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.ADD3Column)
        End Function
        
        Public Sub SetADD3Null()
            Me(Me.tablemembermaster.ADD3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsCITYNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.CITYColumn)
        End Function
        
        Public Sub SetCITYNull()
            Me(Me.tablemembermaster.CITYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSTATENull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.STATEColumn)
        End Function
        
        Public Sub SetSTATENull()
            Me(Me.tablemembermaster.STATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscountryNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.countryColumn)
        End Function
        
        Public Sub SetcountryNull()
            Me(Me.tablemembermaster.countryColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPINCODENull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.PINCODEColumn)
        End Function
        
        Public Sub SetPINCODENull()
            Me(Me.tablemembermaster.PINCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPHONE1Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.PHONE1Column)
        End Function
        
        Public Sub SetPHONE1Null()
            Me(Me.tablemembermaster.PHONE1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsPHONE2Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.PHONE2Column)
        End Function
        
        Public Sub SetPHONE2Null()
            Me(Me.tablemembermaster.PHONE2Column) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class membermasterRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As membermasterRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As membermasterRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As membermasterRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
