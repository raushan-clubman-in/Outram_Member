'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2500
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class MemberStatusSummary_Dataset
    Inherits DataSet
    
    Private tableMM_MEMBERSTRENGTH As MM_MEMBERSTRENGTHDataTable
    
    Private tableVW_MEMBERSTATUS_SUMMARY1 As VW_MEMBERSTATUS_SUMMARY1DataTable
    
    Private tableVIEW_CORPORATE As VIEW_CORPORATEDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("MM_MEMBERSTRENGTH")) Is Nothing) Then
                Me.Tables.Add(New MM_MEMBERSTRENGTHDataTable(ds.Tables("MM_MEMBERSTRENGTH")))
            End If
            If (Not (ds.Tables("VW_MEMBERSTATUS_SUMMARY1")) Is Nothing) Then
                Me.Tables.Add(New VW_MEMBERSTATUS_SUMMARY1DataTable(ds.Tables("VW_MEMBERSTATUS_SUMMARY1")))
            End If
            If (Not (ds.Tables("VIEW_CORPORATE")) Is Nothing) Then
                Me.Tables.Add(New VIEW_CORPORATEDataTable(ds.Tables("VIEW_CORPORATE")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MM_MEMBERSTRENGTH As MM_MEMBERSTRENGTHDataTable
        Get
            Return Me.tableMM_MEMBERSTRENGTH
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VW_MEMBERSTATUS_SUMMARY1 As VW_MEMBERSTATUS_SUMMARY1DataTable
        Get
            Return Me.tableVW_MEMBERSTATUS_SUMMARY1
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VIEW_CORPORATE As VIEW_CORPORATEDataTable
        Get
            Return Me.tableVIEW_CORPORATE
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As MemberStatusSummary_Dataset = CType(MyBase.Clone,MemberStatusSummary_Dataset)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("MM_MEMBERSTRENGTH")) Is Nothing) Then
            Me.Tables.Add(New MM_MEMBERSTRENGTHDataTable(ds.Tables("MM_MEMBERSTRENGTH")))
        End If
        If (Not (ds.Tables("VW_MEMBERSTATUS_SUMMARY1")) Is Nothing) Then
            Me.Tables.Add(New VW_MEMBERSTATUS_SUMMARY1DataTable(ds.Tables("VW_MEMBERSTATUS_SUMMARY1")))
        End If
        If (Not (ds.Tables("VIEW_CORPORATE")) Is Nothing) Then
            Me.Tables.Add(New VIEW_CORPORATEDataTable(ds.Tables("VIEW_CORPORATE")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableMM_MEMBERSTRENGTH = CType(Me.Tables("MM_MEMBERSTRENGTH"),MM_MEMBERSTRENGTHDataTable)
        If (Not (Me.tableMM_MEMBERSTRENGTH) Is Nothing) Then
            Me.tableMM_MEMBERSTRENGTH.InitVars
        End If
        Me.tableVW_MEMBERSTATUS_SUMMARY1 = CType(Me.Tables("VW_MEMBERSTATUS_SUMMARY1"),VW_MEMBERSTATUS_SUMMARY1DataTable)
        If (Not (Me.tableVW_MEMBERSTATUS_SUMMARY1) Is Nothing) Then
            Me.tableVW_MEMBERSTATUS_SUMMARY1.InitVars
        End If
        Me.tableVIEW_CORPORATE = CType(Me.Tables("VIEW_CORPORATE"),VIEW_CORPORATEDataTable)
        If (Not (Me.tableVIEW_CORPORATE) Is Nothing) Then
            Me.tableVIEW_CORPORATE.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "MemberStatusSummary_Dataset"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/MemberStatusSummary_Dataset.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableMM_MEMBERSTRENGTH = New MM_MEMBERSTRENGTHDataTable
        Me.Tables.Add(Me.tableMM_MEMBERSTRENGTH)
        Me.tableVW_MEMBERSTATUS_SUMMARY1 = New VW_MEMBERSTATUS_SUMMARY1DataTable
        Me.Tables.Add(Me.tableVW_MEMBERSTATUS_SUMMARY1)
        Me.tableVIEW_CORPORATE = New VIEW_CORPORATEDataTable
        Me.Tables.Add(Me.tableVIEW_CORPORATE)
    End Sub
    
    Private Function ShouldSerializeMM_MEMBERSTRENGTH() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeVW_MEMBERSTATUS_SUMMARY1() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeVIEW_CORPORATE() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub MM_MEMBERSTRENGTHRowChangeEventHandler(ByVal sender As Object, ByVal e As MM_MEMBERSTRENGTHRowChangeEvent)
    
    Public Delegate Sub VW_MEMBERSTATUS_SUMMARY1RowChangeEventHandler(ByVal sender As Object, ByVal e As VW_MEMBERSTATUS_SUMMARY1RowChangeEvent)
    
    Public Delegate Sub VIEW_CORPORATERowChangeEventHandler(ByVal sender As Object, ByVal e As VIEW_CORPORATERowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MM_MEMBERSTRENGTHDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnMEMBERTYPECODE As DataColumn
        
        Private columnTYPEDESC As DataColumn
        
        Private columnVALUE As DataColumn
        
        Private columnMdescription As DataColumn
        
        Friend Sub New()
            MyBase.New("MM_MEMBERSTRENGTH")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property MEMBERTYPECODEColumn As DataColumn
            Get
                Return Me.columnMEMBERTYPECODE
            End Get
        End Property
        
        Friend ReadOnly Property TYPEDESCColumn As DataColumn
            Get
                Return Me.columnTYPEDESC
            End Get
        End Property
        
        Friend ReadOnly Property VALUEColumn As DataColumn
            Get
                Return Me.columnVALUE
            End Get
        End Property
        
        Friend ReadOnly Property MdescriptionColumn As DataColumn
            Get
                Return Me.columnMdescription
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As MM_MEMBERSTRENGTHRow
            Get
                Return CType(Me.Rows(index),MM_MEMBERSTRENGTHRow)
            End Get
        End Property
        
        Public Event MM_MEMBERSTRENGTHRowChanged As MM_MEMBERSTRENGTHRowChangeEventHandler
        
        Public Event MM_MEMBERSTRENGTHRowChanging As MM_MEMBERSTRENGTHRowChangeEventHandler
        
        Public Event MM_MEMBERSTRENGTHRowDeleted As MM_MEMBERSTRENGTHRowChangeEventHandler
        
        Public Event MM_MEMBERSTRENGTHRowDeleting As MM_MEMBERSTRENGTHRowChangeEventHandler
        
        Public Overloads Sub AddMM_MEMBERSTRENGTHRow(ByVal row As MM_MEMBERSTRENGTHRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddMM_MEMBERSTRENGTHRow(ByVal MEMBERTYPECODE As String, ByVal TYPEDESC As String, ByVal VALUE As Integer, ByVal Mdescription As String) As MM_MEMBERSTRENGTHRow
            Dim rowMM_MEMBERSTRENGTHRow As MM_MEMBERSTRENGTHRow = CType(Me.NewRow,MM_MEMBERSTRENGTHRow)
            rowMM_MEMBERSTRENGTHRow.ItemArray = New Object() {MEMBERTYPECODE, TYPEDESC, VALUE, Mdescription}
            Me.Rows.Add(rowMM_MEMBERSTRENGTHRow)
            Return rowMM_MEMBERSTRENGTHRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As MM_MEMBERSTRENGTHDataTable = CType(MyBase.Clone,MM_MEMBERSTRENGTHDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New MM_MEMBERSTRENGTHDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnMEMBERTYPECODE = Me.Columns("MEMBERTYPECODE")
            Me.columnTYPEDESC = Me.Columns("TYPEDESC")
            Me.columnVALUE = Me.Columns("VALUE")
            Me.columnMdescription = Me.Columns("Mdescription")
        End Sub
        
        Private Sub InitClass()
            Me.columnMEMBERTYPECODE = New DataColumn("MEMBERTYPECODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEMBERTYPECODE)
            Me.columnTYPEDESC = New DataColumn("TYPEDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTYPEDESC)
            Me.columnVALUE = New DataColumn("VALUE", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVALUE)
            Me.columnMdescription = New DataColumn("Mdescription", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMdescription)
            Me.columnTYPEDESC.AllowDBNull = false
        End Sub
        
        Public Function NewMM_MEMBERSTRENGTHRow() As MM_MEMBERSTRENGTHRow
            Return CType(Me.NewRow,MM_MEMBERSTRENGTHRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New MM_MEMBERSTRENGTHRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(MM_MEMBERSTRENGTHRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MM_MEMBERSTRENGTHRowChangedEvent) Is Nothing) Then
                RaiseEvent MM_MEMBERSTRENGTHRowChanged(Me, New MM_MEMBERSTRENGTHRowChangeEvent(CType(e.Row,MM_MEMBERSTRENGTHRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MM_MEMBERSTRENGTHRowChangingEvent) Is Nothing) Then
                RaiseEvent MM_MEMBERSTRENGTHRowChanging(Me, New MM_MEMBERSTRENGTHRowChangeEvent(CType(e.Row,MM_MEMBERSTRENGTHRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MM_MEMBERSTRENGTHRowDeletedEvent) Is Nothing) Then
                RaiseEvent MM_MEMBERSTRENGTHRowDeleted(Me, New MM_MEMBERSTRENGTHRowChangeEvent(CType(e.Row,MM_MEMBERSTRENGTHRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MM_MEMBERSTRENGTHRowDeletingEvent) Is Nothing) Then
                RaiseEvent MM_MEMBERSTRENGTHRowDeleting(Me, New MM_MEMBERSTRENGTHRowChangeEvent(CType(e.Row,MM_MEMBERSTRENGTHRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveMM_MEMBERSTRENGTHRow(ByVal row As MM_MEMBERSTRENGTHRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MM_MEMBERSTRENGTHRow
        Inherits DataRow
        
        Private tableMM_MEMBERSTRENGTH As MM_MEMBERSTRENGTHDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableMM_MEMBERSTRENGTH = CType(Me.Table,MM_MEMBERSTRENGTHDataTable)
        End Sub
        
        Public Property MEMBERTYPECODE As String
            Get
                Try 
                    Return CType(Me(Me.tableMM_MEMBERSTRENGTH.MEMBERTYPECODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMM_MEMBERSTRENGTH.MEMBERTYPECODEColumn) = value
            End Set
        End Property
        
        Public Property TYPEDESC As String
            Get
                Return CType(Me(Me.tableMM_MEMBERSTRENGTH.TYPEDESCColumn),String)
            End Get
            Set
                Me(Me.tableMM_MEMBERSTRENGTH.TYPEDESCColumn) = value
            End Set
        End Property
        
        Public Property VALUE As Integer
            Get
                Try 
                    Return CType(Me(Me.tableMM_MEMBERSTRENGTH.VALUEColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMM_MEMBERSTRENGTH.VALUEColumn) = value
            End Set
        End Property
        
        Public Property Mdescription As String
            Get
                Try 
                    Return CType(Me(Me.tableMM_MEMBERSTRENGTH.MdescriptionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMM_MEMBERSTRENGTH.MdescriptionColumn) = value
            End Set
        End Property
        
        Public Function IsMEMBERTYPECODENull() As Boolean
            Return Me.IsNull(Me.tableMM_MEMBERSTRENGTH.MEMBERTYPECODEColumn)
        End Function
        
        Public Sub SetMEMBERTYPECODENull()
            Me(Me.tableMM_MEMBERSTRENGTH.MEMBERTYPECODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVALUENull() As Boolean
            Return Me.IsNull(Me.tableMM_MEMBERSTRENGTH.VALUEColumn)
        End Function
        
        Public Sub SetVALUENull()
            Me(Me.tableMM_MEMBERSTRENGTH.VALUEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMdescriptionNull() As Boolean
            Return Me.IsNull(Me.tableMM_MEMBERSTRENGTH.MdescriptionColumn)
        End Function
        
        Public Sub SetMdescriptionNull()
            Me(Me.tableMM_MEMBERSTRENGTH.MdescriptionColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MM_MEMBERSTRENGTHRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As MM_MEMBERSTRENGTHRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As MM_MEMBERSTRENGTHRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As MM_MEMBERSTRENGTHRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VW_MEMBERSTATUS_SUMMARY1DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnMEMBERTYPECODE As DataColumn
        
        Private columnTYPEDESC As DataColumn
        
        Private columnVALUE As DataColumn
        
        Private columnCURENTSTATUS As DataColumn
        
        Friend Sub New()
            MyBase.New("VW_MEMBERSTATUS_SUMMARY1")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property MEMBERTYPECODEColumn As DataColumn
            Get
                Return Me.columnMEMBERTYPECODE
            End Get
        End Property
        
        Friend ReadOnly Property TYPEDESCColumn As DataColumn
            Get
                Return Me.columnTYPEDESC
            End Get
        End Property
        
        Friend ReadOnly Property VALUEColumn As DataColumn
            Get
                Return Me.columnVALUE
            End Get
        End Property
        
        Friend ReadOnly Property CURENTSTATUSColumn As DataColumn
            Get
                Return Me.columnCURENTSTATUS
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VW_MEMBERSTATUS_SUMMARY1Row
            Get
                Return CType(Me.Rows(index),VW_MEMBERSTATUS_SUMMARY1Row)
            End Get
        End Property
        
        Public Event VW_MEMBERSTATUS_SUMMARY1RowChanged As VW_MEMBERSTATUS_SUMMARY1RowChangeEventHandler
        
        Public Event VW_MEMBERSTATUS_SUMMARY1RowChanging As VW_MEMBERSTATUS_SUMMARY1RowChangeEventHandler
        
        Public Event VW_MEMBERSTATUS_SUMMARY1RowDeleted As VW_MEMBERSTATUS_SUMMARY1RowChangeEventHandler
        
        Public Event VW_MEMBERSTATUS_SUMMARY1RowDeleting As VW_MEMBERSTATUS_SUMMARY1RowChangeEventHandler
        
        Public Overloads Sub AddVW_MEMBERSTATUS_SUMMARY1Row(ByVal row As VW_MEMBERSTATUS_SUMMARY1Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVW_MEMBERSTATUS_SUMMARY1Row(ByVal MEMBERTYPECODE As String, ByVal TYPEDESC As String, ByVal VALUE As Integer, ByVal CURENTSTATUS As String) As VW_MEMBERSTATUS_SUMMARY1Row
            Dim rowVW_MEMBERSTATUS_SUMMARY1Row As VW_MEMBERSTATUS_SUMMARY1Row = CType(Me.NewRow,VW_MEMBERSTATUS_SUMMARY1Row)
            rowVW_MEMBERSTATUS_SUMMARY1Row.ItemArray = New Object() {MEMBERTYPECODE, TYPEDESC, VALUE, CURENTSTATUS}
            Me.Rows.Add(rowVW_MEMBERSTATUS_SUMMARY1Row)
            Return rowVW_MEMBERSTATUS_SUMMARY1Row
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VW_MEMBERSTATUS_SUMMARY1DataTable = CType(MyBase.Clone,VW_MEMBERSTATUS_SUMMARY1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VW_MEMBERSTATUS_SUMMARY1DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnMEMBERTYPECODE = Me.Columns("MEMBERTYPECODE")
            Me.columnTYPEDESC = Me.Columns("TYPEDESC")
            Me.columnVALUE = Me.Columns("VALUE")
            Me.columnCURENTSTATUS = Me.Columns("CURENTSTATUS")
        End Sub
        
        Private Sub InitClass()
            Me.columnMEMBERTYPECODE = New DataColumn("MEMBERTYPECODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEMBERTYPECODE)
            Me.columnTYPEDESC = New DataColumn("TYPEDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTYPEDESC)
            Me.columnVALUE = New DataColumn("VALUE", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVALUE)
            Me.columnCURENTSTATUS = New DataColumn("CURENTSTATUS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCURENTSTATUS)
            Me.columnTYPEDESC.ReadOnly = true
        End Sub
        
        Public Function NewVW_MEMBERSTATUS_SUMMARY1Row() As VW_MEMBERSTATUS_SUMMARY1Row
            Return CType(Me.NewRow,VW_MEMBERSTATUS_SUMMARY1Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VW_MEMBERSTATUS_SUMMARY1Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VW_MEMBERSTATUS_SUMMARY1Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VW_MEMBERSTATUS_SUMMARY1RowChangedEvent) Is Nothing) Then
                RaiseEvent VW_MEMBERSTATUS_SUMMARY1RowChanged(Me, New VW_MEMBERSTATUS_SUMMARY1RowChangeEvent(CType(e.Row,VW_MEMBERSTATUS_SUMMARY1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VW_MEMBERSTATUS_SUMMARY1RowChangingEvent) Is Nothing) Then
                RaiseEvent VW_MEMBERSTATUS_SUMMARY1RowChanging(Me, New VW_MEMBERSTATUS_SUMMARY1RowChangeEvent(CType(e.Row,VW_MEMBERSTATUS_SUMMARY1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VW_MEMBERSTATUS_SUMMARY1RowDeletedEvent) Is Nothing) Then
                RaiseEvent VW_MEMBERSTATUS_SUMMARY1RowDeleted(Me, New VW_MEMBERSTATUS_SUMMARY1RowChangeEvent(CType(e.Row,VW_MEMBERSTATUS_SUMMARY1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VW_MEMBERSTATUS_SUMMARY1RowDeletingEvent) Is Nothing) Then
                RaiseEvent VW_MEMBERSTATUS_SUMMARY1RowDeleting(Me, New VW_MEMBERSTATUS_SUMMARY1RowChangeEvent(CType(e.Row,VW_MEMBERSTATUS_SUMMARY1Row), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVW_MEMBERSTATUS_SUMMARY1Row(ByVal row As VW_MEMBERSTATUS_SUMMARY1Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VW_MEMBERSTATUS_SUMMARY1Row
        Inherits DataRow
        
        Private tableVW_MEMBERSTATUS_SUMMARY1 As VW_MEMBERSTATUS_SUMMARY1DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVW_MEMBERSTATUS_SUMMARY1 = CType(Me.Table,VW_MEMBERSTATUS_SUMMARY1DataTable)
        End Sub
        
        Public Property MEMBERTYPECODE As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_MEMBERSTATUS_SUMMARY1.MEMBERTYPECODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_MEMBERSTATUS_SUMMARY1.MEMBERTYPECODEColumn) = value
            End Set
        End Property
        
        Public Property TYPEDESC As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_MEMBERSTATUS_SUMMARY1.TYPEDESCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_MEMBERSTATUS_SUMMARY1.TYPEDESCColumn) = value
            End Set
        End Property
        
        Public Property VALUE As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVW_MEMBERSTATUS_SUMMARY1.VALUEColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_MEMBERSTATUS_SUMMARY1.VALUEColumn) = value
            End Set
        End Property
        
        Public Property CURENTSTATUS As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_MEMBERSTATUS_SUMMARY1.CURENTSTATUSColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_MEMBERSTATUS_SUMMARY1.CURENTSTATUSColumn) = value
            End Set
        End Property
        
        Public Function IsMEMBERTYPECODENull() As Boolean
            Return Me.IsNull(Me.tableVW_MEMBERSTATUS_SUMMARY1.MEMBERTYPECODEColumn)
        End Function
        
        Public Sub SetMEMBERTYPECODENull()
            Me(Me.tableVW_MEMBERSTATUS_SUMMARY1.MEMBERTYPECODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTYPEDESCNull() As Boolean
            Return Me.IsNull(Me.tableVW_MEMBERSTATUS_SUMMARY1.TYPEDESCColumn)
        End Function
        
        Public Sub SetTYPEDESCNull()
            Me(Me.tableVW_MEMBERSTATUS_SUMMARY1.TYPEDESCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVALUENull() As Boolean
            Return Me.IsNull(Me.tableVW_MEMBERSTATUS_SUMMARY1.VALUEColumn)
        End Function
        
        Public Sub SetVALUENull()
            Me(Me.tableVW_MEMBERSTATUS_SUMMARY1.VALUEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCURENTSTATUSNull() As Boolean
            Return Me.IsNull(Me.tableVW_MEMBERSTATUS_SUMMARY1.CURENTSTATUSColumn)
        End Function
        
        Public Sub SetCURENTSTATUSNull()
            Me(Me.tableVW_MEMBERSTATUS_SUMMARY1.CURENTSTATUSColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VW_MEMBERSTATUS_SUMMARY1RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VW_MEMBERSTATUS_SUMMARY1Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VW_MEMBERSTATUS_SUMMARY1Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VW_MEMBERSTATUS_SUMMARY1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_CORPORATEDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnDOJ As DataColumn
        
        Private columnENDINGDATE As DataColumn
        
        Private columnMCODE As DataColumn
        
        Private columnMNAME As DataColumn
        
        Private columnCURENTSTATUS As DataColumn
        
        Private columnCORPORATECODE As DataColumn
        
        Private columnCMCORPORATENAME As DataColumn
        
        Private columnREPLACEMENT As DataColumn
        
        Private columnRNO As DataColumn
        
        Friend Sub New()
            MyBase.New("VIEW_CORPORATE")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property DOJColumn As DataColumn
            Get
                Return Me.columnDOJ
            End Get
        End Property
        
        Friend ReadOnly Property ENDINGDATEColumn As DataColumn
            Get
                Return Me.columnENDINGDATE
            End Get
        End Property
        
        Friend ReadOnly Property MCODEColumn As DataColumn
            Get
                Return Me.columnMCODE
            End Get
        End Property
        
        Friend ReadOnly Property MNAMEColumn As DataColumn
            Get
                Return Me.columnMNAME
            End Get
        End Property
        
        Friend ReadOnly Property CURENTSTATUSColumn As DataColumn
            Get
                Return Me.columnCURENTSTATUS
            End Get
        End Property
        
        Friend ReadOnly Property CORPORATECODEColumn As DataColumn
            Get
                Return Me.columnCORPORATECODE
            End Get
        End Property
        
        Friend ReadOnly Property CMCORPORATENAMEColumn As DataColumn
            Get
                Return Me.columnCMCORPORATENAME
            End Get
        End Property
        
        Friend ReadOnly Property REPLACEMENTColumn As DataColumn
            Get
                Return Me.columnREPLACEMENT
            End Get
        End Property
        
        Friend ReadOnly Property RNOColumn As DataColumn
            Get
                Return Me.columnRNO
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VIEW_CORPORATERow
            Get
                Return CType(Me.Rows(index),VIEW_CORPORATERow)
            End Get
        End Property
        
        Public Event VIEW_CORPORATERowChanged As VIEW_CORPORATERowChangeEventHandler
        
        Public Event VIEW_CORPORATERowChanging As VIEW_CORPORATERowChangeEventHandler
        
        Public Event VIEW_CORPORATERowDeleted As VIEW_CORPORATERowChangeEventHandler
        
        Public Event VIEW_CORPORATERowDeleting As VIEW_CORPORATERowChangeEventHandler
        
        Public Overloads Sub AddVIEW_CORPORATERow(ByVal row As VIEW_CORPORATERow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVIEW_CORPORATERow(ByVal DOJ As Date, ByVal ENDINGDATE As Date, ByVal MCODE As String, ByVal MNAME As String, ByVal CURENTSTATUS As String, ByVal CORPORATECODE As String, ByVal CMCORPORATENAME As String, ByVal REPLACEMENT As String, ByVal RNO As String) As VIEW_CORPORATERow
            Dim rowVIEW_CORPORATERow As VIEW_CORPORATERow = CType(Me.NewRow,VIEW_CORPORATERow)
            rowVIEW_CORPORATERow.ItemArray = New Object() {DOJ, ENDINGDATE, MCODE, MNAME, CURENTSTATUS, CORPORATECODE, CMCORPORATENAME, REPLACEMENT, RNO}
            Me.Rows.Add(rowVIEW_CORPORATERow)
            Return rowVIEW_CORPORATERow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VIEW_CORPORATEDataTable = CType(MyBase.Clone,VIEW_CORPORATEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VIEW_CORPORATEDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnDOJ = Me.Columns("DOJ")
            Me.columnENDINGDATE = Me.Columns("ENDINGDATE")
            Me.columnMCODE = Me.Columns("MCODE")
            Me.columnMNAME = Me.Columns("MNAME")
            Me.columnCURENTSTATUS = Me.Columns("CURENTSTATUS")
            Me.columnCORPORATECODE = Me.Columns("CORPORATECODE")
            Me.columnCMCORPORATENAME = Me.Columns("CMCORPORATENAME")
            Me.columnREPLACEMENT = Me.Columns("REPLACEMENT")
            Me.columnRNO = Me.Columns("RNO")
        End Sub
        
        Private Sub InitClass()
            Me.columnDOJ = New DataColumn("DOJ", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDOJ)
            Me.columnENDINGDATE = New DataColumn("ENDINGDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnENDINGDATE)
            Me.columnMCODE = New DataColumn("MCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMCODE)
            Me.columnMNAME = New DataColumn("MNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMNAME)
            Me.columnCURENTSTATUS = New DataColumn("CURENTSTATUS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCURENTSTATUS)
            Me.columnCORPORATECODE = New DataColumn("CORPORATECODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCORPORATECODE)
            Me.columnCMCORPORATENAME = New DataColumn("CMCORPORATENAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCMCORPORATENAME)
            Me.columnREPLACEMENT = New DataColumn("REPLACEMENT", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnREPLACEMENT)
            Me.columnRNO = New DataColumn("RNO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRNO)
            Me.columnDOJ.ReadOnly = true
            Me.columnENDINGDATE.ReadOnly = true
            Me.columnMCODE.ReadOnly = true
            Me.columnMNAME.ReadOnly = true
            Me.columnCURENTSTATUS.ReadOnly = true
            Me.columnCORPORATECODE.ReadOnly = true
            Me.columnCMCORPORATENAME.ReadOnly = true
            Me.columnREPLACEMENT.ReadOnly = true
            Me.columnRNO.ReadOnly = true
        End Sub
        
        Public Function NewVIEW_CORPORATERow() As VIEW_CORPORATERow
            Return CType(Me.NewRow,VIEW_CORPORATERow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VIEW_CORPORATERow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VIEW_CORPORATERow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VIEW_CORPORATERowChangedEvent) Is Nothing) Then
                RaiseEvent VIEW_CORPORATERowChanged(Me, New VIEW_CORPORATERowChangeEvent(CType(e.Row,VIEW_CORPORATERow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VIEW_CORPORATERowChangingEvent) Is Nothing) Then
                RaiseEvent VIEW_CORPORATERowChanging(Me, New VIEW_CORPORATERowChangeEvent(CType(e.Row,VIEW_CORPORATERow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VIEW_CORPORATERowDeletedEvent) Is Nothing) Then
                RaiseEvent VIEW_CORPORATERowDeleted(Me, New VIEW_CORPORATERowChangeEvent(CType(e.Row,VIEW_CORPORATERow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VIEW_CORPORATERowDeletingEvent) Is Nothing) Then
                RaiseEvent VIEW_CORPORATERowDeleting(Me, New VIEW_CORPORATERowChangeEvent(CType(e.Row,VIEW_CORPORATERow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVIEW_CORPORATERow(ByVal row As VIEW_CORPORATERow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_CORPORATERow
        Inherits DataRow
        
        Private tableVIEW_CORPORATE As VIEW_CORPORATEDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVIEW_CORPORATE = CType(Me.Table,VIEW_CORPORATEDataTable)
        End Sub
        
        Public Property DOJ As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_CORPORATE.DOJColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_CORPORATE.DOJColumn) = value
            End Set
        End Property
        
        Public Property ENDINGDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_CORPORATE.ENDINGDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_CORPORATE.ENDINGDATEColumn) = value
            End Set
        End Property
        
        Public Property MCODE As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_CORPORATE.MCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_CORPORATE.MCODEColumn) = value
            End Set
        End Property
        
        Public Property MNAME As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_CORPORATE.MNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_CORPORATE.MNAMEColumn) = value
            End Set
        End Property
        
        Public Property CURENTSTATUS As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_CORPORATE.CURENTSTATUSColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_CORPORATE.CURENTSTATUSColumn) = value
            End Set
        End Property
        
        Public Property CORPORATECODE As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_CORPORATE.CORPORATECODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_CORPORATE.CORPORATECODEColumn) = value
            End Set
        End Property
        
        Public Property CMCORPORATENAME As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_CORPORATE.CMCORPORATENAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_CORPORATE.CMCORPORATENAMEColumn) = value
            End Set
        End Property
        
        Public Property REPLACEMENT As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_CORPORATE.REPLACEMENTColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_CORPORATE.REPLACEMENTColumn) = value
            End Set
        End Property
        
        Public Property RNO As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_CORPORATE.RNOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_CORPORATE.RNOColumn) = value
            End Set
        End Property
        
        Public Function IsDOJNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_CORPORATE.DOJColumn)
        End Function
        
        Public Sub SetDOJNull()
            Me(Me.tableVIEW_CORPORATE.DOJColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsENDINGDATENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_CORPORATE.ENDINGDATEColumn)
        End Function
        
        Public Sub SetENDINGDATENull()
            Me(Me.tableVIEW_CORPORATE.ENDINGDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMCODENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_CORPORATE.MCODEColumn)
        End Function
        
        Public Sub SetMCODENull()
            Me(Me.tableVIEW_CORPORATE.MCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMNAMENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_CORPORATE.MNAMEColumn)
        End Function
        
        Public Sub SetMNAMENull()
            Me(Me.tableVIEW_CORPORATE.MNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCURENTSTATUSNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_CORPORATE.CURENTSTATUSColumn)
        End Function
        
        Public Sub SetCURENTSTATUSNull()
            Me(Me.tableVIEW_CORPORATE.CURENTSTATUSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCORPORATECODENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_CORPORATE.CORPORATECODEColumn)
        End Function
        
        Public Sub SetCORPORATECODENull()
            Me(Me.tableVIEW_CORPORATE.CORPORATECODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCMCORPORATENAMENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_CORPORATE.CMCORPORATENAMEColumn)
        End Function
        
        Public Sub SetCMCORPORATENAMENull()
            Me(Me.tableVIEW_CORPORATE.CMCORPORATENAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsREPLACEMENTNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_CORPORATE.REPLACEMENTColumn)
        End Function
        
        Public Sub SetREPLACEMENTNull()
            Me(Me.tableVIEW_CORPORATE.REPLACEMENTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRNONull() As Boolean
            Return Me.IsNull(Me.tableVIEW_CORPORATE.RNOColumn)
        End Function
        
        Public Sub SetRNONull()
            Me(Me.tableVIEW_CORPORATE.RNOColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_CORPORATERowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VIEW_CORPORATERow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VIEW_CORPORATERow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VIEW_CORPORATERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
