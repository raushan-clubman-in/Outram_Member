'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2470
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DependencyDetails_Dataset
    Inherits DataSet
    
    Private tableVW_DEPENDENCY_DETAILS As VW_DEPENDENCY_DETAILSDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("VW_DEPENDENCY_DETAILS")) Is Nothing) Then
                Me.Tables.Add(New VW_DEPENDENCY_DETAILSDataTable(ds.Tables("VW_DEPENDENCY_DETAILS")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VW_DEPENDENCY_DETAILS As VW_DEPENDENCY_DETAILSDataTable
        Get
            Return Me.tableVW_DEPENDENCY_DETAILS
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DependencyDetails_Dataset = CType(MyBase.Clone,DependencyDetails_Dataset)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("VW_DEPENDENCY_DETAILS")) Is Nothing) Then
            Me.Tables.Add(New VW_DEPENDENCY_DETAILSDataTable(ds.Tables("VW_DEPENDENCY_DETAILS")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableVW_DEPENDENCY_DETAILS = CType(Me.Tables("VW_DEPENDENCY_DETAILS"),VW_DEPENDENCY_DETAILSDataTable)
        If (Not (Me.tableVW_DEPENDENCY_DETAILS) Is Nothing) Then
            Me.tableVW_DEPENDENCY_DETAILS.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DependencyDetails_Dataset"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DependencyDetails_Dataset.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableVW_DEPENDENCY_DETAILS = New VW_DEPENDENCY_DETAILSDataTable
        Me.Tables.Add(Me.tableVW_DEPENDENCY_DETAILS)
    End Sub
    
    Private Function ShouldSerializeVW_DEPENDENCY_DETAILS() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub VW_DEPENDENCY_DETAILSRowChangeEventHandler(ByVal sender As Object, ByVal e As VW_DEPENDENCY_DETAILSRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VW_DEPENDENCY_DETAILSDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnMEM_CODE As DataColumn
        
        Private columnCHILD_NM As DataColumn
        
        Private columnRELATION As DataColumn
        
        Private columnCHILD_DOB As DataColumn
        
        Private columnTYPE0 As DataColumn
        
        Private columnMNAME As DataColumn
        
        Friend Sub New()
            MyBase.New("VW_DEPENDENCY_DETAILS")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property MEM_CODEColumn As DataColumn
            Get
                Return Me.columnMEM_CODE
            End Get
        End Property
        
        Friend ReadOnly Property CHILD_NMColumn As DataColumn
            Get
                Return Me.columnCHILD_NM
            End Get
        End Property
        
        Friend ReadOnly Property RELATIONColumn As DataColumn
            Get
                Return Me.columnRELATION
            End Get
        End Property
        
        Friend ReadOnly Property CHILD_DOBColumn As DataColumn
            Get
                Return Me.columnCHILD_DOB
            End Get
        End Property
        
        Friend ReadOnly Property TYPE0Column As DataColumn
            Get
                Return Me.columnTYPE0
            End Get
        End Property
        
        Friend ReadOnly Property MNAMEColumn As DataColumn
            Get
                Return Me.columnMNAME
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VW_DEPENDENCY_DETAILSRow
            Get
                Return CType(Me.Rows(index),VW_DEPENDENCY_DETAILSRow)
            End Get
        End Property
        
        Public Event VW_DEPENDENCY_DETAILSRowChanged As VW_DEPENDENCY_DETAILSRowChangeEventHandler
        
        Public Event VW_DEPENDENCY_DETAILSRowChanging As VW_DEPENDENCY_DETAILSRowChangeEventHandler
        
        Public Event VW_DEPENDENCY_DETAILSRowDeleted As VW_DEPENDENCY_DETAILSRowChangeEventHandler
        
        Public Event VW_DEPENDENCY_DETAILSRowDeleting As VW_DEPENDENCY_DETAILSRowChangeEventHandler
        
        Public Overloads Sub AddVW_DEPENDENCY_DETAILSRow(ByVal row As VW_DEPENDENCY_DETAILSRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVW_DEPENDENCY_DETAILSRow(ByVal MEM_CODE As String, ByVal CHILD_NM As String, ByVal RELATION As String, ByVal CHILD_DOB As Date, ByVal TYPE0 As String, ByVal MNAME As String) As VW_DEPENDENCY_DETAILSRow
            Dim rowVW_DEPENDENCY_DETAILSRow As VW_DEPENDENCY_DETAILSRow = CType(Me.NewRow,VW_DEPENDENCY_DETAILSRow)
            rowVW_DEPENDENCY_DETAILSRow.ItemArray = New Object() {MEM_CODE, CHILD_NM, RELATION, CHILD_DOB, TYPE0, MNAME}
            Me.Rows.Add(rowVW_DEPENDENCY_DETAILSRow)
            Return rowVW_DEPENDENCY_DETAILSRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VW_DEPENDENCY_DETAILSDataTable = CType(MyBase.Clone,VW_DEPENDENCY_DETAILSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VW_DEPENDENCY_DETAILSDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnMEM_CODE = Me.Columns("MEM_CODE")
            Me.columnCHILD_NM = Me.Columns("CHILD_NM")
            Me.columnRELATION = Me.Columns("RELATION")
            Me.columnCHILD_DOB = Me.Columns("CHILD_DOB")
            Me.columnTYPE0 = Me.Columns("TYPE0")
            Me.columnMNAME = Me.Columns("MNAME")
        End Sub
        
        Private Sub InitClass()
            Me.columnMEM_CODE = New DataColumn("MEM_CODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEM_CODE)
            Me.columnCHILD_NM = New DataColumn("CHILD_NM", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCHILD_NM)
            Me.columnRELATION = New DataColumn("RELATION", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRELATION)
            Me.columnCHILD_DOB = New DataColumn("CHILD_DOB", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCHILD_DOB)
            Me.columnTYPE0 = New DataColumn("TYPE0", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTYPE0)
            Me.columnMNAME = New DataColumn("MNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMNAME)
            Me.columnCHILD_DOB.ReadOnly = true
            Me.columnTYPE0.ReadOnly = true
            Me.columnMNAME.ReadOnly = true
        End Sub
        
        Public Function NewVW_DEPENDENCY_DETAILSRow() As VW_DEPENDENCY_DETAILSRow
            Return CType(Me.NewRow,VW_DEPENDENCY_DETAILSRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VW_DEPENDENCY_DETAILSRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VW_DEPENDENCY_DETAILSRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VW_DEPENDENCY_DETAILSRowChangedEvent) Is Nothing) Then
                RaiseEvent VW_DEPENDENCY_DETAILSRowChanged(Me, New VW_DEPENDENCY_DETAILSRowChangeEvent(CType(e.Row,VW_DEPENDENCY_DETAILSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VW_DEPENDENCY_DETAILSRowChangingEvent) Is Nothing) Then
                RaiseEvent VW_DEPENDENCY_DETAILSRowChanging(Me, New VW_DEPENDENCY_DETAILSRowChangeEvent(CType(e.Row,VW_DEPENDENCY_DETAILSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VW_DEPENDENCY_DETAILSRowDeletedEvent) Is Nothing) Then
                RaiseEvent VW_DEPENDENCY_DETAILSRowDeleted(Me, New VW_DEPENDENCY_DETAILSRowChangeEvent(CType(e.Row,VW_DEPENDENCY_DETAILSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VW_DEPENDENCY_DETAILSRowDeletingEvent) Is Nothing) Then
                RaiseEvent VW_DEPENDENCY_DETAILSRowDeleting(Me, New VW_DEPENDENCY_DETAILSRowChangeEvent(CType(e.Row,VW_DEPENDENCY_DETAILSRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVW_DEPENDENCY_DETAILSRow(ByVal row As VW_DEPENDENCY_DETAILSRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VW_DEPENDENCY_DETAILSRow
        Inherits DataRow
        
        Private tableVW_DEPENDENCY_DETAILS As VW_DEPENDENCY_DETAILSDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVW_DEPENDENCY_DETAILS = CType(Me.Table,VW_DEPENDENCY_DETAILSDataTable)
        End Sub
        
        Public Property MEM_CODE As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_DEPENDENCY_DETAILS.MEM_CODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_DEPENDENCY_DETAILS.MEM_CODEColumn) = value
            End Set
        End Property
        
        Public Property CHILD_NM As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_DEPENDENCY_DETAILS.CHILD_NMColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_DEPENDENCY_DETAILS.CHILD_NMColumn) = value
            End Set
        End Property
        
        Public Property RELATION As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_DEPENDENCY_DETAILS.RELATIONColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_DEPENDENCY_DETAILS.RELATIONColumn) = value
            End Set
        End Property
        
        Public Property CHILD_DOB As Date
            Get
                Try 
                    Return CType(Me(Me.tableVW_DEPENDENCY_DETAILS.CHILD_DOBColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_DEPENDENCY_DETAILS.CHILD_DOBColumn) = value
            End Set
        End Property
        
        Public Property TYPE0 As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_DEPENDENCY_DETAILS.TYPE0Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_DEPENDENCY_DETAILS.TYPE0Column) = value
            End Set
        End Property
        
        Public Property MNAME As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_DEPENDENCY_DETAILS.MNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_DEPENDENCY_DETAILS.MNAMEColumn) = value
            End Set
        End Property
        
        Public Function IsMEM_CODENull() As Boolean
            Return Me.IsNull(Me.tableVW_DEPENDENCY_DETAILS.MEM_CODEColumn)
        End Function
        
        Public Sub SetMEM_CODENull()
            Me(Me.tableVW_DEPENDENCY_DETAILS.MEM_CODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCHILD_NMNull() As Boolean
            Return Me.IsNull(Me.tableVW_DEPENDENCY_DETAILS.CHILD_NMColumn)
        End Function
        
        Public Sub SetCHILD_NMNull()
            Me(Me.tableVW_DEPENDENCY_DETAILS.CHILD_NMColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRELATIONNull() As Boolean
            Return Me.IsNull(Me.tableVW_DEPENDENCY_DETAILS.RELATIONColumn)
        End Function
        
        Public Sub SetRELATIONNull()
            Me(Me.tableVW_DEPENDENCY_DETAILS.RELATIONColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCHILD_DOBNull() As Boolean
            Return Me.IsNull(Me.tableVW_DEPENDENCY_DETAILS.CHILD_DOBColumn)
        End Function
        
        Public Sub SetCHILD_DOBNull()
            Me(Me.tableVW_DEPENDENCY_DETAILS.CHILD_DOBColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTYPE0Null() As Boolean
            Return Me.IsNull(Me.tableVW_DEPENDENCY_DETAILS.TYPE0Column)
        End Function
        
        Public Sub SetTYPE0Null()
            Me(Me.tableVW_DEPENDENCY_DETAILS.TYPE0Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsMNAMENull() As Boolean
            Return Me.IsNull(Me.tableVW_DEPENDENCY_DETAILS.MNAMEColumn)
        End Function
        
        Public Sub SetMNAMENull()
            Me(Me.tableVW_DEPENDENCY_DETAILS.MNAMEColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VW_DEPENDENCY_DETAILSRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VW_DEPENDENCY_DETAILSRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VW_DEPENDENCY_DETAILSRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VW_DEPENDENCY_DETAILSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
