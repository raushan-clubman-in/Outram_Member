'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2470
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class Dataset5
    Inherits DataSet
    
    Private tableVIEW_MEM_ADDR As VIEW_MEM_ADDRDataTable
    
    Private tableVIEW_MEM_PHLIST As VIEW_MEM_PHLISTDataTable
    
    Private tablemonthenddetail As monthenddetailDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("VIEW_MEM_ADDR")) Is Nothing) Then
                Me.Tables.Add(New VIEW_MEM_ADDRDataTable(ds.Tables("VIEW_MEM_ADDR")))
            End If
            If (Not (ds.Tables("VIEW_MEM_PHLIST")) Is Nothing) Then
                Me.Tables.Add(New VIEW_MEM_PHLISTDataTable(ds.Tables("VIEW_MEM_PHLIST")))
            End If
            If (Not (ds.Tables("monthenddetail")) Is Nothing) Then
                Me.Tables.Add(New monthenddetailDataTable(ds.Tables("monthenddetail")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VIEW_MEM_ADDR As VIEW_MEM_ADDRDataTable
        Get
            Return Me.tableVIEW_MEM_ADDR
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VIEW_MEM_PHLIST As VIEW_MEM_PHLISTDataTable
        Get
            Return Me.tableVIEW_MEM_PHLIST
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property monthenddetail As monthenddetailDataTable
        Get
            Return Me.tablemonthenddetail
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As Dataset5 = CType(MyBase.Clone,Dataset5)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("VIEW_MEM_ADDR")) Is Nothing) Then
            Me.Tables.Add(New VIEW_MEM_ADDRDataTable(ds.Tables("VIEW_MEM_ADDR")))
        End If
        If (Not (ds.Tables("VIEW_MEM_PHLIST")) Is Nothing) Then
            Me.Tables.Add(New VIEW_MEM_PHLISTDataTable(ds.Tables("VIEW_MEM_PHLIST")))
        End If
        If (Not (ds.Tables("monthenddetail")) Is Nothing) Then
            Me.Tables.Add(New monthenddetailDataTable(ds.Tables("monthenddetail")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableVIEW_MEM_ADDR = CType(Me.Tables("VIEW_MEM_ADDR"),VIEW_MEM_ADDRDataTable)
        If (Not (Me.tableVIEW_MEM_ADDR) Is Nothing) Then
            Me.tableVIEW_MEM_ADDR.InitVars
        End If
        Me.tableVIEW_MEM_PHLIST = CType(Me.Tables("VIEW_MEM_PHLIST"),VIEW_MEM_PHLISTDataTable)
        If (Not (Me.tableVIEW_MEM_PHLIST) Is Nothing) Then
            Me.tableVIEW_MEM_PHLIST.InitVars
        End If
        Me.tablemonthenddetail = CType(Me.Tables("monthenddetail"),monthenddetailDataTable)
        If (Not (Me.tablemonthenddetail) Is Nothing) Then
            Me.tablemonthenddetail.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "Dataset5"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/Dataset5.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableVIEW_MEM_ADDR = New VIEW_MEM_ADDRDataTable
        Me.Tables.Add(Me.tableVIEW_MEM_ADDR)
        Me.tableVIEW_MEM_PHLIST = New VIEW_MEM_PHLISTDataTable
        Me.Tables.Add(Me.tableVIEW_MEM_PHLIST)
        Me.tablemonthenddetail = New monthenddetailDataTable
        Me.Tables.Add(Me.tablemonthenddetail)
    End Sub
    
    Private Function ShouldSerializeVIEW_MEM_ADDR() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeVIEW_MEM_PHLIST() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializemonthenddetail() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub VIEW_MEM_ADDRRowChangeEventHandler(ByVal sender As Object, ByVal e As VIEW_MEM_ADDRRowChangeEvent)
    
    Public Delegate Sub VIEW_MEM_PHLISTRowChangeEventHandler(ByVal sender As Object, ByVal e As VIEW_MEM_PHLISTRowChangeEvent)
    
    Public Delegate Sub monthenddetailRowChangeEventHandler(ByVal sender As Object, ByVal e As monthenddetailRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_MEM_ADDRDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnMCODE As DataColumn
        
        Private columnMNAME As DataColumn
        
        Private columnMEMBERTYPECODE As DataColumn
        
        Private columnCurentStatus As DataColumn
        
        Private columnCONTACTADDRESS As DataColumn
        
        Private columnOFFICEADDRESS As DataColumn
        
        Private columnPERMANENTADDRESS As DataColumn
        
        Private columnPHONE As DataColumn
        
        Private columnDOJ As DataColumn
        
        Friend Sub New()
            MyBase.New("VIEW_MEM_ADDR")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property MCODEColumn As DataColumn
            Get
                Return Me.columnMCODE
            End Get
        End Property
        
        Friend ReadOnly Property MNAMEColumn As DataColumn
            Get
                Return Me.columnMNAME
            End Get
        End Property
        
        Friend ReadOnly Property MEMBERTYPECODEColumn As DataColumn
            Get
                Return Me.columnMEMBERTYPECODE
            End Get
        End Property
        
        Friend ReadOnly Property CurentStatusColumn As DataColumn
            Get
                Return Me.columnCurentStatus
            End Get
        End Property
        
        Friend ReadOnly Property CONTACTADDRESSColumn As DataColumn
            Get
                Return Me.columnCONTACTADDRESS
            End Get
        End Property
        
        Friend ReadOnly Property OFFICEADDRESSColumn As DataColumn
            Get
                Return Me.columnOFFICEADDRESS
            End Get
        End Property
        
        Friend ReadOnly Property PERMANENTADDRESSColumn As DataColumn
            Get
                Return Me.columnPERMANENTADDRESS
            End Get
        End Property
        
        Friend ReadOnly Property PHONEColumn As DataColumn
            Get
                Return Me.columnPHONE
            End Get
        End Property
        
        Friend ReadOnly Property DOJColumn As DataColumn
            Get
                Return Me.columnDOJ
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VIEW_MEM_ADDRRow
            Get
                Return CType(Me.Rows(index),VIEW_MEM_ADDRRow)
            End Get
        End Property
        
        Public Event VIEW_MEM_ADDRRowChanged As VIEW_MEM_ADDRRowChangeEventHandler
        
        Public Event VIEW_MEM_ADDRRowChanging As VIEW_MEM_ADDRRowChangeEventHandler
        
        Public Event VIEW_MEM_ADDRRowDeleted As VIEW_MEM_ADDRRowChangeEventHandler
        
        Public Event VIEW_MEM_ADDRRowDeleting As VIEW_MEM_ADDRRowChangeEventHandler
        
        Public Overloads Sub AddVIEW_MEM_ADDRRow(ByVal row As VIEW_MEM_ADDRRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVIEW_MEM_ADDRRow(ByVal MCODE As String, ByVal MNAME As String, ByVal MEMBERTYPECODE As String, ByVal CurentStatus As String, ByVal CONTACTADDRESS As String, ByVal OFFICEADDRESS As String, ByVal PERMANENTADDRESS As String, ByVal PHONE As String, ByVal DOJ As Date) As VIEW_MEM_ADDRRow
            Dim rowVIEW_MEM_ADDRRow As VIEW_MEM_ADDRRow = CType(Me.NewRow,VIEW_MEM_ADDRRow)
            rowVIEW_MEM_ADDRRow.ItemArray = New Object() {MCODE, MNAME, MEMBERTYPECODE, CurentStatus, CONTACTADDRESS, OFFICEADDRESS, PERMANENTADDRESS, PHONE, DOJ}
            Me.Rows.Add(rowVIEW_MEM_ADDRRow)
            Return rowVIEW_MEM_ADDRRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VIEW_MEM_ADDRDataTable = CType(MyBase.Clone,VIEW_MEM_ADDRDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VIEW_MEM_ADDRDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnMCODE = Me.Columns("MCODE")
            Me.columnMNAME = Me.Columns("MNAME")
            Me.columnMEMBERTYPECODE = Me.Columns("MEMBERTYPECODE")
            Me.columnCurentStatus = Me.Columns("CurentStatus")
            Me.columnCONTACTADDRESS = Me.Columns("CONTACTADDRESS")
            Me.columnOFFICEADDRESS = Me.Columns("OFFICEADDRESS")
            Me.columnPERMANENTADDRESS = Me.Columns("PERMANENTADDRESS")
            Me.columnPHONE = Me.Columns("PHONE")
            Me.columnDOJ = Me.Columns("DOJ")
        End Sub
        
        Private Sub InitClass()
            Me.columnMCODE = New DataColumn("MCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMCODE)
            Me.columnMNAME = New DataColumn("MNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMNAME)
            Me.columnMEMBERTYPECODE = New DataColumn("MEMBERTYPECODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEMBERTYPECODE)
            Me.columnCurentStatus = New DataColumn("CurentStatus", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCurentStatus)
            Me.columnCONTACTADDRESS = New DataColumn("CONTACTADDRESS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCONTACTADDRESS)
            Me.columnOFFICEADDRESS = New DataColumn("OFFICEADDRESS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOFFICEADDRESS)
            Me.columnPERMANENTADDRESS = New DataColumn("PERMANENTADDRESS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPERMANENTADDRESS)
            Me.columnPHONE = New DataColumn("PHONE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPHONE)
            Me.columnDOJ = New DataColumn("DOJ", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDOJ)
            Me.columnMCODE.AllowDBNull = false
            Me.columnCONTACTADDRESS.ReadOnly = true
            Me.columnOFFICEADDRESS.ReadOnly = true
            Me.columnPERMANENTADDRESS.ReadOnly = true
            Me.columnPHONE.ReadOnly = true
        End Sub
        
        Public Function NewVIEW_MEM_ADDRRow() As VIEW_MEM_ADDRRow
            Return CType(Me.NewRow,VIEW_MEM_ADDRRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VIEW_MEM_ADDRRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VIEW_MEM_ADDRRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VIEW_MEM_ADDRRowChangedEvent) Is Nothing) Then
                RaiseEvent VIEW_MEM_ADDRRowChanged(Me, New VIEW_MEM_ADDRRowChangeEvent(CType(e.Row,VIEW_MEM_ADDRRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VIEW_MEM_ADDRRowChangingEvent) Is Nothing) Then
                RaiseEvent VIEW_MEM_ADDRRowChanging(Me, New VIEW_MEM_ADDRRowChangeEvent(CType(e.Row,VIEW_MEM_ADDRRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VIEW_MEM_ADDRRowDeletedEvent) Is Nothing) Then
                RaiseEvent VIEW_MEM_ADDRRowDeleted(Me, New VIEW_MEM_ADDRRowChangeEvent(CType(e.Row,VIEW_MEM_ADDRRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VIEW_MEM_ADDRRowDeletingEvent) Is Nothing) Then
                RaiseEvent VIEW_MEM_ADDRRowDeleting(Me, New VIEW_MEM_ADDRRowChangeEvent(CType(e.Row,VIEW_MEM_ADDRRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVIEW_MEM_ADDRRow(ByVal row As VIEW_MEM_ADDRRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_MEM_ADDRRow
        Inherits DataRow
        
        Private tableVIEW_MEM_ADDR As VIEW_MEM_ADDRDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVIEW_MEM_ADDR = CType(Me.Table,VIEW_MEM_ADDRDataTable)
        End Sub
        
        Public Property MCODE As String
            Get
                Return CType(Me(Me.tableVIEW_MEM_ADDR.MCODEColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_MEM_ADDR.MCODEColumn) = value
            End Set
        End Property
        
        Public Property MNAME As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_ADDR.MNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_ADDR.MNAMEColumn) = value
            End Set
        End Property
        
        Public Property MEMBERTYPECODE As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_ADDR.MEMBERTYPECODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_ADDR.MEMBERTYPECODEColumn) = value
            End Set
        End Property
        
        Public Property CurentStatus As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_ADDR.CurentStatusColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_ADDR.CurentStatusColumn) = value
            End Set
        End Property
        
        Public Property CONTACTADDRESS As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_ADDR.CONTACTADDRESSColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_ADDR.CONTACTADDRESSColumn) = value
            End Set
        End Property
        
        Public Property OFFICEADDRESS As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_ADDR.OFFICEADDRESSColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_ADDR.OFFICEADDRESSColumn) = value
            End Set
        End Property
        
        Public Property PERMANENTADDRESS As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_ADDR.PERMANENTADDRESSColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_ADDR.PERMANENTADDRESSColumn) = value
            End Set
        End Property
        
        Public Property PHONE As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_ADDR.PHONEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_ADDR.PHONEColumn) = value
            End Set
        End Property
        
        Public Property DOJ As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_ADDR.DOJColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_ADDR.DOJColumn) = value
            End Set
        End Property
        
        Public Function IsMNAMENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_ADDR.MNAMEColumn)
        End Function
        
        Public Sub SetMNAMENull()
            Me(Me.tableVIEW_MEM_ADDR.MNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMEMBERTYPECODENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_ADDR.MEMBERTYPECODEColumn)
        End Function
        
        Public Sub SetMEMBERTYPECODENull()
            Me(Me.tableVIEW_MEM_ADDR.MEMBERTYPECODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCurentStatusNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_ADDR.CurentStatusColumn)
        End Function
        
        Public Sub SetCurentStatusNull()
            Me(Me.tableVIEW_MEM_ADDR.CurentStatusColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCONTACTADDRESSNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_ADDR.CONTACTADDRESSColumn)
        End Function
        
        Public Sub SetCONTACTADDRESSNull()
            Me(Me.tableVIEW_MEM_ADDR.CONTACTADDRESSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOFFICEADDRESSNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_ADDR.OFFICEADDRESSColumn)
        End Function
        
        Public Sub SetOFFICEADDRESSNull()
            Me(Me.tableVIEW_MEM_ADDR.OFFICEADDRESSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPERMANENTADDRESSNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_ADDR.PERMANENTADDRESSColumn)
        End Function
        
        Public Sub SetPERMANENTADDRESSNull()
            Me(Me.tableVIEW_MEM_ADDR.PERMANENTADDRESSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPHONENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_ADDR.PHONEColumn)
        End Function
        
        Public Sub SetPHONENull()
            Me(Me.tableVIEW_MEM_ADDR.PHONEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDOJNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_ADDR.DOJColumn)
        End Function
        
        Public Sub SetDOJNull()
            Me(Me.tableVIEW_MEM_ADDR.DOJColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_MEM_ADDRRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VIEW_MEM_ADDRRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VIEW_MEM_ADDRRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VIEW_MEM_ADDRRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_MEM_PHLISTDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnMCODE As DataColumn
        
        Private columnMNAME As DataColumn
        
        Private columnMEMBERTYPECODE As DataColumn
        
        Private columnCurentStatus As DataColumn
        
        Private columnCONTACTADDRESS As DataColumn
        
        Private columnOFFICEADDRESS As DataColumn
        
        Private columnPERMANENTADDRESS As DataColumn
        
        Private columnPHONE1 As DataColumn
        
        Private columnPHONE2 As DataColumn
        
        Private columnMOBILE As DataColumn
        
        Private columnDOJ As DataColumn
        
        Private columnDOB As DataColumn
        
        Friend Sub New()
            MyBase.New("VIEW_MEM_PHLIST")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property MCODEColumn As DataColumn
            Get
                Return Me.columnMCODE
            End Get
        End Property
        
        Friend ReadOnly Property MNAMEColumn As DataColumn
            Get
                Return Me.columnMNAME
            End Get
        End Property
        
        Friend ReadOnly Property MEMBERTYPECODEColumn As DataColumn
            Get
                Return Me.columnMEMBERTYPECODE
            End Get
        End Property
        
        Friend ReadOnly Property CurentStatusColumn As DataColumn
            Get
                Return Me.columnCurentStatus
            End Get
        End Property
        
        Friend ReadOnly Property CONTACTADDRESSColumn As DataColumn
            Get
                Return Me.columnCONTACTADDRESS
            End Get
        End Property
        
        Friend ReadOnly Property OFFICEADDRESSColumn As DataColumn
            Get
                Return Me.columnOFFICEADDRESS
            End Get
        End Property
        
        Friend ReadOnly Property PERMANENTADDRESSColumn As DataColumn
            Get
                Return Me.columnPERMANENTADDRESS
            End Get
        End Property
        
        Friend ReadOnly Property PHONE1Column As DataColumn
            Get
                Return Me.columnPHONE1
            End Get
        End Property
        
        Friend ReadOnly Property PHONE2Column As DataColumn
            Get
                Return Me.columnPHONE2
            End Get
        End Property
        
        Friend ReadOnly Property MOBILEColumn As DataColumn
            Get
                Return Me.columnMOBILE
            End Get
        End Property
        
        Friend ReadOnly Property DOJColumn As DataColumn
            Get
                Return Me.columnDOJ
            End Get
        End Property
        
        Friend ReadOnly Property DOBColumn As DataColumn
            Get
                Return Me.columnDOB
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VIEW_MEM_PHLISTRow
            Get
                Return CType(Me.Rows(index),VIEW_MEM_PHLISTRow)
            End Get
        End Property
        
        Public Event VIEW_MEM_PHLISTRowChanged As VIEW_MEM_PHLISTRowChangeEventHandler
        
        Public Event VIEW_MEM_PHLISTRowChanging As VIEW_MEM_PHLISTRowChangeEventHandler
        
        Public Event VIEW_MEM_PHLISTRowDeleted As VIEW_MEM_PHLISTRowChangeEventHandler
        
        Public Event VIEW_MEM_PHLISTRowDeleting As VIEW_MEM_PHLISTRowChangeEventHandler
        
        Public Overloads Sub AddVIEW_MEM_PHLISTRow(ByVal row As VIEW_MEM_PHLISTRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVIEW_MEM_PHLISTRow(ByVal MCODE As String, ByVal MNAME As String, ByVal MEMBERTYPECODE As String, ByVal CurentStatus As String, ByVal CONTACTADDRESS As String, ByVal OFFICEADDRESS As String, ByVal PERMANENTADDRESS As String, ByVal PHONE1 As String, ByVal PHONE2 As String, ByVal MOBILE As String, ByVal DOJ As Date, ByVal DOB As Date) As VIEW_MEM_PHLISTRow
            Dim rowVIEW_MEM_PHLISTRow As VIEW_MEM_PHLISTRow = CType(Me.NewRow,VIEW_MEM_PHLISTRow)
            rowVIEW_MEM_PHLISTRow.ItemArray = New Object() {MCODE, MNAME, MEMBERTYPECODE, CurentStatus, CONTACTADDRESS, OFFICEADDRESS, PERMANENTADDRESS, PHONE1, PHONE2, MOBILE, DOJ, DOB}
            Me.Rows.Add(rowVIEW_MEM_PHLISTRow)
            Return rowVIEW_MEM_PHLISTRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VIEW_MEM_PHLISTDataTable = CType(MyBase.Clone,VIEW_MEM_PHLISTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VIEW_MEM_PHLISTDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnMCODE = Me.Columns("MCODE")
            Me.columnMNAME = Me.Columns("MNAME")
            Me.columnMEMBERTYPECODE = Me.Columns("MEMBERTYPECODE")
            Me.columnCurentStatus = Me.Columns("CurentStatus")
            Me.columnCONTACTADDRESS = Me.Columns("CONTACTADDRESS")
            Me.columnOFFICEADDRESS = Me.Columns("OFFICEADDRESS")
            Me.columnPERMANENTADDRESS = Me.Columns("PERMANENTADDRESS")
            Me.columnPHONE1 = Me.Columns("PHONE1")
            Me.columnPHONE2 = Me.Columns("PHONE2")
            Me.columnMOBILE = Me.Columns("MOBILE")
            Me.columnDOJ = Me.Columns("DOJ")
            Me.columnDOB = Me.Columns("DOB")
        End Sub
        
        Private Sub InitClass()
            Me.columnMCODE = New DataColumn("MCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMCODE)
            Me.columnMNAME = New DataColumn("MNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMNAME)
            Me.columnMEMBERTYPECODE = New DataColumn("MEMBERTYPECODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEMBERTYPECODE)
            Me.columnCurentStatus = New DataColumn("CurentStatus", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCurentStatus)
            Me.columnCONTACTADDRESS = New DataColumn("CONTACTADDRESS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCONTACTADDRESS)
            Me.columnOFFICEADDRESS = New DataColumn("OFFICEADDRESS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOFFICEADDRESS)
            Me.columnPERMANENTADDRESS = New DataColumn("PERMANENTADDRESS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPERMANENTADDRESS)
            Me.columnPHONE1 = New DataColumn("PHONE1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPHONE1)
            Me.columnPHONE2 = New DataColumn("PHONE2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPHONE2)
            Me.columnMOBILE = New DataColumn("MOBILE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMOBILE)
            Me.columnDOJ = New DataColumn("DOJ", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDOJ)
            Me.columnDOB = New DataColumn("DOB", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDOB)
            Me.columnMCODE.AllowDBNull = false
            Me.columnCONTACTADDRESS.ReadOnly = true
            Me.columnOFFICEADDRESS.ReadOnly = true
            Me.columnPERMANENTADDRESS.ReadOnly = true
            Me.columnPHONE1.ReadOnly = true
            Me.columnPHONE2.ReadOnly = true
            Me.columnMOBILE.ReadOnly = true
        End Sub
        
        Public Function NewVIEW_MEM_PHLISTRow() As VIEW_MEM_PHLISTRow
            Return CType(Me.NewRow,VIEW_MEM_PHLISTRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VIEW_MEM_PHLISTRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VIEW_MEM_PHLISTRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VIEW_MEM_PHLISTRowChangedEvent) Is Nothing) Then
                RaiseEvent VIEW_MEM_PHLISTRowChanged(Me, New VIEW_MEM_PHLISTRowChangeEvent(CType(e.Row,VIEW_MEM_PHLISTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VIEW_MEM_PHLISTRowChangingEvent) Is Nothing) Then
                RaiseEvent VIEW_MEM_PHLISTRowChanging(Me, New VIEW_MEM_PHLISTRowChangeEvent(CType(e.Row,VIEW_MEM_PHLISTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VIEW_MEM_PHLISTRowDeletedEvent) Is Nothing) Then
                RaiseEvent VIEW_MEM_PHLISTRowDeleted(Me, New VIEW_MEM_PHLISTRowChangeEvent(CType(e.Row,VIEW_MEM_PHLISTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VIEW_MEM_PHLISTRowDeletingEvent) Is Nothing) Then
                RaiseEvent VIEW_MEM_PHLISTRowDeleting(Me, New VIEW_MEM_PHLISTRowChangeEvent(CType(e.Row,VIEW_MEM_PHLISTRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVIEW_MEM_PHLISTRow(ByVal row As VIEW_MEM_PHLISTRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_MEM_PHLISTRow
        Inherits DataRow
        
        Private tableVIEW_MEM_PHLIST As VIEW_MEM_PHLISTDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVIEW_MEM_PHLIST = CType(Me.Table,VIEW_MEM_PHLISTDataTable)
        End Sub
        
        Public Property MCODE As String
            Get
                Return CType(Me(Me.tableVIEW_MEM_PHLIST.MCODEColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_MEM_PHLIST.MCODEColumn) = value
            End Set
        End Property
        
        Public Property MNAME As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_PHLIST.MNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_PHLIST.MNAMEColumn) = value
            End Set
        End Property
        
        Public Property MEMBERTYPECODE As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_PHLIST.MEMBERTYPECODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_PHLIST.MEMBERTYPECODEColumn) = value
            End Set
        End Property
        
        Public Property CurentStatus As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_PHLIST.CurentStatusColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_PHLIST.CurentStatusColumn) = value
            End Set
        End Property
        
        Public Property CONTACTADDRESS As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_PHLIST.CONTACTADDRESSColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_PHLIST.CONTACTADDRESSColumn) = value
            End Set
        End Property
        
        Public Property OFFICEADDRESS As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_PHLIST.OFFICEADDRESSColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_PHLIST.OFFICEADDRESSColumn) = value
            End Set
        End Property
        
        Public Property PERMANENTADDRESS As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_PHLIST.PERMANENTADDRESSColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_PHLIST.PERMANENTADDRESSColumn) = value
            End Set
        End Property
        
        Public Property PHONE1 As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_PHLIST.PHONE1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_PHLIST.PHONE1Column) = value
            End Set
        End Property
        
        Public Property PHONE2 As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_PHLIST.PHONE2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_PHLIST.PHONE2Column) = value
            End Set
        End Property
        
        Public Property MOBILE As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_PHLIST.MOBILEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_PHLIST.MOBILEColumn) = value
            End Set
        End Property
        
        Public Property DOJ As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_PHLIST.DOJColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_PHLIST.DOJColumn) = value
            End Set
        End Property
        
        Public Property DOB As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_PHLIST.DOBColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_PHLIST.DOBColumn) = value
            End Set
        End Property
        
        Public Function IsMNAMENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_PHLIST.MNAMEColumn)
        End Function
        
        Public Sub SetMNAMENull()
            Me(Me.tableVIEW_MEM_PHLIST.MNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMEMBERTYPECODENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_PHLIST.MEMBERTYPECODEColumn)
        End Function
        
        Public Sub SetMEMBERTYPECODENull()
            Me(Me.tableVIEW_MEM_PHLIST.MEMBERTYPECODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCurentStatusNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_PHLIST.CurentStatusColumn)
        End Function
        
        Public Sub SetCurentStatusNull()
            Me(Me.tableVIEW_MEM_PHLIST.CurentStatusColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCONTACTADDRESSNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_PHLIST.CONTACTADDRESSColumn)
        End Function
        
        Public Sub SetCONTACTADDRESSNull()
            Me(Me.tableVIEW_MEM_PHLIST.CONTACTADDRESSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOFFICEADDRESSNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_PHLIST.OFFICEADDRESSColumn)
        End Function
        
        Public Sub SetOFFICEADDRESSNull()
            Me(Me.tableVIEW_MEM_PHLIST.OFFICEADDRESSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPERMANENTADDRESSNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_PHLIST.PERMANENTADDRESSColumn)
        End Function
        
        Public Sub SetPERMANENTADDRESSNull()
            Me(Me.tableVIEW_MEM_PHLIST.PERMANENTADDRESSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPHONE1Null() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_PHLIST.PHONE1Column)
        End Function
        
        Public Sub SetPHONE1Null()
            Me(Me.tableVIEW_MEM_PHLIST.PHONE1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsPHONE2Null() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_PHLIST.PHONE2Column)
        End Function
        
        Public Sub SetPHONE2Null()
            Me(Me.tableVIEW_MEM_PHLIST.PHONE2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsMOBILENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_PHLIST.MOBILEColumn)
        End Function
        
        Public Sub SetMOBILENull()
            Me(Me.tableVIEW_MEM_PHLIST.MOBILEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDOJNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_PHLIST.DOJColumn)
        End Function
        
        Public Sub SetDOJNull()
            Me(Me.tableVIEW_MEM_PHLIST.DOJColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDOBNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_PHLIST.DOBColumn)
        End Function
        
        Public Sub SetDOBNull()
            Me(Me.tableVIEW_MEM_PHLIST.DOBColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_MEM_PHLISTRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VIEW_MEM_PHLISTRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VIEW_MEM_PHLISTRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VIEW_MEM_PHLISTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class monthenddetailDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnremarks As DataColumn
        
        Private columnMCODE As DataColumn
        
        Private columnAMOUNT As DataColumn
        
        Private columnBilldate As DataColumn
        
        Private columnchitcount As DataColumn
        
        Private columnCATEGORY As DataColumn
        
        Friend Sub New()
            MyBase.New("monthenddetail")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property remarksColumn As DataColumn
            Get
                Return Me.columnremarks
            End Get
        End Property
        
        Friend ReadOnly Property MCODEColumn As DataColumn
            Get
                Return Me.columnMCODE
            End Get
        End Property
        
        Friend ReadOnly Property AMOUNTColumn As DataColumn
            Get
                Return Me.columnAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property BilldateColumn As DataColumn
            Get
                Return Me.columnBilldate
            End Get
        End Property
        
        Friend ReadOnly Property chitcountColumn As DataColumn
            Get
                Return Me.columnchitcount
            End Get
        End Property
        
        Friend ReadOnly Property CATEGORYColumn As DataColumn
            Get
                Return Me.columnCATEGORY
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As monthenddetailRow
            Get
                Return CType(Me.Rows(index),monthenddetailRow)
            End Get
        End Property
        
        Public Event monthenddetailRowChanged As monthenddetailRowChangeEventHandler
        
        Public Event monthenddetailRowChanging As monthenddetailRowChangeEventHandler
        
        Public Event monthenddetailRowDeleted As monthenddetailRowChangeEventHandler
        
        Public Event monthenddetailRowDeleting As monthenddetailRowChangeEventHandler
        
        Public Overloads Sub AddmonthenddetailRow(ByVal row As monthenddetailRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddmonthenddetailRow(ByVal remarks As String, ByVal MCODE As String, ByVal AMOUNT As Decimal, ByVal Billdate As Date, ByVal chitcount As Integer, ByVal CATEGORY As String) As monthenddetailRow
            Dim rowmonthenddetailRow As monthenddetailRow = CType(Me.NewRow,monthenddetailRow)
            rowmonthenddetailRow.ItemArray = New Object() {remarks, MCODE, AMOUNT, Billdate, chitcount, CATEGORY}
            Me.Rows.Add(rowmonthenddetailRow)
            Return rowmonthenddetailRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As monthenddetailDataTable = CType(MyBase.Clone,monthenddetailDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New monthenddetailDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnremarks = Me.Columns("remarks")
            Me.columnMCODE = Me.Columns("MCODE")
            Me.columnAMOUNT = Me.Columns("AMOUNT")
            Me.columnBilldate = Me.Columns("Billdate")
            Me.columnchitcount = Me.Columns("chitcount")
            Me.columnCATEGORY = Me.Columns("CATEGORY")
        End Sub
        
        Private Sub InitClass()
            Me.columnremarks = New DataColumn("remarks", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnremarks)
            Me.columnMCODE = New DataColumn("MCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMCODE)
            Me.columnAMOUNT = New DataColumn("AMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAMOUNT)
            Me.columnBilldate = New DataColumn("Billdate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBilldate)
            Me.columnchitcount = New DataColumn("chitcount", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnchitcount)
            Me.columnCATEGORY = New DataColumn("CATEGORY", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCATEGORY)
        End Sub
        
        Public Function NewmonthenddetailRow() As monthenddetailRow
            Return CType(Me.NewRow,monthenddetailRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New monthenddetailRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(monthenddetailRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.monthenddetailRowChangedEvent) Is Nothing) Then
                RaiseEvent monthenddetailRowChanged(Me, New monthenddetailRowChangeEvent(CType(e.Row,monthenddetailRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.monthenddetailRowChangingEvent) Is Nothing) Then
                RaiseEvent monthenddetailRowChanging(Me, New monthenddetailRowChangeEvent(CType(e.Row,monthenddetailRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.monthenddetailRowDeletedEvent) Is Nothing) Then
                RaiseEvent monthenddetailRowDeleted(Me, New monthenddetailRowChangeEvent(CType(e.Row,monthenddetailRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.monthenddetailRowDeletingEvent) Is Nothing) Then
                RaiseEvent monthenddetailRowDeleting(Me, New monthenddetailRowChangeEvent(CType(e.Row,monthenddetailRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovemonthenddetailRow(ByVal row As monthenddetailRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class monthenddetailRow
        Inherits DataRow
        
        Private tablemonthenddetail As monthenddetailDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablemonthenddetail = CType(Me.Table,monthenddetailDataTable)
        End Sub
        
        Public Property remarks As String
            Get
                Try 
                    Return CType(Me(Me.tablemonthenddetail.remarksColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemonthenddetail.remarksColumn) = value
            End Set
        End Property
        
        Public Property MCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablemonthenddetail.MCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemonthenddetail.MCODEColumn) = value
            End Set
        End Property
        
        Public Property AMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablemonthenddetail.AMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemonthenddetail.AMOUNTColumn) = value
            End Set
        End Property
        
        Public Property Billdate As Date
            Get
                Try 
                    Return CType(Me(Me.tablemonthenddetail.BilldateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemonthenddetail.BilldateColumn) = value
            End Set
        End Property
        
        Public Property chitcount As Integer
            Get
                Try 
                    Return CType(Me(Me.tablemonthenddetail.chitcountColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemonthenddetail.chitcountColumn) = value
            End Set
        End Property
        
        Public Property CATEGORY As String
            Get
                Try 
                    Return CType(Me(Me.tablemonthenddetail.CATEGORYColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemonthenddetail.CATEGORYColumn) = value
            End Set
        End Property
        
        Public Function IsremarksNull() As Boolean
            Return Me.IsNull(Me.tablemonthenddetail.remarksColumn)
        End Function
        
        Public Sub SetremarksNull()
            Me(Me.tablemonthenddetail.remarksColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMCODENull() As Boolean
            Return Me.IsNull(Me.tablemonthenddetail.MCODEColumn)
        End Function
        
        Public Sub SetMCODENull()
            Me(Me.tablemonthenddetail.MCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablemonthenddetail.AMOUNTColumn)
        End Function
        
        Public Sub SetAMOUNTNull()
            Me(Me.tablemonthenddetail.AMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBilldateNull() As Boolean
            Return Me.IsNull(Me.tablemonthenddetail.BilldateColumn)
        End Function
        
        Public Sub SetBilldateNull()
            Me(Me.tablemonthenddetail.BilldateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IschitcountNull() As Boolean
            Return Me.IsNull(Me.tablemonthenddetail.chitcountColumn)
        End Function
        
        Public Sub SetchitcountNull()
            Me(Me.tablemonthenddetail.chitcountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCATEGORYNull() As Boolean
            Return Me.IsNull(Me.tablemonthenddetail.CATEGORYColumn)
        End Function
        
        Public Sub SetCATEGORYNull()
            Me(Me.tablemonthenddetail.CATEGORYColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class monthenddetailRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As monthenddetailRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As monthenddetailRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As monthenddetailRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
