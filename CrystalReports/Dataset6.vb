'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2470
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class Dataset6
    Inherits DataSet
    
    Private tableMM_Facility As MM_FacilityDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("MM_Facility")) Is Nothing) Then
                Me.Tables.Add(New MM_FacilityDataTable(ds.Tables("MM_Facility")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MM_Facility As MM_FacilityDataTable
        Get
            Return Me.tableMM_Facility
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As Dataset6 = CType(MyBase.Clone,Dataset6)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("MM_Facility")) Is Nothing) Then
            Me.Tables.Add(New MM_FacilityDataTable(ds.Tables("MM_Facility")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableMM_Facility = CType(Me.Tables("MM_Facility"),MM_FacilityDataTable)
        If (Not (Me.tableMM_Facility) Is Nothing) Then
            Me.tableMM_Facility.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "Dataset6"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/Dataset6.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableMM_Facility = New MM_FacilityDataTable
        Me.Tables.Add(Me.tableMM_Facility)
    End Sub
    
    Private Function ShouldSerializeMM_Facility() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub MM_FacilityRowChangeEventHandler(ByVal sender As Object, ByVal e As MM_FacilityRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MM_FacilityDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnmcode As DataColumn
        
        Private columnmname As DataColumn
        
        Private columnTypeDesc As DataColumn
        
        Private columncurentstatus As DataColumn
        
        Private columnSubscode As DataColumn
        
        Private columnSubsdesc As DataColumn
        
        Private columntotal As DataColumn
        
        Private columnfcode As DataColumn
        
        Private columnfdesc As DataColumn
        
        Private columnFROMDATE As DataColumn
        
        Private columnTODATE As DataColumn
        
        Friend Sub New()
            MyBase.New("MM_Facility")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property mcodeColumn As DataColumn
            Get
                Return Me.columnmcode
            End Get
        End Property
        
        Friend ReadOnly Property mnameColumn As DataColumn
            Get
                Return Me.columnmname
            End Get
        End Property
        
        Friend ReadOnly Property TypeDescColumn As DataColumn
            Get
                Return Me.columnTypeDesc
            End Get
        End Property
        
        Friend ReadOnly Property curentstatusColumn As DataColumn
            Get
                Return Me.columncurentstatus
            End Get
        End Property
        
        Friend ReadOnly Property SubscodeColumn As DataColumn
            Get
                Return Me.columnSubscode
            End Get
        End Property
        
        Friend ReadOnly Property SubsdescColumn As DataColumn
            Get
                Return Me.columnSubsdesc
            End Get
        End Property
        
        Friend ReadOnly Property totalColumn As DataColumn
            Get
                Return Me.columntotal
            End Get
        End Property
        
        Friend ReadOnly Property fcodeColumn As DataColumn
            Get
                Return Me.columnfcode
            End Get
        End Property
        
        Friend ReadOnly Property fdescColumn As DataColumn
            Get
                Return Me.columnfdesc
            End Get
        End Property
        
        Friend ReadOnly Property FROMDATEColumn As DataColumn
            Get
                Return Me.columnFROMDATE
            End Get
        End Property
        
        Friend ReadOnly Property TODATEColumn As DataColumn
            Get
                Return Me.columnTODATE
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As MM_FacilityRow
            Get
                Return CType(Me.Rows(index),MM_FacilityRow)
            End Get
        End Property
        
        Public Event MM_FacilityRowChanged As MM_FacilityRowChangeEventHandler
        
        Public Event MM_FacilityRowChanging As MM_FacilityRowChangeEventHandler
        
        Public Event MM_FacilityRowDeleted As MM_FacilityRowChangeEventHandler
        
        Public Event MM_FacilityRowDeleting As MM_FacilityRowChangeEventHandler
        
        Public Overloads Sub AddMM_FacilityRow(ByVal row As MM_FacilityRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddMM_FacilityRow(ByVal mcode As String, ByVal mname As String, ByVal TypeDesc As String, ByVal curentstatus As String, ByVal Subscode As String, ByVal Subsdesc As String, ByVal total As Decimal, ByVal fcode As String, ByVal fdesc As String, ByVal FROMDATE As Date, ByVal TODATE As Date) As MM_FacilityRow
            Dim rowMM_FacilityRow As MM_FacilityRow = CType(Me.NewRow,MM_FacilityRow)
            rowMM_FacilityRow.ItemArray = New Object() {mcode, mname, TypeDesc, curentstatus, Subscode, Subsdesc, total, fcode, fdesc, FROMDATE, TODATE}
            Me.Rows.Add(rowMM_FacilityRow)
            Return rowMM_FacilityRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As MM_FacilityDataTable = CType(MyBase.Clone,MM_FacilityDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New MM_FacilityDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnmcode = Me.Columns("mcode")
            Me.columnmname = Me.Columns("mname")
            Me.columnTypeDesc = Me.Columns("TypeDesc")
            Me.columncurentstatus = Me.Columns("curentstatus")
            Me.columnSubscode = Me.Columns("Subscode")
            Me.columnSubsdesc = Me.Columns("Subsdesc")
            Me.columntotal = Me.Columns("total")
            Me.columnfcode = Me.Columns("fcode")
            Me.columnfdesc = Me.Columns("fdesc")
            Me.columnFROMDATE = Me.Columns("FROMDATE")
            Me.columnTODATE = Me.Columns("TODATE")
        End Sub
        
        Private Sub InitClass()
            Me.columnmcode = New DataColumn("mcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmcode)
            Me.columnmname = New DataColumn("mname", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmname)
            Me.columnTypeDesc = New DataColumn("TypeDesc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTypeDesc)
            Me.columncurentstatus = New DataColumn("curentstatus", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncurentstatus)
            Me.columnSubscode = New DataColumn("Subscode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSubscode)
            Me.columnSubsdesc = New DataColumn("Subsdesc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSubsdesc)
            Me.columntotal = New DataColumn("total", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntotal)
            Me.columnfcode = New DataColumn("fcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfcode)
            Me.columnfdesc = New DataColumn("fdesc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfdesc)
            Me.columnFROMDATE = New DataColumn("FROMDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFROMDATE)
            Me.columnTODATE = New DataColumn("TODATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTODATE)
            Me.columnmcode.ReadOnly = true
            Me.columnmname.ReadOnly = true
            Me.columnTypeDesc.ReadOnly = true
            Me.columncurentstatus.ReadOnly = true
            Me.columnSubscode.ReadOnly = true
            Me.columnSubsdesc.ReadOnly = true
            Me.columnfcode.ReadOnly = true
            Me.columnfdesc.ReadOnly = true
            Me.columnFROMDATE.ReadOnly = true
            Me.columnTODATE.ReadOnly = true
        End Sub
        
        Public Function NewMM_FacilityRow() As MM_FacilityRow
            Return CType(Me.NewRow,MM_FacilityRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New MM_FacilityRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(MM_FacilityRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MM_FacilityRowChangedEvent) Is Nothing) Then
                RaiseEvent MM_FacilityRowChanged(Me, New MM_FacilityRowChangeEvent(CType(e.Row,MM_FacilityRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MM_FacilityRowChangingEvent) Is Nothing) Then
                RaiseEvent MM_FacilityRowChanging(Me, New MM_FacilityRowChangeEvent(CType(e.Row,MM_FacilityRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MM_FacilityRowDeletedEvent) Is Nothing) Then
                RaiseEvent MM_FacilityRowDeleted(Me, New MM_FacilityRowChangeEvent(CType(e.Row,MM_FacilityRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MM_FacilityRowDeletingEvent) Is Nothing) Then
                RaiseEvent MM_FacilityRowDeleting(Me, New MM_FacilityRowChangeEvent(CType(e.Row,MM_FacilityRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveMM_FacilityRow(ByVal row As MM_FacilityRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MM_FacilityRow
        Inherits DataRow
        
        Private tableMM_Facility As MM_FacilityDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableMM_Facility = CType(Me.Table,MM_FacilityDataTable)
        End Sub
        
        Public Property mcode As String
            Get
                Try 
                    Return CType(Me(Me.tableMM_Facility.mcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMM_Facility.mcodeColumn) = value
            End Set
        End Property
        
        Public Property mname As String
            Get
                Try 
                    Return CType(Me(Me.tableMM_Facility.mnameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMM_Facility.mnameColumn) = value
            End Set
        End Property
        
        Public Property TypeDesc As String
            Get
                Try 
                    Return CType(Me(Me.tableMM_Facility.TypeDescColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMM_Facility.TypeDescColumn) = value
            End Set
        End Property
        
        Public Property curentstatus As String
            Get
                Try 
                    Return CType(Me(Me.tableMM_Facility.curentstatusColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMM_Facility.curentstatusColumn) = value
            End Set
        End Property
        
        Public Property Subscode As String
            Get
                Try 
                    Return CType(Me(Me.tableMM_Facility.SubscodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMM_Facility.SubscodeColumn) = value
            End Set
        End Property
        
        Public Property Subsdesc As String
            Get
                Try 
                    Return CType(Me(Me.tableMM_Facility.SubsdescColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMM_Facility.SubsdescColumn) = value
            End Set
        End Property
        
        Public Property total As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableMM_Facility.totalColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMM_Facility.totalColumn) = value
            End Set
        End Property
        
        Public Property fcode As String
            Get
                Try 
                    Return CType(Me(Me.tableMM_Facility.fcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMM_Facility.fcodeColumn) = value
            End Set
        End Property
        
        Public Property fdesc As String
            Get
                Try 
                    Return CType(Me(Me.tableMM_Facility.fdescColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMM_Facility.fdescColumn) = value
            End Set
        End Property
        
        Public Property FROMDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tableMM_Facility.FROMDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMM_Facility.FROMDATEColumn) = value
            End Set
        End Property
        
        Public Property TODATE As Date
            Get
                Try 
                    Return CType(Me(Me.tableMM_Facility.TODATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMM_Facility.TODATEColumn) = value
            End Set
        End Property
        
        Public Function IsmcodeNull() As Boolean
            Return Me.IsNull(Me.tableMM_Facility.mcodeColumn)
        End Function
        
        Public Sub SetmcodeNull()
            Me(Me.tableMM_Facility.mcodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsmnameNull() As Boolean
            Return Me.IsNull(Me.tableMM_Facility.mnameColumn)
        End Function
        
        Public Sub SetmnameNull()
            Me(Me.tableMM_Facility.mnameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTypeDescNull() As Boolean
            Return Me.IsNull(Me.tableMM_Facility.TypeDescColumn)
        End Function
        
        Public Sub SetTypeDescNull()
            Me(Me.tableMM_Facility.TypeDescColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscurentstatusNull() As Boolean
            Return Me.IsNull(Me.tableMM_Facility.curentstatusColumn)
        End Function
        
        Public Sub SetcurentstatusNull()
            Me(Me.tableMM_Facility.curentstatusColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSubscodeNull() As Boolean
            Return Me.IsNull(Me.tableMM_Facility.SubscodeColumn)
        End Function
        
        Public Sub SetSubscodeNull()
            Me(Me.tableMM_Facility.SubscodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSubsdescNull() As Boolean
            Return Me.IsNull(Me.tableMM_Facility.SubsdescColumn)
        End Function
        
        Public Sub SetSubsdescNull()
            Me(Me.tableMM_Facility.SubsdescColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstotalNull() As Boolean
            Return Me.IsNull(Me.tableMM_Facility.totalColumn)
        End Function
        
        Public Sub SettotalNull()
            Me(Me.tableMM_Facility.totalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsfcodeNull() As Boolean
            Return Me.IsNull(Me.tableMM_Facility.fcodeColumn)
        End Function
        
        Public Sub SetfcodeNull()
            Me(Me.tableMM_Facility.fcodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsfdescNull() As Boolean
            Return Me.IsNull(Me.tableMM_Facility.fdescColumn)
        End Function
        
        Public Sub SetfdescNull()
            Me(Me.tableMM_Facility.fdescColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFROMDATENull() As Boolean
            Return Me.IsNull(Me.tableMM_Facility.FROMDATEColumn)
        End Function
        
        Public Sub SetFROMDATENull()
            Me(Me.tableMM_Facility.FROMDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTODATENull() As Boolean
            Return Me.IsNull(Me.tableMM_Facility.TODATEColumn)
        End Function
        
        Public Sub SetTODATENull()
            Me(Me.tableMM_Facility.TODATEColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MM_FacilityRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As MM_FacilityRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As MM_FacilityRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As MM_FacilityRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
