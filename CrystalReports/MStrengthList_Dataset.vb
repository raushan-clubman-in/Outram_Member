'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2470
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class MStrengthList_Dataset
    Inherits DataSet
    
    Private tablevw_cellingmaster As vw_cellingmasterDataTable
    
    Private tableMM_MEMBERSTRENGTH As MM_MEMBERSTRENGTHDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("vw_cellingmaster")) Is Nothing) Then
                Me.Tables.Add(New vw_cellingmasterDataTable(ds.Tables("vw_cellingmaster")))
            End If
            If (Not (ds.Tables("MM_MEMBERSTRENGTH")) Is Nothing) Then
                Me.Tables.Add(New MM_MEMBERSTRENGTHDataTable(ds.Tables("MM_MEMBERSTRENGTH")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property vw_cellingmaster As vw_cellingmasterDataTable
        Get
            Return Me.tablevw_cellingmaster
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MM_MEMBERSTRENGTH As MM_MEMBERSTRENGTHDataTable
        Get
            Return Me.tableMM_MEMBERSTRENGTH
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As MStrengthList_Dataset = CType(MyBase.Clone,MStrengthList_Dataset)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("vw_cellingmaster")) Is Nothing) Then
            Me.Tables.Add(New vw_cellingmasterDataTable(ds.Tables("vw_cellingmaster")))
        End If
        If (Not (ds.Tables("MM_MEMBERSTRENGTH")) Is Nothing) Then
            Me.Tables.Add(New MM_MEMBERSTRENGTHDataTable(ds.Tables("MM_MEMBERSTRENGTH")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tablevw_cellingmaster = CType(Me.Tables("vw_cellingmaster"),vw_cellingmasterDataTable)
        If (Not (Me.tablevw_cellingmaster) Is Nothing) Then
            Me.tablevw_cellingmaster.InitVars
        End If
        Me.tableMM_MEMBERSTRENGTH = CType(Me.Tables("MM_MEMBERSTRENGTH"),MM_MEMBERSTRENGTHDataTable)
        If (Not (Me.tableMM_MEMBERSTRENGTH) Is Nothing) Then
            Me.tableMM_MEMBERSTRENGTH.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "MStrengthList_Dataset"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/MStrengthList_Dataset.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tablevw_cellingmaster = New vw_cellingmasterDataTable
        Me.Tables.Add(Me.tablevw_cellingmaster)
        Me.tableMM_MEMBERSTRENGTH = New MM_MEMBERSTRENGTHDataTable
        Me.Tables.Add(Me.tableMM_MEMBERSTRENGTH)
    End Sub
    
    Private Function ShouldSerializevw_cellingmaster() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeMM_MEMBERSTRENGTH() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub vw_cellingmasterRowChangeEventHandler(ByVal sender As Object, ByVal e As vw_cellingmasterRowChangeEvent)
    
    Public Delegate Sub MM_MEMBERSTRENGTHRowChangeEventHandler(ByVal sender As Object, ByVal e As MM_MEMBERSTRENGTHRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class vw_cellingmasterDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId As DataColumn
        
        Private columnCellingCode As DataColumn
        
        Private columnAirForce As DataColumn
        
        Private columnArmy As DataColumn
        
        Private columnCGOS As DataColumn
        
        Private columnNavy As DataColumn
        
        Private columnFreeze As DataColumn
        
        Private columnAdduser As DataColumn
        
        Private columnAdddatetime As DataColumn
        
        Friend Sub New()
            MyBase.New("vw_cellingmaster")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IdColumn As DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        Friend ReadOnly Property CellingCodeColumn As DataColumn
            Get
                Return Me.columnCellingCode
            End Get
        End Property
        
        Friend ReadOnly Property AirForceColumn As DataColumn
            Get
                Return Me.columnAirForce
            End Get
        End Property
        
        Friend ReadOnly Property ArmyColumn As DataColumn
            Get
                Return Me.columnArmy
            End Get
        End Property
        
        Friend ReadOnly Property CGOSColumn As DataColumn
            Get
                Return Me.columnCGOS
            End Get
        End Property
        
        Friend ReadOnly Property NavyColumn As DataColumn
            Get
                Return Me.columnNavy
            End Get
        End Property
        
        Friend ReadOnly Property FreezeColumn As DataColumn
            Get
                Return Me.columnFreeze
            End Get
        End Property
        
        Friend ReadOnly Property AdduserColumn As DataColumn
            Get
                Return Me.columnAdduser
            End Get
        End Property
        
        Friend ReadOnly Property AdddatetimeColumn As DataColumn
            Get
                Return Me.columnAdddatetime
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As vw_cellingmasterRow
            Get
                Return CType(Me.Rows(index),vw_cellingmasterRow)
            End Get
        End Property
        
        Public Event vw_cellingmasterRowChanged As vw_cellingmasterRowChangeEventHandler
        
        Public Event vw_cellingmasterRowChanging As vw_cellingmasterRowChangeEventHandler
        
        Public Event vw_cellingmasterRowDeleted As vw_cellingmasterRowChangeEventHandler
        
        Public Event vw_cellingmasterRowDeleting As vw_cellingmasterRowChangeEventHandler
        
        Public Overloads Sub Addvw_cellingmasterRow(ByVal row As vw_cellingmasterRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addvw_cellingmasterRow(ByVal CellingCode As String, ByVal AirForce As String, ByVal Army As String, ByVal CGOS As String, ByVal Navy As String, ByVal Freeze As String, ByVal Adduser As String, ByVal Adddatetime As Date) As vw_cellingmasterRow
            Dim rowvw_cellingmasterRow As vw_cellingmasterRow = CType(Me.NewRow,vw_cellingmasterRow)
            rowvw_cellingmasterRow.ItemArray = New Object() {Nothing, CellingCode, AirForce, Army, CGOS, Navy, Freeze, Adduser, Adddatetime}
            Me.Rows.Add(rowvw_cellingmasterRow)
            Return rowvw_cellingmasterRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As vw_cellingmasterDataTable = CType(MyBase.Clone,vw_cellingmasterDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New vw_cellingmasterDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId = Me.Columns("Id")
            Me.columnCellingCode = Me.Columns("CellingCode")
            Me.columnAirForce = Me.Columns("AirForce")
            Me.columnArmy = Me.Columns("Army")
            Me.columnCGOS = Me.Columns("CGOS")
            Me.columnNavy = Me.Columns("Navy")
            Me.columnFreeze = Me.Columns("Freeze")
            Me.columnAdduser = Me.Columns("Adduser")
            Me.columnAdddatetime = Me.Columns("Adddatetime")
        End Sub
        
        Private Sub InitClass()
            Me.columnId = New DataColumn("Id", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId)
            Me.columnCellingCode = New DataColumn("CellingCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCellingCode)
            Me.columnAirForce = New DataColumn("AirForce", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAirForce)
            Me.columnArmy = New DataColumn("Army", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnArmy)
            Me.columnCGOS = New DataColumn("CGOS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCGOS)
            Me.columnNavy = New DataColumn("Navy", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNavy)
            Me.columnFreeze = New DataColumn("Freeze", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFreeze)
            Me.columnAdduser = New DataColumn("Adduser", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAdduser)
            Me.columnAdddatetime = New DataColumn("Adddatetime", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAdddatetime)
            Me.columnId.AutoIncrement = true
            Me.columnId.AllowDBNull = false
            Me.columnId.ReadOnly = true
            Me.columnCellingCode.AllowDBNull = false
        End Sub
        
        Public Function Newvw_cellingmasterRow() As vw_cellingmasterRow
            Return CType(Me.NewRow,vw_cellingmasterRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New vw_cellingmasterRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(vw_cellingmasterRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.vw_cellingmasterRowChangedEvent) Is Nothing) Then
                RaiseEvent vw_cellingmasterRowChanged(Me, New vw_cellingmasterRowChangeEvent(CType(e.Row,vw_cellingmasterRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.vw_cellingmasterRowChangingEvent) Is Nothing) Then
                RaiseEvent vw_cellingmasterRowChanging(Me, New vw_cellingmasterRowChangeEvent(CType(e.Row,vw_cellingmasterRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.vw_cellingmasterRowDeletedEvent) Is Nothing) Then
                RaiseEvent vw_cellingmasterRowDeleted(Me, New vw_cellingmasterRowChangeEvent(CType(e.Row,vw_cellingmasterRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.vw_cellingmasterRowDeletingEvent) Is Nothing) Then
                RaiseEvent vw_cellingmasterRowDeleting(Me, New vw_cellingmasterRowChangeEvent(CType(e.Row,vw_cellingmasterRow), e.Action))
            End If
        End Sub
        
        Public Sub Removevw_cellingmasterRow(ByVal row As vw_cellingmasterRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class vw_cellingmasterRow
        Inherits DataRow
        
        Private tablevw_cellingmaster As vw_cellingmasterDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablevw_cellingmaster = CType(Me.Table,vw_cellingmasterDataTable)
        End Sub
        
        Public Property Id As Integer
            Get
                Return CType(Me(Me.tablevw_cellingmaster.IdColumn),Integer)
            End Get
            Set
                Me(Me.tablevw_cellingmaster.IdColumn) = value
            End Set
        End Property
        
        Public Property CellingCode As String
            Get
                Return CType(Me(Me.tablevw_cellingmaster.CellingCodeColumn),String)
            End Get
            Set
                Me(Me.tablevw_cellingmaster.CellingCodeColumn) = value
            End Set
        End Property
        
        Public Property AirForce As String
            Get
                Try 
                    Return CType(Me(Me.tablevw_cellingmaster.AirForceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablevw_cellingmaster.AirForceColumn) = value
            End Set
        End Property
        
        Public Property Army As String
            Get
                Try 
                    Return CType(Me(Me.tablevw_cellingmaster.ArmyColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablevw_cellingmaster.ArmyColumn) = value
            End Set
        End Property
        
        Public Property CGOS As String
            Get
                Try 
                    Return CType(Me(Me.tablevw_cellingmaster.CGOSColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablevw_cellingmaster.CGOSColumn) = value
            End Set
        End Property
        
        Public Property Navy As String
            Get
                Try 
                    Return CType(Me(Me.tablevw_cellingmaster.NavyColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablevw_cellingmaster.NavyColumn) = value
            End Set
        End Property
        
        Public Property Freeze As String
            Get
                Try 
                    Return CType(Me(Me.tablevw_cellingmaster.FreezeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablevw_cellingmaster.FreezeColumn) = value
            End Set
        End Property
        
        Public Property Adduser As String
            Get
                Try 
                    Return CType(Me(Me.tablevw_cellingmaster.AdduserColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablevw_cellingmaster.AdduserColumn) = value
            End Set
        End Property
        
        Public Property Adddatetime As Date
            Get
                Try 
                    Return CType(Me(Me.tablevw_cellingmaster.AdddatetimeColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablevw_cellingmaster.AdddatetimeColumn) = value
            End Set
        End Property
        
        Public Function IsAirForceNull() As Boolean
            Return Me.IsNull(Me.tablevw_cellingmaster.AirForceColumn)
        End Function
        
        Public Sub SetAirForceNull()
            Me(Me.tablevw_cellingmaster.AirForceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsArmyNull() As Boolean
            Return Me.IsNull(Me.tablevw_cellingmaster.ArmyColumn)
        End Function
        
        Public Sub SetArmyNull()
            Me(Me.tablevw_cellingmaster.ArmyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCGOSNull() As Boolean
            Return Me.IsNull(Me.tablevw_cellingmaster.CGOSColumn)
        End Function
        
        Public Sub SetCGOSNull()
            Me(Me.tablevw_cellingmaster.CGOSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNavyNull() As Boolean
            Return Me.IsNull(Me.tablevw_cellingmaster.NavyColumn)
        End Function
        
        Public Sub SetNavyNull()
            Me(Me.tablevw_cellingmaster.NavyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFreezeNull() As Boolean
            Return Me.IsNull(Me.tablevw_cellingmaster.FreezeColumn)
        End Function
        
        Public Sub SetFreezeNull()
            Me(Me.tablevw_cellingmaster.FreezeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAdduserNull() As Boolean
            Return Me.IsNull(Me.tablevw_cellingmaster.AdduserColumn)
        End Function
        
        Public Sub SetAdduserNull()
            Me(Me.tablevw_cellingmaster.AdduserColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAdddatetimeNull() As Boolean
            Return Me.IsNull(Me.tablevw_cellingmaster.AdddatetimeColumn)
        End Function
        
        Public Sub SetAdddatetimeNull()
            Me(Me.tablevw_cellingmaster.AdddatetimeColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class vw_cellingmasterRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As vw_cellingmasterRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As vw_cellingmasterRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As vw_cellingmasterRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MM_MEMBERSTRENGTHDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnMEMBERTYPECODE As DataColumn
        
        Private columnTYPEDESC As DataColumn
        
        Private columnVALUE As DataColumn
        
        Private columnMdescription As DataColumn
        
        Friend Sub New()
            MyBase.New("MM_MEMBERSTRENGTH")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property MEMBERTYPECODEColumn As DataColumn
            Get
                Return Me.columnMEMBERTYPECODE
            End Get
        End Property
        
        Friend ReadOnly Property TYPEDESCColumn As DataColumn
            Get
                Return Me.columnTYPEDESC
            End Get
        End Property
        
        Friend ReadOnly Property VALUEColumn As DataColumn
            Get
                Return Me.columnVALUE
            End Get
        End Property
        
        Friend ReadOnly Property MdescriptionColumn As DataColumn
            Get
                Return Me.columnMdescription
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As MM_MEMBERSTRENGTHRow
            Get
                Return CType(Me.Rows(index),MM_MEMBERSTRENGTHRow)
            End Get
        End Property
        
        Public Event MM_MEMBERSTRENGTHRowChanged As MM_MEMBERSTRENGTHRowChangeEventHandler
        
        Public Event MM_MEMBERSTRENGTHRowChanging As MM_MEMBERSTRENGTHRowChangeEventHandler
        
        Public Event MM_MEMBERSTRENGTHRowDeleted As MM_MEMBERSTRENGTHRowChangeEventHandler
        
        Public Event MM_MEMBERSTRENGTHRowDeleting As MM_MEMBERSTRENGTHRowChangeEventHandler
        
        Public Overloads Sub AddMM_MEMBERSTRENGTHRow(ByVal row As MM_MEMBERSTRENGTHRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddMM_MEMBERSTRENGTHRow(ByVal MEMBERTYPECODE As String, ByVal TYPEDESC As String, ByVal VALUE As Integer, ByVal Mdescription As String) As MM_MEMBERSTRENGTHRow
            Dim rowMM_MEMBERSTRENGTHRow As MM_MEMBERSTRENGTHRow = CType(Me.NewRow,MM_MEMBERSTRENGTHRow)
            rowMM_MEMBERSTRENGTHRow.ItemArray = New Object() {MEMBERTYPECODE, TYPEDESC, VALUE, Mdescription}
            Me.Rows.Add(rowMM_MEMBERSTRENGTHRow)
            Return rowMM_MEMBERSTRENGTHRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As MM_MEMBERSTRENGTHDataTable = CType(MyBase.Clone,MM_MEMBERSTRENGTHDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New MM_MEMBERSTRENGTHDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnMEMBERTYPECODE = Me.Columns("MEMBERTYPECODE")
            Me.columnTYPEDESC = Me.Columns("TYPEDESC")
            Me.columnVALUE = Me.Columns("VALUE")
            Me.columnMdescription = Me.Columns("Mdescription")
        End Sub
        
        Private Sub InitClass()
            Me.columnMEMBERTYPECODE = New DataColumn("MEMBERTYPECODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEMBERTYPECODE)
            Me.columnTYPEDESC = New DataColumn("TYPEDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTYPEDESC)
            Me.columnVALUE = New DataColumn("VALUE", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVALUE)
            Me.columnMdescription = New DataColumn("Mdescription", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMdescription)
            Me.columnTYPEDESC.AllowDBNull = false
        End Sub
        
        Public Function NewMM_MEMBERSTRENGTHRow() As MM_MEMBERSTRENGTHRow
            Return CType(Me.NewRow,MM_MEMBERSTRENGTHRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New MM_MEMBERSTRENGTHRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(MM_MEMBERSTRENGTHRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MM_MEMBERSTRENGTHRowChangedEvent) Is Nothing) Then
                RaiseEvent MM_MEMBERSTRENGTHRowChanged(Me, New MM_MEMBERSTRENGTHRowChangeEvent(CType(e.Row,MM_MEMBERSTRENGTHRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MM_MEMBERSTRENGTHRowChangingEvent) Is Nothing) Then
                RaiseEvent MM_MEMBERSTRENGTHRowChanging(Me, New MM_MEMBERSTRENGTHRowChangeEvent(CType(e.Row,MM_MEMBERSTRENGTHRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MM_MEMBERSTRENGTHRowDeletedEvent) Is Nothing) Then
                RaiseEvent MM_MEMBERSTRENGTHRowDeleted(Me, New MM_MEMBERSTRENGTHRowChangeEvent(CType(e.Row,MM_MEMBERSTRENGTHRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MM_MEMBERSTRENGTHRowDeletingEvent) Is Nothing) Then
                RaiseEvent MM_MEMBERSTRENGTHRowDeleting(Me, New MM_MEMBERSTRENGTHRowChangeEvent(CType(e.Row,MM_MEMBERSTRENGTHRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveMM_MEMBERSTRENGTHRow(ByVal row As MM_MEMBERSTRENGTHRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MM_MEMBERSTRENGTHRow
        Inherits DataRow
        
        Private tableMM_MEMBERSTRENGTH As MM_MEMBERSTRENGTHDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableMM_MEMBERSTRENGTH = CType(Me.Table,MM_MEMBERSTRENGTHDataTable)
        End Sub
        
        Public Property MEMBERTYPECODE As String
            Get
                Try 
                    Return CType(Me(Me.tableMM_MEMBERSTRENGTH.MEMBERTYPECODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMM_MEMBERSTRENGTH.MEMBERTYPECODEColumn) = value
            End Set
        End Property
        
        Public Property TYPEDESC As String
            Get
                Return CType(Me(Me.tableMM_MEMBERSTRENGTH.TYPEDESCColumn),String)
            End Get
            Set
                Me(Me.tableMM_MEMBERSTRENGTH.TYPEDESCColumn) = value
            End Set
        End Property
        
        Public Property VALUE As Integer
            Get
                Try 
                    Return CType(Me(Me.tableMM_MEMBERSTRENGTH.VALUEColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMM_MEMBERSTRENGTH.VALUEColumn) = value
            End Set
        End Property
        
        Public Property Mdescription As String
            Get
                Try 
                    Return CType(Me(Me.tableMM_MEMBERSTRENGTH.MdescriptionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMM_MEMBERSTRENGTH.MdescriptionColumn) = value
            End Set
        End Property
        
        Public Function IsMEMBERTYPECODENull() As Boolean
            Return Me.IsNull(Me.tableMM_MEMBERSTRENGTH.MEMBERTYPECODEColumn)
        End Function
        
        Public Sub SetMEMBERTYPECODENull()
            Me(Me.tableMM_MEMBERSTRENGTH.MEMBERTYPECODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVALUENull() As Boolean
            Return Me.IsNull(Me.tableMM_MEMBERSTRENGTH.VALUEColumn)
        End Function
        
        Public Sub SetVALUENull()
            Me(Me.tableMM_MEMBERSTRENGTH.VALUEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMdescriptionNull() As Boolean
            Return Me.IsNull(Me.tableMM_MEMBERSTRENGTH.MdescriptionColumn)
        End Function
        
        Public Sub SetMdescriptionNull()
            Me(Me.tableMM_MEMBERSTRENGTH.MdescriptionColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MM_MEMBERSTRENGTHRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As MM_MEMBERSTRENGTHRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As MM_MEMBERSTRENGTHRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As MM_MEMBERSTRENGTHRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
