'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2490
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class subscriptionsummary
    Inherits DataSet
    
    Private tableMM_SUBSCRIPTION_SUMMARY As MM_SUBSCRIPTION_SUMMARYDataTable
    
    Private tableFACILITY_MASTER As FACILITY_MASTERDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("MM_SUBSCRIPTION_SUMMARY")) Is Nothing) Then
                Me.Tables.Add(New MM_SUBSCRIPTION_SUMMARYDataTable(ds.Tables("MM_SUBSCRIPTION_SUMMARY")))
            End If
            If (Not (ds.Tables("FACILITY_MASTER")) Is Nothing) Then
                Me.Tables.Add(New FACILITY_MASTERDataTable(ds.Tables("FACILITY_MASTER")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MM_SUBSCRIPTION_SUMMARY As MM_SUBSCRIPTION_SUMMARYDataTable
        Get
            Return Me.tableMM_SUBSCRIPTION_SUMMARY
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FACILITY_MASTER As FACILITY_MASTERDataTable
        Get
            Return Me.tableFACILITY_MASTER
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As subscriptionsummary = CType(MyBase.Clone,subscriptionsummary)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("MM_SUBSCRIPTION_SUMMARY")) Is Nothing) Then
            Me.Tables.Add(New MM_SUBSCRIPTION_SUMMARYDataTable(ds.Tables("MM_SUBSCRIPTION_SUMMARY")))
        End If
        If (Not (ds.Tables("FACILITY_MASTER")) Is Nothing) Then
            Me.Tables.Add(New FACILITY_MASTERDataTable(ds.Tables("FACILITY_MASTER")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableMM_SUBSCRIPTION_SUMMARY = CType(Me.Tables("MM_SUBSCRIPTION_SUMMARY"),MM_SUBSCRIPTION_SUMMARYDataTable)
        If (Not (Me.tableMM_SUBSCRIPTION_SUMMARY) Is Nothing) Then
            Me.tableMM_SUBSCRIPTION_SUMMARY.InitVars
        End If
        Me.tableFACILITY_MASTER = CType(Me.Tables("FACILITY_MASTER"),FACILITY_MASTERDataTable)
        If (Not (Me.tableFACILITY_MASTER) Is Nothing) Then
            Me.tableFACILITY_MASTER.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "subscriptionsummary"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/subscriptionsummary.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableMM_SUBSCRIPTION_SUMMARY = New MM_SUBSCRIPTION_SUMMARYDataTable
        Me.Tables.Add(Me.tableMM_SUBSCRIPTION_SUMMARY)
        Me.tableFACILITY_MASTER = New FACILITY_MASTERDataTable
        Me.Tables.Add(Me.tableFACILITY_MASTER)
    End Sub
    
    Private Function ShouldSerializeMM_SUBSCRIPTION_SUMMARY() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeFACILITY_MASTER() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub MM_SUBSCRIPTION_SUMMARYRowChangeEventHandler(ByVal sender As Object, ByVal e As MM_SUBSCRIPTION_SUMMARYRowChangeEvent)
    
    Public Delegate Sub FACILITY_MASTERRowChangeEventHandler(ByVal sender As Object, ByVal e As FACILITY_MASTERRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MM_SUBSCRIPTION_SUMMARYDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnmcode As DataColumn
        
        Private columnmname As DataColumn
        
        Private columncurentstatus As DataColumn
        
        Private columnMemberType As DataColumn
        
        Private columnSubscode As DataColumn
        
        Private columnSubsdesc As DataColumn
        
        Private columntype As DataColumn
        
        Private columnamount As DataColumn
        
        Private columntaxamount As DataColumn
        
        Private columnbilldate As DataColumn
        
        Friend Sub New()
            MyBase.New("MM_SUBSCRIPTION_SUMMARY")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property mcodeColumn As DataColumn
            Get
                Return Me.columnmcode
            End Get
        End Property
        
        Friend ReadOnly Property mnameColumn As DataColumn
            Get
                Return Me.columnmname
            End Get
        End Property
        
        Friend ReadOnly Property curentstatusColumn As DataColumn
            Get
                Return Me.columncurentstatus
            End Get
        End Property
        
        Friend ReadOnly Property MemberTypeColumn As DataColumn
            Get
                Return Me.columnMemberType
            End Get
        End Property
        
        Friend ReadOnly Property SubscodeColumn As DataColumn
            Get
                Return Me.columnSubscode
            End Get
        End Property
        
        Friend ReadOnly Property SubsdescColumn As DataColumn
            Get
                Return Me.columnSubsdesc
            End Get
        End Property
        
        Friend ReadOnly Property typeColumn As DataColumn
            Get
                Return Me.columntype
            End Get
        End Property
        
        Friend ReadOnly Property amountColumn As DataColumn
            Get
                Return Me.columnamount
            End Get
        End Property
        
        Friend ReadOnly Property taxamountColumn As DataColumn
            Get
                Return Me.columntaxamount
            End Get
        End Property
        
        Friend ReadOnly Property billdateColumn As DataColumn
            Get
                Return Me.columnbilldate
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As MM_SUBSCRIPTION_SUMMARYRow
            Get
                Return CType(Me.Rows(index),MM_SUBSCRIPTION_SUMMARYRow)
            End Get
        End Property
        
        Public Event MM_SUBSCRIPTION_SUMMARYRowChanged As MM_SUBSCRIPTION_SUMMARYRowChangeEventHandler
        
        Public Event MM_SUBSCRIPTION_SUMMARYRowChanging As MM_SUBSCRIPTION_SUMMARYRowChangeEventHandler
        
        Public Event MM_SUBSCRIPTION_SUMMARYRowDeleted As MM_SUBSCRIPTION_SUMMARYRowChangeEventHandler
        
        Public Event MM_SUBSCRIPTION_SUMMARYRowDeleting As MM_SUBSCRIPTION_SUMMARYRowChangeEventHandler
        
        Public Overloads Sub AddMM_SUBSCRIPTION_SUMMARYRow(ByVal row As MM_SUBSCRIPTION_SUMMARYRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddMM_SUBSCRIPTION_SUMMARYRow(ByVal mcode As String, ByVal mname As String, ByVal curentstatus As String, ByVal MemberType As String, ByVal Subscode As String, ByVal Subsdesc As String, ByVal type As String, ByVal amount As Decimal, ByVal taxamount As Decimal, ByVal billdate As Date) As MM_SUBSCRIPTION_SUMMARYRow
            Dim rowMM_SUBSCRIPTION_SUMMARYRow As MM_SUBSCRIPTION_SUMMARYRow = CType(Me.NewRow,MM_SUBSCRIPTION_SUMMARYRow)
            rowMM_SUBSCRIPTION_SUMMARYRow.ItemArray = New Object() {mcode, mname, curentstatus, MemberType, Subscode, Subsdesc, type, amount, taxamount, billdate}
            Me.Rows.Add(rowMM_SUBSCRIPTION_SUMMARYRow)
            Return rowMM_SUBSCRIPTION_SUMMARYRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As MM_SUBSCRIPTION_SUMMARYDataTable = CType(MyBase.Clone,MM_SUBSCRIPTION_SUMMARYDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New MM_SUBSCRIPTION_SUMMARYDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnmcode = Me.Columns("mcode")
            Me.columnmname = Me.Columns("mname")
            Me.columncurentstatus = Me.Columns("curentstatus")
            Me.columnMemberType = Me.Columns("MemberType")
            Me.columnSubscode = Me.Columns("Subscode")
            Me.columnSubsdesc = Me.Columns("Subsdesc")
            Me.columntype = Me.Columns("type")
            Me.columnamount = Me.Columns("amount")
            Me.columntaxamount = Me.Columns("taxamount")
            Me.columnbilldate = Me.Columns("billdate")
        End Sub
        
        Private Sub InitClass()
            Me.columnmcode = New DataColumn("mcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmcode)
            Me.columnmname = New DataColumn("mname", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmname)
            Me.columncurentstatus = New DataColumn("curentstatus", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncurentstatus)
            Me.columnMemberType = New DataColumn("MemberType", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMemberType)
            Me.columnSubscode = New DataColumn("Subscode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSubscode)
            Me.columnSubsdesc = New DataColumn("Subsdesc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSubsdesc)
            Me.columntype = New DataColumn("type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntype)
            Me.columnamount = New DataColumn("amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount)
            Me.columntaxamount = New DataColumn("taxamount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntaxamount)
            Me.columnbilldate = New DataColumn("billdate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnbilldate)
            Me.columnmcode.ReadOnly = true
            Me.columnmname.ReadOnly = true
            Me.columncurentstatus.ReadOnly = true
            Me.columnMemberType.ReadOnly = true
            Me.columnSubscode.ReadOnly = true
            Me.columnSubsdesc.ReadOnly = true
            Me.columntype.ReadOnly = true
        End Sub
        
        Public Function NewMM_SUBSCRIPTION_SUMMARYRow() As MM_SUBSCRIPTION_SUMMARYRow
            Return CType(Me.NewRow,MM_SUBSCRIPTION_SUMMARYRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New MM_SUBSCRIPTION_SUMMARYRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(MM_SUBSCRIPTION_SUMMARYRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MM_SUBSCRIPTION_SUMMARYRowChangedEvent) Is Nothing) Then
                RaiseEvent MM_SUBSCRIPTION_SUMMARYRowChanged(Me, New MM_SUBSCRIPTION_SUMMARYRowChangeEvent(CType(e.Row,MM_SUBSCRIPTION_SUMMARYRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MM_SUBSCRIPTION_SUMMARYRowChangingEvent) Is Nothing) Then
                RaiseEvent MM_SUBSCRIPTION_SUMMARYRowChanging(Me, New MM_SUBSCRIPTION_SUMMARYRowChangeEvent(CType(e.Row,MM_SUBSCRIPTION_SUMMARYRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MM_SUBSCRIPTION_SUMMARYRowDeletedEvent) Is Nothing) Then
                RaiseEvent MM_SUBSCRIPTION_SUMMARYRowDeleted(Me, New MM_SUBSCRIPTION_SUMMARYRowChangeEvent(CType(e.Row,MM_SUBSCRIPTION_SUMMARYRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MM_SUBSCRIPTION_SUMMARYRowDeletingEvent) Is Nothing) Then
                RaiseEvent MM_SUBSCRIPTION_SUMMARYRowDeleting(Me, New MM_SUBSCRIPTION_SUMMARYRowChangeEvent(CType(e.Row,MM_SUBSCRIPTION_SUMMARYRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveMM_SUBSCRIPTION_SUMMARYRow(ByVal row As MM_SUBSCRIPTION_SUMMARYRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MM_SUBSCRIPTION_SUMMARYRow
        Inherits DataRow
        
        Private tableMM_SUBSCRIPTION_SUMMARY As MM_SUBSCRIPTION_SUMMARYDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableMM_SUBSCRIPTION_SUMMARY = CType(Me.Table,MM_SUBSCRIPTION_SUMMARYDataTable)
        End Sub
        
        Public Property mcode As String
            Get
                Try 
                    Return CType(Me(Me.tableMM_SUBSCRIPTION_SUMMARY.mcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMM_SUBSCRIPTION_SUMMARY.mcodeColumn) = value
            End Set
        End Property
        
        Public Property mname As String
            Get
                Try 
                    Return CType(Me(Me.tableMM_SUBSCRIPTION_SUMMARY.mnameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMM_SUBSCRIPTION_SUMMARY.mnameColumn) = value
            End Set
        End Property
        
        Public Property curentstatus As String
            Get
                Try 
                    Return CType(Me(Me.tableMM_SUBSCRIPTION_SUMMARY.curentstatusColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMM_SUBSCRIPTION_SUMMARY.curentstatusColumn) = value
            End Set
        End Property
        
        Public Property MemberType As String
            Get
                Try 
                    Return CType(Me(Me.tableMM_SUBSCRIPTION_SUMMARY.MemberTypeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMM_SUBSCRIPTION_SUMMARY.MemberTypeColumn) = value
            End Set
        End Property
        
        Public Property Subscode As String
            Get
                Try 
                    Return CType(Me(Me.tableMM_SUBSCRIPTION_SUMMARY.SubscodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMM_SUBSCRIPTION_SUMMARY.SubscodeColumn) = value
            End Set
        End Property
        
        Public Property Subsdesc As String
            Get
                Try 
                    Return CType(Me(Me.tableMM_SUBSCRIPTION_SUMMARY.SubsdescColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMM_SUBSCRIPTION_SUMMARY.SubsdescColumn) = value
            End Set
        End Property
        
        Public Property type As String
            Get
                Try 
                    Return CType(Me(Me.tableMM_SUBSCRIPTION_SUMMARY.typeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMM_SUBSCRIPTION_SUMMARY.typeColumn) = value
            End Set
        End Property
        
        Public Property amount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableMM_SUBSCRIPTION_SUMMARY.amountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMM_SUBSCRIPTION_SUMMARY.amountColumn) = value
            End Set
        End Property
        
        Public Property taxamount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableMM_SUBSCRIPTION_SUMMARY.taxamountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMM_SUBSCRIPTION_SUMMARY.taxamountColumn) = value
            End Set
        End Property
        
        Public Property billdate As Date
            Get
                Try 
                    Return CType(Me(Me.tableMM_SUBSCRIPTION_SUMMARY.billdateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMM_SUBSCRIPTION_SUMMARY.billdateColumn) = value
            End Set
        End Property
        
        Public Function IsmcodeNull() As Boolean
            Return Me.IsNull(Me.tableMM_SUBSCRIPTION_SUMMARY.mcodeColumn)
        End Function
        
        Public Sub SetmcodeNull()
            Me(Me.tableMM_SUBSCRIPTION_SUMMARY.mcodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsmnameNull() As Boolean
            Return Me.IsNull(Me.tableMM_SUBSCRIPTION_SUMMARY.mnameColumn)
        End Function
        
        Public Sub SetmnameNull()
            Me(Me.tableMM_SUBSCRIPTION_SUMMARY.mnameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscurentstatusNull() As Boolean
            Return Me.IsNull(Me.tableMM_SUBSCRIPTION_SUMMARY.curentstatusColumn)
        End Function
        
        Public Sub SetcurentstatusNull()
            Me(Me.tableMM_SUBSCRIPTION_SUMMARY.curentstatusColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMemberTypeNull() As Boolean
            Return Me.IsNull(Me.tableMM_SUBSCRIPTION_SUMMARY.MemberTypeColumn)
        End Function
        
        Public Sub SetMemberTypeNull()
            Me(Me.tableMM_SUBSCRIPTION_SUMMARY.MemberTypeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSubscodeNull() As Boolean
            Return Me.IsNull(Me.tableMM_SUBSCRIPTION_SUMMARY.SubscodeColumn)
        End Function
        
        Public Sub SetSubscodeNull()
            Me(Me.tableMM_SUBSCRIPTION_SUMMARY.SubscodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSubsdescNull() As Boolean
            Return Me.IsNull(Me.tableMM_SUBSCRIPTION_SUMMARY.SubsdescColumn)
        End Function
        
        Public Sub SetSubsdescNull()
            Me(Me.tableMM_SUBSCRIPTION_SUMMARY.SubsdescColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstypeNull() As Boolean
            Return Me.IsNull(Me.tableMM_SUBSCRIPTION_SUMMARY.typeColumn)
        End Function
        
        Public Sub SettypeNull()
            Me(Me.tableMM_SUBSCRIPTION_SUMMARY.typeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsamountNull() As Boolean
            Return Me.IsNull(Me.tableMM_SUBSCRIPTION_SUMMARY.amountColumn)
        End Function
        
        Public Sub SetamountNull()
            Me(Me.tableMM_SUBSCRIPTION_SUMMARY.amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstaxamountNull() As Boolean
            Return Me.IsNull(Me.tableMM_SUBSCRIPTION_SUMMARY.taxamountColumn)
        End Function
        
        Public Sub SettaxamountNull()
            Me(Me.tableMM_SUBSCRIPTION_SUMMARY.taxamountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsbilldateNull() As Boolean
            Return Me.IsNull(Me.tableMM_SUBSCRIPTION_SUMMARY.billdateColumn)
        End Function
        
        Public Sub SetbilldateNull()
            Me(Me.tableMM_SUBSCRIPTION_SUMMARY.billdateColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MM_SUBSCRIPTION_SUMMARYRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As MM_SUBSCRIPTION_SUMMARYRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As MM_SUBSCRIPTION_SUMMARYRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As MM_SUBSCRIPTION_SUMMARYRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class FACILITY_MASTERDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnMCODE As DataColumn
        
        Private columnTYPE As DataColumn
        
        Private columnDNAME As DataColumn
        
        Private columnfcode As DataColumn
        
        Private columnFDESC As DataColumn
        
        Private columnFROMDATE As DataColumn
        
        Private columnTODATE As DataColumn
        
        Private columnACT_FLAG As DataColumn
        
        Private columnFREEZE As DataColumn
        
        Private columnbilldetails As DataColumn
        
        Private columnbilldate As DataColumn
        
        Private columnftype As DataColumn
        
        Private columnRELATION As DataColumn
        
        Private columnCNAME As DataColumn
        
        Private columnSEX As DataColumn
        
        Private columnCDOB As DataColumn
        
        Private columnRTYPE As DataColumn
        
        Friend Sub New()
            MyBase.New("FACILITY_MASTER")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property MCODEColumn As DataColumn
            Get
                Return Me.columnMCODE
            End Get
        End Property
        
        Friend ReadOnly Property TYPEColumn As DataColumn
            Get
                Return Me.columnTYPE
            End Get
        End Property
        
        Friend ReadOnly Property DNAMEColumn As DataColumn
            Get
                Return Me.columnDNAME
            End Get
        End Property
        
        Friend ReadOnly Property fcodeColumn As DataColumn
            Get
                Return Me.columnfcode
            End Get
        End Property
        
        Friend ReadOnly Property FDESCColumn As DataColumn
            Get
                Return Me.columnFDESC
            End Get
        End Property
        
        Friend ReadOnly Property FROMDATEColumn As DataColumn
            Get
                Return Me.columnFROMDATE
            End Get
        End Property
        
        Friend ReadOnly Property TODATEColumn As DataColumn
            Get
                Return Me.columnTODATE
            End Get
        End Property
        
        Friend ReadOnly Property ACT_FLAGColumn As DataColumn
            Get
                Return Me.columnACT_FLAG
            End Get
        End Property
        
        Friend ReadOnly Property FREEZEColumn As DataColumn
            Get
                Return Me.columnFREEZE
            End Get
        End Property
        
        Friend ReadOnly Property billdetailsColumn As DataColumn
            Get
                Return Me.columnbilldetails
            End Get
        End Property
        
        Friend ReadOnly Property billdateColumn As DataColumn
            Get
                Return Me.columnbilldate
            End Get
        End Property
        
        Friend ReadOnly Property ftypeColumn As DataColumn
            Get
                Return Me.columnftype
            End Get
        End Property
        
        Friend ReadOnly Property RELATIONColumn As DataColumn
            Get
                Return Me.columnRELATION
            End Get
        End Property
        
        Friend ReadOnly Property CNAMEColumn As DataColumn
            Get
                Return Me.columnCNAME
            End Get
        End Property
        
        Friend ReadOnly Property SEXColumn As DataColumn
            Get
                Return Me.columnSEX
            End Get
        End Property
        
        Friend ReadOnly Property CDOBColumn As DataColumn
            Get
                Return Me.columnCDOB
            End Get
        End Property
        
        Friend ReadOnly Property RTYPEColumn As DataColumn
            Get
                Return Me.columnRTYPE
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As FACILITY_MASTERRow
            Get
                Return CType(Me.Rows(index),FACILITY_MASTERRow)
            End Get
        End Property
        
        Public Event FACILITY_MASTERRowChanged As FACILITY_MASTERRowChangeEventHandler
        
        Public Event FACILITY_MASTERRowChanging As FACILITY_MASTERRowChangeEventHandler
        
        Public Event FACILITY_MASTERRowDeleted As FACILITY_MASTERRowChangeEventHandler
        
        Public Event FACILITY_MASTERRowDeleting As FACILITY_MASTERRowChangeEventHandler
        
        Public Overloads Sub AddFACILITY_MASTERRow(ByVal row As FACILITY_MASTERRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddFACILITY_MASTERRow( _
                    ByVal MCODE As String,  _
                    ByVal TYPE As String,  _
                    ByVal DNAME As String,  _
                    ByVal fcode As String,  _
                    ByVal FDESC As String,  _
                    ByVal FROMDATE As Date,  _
                    ByVal TODATE As Date,  _
                    ByVal ACT_FLAG As String,  _
                    ByVal FREEZE As String,  _
                    ByVal billdetails As String,  _
                    ByVal billdate As Date,  _
                    ByVal ftype As String,  _
                    ByVal RELATION As String,  _
                    ByVal CNAME As String,  _
                    ByVal SEX As String,  _
                    ByVal CDOB As Date,  _
                    ByVal RTYPE As String) As FACILITY_MASTERRow
            Dim rowFACILITY_MASTERRow As FACILITY_MASTERRow = CType(Me.NewRow,FACILITY_MASTERRow)
            rowFACILITY_MASTERRow.ItemArray = New Object() {MCODE, TYPE, DNAME, fcode, FDESC, FROMDATE, TODATE, ACT_FLAG, FREEZE, billdetails, billdate, ftype, RELATION, CNAME, SEX, CDOB, RTYPE}
            Me.Rows.Add(rowFACILITY_MASTERRow)
            Return rowFACILITY_MASTERRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As FACILITY_MASTERDataTable = CType(MyBase.Clone,FACILITY_MASTERDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New FACILITY_MASTERDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnMCODE = Me.Columns("MCODE")
            Me.columnTYPE = Me.Columns("TYPE")
            Me.columnDNAME = Me.Columns("DNAME")
            Me.columnfcode = Me.Columns("fcode")
            Me.columnFDESC = Me.Columns("FDESC")
            Me.columnFROMDATE = Me.Columns("FROMDATE")
            Me.columnTODATE = Me.Columns("TODATE")
            Me.columnACT_FLAG = Me.Columns("ACT_FLAG")
            Me.columnFREEZE = Me.Columns("FREEZE")
            Me.columnbilldetails = Me.Columns("billdetails")
            Me.columnbilldate = Me.Columns("billdate")
            Me.columnftype = Me.Columns("ftype")
            Me.columnRELATION = Me.Columns("RELATION")
            Me.columnCNAME = Me.Columns("CNAME")
            Me.columnSEX = Me.Columns("SEX")
            Me.columnCDOB = Me.Columns("CDOB")
            Me.columnRTYPE = Me.Columns("RTYPE")
        End Sub
        
        Private Sub InitClass()
            Me.columnMCODE = New DataColumn("MCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMCODE)
            Me.columnTYPE = New DataColumn("TYPE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTYPE)
            Me.columnDNAME = New DataColumn("DNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDNAME)
            Me.columnfcode = New DataColumn("fcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfcode)
            Me.columnFDESC = New DataColumn("FDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFDESC)
            Me.columnFROMDATE = New DataColumn("FROMDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFROMDATE)
            Me.columnTODATE = New DataColumn("TODATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTODATE)
            Me.columnACT_FLAG = New DataColumn("ACT_FLAG", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnACT_FLAG)
            Me.columnFREEZE = New DataColumn("FREEZE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFREEZE)
            Me.columnbilldetails = New DataColumn("billdetails", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnbilldetails)
            Me.columnbilldate = New DataColumn("billdate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnbilldate)
            Me.columnftype = New DataColumn("ftype", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnftype)
            Me.columnRELATION = New DataColumn("RELATION", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRELATION)
            Me.columnCNAME = New DataColumn("CNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCNAME)
            Me.columnSEX = New DataColumn("SEX", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSEX)
            Me.columnCDOB = New DataColumn("CDOB", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCDOB)
            Me.columnRTYPE = New DataColumn("RTYPE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRTYPE)
        End Sub
        
        Public Function NewFACILITY_MASTERRow() As FACILITY_MASTERRow
            Return CType(Me.NewRow,FACILITY_MASTERRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New FACILITY_MASTERRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(FACILITY_MASTERRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FACILITY_MASTERRowChangedEvent) Is Nothing) Then
                RaiseEvent FACILITY_MASTERRowChanged(Me, New FACILITY_MASTERRowChangeEvent(CType(e.Row,FACILITY_MASTERRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FACILITY_MASTERRowChangingEvent) Is Nothing) Then
                RaiseEvent FACILITY_MASTERRowChanging(Me, New FACILITY_MASTERRowChangeEvent(CType(e.Row,FACILITY_MASTERRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FACILITY_MASTERRowDeletedEvent) Is Nothing) Then
                RaiseEvent FACILITY_MASTERRowDeleted(Me, New FACILITY_MASTERRowChangeEvent(CType(e.Row,FACILITY_MASTERRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FACILITY_MASTERRowDeletingEvent) Is Nothing) Then
                RaiseEvent FACILITY_MASTERRowDeleting(Me, New FACILITY_MASTERRowChangeEvent(CType(e.Row,FACILITY_MASTERRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveFACILITY_MASTERRow(ByVal row As FACILITY_MASTERRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class FACILITY_MASTERRow
        Inherits DataRow
        
        Private tableFACILITY_MASTER As FACILITY_MASTERDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableFACILITY_MASTER = CType(Me.Table,FACILITY_MASTERDataTable)
        End Sub
        
        Public Property MCODE As String
            Get
                Try 
                    Return CType(Me(Me.tableFACILITY_MASTER.MCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFACILITY_MASTER.MCODEColumn) = value
            End Set
        End Property
        
        Public Property TYPE As String
            Get
                Try 
                    Return CType(Me(Me.tableFACILITY_MASTER.TYPEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFACILITY_MASTER.TYPEColumn) = value
            End Set
        End Property
        
        Public Property DNAME As String
            Get
                Try 
                    Return CType(Me(Me.tableFACILITY_MASTER.DNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFACILITY_MASTER.DNAMEColumn) = value
            End Set
        End Property
        
        Public Property fcode As String
            Get
                Try 
                    Return CType(Me(Me.tableFACILITY_MASTER.fcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFACILITY_MASTER.fcodeColumn) = value
            End Set
        End Property
        
        Public Property FDESC As String
            Get
                Try 
                    Return CType(Me(Me.tableFACILITY_MASTER.FDESCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFACILITY_MASTER.FDESCColumn) = value
            End Set
        End Property
        
        Public Property FROMDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tableFACILITY_MASTER.FROMDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFACILITY_MASTER.FROMDATEColumn) = value
            End Set
        End Property
        
        Public Property TODATE As Date
            Get
                Try 
                    Return CType(Me(Me.tableFACILITY_MASTER.TODATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFACILITY_MASTER.TODATEColumn) = value
            End Set
        End Property
        
        Public Property ACT_FLAG As String
            Get
                Try 
                    Return CType(Me(Me.tableFACILITY_MASTER.ACT_FLAGColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFACILITY_MASTER.ACT_FLAGColumn) = value
            End Set
        End Property
        
        Public Property FREEZE As String
            Get
                Try 
                    Return CType(Me(Me.tableFACILITY_MASTER.FREEZEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFACILITY_MASTER.FREEZEColumn) = value
            End Set
        End Property
        
        Public Property billdetails As String
            Get
                Try 
                    Return CType(Me(Me.tableFACILITY_MASTER.billdetailsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFACILITY_MASTER.billdetailsColumn) = value
            End Set
        End Property
        
        Public Property billdate As Date
            Get
                Try 
                    Return CType(Me(Me.tableFACILITY_MASTER.billdateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFACILITY_MASTER.billdateColumn) = value
            End Set
        End Property
        
        Public Property ftype As String
            Get
                Try 
                    Return CType(Me(Me.tableFACILITY_MASTER.ftypeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFACILITY_MASTER.ftypeColumn) = value
            End Set
        End Property
        
        Public Property RELATION As String
            Get
                Try 
                    Return CType(Me(Me.tableFACILITY_MASTER.RELATIONColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFACILITY_MASTER.RELATIONColumn) = value
            End Set
        End Property
        
        Public Property CNAME As String
            Get
                Try 
                    Return CType(Me(Me.tableFACILITY_MASTER.CNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFACILITY_MASTER.CNAMEColumn) = value
            End Set
        End Property
        
        Public Property SEX As String
            Get
                Try 
                    Return CType(Me(Me.tableFACILITY_MASTER.SEXColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFACILITY_MASTER.SEXColumn) = value
            End Set
        End Property
        
        Public Property CDOB As Date
            Get
                Try 
                    Return CType(Me(Me.tableFACILITY_MASTER.CDOBColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFACILITY_MASTER.CDOBColumn) = value
            End Set
        End Property
        
        Public Property RTYPE As String
            Get
                Try 
                    Return CType(Me(Me.tableFACILITY_MASTER.RTYPEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFACILITY_MASTER.RTYPEColumn) = value
            End Set
        End Property
        
        Public Function IsMCODENull() As Boolean
            Return Me.IsNull(Me.tableFACILITY_MASTER.MCODEColumn)
        End Function
        
        Public Sub SetMCODENull()
            Me(Me.tableFACILITY_MASTER.MCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTYPENull() As Boolean
            Return Me.IsNull(Me.tableFACILITY_MASTER.TYPEColumn)
        End Function
        
        Public Sub SetTYPENull()
            Me(Me.tableFACILITY_MASTER.TYPEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDNAMENull() As Boolean
            Return Me.IsNull(Me.tableFACILITY_MASTER.DNAMEColumn)
        End Function
        
        Public Sub SetDNAMENull()
            Me(Me.tableFACILITY_MASTER.DNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsfcodeNull() As Boolean
            Return Me.IsNull(Me.tableFACILITY_MASTER.fcodeColumn)
        End Function
        
        Public Sub SetfcodeNull()
            Me(Me.tableFACILITY_MASTER.fcodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFDESCNull() As Boolean
            Return Me.IsNull(Me.tableFACILITY_MASTER.FDESCColumn)
        End Function
        
        Public Sub SetFDESCNull()
            Me(Me.tableFACILITY_MASTER.FDESCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFROMDATENull() As Boolean
            Return Me.IsNull(Me.tableFACILITY_MASTER.FROMDATEColumn)
        End Function
        
        Public Sub SetFROMDATENull()
            Me(Me.tableFACILITY_MASTER.FROMDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTODATENull() As Boolean
            Return Me.IsNull(Me.tableFACILITY_MASTER.TODATEColumn)
        End Function
        
        Public Sub SetTODATENull()
            Me(Me.tableFACILITY_MASTER.TODATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsACT_FLAGNull() As Boolean
            Return Me.IsNull(Me.tableFACILITY_MASTER.ACT_FLAGColumn)
        End Function
        
        Public Sub SetACT_FLAGNull()
            Me(Me.tableFACILITY_MASTER.ACT_FLAGColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFREEZENull() As Boolean
            Return Me.IsNull(Me.tableFACILITY_MASTER.FREEZEColumn)
        End Function
        
        Public Sub SetFREEZENull()
            Me(Me.tableFACILITY_MASTER.FREEZEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsbilldetailsNull() As Boolean
            Return Me.IsNull(Me.tableFACILITY_MASTER.billdetailsColumn)
        End Function
        
        Public Sub SetbilldetailsNull()
            Me(Me.tableFACILITY_MASTER.billdetailsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsbilldateNull() As Boolean
            Return Me.IsNull(Me.tableFACILITY_MASTER.billdateColumn)
        End Function
        
        Public Sub SetbilldateNull()
            Me(Me.tableFACILITY_MASTER.billdateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsftypeNull() As Boolean
            Return Me.IsNull(Me.tableFACILITY_MASTER.ftypeColumn)
        End Function
        
        Public Sub SetftypeNull()
            Me(Me.tableFACILITY_MASTER.ftypeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRELATIONNull() As Boolean
            Return Me.IsNull(Me.tableFACILITY_MASTER.RELATIONColumn)
        End Function
        
        Public Sub SetRELATIONNull()
            Me(Me.tableFACILITY_MASTER.RELATIONColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCNAMENull() As Boolean
            Return Me.IsNull(Me.tableFACILITY_MASTER.CNAMEColumn)
        End Function
        
        Public Sub SetCNAMENull()
            Me(Me.tableFACILITY_MASTER.CNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSEXNull() As Boolean
            Return Me.IsNull(Me.tableFACILITY_MASTER.SEXColumn)
        End Function
        
        Public Sub SetSEXNull()
            Me(Me.tableFACILITY_MASTER.SEXColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCDOBNull() As Boolean
            Return Me.IsNull(Me.tableFACILITY_MASTER.CDOBColumn)
        End Function
        
        Public Sub SetCDOBNull()
            Me(Me.tableFACILITY_MASTER.CDOBColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRTYPENull() As Boolean
            Return Me.IsNull(Me.tableFACILITY_MASTER.RTYPEColumn)
        End Function
        
        Public Sub SetRTYPENull()
            Me(Me.tableFACILITY_MASTER.RTYPEColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class FACILITY_MASTERRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As FACILITY_MASTERRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As FACILITY_MASTERRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As FACILITY_MASTERRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
