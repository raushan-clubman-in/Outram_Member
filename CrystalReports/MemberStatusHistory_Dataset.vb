'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class MemberStatusHistory_Dataset
    Inherits DataSet
    
    Private tableVW_MEMBERSTATUS_HISTORY As VW_MEMBERSTATUS_HISTORYDataTable
    
    Private tablemm_memberledger As mm_memberledgerDataTable
    
    Private tableMM_MEMBERSTATUSHISTORYLIST As MM_MEMBERSTATUSHISTORYLISTDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("VW_MEMBERSTATUS_HISTORY")) Is Nothing) Then
                Me.Tables.Add(New VW_MEMBERSTATUS_HISTORYDataTable(ds.Tables("VW_MEMBERSTATUS_HISTORY")))
            End If
            If (Not (ds.Tables("mm_memberledger")) Is Nothing) Then
                Me.Tables.Add(New mm_memberledgerDataTable(ds.Tables("mm_memberledger")))
            End If
            If (Not (ds.Tables("MM_MEMBERSTATUSHISTORYLIST")) Is Nothing) Then
                Me.Tables.Add(New MM_MEMBERSTATUSHISTORYLISTDataTable(ds.Tables("MM_MEMBERSTATUSHISTORYLIST")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VW_MEMBERSTATUS_HISTORY As VW_MEMBERSTATUS_HISTORYDataTable
        Get
            Return Me.tableVW_MEMBERSTATUS_HISTORY
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property mm_memberledger As mm_memberledgerDataTable
        Get
            Return Me.tablemm_memberledger
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MM_MEMBERSTATUSHISTORYLIST As MM_MEMBERSTATUSHISTORYLISTDataTable
        Get
            Return Me.tableMM_MEMBERSTATUSHISTORYLIST
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As MemberStatusHistory_Dataset = CType(MyBase.Clone,MemberStatusHistory_Dataset)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("VW_MEMBERSTATUS_HISTORY")) Is Nothing) Then
            Me.Tables.Add(New VW_MEMBERSTATUS_HISTORYDataTable(ds.Tables("VW_MEMBERSTATUS_HISTORY")))
        End If
        If (Not (ds.Tables("mm_memberledger")) Is Nothing) Then
            Me.Tables.Add(New mm_memberledgerDataTable(ds.Tables("mm_memberledger")))
        End If
        If (Not (ds.Tables("MM_MEMBERSTATUSHISTORYLIST")) Is Nothing) Then
            Me.Tables.Add(New MM_MEMBERSTATUSHISTORYLISTDataTable(ds.Tables("MM_MEMBERSTATUSHISTORYLIST")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableVW_MEMBERSTATUS_HISTORY = CType(Me.Tables("VW_MEMBERSTATUS_HISTORY"),VW_MEMBERSTATUS_HISTORYDataTable)
        If (Not (Me.tableVW_MEMBERSTATUS_HISTORY) Is Nothing) Then
            Me.tableVW_MEMBERSTATUS_HISTORY.InitVars
        End If
        Me.tablemm_memberledger = CType(Me.Tables("mm_memberledger"),mm_memberledgerDataTable)
        If (Not (Me.tablemm_memberledger) Is Nothing) Then
            Me.tablemm_memberledger.InitVars
        End If
        Me.tableMM_MEMBERSTATUSHISTORYLIST = CType(Me.Tables("MM_MEMBERSTATUSHISTORYLIST"),MM_MEMBERSTATUSHISTORYLISTDataTable)
        If (Not (Me.tableMM_MEMBERSTATUSHISTORYLIST) Is Nothing) Then
            Me.tableMM_MEMBERSTATUSHISTORYLIST.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "MemberStatusHistory_Dataset"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/MemberStatusHistory_Dataset.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableVW_MEMBERSTATUS_HISTORY = New VW_MEMBERSTATUS_HISTORYDataTable
        Me.Tables.Add(Me.tableVW_MEMBERSTATUS_HISTORY)
        Me.tablemm_memberledger = New mm_memberledgerDataTable
        Me.Tables.Add(Me.tablemm_memberledger)
        Me.tableMM_MEMBERSTATUSHISTORYLIST = New MM_MEMBERSTATUSHISTORYLISTDataTable
        Me.Tables.Add(Me.tableMM_MEMBERSTATUSHISTORYLIST)
    End Sub
    
    Private Function ShouldSerializeVW_MEMBERSTATUS_HISTORY() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializemm_memberledger() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeMM_MEMBERSTATUSHISTORYLIST() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub VW_MEMBERSTATUS_HISTORYRowChangeEventHandler(ByVal sender As Object, ByVal e As VW_MEMBERSTATUS_HISTORYRowChangeEvent)
    
    Public Delegate Sub mm_memberledgerRowChangeEventHandler(ByVal sender As Object, ByVal e As mm_memberledgerRowChangeEvent)
    
    Public Delegate Sub MM_MEMBERSTATUSHISTORYLISTRowChangeEventHandler(ByVal sender As Object, ByVal e As MM_MEMBERSTATUSHISTORYLISTRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VW_MEMBERSTATUS_HISTORYDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnmcode As DataColumn
        
        Private columnmname As DataColumn
        
        Private columncurentstatus As DataColumn
        
        Private columndoj As DataColumn
        
        Private columnstatusdatefrom As DataColumn
        
        Private columnstatusdateto As DataColumn
        
        Friend Sub New()
            MyBase.New("VW_MEMBERSTATUS_HISTORY")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property mcodeColumn As DataColumn
            Get
                Return Me.columnmcode
            End Get
        End Property
        
        Friend ReadOnly Property mnameColumn As DataColumn
            Get
                Return Me.columnmname
            End Get
        End Property
        
        Friend ReadOnly Property curentstatusColumn As DataColumn
            Get
                Return Me.columncurentstatus
            End Get
        End Property
        
        Friend ReadOnly Property dojColumn As DataColumn
            Get
                Return Me.columndoj
            End Get
        End Property
        
        Friend ReadOnly Property statusdatefromColumn As DataColumn
            Get
                Return Me.columnstatusdatefrom
            End Get
        End Property
        
        Friend ReadOnly Property statusdatetoColumn As DataColumn
            Get
                Return Me.columnstatusdateto
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VW_MEMBERSTATUS_HISTORYRow
            Get
                Return CType(Me.Rows(index),VW_MEMBERSTATUS_HISTORYRow)
            End Get
        End Property
        
        Public Event VW_MEMBERSTATUS_HISTORYRowChanged As VW_MEMBERSTATUS_HISTORYRowChangeEventHandler
        
        Public Event VW_MEMBERSTATUS_HISTORYRowChanging As VW_MEMBERSTATUS_HISTORYRowChangeEventHandler
        
        Public Event VW_MEMBERSTATUS_HISTORYRowDeleted As VW_MEMBERSTATUS_HISTORYRowChangeEventHandler
        
        Public Event VW_MEMBERSTATUS_HISTORYRowDeleting As VW_MEMBERSTATUS_HISTORYRowChangeEventHandler
        
        Public Overloads Sub AddVW_MEMBERSTATUS_HISTORYRow(ByVal row As VW_MEMBERSTATUS_HISTORYRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVW_MEMBERSTATUS_HISTORYRow(ByVal mcode As String, ByVal mname As String, ByVal curentstatus As String, ByVal doj As Date, ByVal statusdatefrom As Date, ByVal statusdateto As Date) As VW_MEMBERSTATUS_HISTORYRow
            Dim rowVW_MEMBERSTATUS_HISTORYRow As VW_MEMBERSTATUS_HISTORYRow = CType(Me.NewRow,VW_MEMBERSTATUS_HISTORYRow)
            rowVW_MEMBERSTATUS_HISTORYRow.ItemArray = New Object() {mcode, mname, curentstatus, doj, statusdatefrom, statusdateto}
            Me.Rows.Add(rowVW_MEMBERSTATUS_HISTORYRow)
            Return rowVW_MEMBERSTATUS_HISTORYRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VW_MEMBERSTATUS_HISTORYDataTable = CType(MyBase.Clone,VW_MEMBERSTATUS_HISTORYDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VW_MEMBERSTATUS_HISTORYDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnmcode = Me.Columns("mcode")
            Me.columnmname = Me.Columns("mname")
            Me.columncurentstatus = Me.Columns("curentstatus")
            Me.columndoj = Me.Columns("doj")
            Me.columnstatusdatefrom = Me.Columns("statusdatefrom")
            Me.columnstatusdateto = Me.Columns("statusdateto")
        End Sub
        
        Private Sub InitClass()
            Me.columnmcode = New DataColumn("mcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmcode)
            Me.columnmname = New DataColumn("mname", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmname)
            Me.columncurentstatus = New DataColumn("curentstatus", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncurentstatus)
            Me.columndoj = New DataColumn("doj", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndoj)
            Me.columnstatusdatefrom = New DataColumn("statusdatefrom", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstatusdatefrom)
            Me.columnstatusdateto = New DataColumn("statusdateto", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstatusdateto)
        End Sub
        
        Public Function NewVW_MEMBERSTATUS_HISTORYRow() As VW_MEMBERSTATUS_HISTORYRow
            Return CType(Me.NewRow,VW_MEMBERSTATUS_HISTORYRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VW_MEMBERSTATUS_HISTORYRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VW_MEMBERSTATUS_HISTORYRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VW_MEMBERSTATUS_HISTORYRowChangedEvent) Is Nothing) Then
                RaiseEvent VW_MEMBERSTATUS_HISTORYRowChanged(Me, New VW_MEMBERSTATUS_HISTORYRowChangeEvent(CType(e.Row,VW_MEMBERSTATUS_HISTORYRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VW_MEMBERSTATUS_HISTORYRowChangingEvent) Is Nothing) Then
                RaiseEvent VW_MEMBERSTATUS_HISTORYRowChanging(Me, New VW_MEMBERSTATUS_HISTORYRowChangeEvent(CType(e.Row,VW_MEMBERSTATUS_HISTORYRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VW_MEMBERSTATUS_HISTORYRowDeletedEvent) Is Nothing) Then
                RaiseEvent VW_MEMBERSTATUS_HISTORYRowDeleted(Me, New VW_MEMBERSTATUS_HISTORYRowChangeEvent(CType(e.Row,VW_MEMBERSTATUS_HISTORYRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VW_MEMBERSTATUS_HISTORYRowDeletingEvent) Is Nothing) Then
                RaiseEvent VW_MEMBERSTATUS_HISTORYRowDeleting(Me, New VW_MEMBERSTATUS_HISTORYRowChangeEvent(CType(e.Row,VW_MEMBERSTATUS_HISTORYRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVW_MEMBERSTATUS_HISTORYRow(ByVal row As VW_MEMBERSTATUS_HISTORYRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VW_MEMBERSTATUS_HISTORYRow
        Inherits DataRow
        
        Private tableVW_MEMBERSTATUS_HISTORY As VW_MEMBERSTATUS_HISTORYDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVW_MEMBERSTATUS_HISTORY = CType(Me.Table,VW_MEMBERSTATUS_HISTORYDataTable)
        End Sub
        
        Public Property mcode As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_MEMBERSTATUS_HISTORY.mcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_MEMBERSTATUS_HISTORY.mcodeColumn) = value
            End Set
        End Property
        
        Public Property mname As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_MEMBERSTATUS_HISTORY.mnameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_MEMBERSTATUS_HISTORY.mnameColumn) = value
            End Set
        End Property
        
        Public Property curentstatus As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_MEMBERSTATUS_HISTORY.curentstatusColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_MEMBERSTATUS_HISTORY.curentstatusColumn) = value
            End Set
        End Property
        
        Public Property doj As Date
            Get
                Try 
                    Return CType(Me(Me.tableVW_MEMBERSTATUS_HISTORY.dojColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_MEMBERSTATUS_HISTORY.dojColumn) = value
            End Set
        End Property
        
        Public Property statusdatefrom As Date
            Get
                Try 
                    Return CType(Me(Me.tableVW_MEMBERSTATUS_HISTORY.statusdatefromColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_MEMBERSTATUS_HISTORY.statusdatefromColumn) = value
            End Set
        End Property
        
        Public Property statusdateto As Date
            Get
                Try 
                    Return CType(Me(Me.tableVW_MEMBERSTATUS_HISTORY.statusdatetoColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_MEMBERSTATUS_HISTORY.statusdatetoColumn) = value
            End Set
        End Property
        
        Public Function IsmcodeNull() As Boolean
            Return Me.IsNull(Me.tableVW_MEMBERSTATUS_HISTORY.mcodeColumn)
        End Function
        
        Public Sub SetmcodeNull()
            Me(Me.tableVW_MEMBERSTATUS_HISTORY.mcodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsmnameNull() As Boolean
            Return Me.IsNull(Me.tableVW_MEMBERSTATUS_HISTORY.mnameColumn)
        End Function
        
        Public Sub SetmnameNull()
            Me(Me.tableVW_MEMBERSTATUS_HISTORY.mnameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscurentstatusNull() As Boolean
            Return Me.IsNull(Me.tableVW_MEMBERSTATUS_HISTORY.curentstatusColumn)
        End Function
        
        Public Sub SetcurentstatusNull()
            Me(Me.tableVW_MEMBERSTATUS_HISTORY.curentstatusColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdojNull() As Boolean
            Return Me.IsNull(Me.tableVW_MEMBERSTATUS_HISTORY.dojColumn)
        End Function
        
        Public Sub SetdojNull()
            Me(Me.tableVW_MEMBERSTATUS_HISTORY.dojColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsstatusdatefromNull() As Boolean
            Return Me.IsNull(Me.tableVW_MEMBERSTATUS_HISTORY.statusdatefromColumn)
        End Function
        
        Public Sub SetstatusdatefromNull()
            Me(Me.tableVW_MEMBERSTATUS_HISTORY.statusdatefromColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsstatusdatetoNull() As Boolean
            Return Me.IsNull(Me.tableVW_MEMBERSTATUS_HISTORY.statusdatetoColumn)
        End Function
        
        Public Sub SetstatusdatetoNull()
            Me(Me.tableVW_MEMBERSTATUS_HISTORY.statusdatetoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VW_MEMBERSTATUS_HISTORYRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VW_MEMBERSTATUS_HISTORYRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VW_MEMBERSTATUS_HISTORYRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VW_MEMBERSTATUS_HISTORYRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class mm_memberledgerDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSLNO As DataColumn
        
        Private columnReferenceNo As DataColumn
        
        Private columnReferenceName As DataColumn
        
        Private columnMCODE As DataColumn
        
        Private columnPRESENTSTATUS As DataColumn
        
        Private columnNEWSTATUS As DataColumn
        
        Private columnREMARKS As DataColumn
        
        Private columnEFFECTIVEFROM As DataColumn
        
        Private columnEFFECTIVETO As DataColumn
        
        Private columnUSERID As DataColumn
        
        Private columnADDDATE As DataColumn
        
        Private columnmname As DataColumn
        
        Friend Sub New()
            MyBase.New("mm_memberledger")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property SLNOColumn As DataColumn
            Get
                Return Me.columnSLNO
            End Get
        End Property
        
        Friend ReadOnly Property ReferenceNoColumn As DataColumn
            Get
                Return Me.columnReferenceNo
            End Get
        End Property
        
        Friend ReadOnly Property ReferenceNameColumn As DataColumn
            Get
                Return Me.columnReferenceName
            End Get
        End Property
        
        Friend ReadOnly Property MCODEColumn As DataColumn
            Get
                Return Me.columnMCODE
            End Get
        End Property
        
        Friend ReadOnly Property PRESENTSTATUSColumn As DataColumn
            Get
                Return Me.columnPRESENTSTATUS
            End Get
        End Property
        
        Friend ReadOnly Property NEWSTATUSColumn As DataColumn
            Get
                Return Me.columnNEWSTATUS
            End Get
        End Property
        
        Friend ReadOnly Property REMARKSColumn As DataColumn
            Get
                Return Me.columnREMARKS
            End Get
        End Property
        
        Friend ReadOnly Property EFFECTIVEFROMColumn As DataColumn
            Get
                Return Me.columnEFFECTIVEFROM
            End Get
        End Property
        
        Friend ReadOnly Property EFFECTIVETOColumn As DataColumn
            Get
                Return Me.columnEFFECTIVETO
            End Get
        End Property
        
        Friend ReadOnly Property USERIDColumn As DataColumn
            Get
                Return Me.columnUSERID
            End Get
        End Property
        
        Friend ReadOnly Property ADDDATEColumn As DataColumn
            Get
                Return Me.columnADDDATE
            End Get
        End Property
        
        Friend ReadOnly Property mnameColumn As DataColumn
            Get
                Return Me.columnmname
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As mm_memberledgerRow
            Get
                Return CType(Me.Rows(index),mm_memberledgerRow)
            End Get
        End Property
        
        Public Event mm_memberledgerRowChanged As mm_memberledgerRowChangeEventHandler
        
        Public Event mm_memberledgerRowChanging As mm_memberledgerRowChangeEventHandler
        
        Public Event mm_memberledgerRowDeleted As mm_memberledgerRowChangeEventHandler
        
        Public Event mm_memberledgerRowDeleting As mm_memberledgerRowChangeEventHandler
        
        Public Overloads Sub Addmm_memberledgerRow(ByVal row As mm_memberledgerRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addmm_memberledgerRow(ByVal ReferenceNo As String, ByVal ReferenceName As String, ByVal MCODE As String, ByVal PRESENTSTATUS As String, ByVal NEWSTATUS As String, ByVal REMARKS As String, ByVal EFFECTIVEFROM As Date, ByVal EFFECTIVETO As Date, ByVal USERID As String, ByVal ADDDATE As Date, ByVal mname As String) As mm_memberledgerRow
            Dim rowmm_memberledgerRow As mm_memberledgerRow = CType(Me.NewRow,mm_memberledgerRow)
            rowmm_memberledgerRow.ItemArray = New Object() {Nothing, ReferenceNo, ReferenceName, MCODE, PRESENTSTATUS, NEWSTATUS, REMARKS, EFFECTIVEFROM, EFFECTIVETO, USERID, ADDDATE, mname}
            Me.Rows.Add(rowmm_memberledgerRow)
            Return rowmm_memberledgerRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As mm_memberledgerDataTable = CType(MyBase.Clone,mm_memberledgerDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New mm_memberledgerDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnSLNO = Me.Columns("SLNO")
            Me.columnReferenceNo = Me.Columns("ReferenceNo")
            Me.columnReferenceName = Me.Columns("ReferenceName")
            Me.columnMCODE = Me.Columns("MCODE")
            Me.columnPRESENTSTATUS = Me.Columns("PRESENTSTATUS")
            Me.columnNEWSTATUS = Me.Columns("NEWSTATUS")
            Me.columnREMARKS = Me.Columns("REMARKS")
            Me.columnEFFECTIVEFROM = Me.Columns("EFFECTIVEFROM")
            Me.columnEFFECTIVETO = Me.Columns("EFFECTIVETO")
            Me.columnUSERID = Me.Columns("USERID")
            Me.columnADDDATE = Me.Columns("ADDDATE")
            Me.columnmname = Me.Columns("mname")
        End Sub
        
        Private Sub InitClass()
            Me.columnSLNO = New DataColumn("SLNO", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSLNO)
            Me.columnReferenceNo = New DataColumn("ReferenceNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnReferenceNo)
            Me.columnReferenceName = New DataColumn("ReferenceName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnReferenceName)
            Me.columnMCODE = New DataColumn("MCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMCODE)
            Me.columnPRESENTSTATUS = New DataColumn("PRESENTSTATUS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPRESENTSTATUS)
            Me.columnNEWSTATUS = New DataColumn("NEWSTATUS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNEWSTATUS)
            Me.columnREMARKS = New DataColumn("REMARKS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnREMARKS)
            Me.columnEFFECTIVEFROM = New DataColumn("EFFECTIVEFROM", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEFFECTIVEFROM)
            Me.columnEFFECTIVETO = New DataColumn("EFFECTIVETO", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEFFECTIVETO)
            Me.columnUSERID = New DataColumn("USERID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUSERID)
            Me.columnADDDATE = New DataColumn("ADDDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnADDDATE)
            Me.columnmname = New DataColumn("mname", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmname)
            Me.columnSLNO.AutoIncrement = true
            Me.columnSLNO.AllowDBNull = false
            Me.columnSLNO.ReadOnly = true
        End Sub
        
        Public Function Newmm_memberledgerRow() As mm_memberledgerRow
            Return CType(Me.NewRow,mm_memberledgerRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New mm_memberledgerRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(mm_memberledgerRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.mm_memberledgerRowChangedEvent) Is Nothing) Then
                RaiseEvent mm_memberledgerRowChanged(Me, New mm_memberledgerRowChangeEvent(CType(e.Row,mm_memberledgerRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.mm_memberledgerRowChangingEvent) Is Nothing) Then
                RaiseEvent mm_memberledgerRowChanging(Me, New mm_memberledgerRowChangeEvent(CType(e.Row,mm_memberledgerRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.mm_memberledgerRowDeletedEvent) Is Nothing) Then
                RaiseEvent mm_memberledgerRowDeleted(Me, New mm_memberledgerRowChangeEvent(CType(e.Row,mm_memberledgerRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.mm_memberledgerRowDeletingEvent) Is Nothing) Then
                RaiseEvent mm_memberledgerRowDeleting(Me, New mm_memberledgerRowChangeEvent(CType(e.Row,mm_memberledgerRow), e.Action))
            End If
        End Sub
        
        Public Sub Removemm_memberledgerRow(ByVal row As mm_memberledgerRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class mm_memberledgerRow
        Inherits DataRow
        
        Private tablemm_memberledger As mm_memberledgerDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablemm_memberledger = CType(Me.Table,mm_memberledgerDataTable)
        End Sub
        
        Public Property SLNO As Decimal
            Get
                Return CType(Me(Me.tablemm_memberledger.SLNOColumn),Decimal)
            End Get
            Set
                Me(Me.tablemm_memberledger.SLNOColumn) = value
            End Set
        End Property
        
        Public Property ReferenceNo As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_memberledger.ReferenceNoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_memberledger.ReferenceNoColumn) = value
            End Set
        End Property
        
        Public Property ReferenceName As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_memberledger.ReferenceNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_memberledger.ReferenceNameColumn) = value
            End Set
        End Property
        
        Public Property MCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_memberledger.MCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_memberledger.MCODEColumn) = value
            End Set
        End Property
        
        Public Property PRESENTSTATUS As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_memberledger.PRESENTSTATUSColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_memberledger.PRESENTSTATUSColumn) = value
            End Set
        End Property
        
        Public Property NEWSTATUS As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_memberledger.NEWSTATUSColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_memberledger.NEWSTATUSColumn) = value
            End Set
        End Property
        
        Public Property REMARKS As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_memberledger.REMARKSColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_memberledger.REMARKSColumn) = value
            End Set
        End Property
        
        Public Property EFFECTIVEFROM As Date
            Get
                Try 
                    Return CType(Me(Me.tablemm_memberledger.EFFECTIVEFROMColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_memberledger.EFFECTIVEFROMColumn) = value
            End Set
        End Property
        
        Public Property EFFECTIVETO As Date
            Get
                Try 
                    Return CType(Me(Me.tablemm_memberledger.EFFECTIVETOColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_memberledger.EFFECTIVETOColumn) = value
            End Set
        End Property
        
        Public Property USERID As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_memberledger.USERIDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_memberledger.USERIDColumn) = value
            End Set
        End Property
        
        Public Property ADDDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablemm_memberledger.ADDDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_memberledger.ADDDATEColumn) = value
            End Set
        End Property
        
        Public Property mname As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_memberledger.mnameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_memberledger.mnameColumn) = value
            End Set
        End Property
        
        Public Function IsReferenceNoNull() As Boolean
            Return Me.IsNull(Me.tablemm_memberledger.ReferenceNoColumn)
        End Function
        
        Public Sub SetReferenceNoNull()
            Me(Me.tablemm_memberledger.ReferenceNoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsReferenceNameNull() As Boolean
            Return Me.IsNull(Me.tablemm_memberledger.ReferenceNameColumn)
        End Function
        
        Public Sub SetReferenceNameNull()
            Me(Me.tablemm_memberledger.ReferenceNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMCODENull() As Boolean
            Return Me.IsNull(Me.tablemm_memberledger.MCODEColumn)
        End Function
        
        Public Sub SetMCODENull()
            Me(Me.tablemm_memberledger.MCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPRESENTSTATUSNull() As Boolean
            Return Me.IsNull(Me.tablemm_memberledger.PRESENTSTATUSColumn)
        End Function
        
        Public Sub SetPRESENTSTATUSNull()
            Me(Me.tablemm_memberledger.PRESENTSTATUSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNEWSTATUSNull() As Boolean
            Return Me.IsNull(Me.tablemm_memberledger.NEWSTATUSColumn)
        End Function
        
        Public Sub SetNEWSTATUSNull()
            Me(Me.tablemm_memberledger.NEWSTATUSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsREMARKSNull() As Boolean
            Return Me.IsNull(Me.tablemm_memberledger.REMARKSColumn)
        End Function
        
        Public Sub SetREMARKSNull()
            Me(Me.tablemm_memberledger.REMARKSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEFFECTIVEFROMNull() As Boolean
            Return Me.IsNull(Me.tablemm_memberledger.EFFECTIVEFROMColumn)
        End Function
        
        Public Sub SetEFFECTIVEFROMNull()
            Me(Me.tablemm_memberledger.EFFECTIVEFROMColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEFFECTIVETONull() As Boolean
            Return Me.IsNull(Me.tablemm_memberledger.EFFECTIVETOColumn)
        End Function
        
        Public Sub SetEFFECTIVETONull()
            Me(Me.tablemm_memberledger.EFFECTIVETOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUSERIDNull() As Boolean
            Return Me.IsNull(Me.tablemm_memberledger.USERIDColumn)
        End Function
        
        Public Sub SetUSERIDNull()
            Me(Me.tablemm_memberledger.USERIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsADDDATENull() As Boolean
            Return Me.IsNull(Me.tablemm_memberledger.ADDDATEColumn)
        End Function
        
        Public Sub SetADDDATENull()
            Me(Me.tablemm_memberledger.ADDDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsmnameNull() As Boolean
            Return Me.IsNull(Me.tablemm_memberledger.mnameColumn)
        End Function
        
        Public Sub SetmnameNull()
            Me(Me.tablemm_memberledger.mnameColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class mm_memberledgerRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As mm_memberledgerRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As mm_memberledgerRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As mm_memberledgerRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MM_MEMBERSTATUSHISTORYLISTDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnmcode As DataColumn
        
        Private columnmname As DataColumn
        
        Private columnPRESENTSTATUS As DataColumn
        
        Private columnNEWSTATUS As DataColumn
        
        Private columnREMARKS As DataColumn
        
        Private columnEFFECTIVEFROM As DataColumn
        
        Private columnEFFECTIVETO As DataColumn
        
        Private columnADDDATE As DataColumn
        
        Private columnmembertypecode As DataColumn
        
        Private columntype As DataColumn
        
        Private columncurentstatus As DataColumn
        
        Friend Sub New()
            MyBase.New("MM_MEMBERSTATUSHISTORYLIST")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property mcodeColumn As DataColumn
            Get
                Return Me.columnmcode
            End Get
        End Property
        
        Friend ReadOnly Property mnameColumn As DataColumn
            Get
                Return Me.columnmname
            End Get
        End Property
        
        Friend ReadOnly Property PRESENTSTATUSColumn As DataColumn
            Get
                Return Me.columnPRESENTSTATUS
            End Get
        End Property
        
        Friend ReadOnly Property NEWSTATUSColumn As DataColumn
            Get
                Return Me.columnNEWSTATUS
            End Get
        End Property
        
        Friend ReadOnly Property REMARKSColumn As DataColumn
            Get
                Return Me.columnREMARKS
            End Get
        End Property
        
        Friend ReadOnly Property EFFECTIVEFROMColumn As DataColumn
            Get
                Return Me.columnEFFECTIVEFROM
            End Get
        End Property
        
        Friend ReadOnly Property EFFECTIVETOColumn As DataColumn
            Get
                Return Me.columnEFFECTIVETO
            End Get
        End Property
        
        Friend ReadOnly Property ADDDATEColumn As DataColumn
            Get
                Return Me.columnADDDATE
            End Get
        End Property
        
        Friend ReadOnly Property membertypecodeColumn As DataColumn
            Get
                Return Me.columnmembertypecode
            End Get
        End Property
        
        Friend ReadOnly Property typeColumn As DataColumn
            Get
                Return Me.columntype
            End Get
        End Property
        
        Friend ReadOnly Property curentstatusColumn As DataColumn
            Get
                Return Me.columncurentstatus
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As MM_MEMBERSTATUSHISTORYLISTRow
            Get
                Return CType(Me.Rows(index),MM_MEMBERSTATUSHISTORYLISTRow)
            End Get
        End Property
        
        Public Event MM_MEMBERSTATUSHISTORYLISTRowChanged As MM_MEMBERSTATUSHISTORYLISTRowChangeEventHandler
        
        Public Event MM_MEMBERSTATUSHISTORYLISTRowChanging As MM_MEMBERSTATUSHISTORYLISTRowChangeEventHandler
        
        Public Event MM_MEMBERSTATUSHISTORYLISTRowDeleted As MM_MEMBERSTATUSHISTORYLISTRowChangeEventHandler
        
        Public Event MM_MEMBERSTATUSHISTORYLISTRowDeleting As MM_MEMBERSTATUSHISTORYLISTRowChangeEventHandler
        
        Public Overloads Sub AddMM_MEMBERSTATUSHISTORYLISTRow(ByVal row As MM_MEMBERSTATUSHISTORYLISTRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddMM_MEMBERSTATUSHISTORYLISTRow(ByVal mcode As String, ByVal mname As String, ByVal PRESENTSTATUS As String, ByVal NEWSTATUS As String, ByVal REMARKS As String, ByVal EFFECTIVEFROM As Date, ByVal EFFECTIVETO As Date, ByVal ADDDATE As Date, ByVal membertypecode As String, ByVal type As String, ByVal curentstatus As String) As MM_MEMBERSTATUSHISTORYLISTRow
            Dim rowMM_MEMBERSTATUSHISTORYLISTRow As MM_MEMBERSTATUSHISTORYLISTRow = CType(Me.NewRow,MM_MEMBERSTATUSHISTORYLISTRow)
            rowMM_MEMBERSTATUSHISTORYLISTRow.ItemArray = New Object() {mcode, mname, PRESENTSTATUS, NEWSTATUS, REMARKS, EFFECTIVEFROM, EFFECTIVETO, ADDDATE, membertypecode, type, curentstatus}
            Me.Rows.Add(rowMM_MEMBERSTATUSHISTORYLISTRow)
            Return rowMM_MEMBERSTATUSHISTORYLISTRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As MM_MEMBERSTATUSHISTORYLISTDataTable = CType(MyBase.Clone,MM_MEMBERSTATUSHISTORYLISTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New MM_MEMBERSTATUSHISTORYLISTDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnmcode = Me.Columns("mcode")
            Me.columnmname = Me.Columns("mname")
            Me.columnPRESENTSTATUS = Me.Columns("PRESENTSTATUS")
            Me.columnNEWSTATUS = Me.Columns("NEWSTATUS")
            Me.columnREMARKS = Me.Columns("REMARKS")
            Me.columnEFFECTIVEFROM = Me.Columns("EFFECTIVEFROM")
            Me.columnEFFECTIVETO = Me.Columns("EFFECTIVETO")
            Me.columnADDDATE = Me.Columns("ADDDATE")
            Me.columnmembertypecode = Me.Columns("membertypecode")
            Me.columntype = Me.Columns("type")
            Me.columncurentstatus = Me.Columns("curentstatus")
        End Sub
        
        Private Sub InitClass()
            Me.columnmcode = New DataColumn("mcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmcode)
            Me.columnmname = New DataColumn("mname", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmname)
            Me.columnPRESENTSTATUS = New DataColumn("PRESENTSTATUS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPRESENTSTATUS)
            Me.columnNEWSTATUS = New DataColumn("NEWSTATUS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNEWSTATUS)
            Me.columnREMARKS = New DataColumn("REMARKS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnREMARKS)
            Me.columnEFFECTIVEFROM = New DataColumn("EFFECTIVEFROM", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEFFECTIVEFROM)
            Me.columnEFFECTIVETO = New DataColumn("EFFECTIVETO", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEFFECTIVETO)
            Me.columnADDDATE = New DataColumn("ADDDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnADDDATE)
            Me.columnmembertypecode = New DataColumn("membertypecode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmembertypecode)
            Me.columntype = New DataColumn("type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntype)
            Me.columncurentstatus = New DataColumn("curentstatus", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncurentstatus)
            Me.columnmcode.ReadOnly = true
            Me.columnmname.ReadOnly = true
            Me.columnPRESENTSTATUS.ReadOnly = true
            Me.columnNEWSTATUS.ReadOnly = true
            Me.columnREMARKS.ReadOnly = true
            Me.columnEFFECTIVEFROM.ReadOnly = true
            Me.columnEFFECTIVETO.ReadOnly = true
            Me.columnADDDATE.ReadOnly = true
            Me.columnmembertypecode.ReadOnly = true
            Me.columntype.ReadOnly = true
            Me.columncurentstatus.ReadOnly = true
        End Sub
        
        Public Function NewMM_MEMBERSTATUSHISTORYLISTRow() As MM_MEMBERSTATUSHISTORYLISTRow
            Return CType(Me.NewRow,MM_MEMBERSTATUSHISTORYLISTRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New MM_MEMBERSTATUSHISTORYLISTRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(MM_MEMBERSTATUSHISTORYLISTRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MM_MEMBERSTATUSHISTORYLISTRowChangedEvent) Is Nothing) Then
                RaiseEvent MM_MEMBERSTATUSHISTORYLISTRowChanged(Me, New MM_MEMBERSTATUSHISTORYLISTRowChangeEvent(CType(e.Row,MM_MEMBERSTATUSHISTORYLISTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MM_MEMBERSTATUSHISTORYLISTRowChangingEvent) Is Nothing) Then
                RaiseEvent MM_MEMBERSTATUSHISTORYLISTRowChanging(Me, New MM_MEMBERSTATUSHISTORYLISTRowChangeEvent(CType(e.Row,MM_MEMBERSTATUSHISTORYLISTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MM_MEMBERSTATUSHISTORYLISTRowDeletedEvent) Is Nothing) Then
                RaiseEvent MM_MEMBERSTATUSHISTORYLISTRowDeleted(Me, New MM_MEMBERSTATUSHISTORYLISTRowChangeEvent(CType(e.Row,MM_MEMBERSTATUSHISTORYLISTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MM_MEMBERSTATUSHISTORYLISTRowDeletingEvent) Is Nothing) Then
                RaiseEvent MM_MEMBERSTATUSHISTORYLISTRowDeleting(Me, New MM_MEMBERSTATUSHISTORYLISTRowChangeEvent(CType(e.Row,MM_MEMBERSTATUSHISTORYLISTRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveMM_MEMBERSTATUSHISTORYLISTRow(ByVal row As MM_MEMBERSTATUSHISTORYLISTRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MM_MEMBERSTATUSHISTORYLISTRow
        Inherits DataRow
        
        Private tableMM_MEMBERSTATUSHISTORYLIST As MM_MEMBERSTATUSHISTORYLISTDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableMM_MEMBERSTATUSHISTORYLIST = CType(Me.Table,MM_MEMBERSTATUSHISTORYLISTDataTable)
        End Sub
        
        Public Property mcode As String
            Get
                Try 
                    Return CType(Me(Me.tableMM_MEMBERSTATUSHISTORYLIST.mcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMM_MEMBERSTATUSHISTORYLIST.mcodeColumn) = value
            End Set
        End Property
        
        Public Property mname As String
            Get
                Try 
                    Return CType(Me(Me.tableMM_MEMBERSTATUSHISTORYLIST.mnameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMM_MEMBERSTATUSHISTORYLIST.mnameColumn) = value
            End Set
        End Property
        
        Public Property PRESENTSTATUS As String
            Get
                Try 
                    Return CType(Me(Me.tableMM_MEMBERSTATUSHISTORYLIST.PRESENTSTATUSColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMM_MEMBERSTATUSHISTORYLIST.PRESENTSTATUSColumn) = value
            End Set
        End Property
        
        Public Property NEWSTATUS As String
            Get
                Try 
                    Return CType(Me(Me.tableMM_MEMBERSTATUSHISTORYLIST.NEWSTATUSColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMM_MEMBERSTATUSHISTORYLIST.NEWSTATUSColumn) = value
            End Set
        End Property
        
        Public Property REMARKS As String
            Get
                Try 
                    Return CType(Me(Me.tableMM_MEMBERSTATUSHISTORYLIST.REMARKSColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMM_MEMBERSTATUSHISTORYLIST.REMARKSColumn) = value
            End Set
        End Property
        
        Public Property EFFECTIVEFROM As Date
            Get
                Try 
                    Return CType(Me(Me.tableMM_MEMBERSTATUSHISTORYLIST.EFFECTIVEFROMColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMM_MEMBERSTATUSHISTORYLIST.EFFECTIVEFROMColumn) = value
            End Set
        End Property
        
        Public Property EFFECTIVETO As Date
            Get
                Try 
                    Return CType(Me(Me.tableMM_MEMBERSTATUSHISTORYLIST.EFFECTIVETOColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMM_MEMBERSTATUSHISTORYLIST.EFFECTIVETOColumn) = value
            End Set
        End Property
        
        Public Property ADDDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tableMM_MEMBERSTATUSHISTORYLIST.ADDDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMM_MEMBERSTATUSHISTORYLIST.ADDDATEColumn) = value
            End Set
        End Property
        
        Public Property membertypecode As String
            Get
                Try 
                    Return CType(Me(Me.tableMM_MEMBERSTATUSHISTORYLIST.membertypecodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMM_MEMBERSTATUSHISTORYLIST.membertypecodeColumn) = value
            End Set
        End Property
        
        Public Property type As String
            Get
                Try 
                    Return CType(Me(Me.tableMM_MEMBERSTATUSHISTORYLIST.typeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMM_MEMBERSTATUSHISTORYLIST.typeColumn) = value
            End Set
        End Property
        
        Public Property curentstatus As String
            Get
                Try 
                    Return CType(Me(Me.tableMM_MEMBERSTATUSHISTORYLIST.curentstatusColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMM_MEMBERSTATUSHISTORYLIST.curentstatusColumn) = value
            End Set
        End Property
        
        Public Function IsmcodeNull() As Boolean
            Return Me.IsNull(Me.tableMM_MEMBERSTATUSHISTORYLIST.mcodeColumn)
        End Function
        
        Public Sub SetmcodeNull()
            Me(Me.tableMM_MEMBERSTATUSHISTORYLIST.mcodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsmnameNull() As Boolean
            Return Me.IsNull(Me.tableMM_MEMBERSTATUSHISTORYLIST.mnameColumn)
        End Function
        
        Public Sub SetmnameNull()
            Me(Me.tableMM_MEMBERSTATUSHISTORYLIST.mnameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPRESENTSTATUSNull() As Boolean
            Return Me.IsNull(Me.tableMM_MEMBERSTATUSHISTORYLIST.PRESENTSTATUSColumn)
        End Function
        
        Public Sub SetPRESENTSTATUSNull()
            Me(Me.tableMM_MEMBERSTATUSHISTORYLIST.PRESENTSTATUSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNEWSTATUSNull() As Boolean
            Return Me.IsNull(Me.tableMM_MEMBERSTATUSHISTORYLIST.NEWSTATUSColumn)
        End Function
        
        Public Sub SetNEWSTATUSNull()
            Me(Me.tableMM_MEMBERSTATUSHISTORYLIST.NEWSTATUSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsREMARKSNull() As Boolean
            Return Me.IsNull(Me.tableMM_MEMBERSTATUSHISTORYLIST.REMARKSColumn)
        End Function
        
        Public Sub SetREMARKSNull()
            Me(Me.tableMM_MEMBERSTATUSHISTORYLIST.REMARKSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEFFECTIVEFROMNull() As Boolean
            Return Me.IsNull(Me.tableMM_MEMBERSTATUSHISTORYLIST.EFFECTIVEFROMColumn)
        End Function
        
        Public Sub SetEFFECTIVEFROMNull()
            Me(Me.tableMM_MEMBERSTATUSHISTORYLIST.EFFECTIVEFROMColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEFFECTIVETONull() As Boolean
            Return Me.IsNull(Me.tableMM_MEMBERSTATUSHISTORYLIST.EFFECTIVETOColumn)
        End Function
        
        Public Sub SetEFFECTIVETONull()
            Me(Me.tableMM_MEMBERSTATUSHISTORYLIST.EFFECTIVETOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsADDDATENull() As Boolean
            Return Me.IsNull(Me.tableMM_MEMBERSTATUSHISTORYLIST.ADDDATEColumn)
        End Function
        
        Public Sub SetADDDATENull()
            Me(Me.tableMM_MEMBERSTATUSHISTORYLIST.ADDDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsmembertypecodeNull() As Boolean
            Return Me.IsNull(Me.tableMM_MEMBERSTATUSHISTORYLIST.membertypecodeColumn)
        End Function
        
        Public Sub SetmembertypecodeNull()
            Me(Me.tableMM_MEMBERSTATUSHISTORYLIST.membertypecodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstypeNull() As Boolean
            Return Me.IsNull(Me.tableMM_MEMBERSTATUSHISTORYLIST.typeColumn)
        End Function
        
        Public Sub SettypeNull()
            Me(Me.tableMM_MEMBERSTATUSHISTORYLIST.typeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscurentstatusNull() As Boolean
            Return Me.IsNull(Me.tableMM_MEMBERSTATUSHISTORYLIST.curentstatusColumn)
        End Function
        
        Public Sub SetcurentstatusNull()
            Me(Me.tableMM_MEMBERSTATUSHISTORYLIST.curentstatusColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MM_MEMBERSTATUSHISTORYLISTRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As MM_MEMBERSTATUSHISTORYLISTRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As MM_MEMBERSTATUSHISTORYLISTRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As MM_MEMBERSTATUSHISTORYLISTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
