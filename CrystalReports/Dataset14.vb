'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2470
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class Dataset4
    Inherits DataSet
    
    Private tableVIEW_DEP_RPT2 As VIEW_DEP_RPT2DataTable
    
    Private tableVIEW_DEP_RPT As VIEW_DEP_RPTDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("VIEW_DEP_RPT2")) Is Nothing) Then
                Me.Tables.Add(New VIEW_DEP_RPT2DataTable(ds.Tables("VIEW_DEP_RPT2")))
            End If
            If (Not (ds.Tables("VIEW_DEP_RPT")) Is Nothing) Then
                Me.Tables.Add(New VIEW_DEP_RPTDataTable(ds.Tables("VIEW_DEP_RPT")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VIEW_DEP_RPT2 As VIEW_DEP_RPT2DataTable
        Get
            Return Me.tableVIEW_DEP_RPT2
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VIEW_DEP_RPT As VIEW_DEP_RPTDataTable
        Get
            Return Me.tableVIEW_DEP_RPT
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As Dataset4 = CType(MyBase.Clone,Dataset4)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("VIEW_DEP_RPT2")) Is Nothing) Then
            Me.Tables.Add(New VIEW_DEP_RPT2DataTable(ds.Tables("VIEW_DEP_RPT2")))
        End If
        If (Not (ds.Tables("VIEW_DEP_RPT")) Is Nothing) Then
            Me.Tables.Add(New VIEW_DEP_RPTDataTable(ds.Tables("VIEW_DEP_RPT")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableVIEW_DEP_RPT2 = CType(Me.Tables("VIEW_DEP_RPT2"),VIEW_DEP_RPT2DataTable)
        If (Not (Me.tableVIEW_DEP_RPT2) Is Nothing) Then
            Me.tableVIEW_DEP_RPT2.InitVars
        End If
        Me.tableVIEW_DEP_RPT = CType(Me.Tables("VIEW_DEP_RPT"),VIEW_DEP_RPTDataTable)
        If (Not (Me.tableVIEW_DEP_RPT) Is Nothing) Then
            Me.tableVIEW_DEP_RPT.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "Dataset4"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/Dataset4.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableVIEW_DEP_RPT2 = New VIEW_DEP_RPT2DataTable
        Me.Tables.Add(Me.tableVIEW_DEP_RPT2)
        Me.tableVIEW_DEP_RPT = New VIEW_DEP_RPTDataTable
        Me.Tables.Add(Me.tableVIEW_DEP_RPT)
    End Sub
    
    Private Function ShouldSerializeVIEW_DEP_RPT2() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeVIEW_DEP_RPT() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub VIEW_DEP_RPT2RowChangeEventHandler(ByVal sender As Object, ByVal e As VIEW_DEP_RPT2RowChangeEvent)
    
    Public Delegate Sub VIEW_DEP_RPTRowChangeEventHandler(ByVal sender As Object, ByVal e As VIEW_DEP_RPTRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_DEP_RPT2DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnMCODE As DataColumn
        
        Private columnMNAME As DataColumn
        
        Private columnSPOUSE As DataColumn
        
        Friend Sub New()
            MyBase.New("VIEW_DEP_RPT2")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property MCODEColumn As DataColumn
            Get
                Return Me.columnMCODE
            End Get
        End Property
        
        Friend ReadOnly Property MNAMEColumn As DataColumn
            Get
                Return Me.columnMNAME
            End Get
        End Property
        
        Friend ReadOnly Property SPOUSEColumn As DataColumn
            Get
                Return Me.columnSPOUSE
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VIEW_DEP_RPT2Row
            Get
                Return CType(Me.Rows(index),VIEW_DEP_RPT2Row)
            End Get
        End Property
        
        Public Event VIEW_DEP_RPT2RowChanged As VIEW_DEP_RPT2RowChangeEventHandler
        
        Public Event VIEW_DEP_RPT2RowChanging As VIEW_DEP_RPT2RowChangeEventHandler
        
        Public Event VIEW_DEP_RPT2RowDeleted As VIEW_DEP_RPT2RowChangeEventHandler
        
        Public Event VIEW_DEP_RPT2RowDeleting As VIEW_DEP_RPT2RowChangeEventHandler
        
        Public Overloads Sub AddVIEW_DEP_RPT2Row(ByVal row As VIEW_DEP_RPT2Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVIEW_DEP_RPT2Row(ByVal MCODE As String, ByVal MNAME As String, ByVal SPOUSE As String) As VIEW_DEP_RPT2Row
            Dim rowVIEW_DEP_RPT2Row As VIEW_DEP_RPT2Row = CType(Me.NewRow,VIEW_DEP_RPT2Row)
            rowVIEW_DEP_RPT2Row.ItemArray = New Object() {MCODE, MNAME, SPOUSE}
            Me.Rows.Add(rowVIEW_DEP_RPT2Row)
            Return rowVIEW_DEP_RPT2Row
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VIEW_DEP_RPT2DataTable = CType(MyBase.Clone,VIEW_DEP_RPT2DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VIEW_DEP_RPT2DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnMCODE = Me.Columns("MCODE")
            Me.columnMNAME = Me.Columns("MNAME")
            Me.columnSPOUSE = Me.Columns("SPOUSE")
        End Sub
        
        Private Sub InitClass()
            Me.columnMCODE = New DataColumn("MCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMCODE)
            Me.columnMNAME = New DataColumn("MNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMNAME)
            Me.columnSPOUSE = New DataColumn("SPOUSE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSPOUSE)
            Me.columnMCODE.AllowDBNull = false
        End Sub
        
        Public Function NewVIEW_DEP_RPT2Row() As VIEW_DEP_RPT2Row
            Return CType(Me.NewRow,VIEW_DEP_RPT2Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VIEW_DEP_RPT2Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VIEW_DEP_RPT2Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VIEW_DEP_RPT2RowChangedEvent) Is Nothing) Then
                RaiseEvent VIEW_DEP_RPT2RowChanged(Me, New VIEW_DEP_RPT2RowChangeEvent(CType(e.Row,VIEW_DEP_RPT2Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VIEW_DEP_RPT2RowChangingEvent) Is Nothing) Then
                RaiseEvent VIEW_DEP_RPT2RowChanging(Me, New VIEW_DEP_RPT2RowChangeEvent(CType(e.Row,VIEW_DEP_RPT2Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VIEW_DEP_RPT2RowDeletedEvent) Is Nothing) Then
                RaiseEvent VIEW_DEP_RPT2RowDeleted(Me, New VIEW_DEP_RPT2RowChangeEvent(CType(e.Row,VIEW_DEP_RPT2Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VIEW_DEP_RPT2RowDeletingEvent) Is Nothing) Then
                RaiseEvent VIEW_DEP_RPT2RowDeleting(Me, New VIEW_DEP_RPT2RowChangeEvent(CType(e.Row,VIEW_DEP_RPT2Row), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVIEW_DEP_RPT2Row(ByVal row As VIEW_DEP_RPT2Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_DEP_RPT2Row
        Inherits DataRow
        
        Private tableVIEW_DEP_RPT2 As VIEW_DEP_RPT2DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVIEW_DEP_RPT2 = CType(Me.Table,VIEW_DEP_RPT2DataTable)
        End Sub
        
        Public Property MCODE As String
            Get
                Return CType(Me(Me.tableVIEW_DEP_RPT2.MCODEColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_DEP_RPT2.MCODEColumn) = value
            End Set
        End Property
        
        Public Property MNAME As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_DEP_RPT2.MNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_DEP_RPT2.MNAMEColumn) = value
            End Set
        End Property
        
        Public Property SPOUSE As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_DEP_RPT2.SPOUSEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_DEP_RPT2.SPOUSEColumn) = value
            End Set
        End Property
        
        Public Function IsMNAMENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_DEP_RPT2.MNAMEColumn)
        End Function
        
        Public Sub SetMNAMENull()
            Me(Me.tableVIEW_DEP_RPT2.MNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSPOUSENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_DEP_RPT2.SPOUSEColumn)
        End Function
        
        Public Sub SetSPOUSENull()
            Me(Me.tableVIEW_DEP_RPT2.SPOUSEColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_DEP_RPT2RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VIEW_DEP_RPT2Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VIEW_DEP_RPT2Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VIEW_DEP_RPT2Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_DEP_RPTDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnMCODE As DataColumn
        
        Private columnMNAME As DataColumn
        
        Private columnSPOUSE As DataColumn
        
        Private columnchild_nm As DataColumn
        
        Private columnname As DataColumn
        
        Private columnsex As DataColumn
        
        Private columnchild_dob As DataColumn
        
        Private columnrelation As DataColumn
        
        Private columnMEMBERTYPECODE As DataColumn
        
        Private columnCurentStatus As DataColumn
        
        Private columnDOJ As DataColumn
        
        Friend Sub New()
            MyBase.New("VIEW_DEP_RPT")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property MCODEColumn As DataColumn
            Get
                Return Me.columnMCODE
            End Get
        End Property
        
        Friend ReadOnly Property MNAMEColumn As DataColumn
            Get
                Return Me.columnMNAME
            End Get
        End Property
        
        Friend ReadOnly Property SPOUSEColumn As DataColumn
            Get
                Return Me.columnSPOUSE
            End Get
        End Property
        
        Friend ReadOnly Property child_nmColumn As DataColumn
            Get
                Return Me.columnchild_nm
            End Get
        End Property
        
        Friend ReadOnly Property nameColumn As DataColumn
            Get
                Return Me.columnname
            End Get
        End Property
        
        Friend ReadOnly Property sexColumn As DataColumn
            Get
                Return Me.columnsex
            End Get
        End Property
        
        Friend ReadOnly Property child_dobColumn As DataColumn
            Get
                Return Me.columnchild_dob
            End Get
        End Property
        
        Friend ReadOnly Property relationColumn As DataColumn
            Get
                Return Me.columnrelation
            End Get
        End Property
        
        Friend ReadOnly Property MEMBERTYPECODEColumn As DataColumn
            Get
                Return Me.columnMEMBERTYPECODE
            End Get
        End Property
        
        Friend ReadOnly Property CurentStatusColumn As DataColumn
            Get
                Return Me.columnCurentStatus
            End Get
        End Property
        
        Friend ReadOnly Property DOJColumn As DataColumn
            Get
                Return Me.columnDOJ
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VIEW_DEP_RPTRow
            Get
                Return CType(Me.Rows(index),VIEW_DEP_RPTRow)
            End Get
        End Property
        
        Public Event VIEW_DEP_RPTRowChanged As VIEW_DEP_RPTRowChangeEventHandler
        
        Public Event VIEW_DEP_RPTRowChanging As VIEW_DEP_RPTRowChangeEventHandler
        
        Public Event VIEW_DEP_RPTRowDeleted As VIEW_DEP_RPTRowChangeEventHandler
        
        Public Event VIEW_DEP_RPTRowDeleting As VIEW_DEP_RPTRowChangeEventHandler
        
        Public Overloads Sub AddVIEW_DEP_RPTRow(ByVal row As VIEW_DEP_RPTRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVIEW_DEP_RPTRow(ByVal MCODE As String, ByVal MNAME As String, ByVal SPOUSE As String, ByVal child_nm As String, ByVal name As String, ByVal sex As String, ByVal child_dob As Date, ByVal relation As String, ByVal MEMBERTYPECODE As String, ByVal CurentStatus As String, ByVal DOJ As Date) As VIEW_DEP_RPTRow
            Dim rowVIEW_DEP_RPTRow As VIEW_DEP_RPTRow = CType(Me.NewRow,VIEW_DEP_RPTRow)
            rowVIEW_DEP_RPTRow.ItemArray = New Object() {MCODE, MNAME, SPOUSE, child_nm, name, sex, child_dob, relation, MEMBERTYPECODE, CurentStatus, DOJ}
            Me.Rows.Add(rowVIEW_DEP_RPTRow)
            Return rowVIEW_DEP_RPTRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VIEW_DEP_RPTDataTable = CType(MyBase.Clone,VIEW_DEP_RPTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VIEW_DEP_RPTDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnMCODE = Me.Columns("MCODE")
            Me.columnMNAME = Me.Columns("MNAME")
            Me.columnSPOUSE = Me.Columns("SPOUSE")
            Me.columnchild_nm = Me.Columns("child_nm")
            Me.columnname = Me.Columns("name")
            Me.columnsex = Me.Columns("sex")
            Me.columnchild_dob = Me.Columns("child_dob")
            Me.columnrelation = Me.Columns("relation")
            Me.columnMEMBERTYPECODE = Me.Columns("MEMBERTYPECODE")
            Me.columnCurentStatus = Me.Columns("CurentStatus")
            Me.columnDOJ = Me.Columns("DOJ")
        End Sub
        
        Private Sub InitClass()
            Me.columnMCODE = New DataColumn("MCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMCODE)
            Me.columnMNAME = New DataColumn("MNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMNAME)
            Me.columnSPOUSE = New DataColumn("SPOUSE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSPOUSE)
            Me.columnchild_nm = New DataColumn("child_nm", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnchild_nm)
            Me.columnname = New DataColumn("name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnname)
            Me.columnsex = New DataColumn("sex", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsex)
            Me.columnchild_dob = New DataColumn("child_dob", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnchild_dob)
            Me.columnrelation = New DataColumn("relation", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrelation)
            Me.columnMEMBERTYPECODE = New DataColumn("MEMBERTYPECODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEMBERTYPECODE)
            Me.columnCurentStatus = New DataColumn("CurentStatus", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCurentStatus)
            Me.columnDOJ = New DataColumn("DOJ", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDOJ)
            Me.columnMCODE.AllowDBNull = false
        End Sub
        
        Public Function NewVIEW_DEP_RPTRow() As VIEW_DEP_RPTRow
            Return CType(Me.NewRow,VIEW_DEP_RPTRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VIEW_DEP_RPTRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VIEW_DEP_RPTRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VIEW_DEP_RPTRowChangedEvent) Is Nothing) Then
                RaiseEvent VIEW_DEP_RPTRowChanged(Me, New VIEW_DEP_RPTRowChangeEvent(CType(e.Row,VIEW_DEP_RPTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VIEW_DEP_RPTRowChangingEvent) Is Nothing) Then
                RaiseEvent VIEW_DEP_RPTRowChanging(Me, New VIEW_DEP_RPTRowChangeEvent(CType(e.Row,VIEW_DEP_RPTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VIEW_DEP_RPTRowDeletedEvent) Is Nothing) Then
                RaiseEvent VIEW_DEP_RPTRowDeleted(Me, New VIEW_DEP_RPTRowChangeEvent(CType(e.Row,VIEW_DEP_RPTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VIEW_DEP_RPTRowDeletingEvent) Is Nothing) Then
                RaiseEvent VIEW_DEP_RPTRowDeleting(Me, New VIEW_DEP_RPTRowChangeEvent(CType(e.Row,VIEW_DEP_RPTRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVIEW_DEP_RPTRow(ByVal row As VIEW_DEP_RPTRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_DEP_RPTRow
        Inherits DataRow
        
        Private tableVIEW_DEP_RPT As VIEW_DEP_RPTDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVIEW_DEP_RPT = CType(Me.Table,VIEW_DEP_RPTDataTable)
        End Sub
        
        Public Property MCODE As String
            Get
                Return CType(Me(Me.tableVIEW_DEP_RPT.MCODEColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_DEP_RPT.MCODEColumn) = value
            End Set
        End Property
        
        Public Property MNAME As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_DEP_RPT.MNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_DEP_RPT.MNAMEColumn) = value
            End Set
        End Property
        
        Public Property SPOUSE As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_DEP_RPT.SPOUSEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_DEP_RPT.SPOUSEColumn) = value
            End Set
        End Property
        
        Public Property child_nm As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_DEP_RPT.child_nmColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_DEP_RPT.child_nmColumn) = value
            End Set
        End Property
        
        Public Property name As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_DEP_RPT.nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_DEP_RPT.nameColumn) = value
            End Set
        End Property
        
        Public Property sex As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_DEP_RPT.sexColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_DEP_RPT.sexColumn) = value
            End Set
        End Property
        
        Public Property child_dob As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_DEP_RPT.child_dobColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_DEP_RPT.child_dobColumn) = value
            End Set
        End Property
        
        Public Property relation As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_DEP_RPT.relationColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_DEP_RPT.relationColumn) = value
            End Set
        End Property
        
        Public Property MEMBERTYPECODE As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_DEP_RPT.MEMBERTYPECODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_DEP_RPT.MEMBERTYPECODEColumn) = value
            End Set
        End Property
        
        Public Property CurentStatus As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_DEP_RPT.CurentStatusColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_DEP_RPT.CurentStatusColumn) = value
            End Set
        End Property
        
        Public Property DOJ As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_DEP_RPT.DOJColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_DEP_RPT.DOJColumn) = value
            End Set
        End Property
        
        Public Function IsMNAMENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_DEP_RPT.MNAMEColumn)
        End Function
        
        Public Sub SetMNAMENull()
            Me(Me.tableVIEW_DEP_RPT.MNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSPOUSENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_DEP_RPT.SPOUSEColumn)
        End Function
        
        Public Sub SetSPOUSENull()
            Me(Me.tableVIEW_DEP_RPT.SPOUSEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ischild_nmNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_DEP_RPT.child_nmColumn)
        End Function
        
        Public Sub Setchild_nmNull()
            Me(Me.tableVIEW_DEP_RPT.child_nmColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnameNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_DEP_RPT.nameColumn)
        End Function
        
        Public Sub SetnameNull()
            Me(Me.tableVIEW_DEP_RPT.nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IssexNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_DEP_RPT.sexColumn)
        End Function
        
        Public Sub SetsexNull()
            Me(Me.tableVIEW_DEP_RPT.sexColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ischild_dobNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_DEP_RPT.child_dobColumn)
        End Function
        
        Public Sub Setchild_dobNull()
            Me(Me.tableVIEW_DEP_RPT.child_dobColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsrelationNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_DEP_RPT.relationColumn)
        End Function
        
        Public Sub SetrelationNull()
            Me(Me.tableVIEW_DEP_RPT.relationColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMEMBERTYPECODENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_DEP_RPT.MEMBERTYPECODEColumn)
        End Function
        
        Public Sub SetMEMBERTYPECODENull()
            Me(Me.tableVIEW_DEP_RPT.MEMBERTYPECODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCurentStatusNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_DEP_RPT.CurentStatusColumn)
        End Function
        
        Public Sub SetCurentStatusNull()
            Me(Me.tableVIEW_DEP_RPT.CurentStatusColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDOJNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_DEP_RPT.DOJColumn)
        End Function
        
        Public Sub SetDOJNull()
            Me(Me.tableVIEW_DEP_RPT.DOJColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_DEP_RPTRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VIEW_DEP_RPTRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VIEW_DEP_RPTRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VIEW_DEP_RPTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
