'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2470
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class MemberDirectory_Dataset
    Inherits DataSet
    
    Private tableVW_MEMBERDIRECTORY As VW_MEMBERDIRECTORYDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("VW_MEMBERDIRECTORY")) Is Nothing) Then
                Me.Tables.Add(New VW_MEMBERDIRECTORYDataTable(ds.Tables("VW_MEMBERDIRECTORY")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VW_MEMBERDIRECTORY As VW_MEMBERDIRECTORYDataTable
        Get
            Return Me.tableVW_MEMBERDIRECTORY
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As MemberDirectory_Dataset = CType(MyBase.Clone,MemberDirectory_Dataset)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("VW_MEMBERDIRECTORY")) Is Nothing) Then
            Me.Tables.Add(New VW_MEMBERDIRECTORYDataTable(ds.Tables("VW_MEMBERDIRECTORY")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableVW_MEMBERDIRECTORY = CType(Me.Tables("VW_MEMBERDIRECTORY"),VW_MEMBERDIRECTORYDataTable)
        If (Not (Me.tableVW_MEMBERDIRECTORY) Is Nothing) Then
            Me.tableVW_MEMBERDIRECTORY.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "MemberDirectory_Dataset"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/MemberDirectory_Dataset.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableVW_MEMBERDIRECTORY = New VW_MEMBERDIRECTORYDataTable
        Me.Tables.Add(Me.tableVW_MEMBERDIRECTORY)
    End Sub
    
    Private Function ShouldSerializeVW_MEMBERDIRECTORY() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub VW_MEMBERDIRECTORYRowChangeEventHandler(ByVal sender As Object, ByVal e As VW_MEMBERDIRECTORYRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VW_MEMBERDIRECTORYDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnmcode As DataColumn
        
        Private columnmname As DataColumn
        
        Private columnadd1 As DataColumn
        
        Private columnadd2 As DataColumn
        
        Private columnadd3 As DataColumn
        
        Private columncity As DataColumn
        
        Private columnstate As DataColumn
        
        Private columncountry As DataColumn
        
        Private columnpincode As DataColumn
        
        Private columnphone1 As DataColumn
        
        Private columnoadd1 As DataColumn
        
        Private columnoadd2 As DataColumn
        
        Private columnoadd3 As DataColumn
        
        Private columnocity As DataColumn
        
        Private columnostate As DataColumn
        
        Private columnacountry As DataColumn
        
        Private columnopincode As DataColumn
        
        Private columnophone1 As DataColumn
        
        Private columnmembertypecode As DataColumn
        
        Private columnprefix As DataColumn
        
        Private columncemail As DataColumn
        
        Private columncfax As DataColumn
        
        Private columntype As DataColumn
        
        Friend Sub New()
            MyBase.New("VW_MEMBERDIRECTORY")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property mcodeColumn As DataColumn
            Get
                Return Me.columnmcode
            End Get
        End Property
        
        Friend ReadOnly Property mnameColumn As DataColumn
            Get
                Return Me.columnmname
            End Get
        End Property
        
        Friend ReadOnly Property add1Column As DataColumn
            Get
                Return Me.columnadd1
            End Get
        End Property
        
        Friend ReadOnly Property add2Column As DataColumn
            Get
                Return Me.columnadd2
            End Get
        End Property
        
        Friend ReadOnly Property add3Column As DataColumn
            Get
                Return Me.columnadd3
            End Get
        End Property
        
        Friend ReadOnly Property cityColumn As DataColumn
            Get
                Return Me.columncity
            End Get
        End Property
        
        Friend ReadOnly Property stateColumn As DataColumn
            Get
                Return Me.columnstate
            End Get
        End Property
        
        Friend ReadOnly Property countryColumn As DataColumn
            Get
                Return Me.columncountry
            End Get
        End Property
        
        Friend ReadOnly Property pincodeColumn As DataColumn
            Get
                Return Me.columnpincode
            End Get
        End Property
        
        Friend ReadOnly Property phone1Column As DataColumn
            Get
                Return Me.columnphone1
            End Get
        End Property
        
        Friend ReadOnly Property oadd1Column As DataColumn
            Get
                Return Me.columnoadd1
            End Get
        End Property
        
        Friend ReadOnly Property oadd2Column As DataColumn
            Get
                Return Me.columnoadd2
            End Get
        End Property
        
        Friend ReadOnly Property oadd3Column As DataColumn
            Get
                Return Me.columnoadd3
            End Get
        End Property
        
        Friend ReadOnly Property ocityColumn As DataColumn
            Get
                Return Me.columnocity
            End Get
        End Property
        
        Friend ReadOnly Property ostateColumn As DataColumn
            Get
                Return Me.columnostate
            End Get
        End Property
        
        Friend ReadOnly Property acountryColumn As DataColumn
            Get
                Return Me.columnacountry
            End Get
        End Property
        
        Friend ReadOnly Property opincodeColumn As DataColumn
            Get
                Return Me.columnopincode
            End Get
        End Property
        
        Friend ReadOnly Property ophone1Column As DataColumn
            Get
                Return Me.columnophone1
            End Get
        End Property
        
        Friend ReadOnly Property membertypecodeColumn As DataColumn
            Get
                Return Me.columnmembertypecode
            End Get
        End Property
        
        Friend ReadOnly Property prefixColumn As DataColumn
            Get
                Return Me.columnprefix
            End Get
        End Property
        
        Friend ReadOnly Property cemailColumn As DataColumn
            Get
                Return Me.columncemail
            End Get
        End Property
        
        Friend ReadOnly Property cfaxColumn As DataColumn
            Get
                Return Me.columncfax
            End Get
        End Property
        
        Friend ReadOnly Property typeColumn As DataColumn
            Get
                Return Me.columntype
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VW_MEMBERDIRECTORYRow
            Get
                Return CType(Me.Rows(index),VW_MEMBERDIRECTORYRow)
            End Get
        End Property
        
        Public Event VW_MEMBERDIRECTORYRowChanged As VW_MEMBERDIRECTORYRowChangeEventHandler
        
        Public Event VW_MEMBERDIRECTORYRowChanging As VW_MEMBERDIRECTORYRowChangeEventHandler
        
        Public Event VW_MEMBERDIRECTORYRowDeleted As VW_MEMBERDIRECTORYRowChangeEventHandler
        
        Public Event VW_MEMBERDIRECTORYRowDeleting As VW_MEMBERDIRECTORYRowChangeEventHandler
        
        Public Overloads Sub AddVW_MEMBERDIRECTORYRow(ByVal row As VW_MEMBERDIRECTORYRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVW_MEMBERDIRECTORYRow( _
                    ByVal mcode As String,  _
                    ByVal mname As String,  _
                    ByVal add1 As String,  _
                    ByVal add2 As String,  _
                    ByVal add3 As String,  _
                    ByVal city As String,  _
                    ByVal state As String,  _
                    ByVal country As String,  _
                    ByVal pincode As String,  _
                    ByVal phone1 As String,  _
                    ByVal oadd1 As String,  _
                    ByVal oadd2 As String,  _
                    ByVal oadd3 As String,  _
                    ByVal ocity As String,  _
                    ByVal ostate As String,  _
                    ByVal acountry As String,  _
                    ByVal opincode As String,  _
                    ByVal ophone1 As String,  _
                    ByVal membertypecode As String,  _
                    ByVal prefix As String,  _
                    ByVal cemail As String,  _
                    ByVal cfax As String,  _
                    ByVal type As String) As VW_MEMBERDIRECTORYRow
            Dim rowVW_MEMBERDIRECTORYRow As VW_MEMBERDIRECTORYRow = CType(Me.NewRow,VW_MEMBERDIRECTORYRow)
            rowVW_MEMBERDIRECTORYRow.ItemArray = New Object() {mcode, mname, add1, add2, add3, city, state, country, pincode, phone1, oadd1, oadd2, oadd3, ocity, ostate, acountry, opincode, ophone1, membertypecode, prefix, cemail, cfax, type}
            Me.Rows.Add(rowVW_MEMBERDIRECTORYRow)
            Return rowVW_MEMBERDIRECTORYRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VW_MEMBERDIRECTORYDataTable = CType(MyBase.Clone,VW_MEMBERDIRECTORYDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VW_MEMBERDIRECTORYDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnmcode = Me.Columns("mcode")
            Me.columnmname = Me.Columns("mname")
            Me.columnadd1 = Me.Columns("add1")
            Me.columnadd2 = Me.Columns("add2")
            Me.columnadd3 = Me.Columns("add3")
            Me.columncity = Me.Columns("city")
            Me.columnstate = Me.Columns("state")
            Me.columncountry = Me.Columns("country")
            Me.columnpincode = Me.Columns("pincode")
            Me.columnphone1 = Me.Columns("phone1")
            Me.columnoadd1 = Me.Columns("oadd1")
            Me.columnoadd2 = Me.Columns("oadd2")
            Me.columnoadd3 = Me.Columns("oadd3")
            Me.columnocity = Me.Columns("ocity")
            Me.columnostate = Me.Columns("ostate")
            Me.columnacountry = Me.Columns("acountry")
            Me.columnopincode = Me.Columns("opincode")
            Me.columnophone1 = Me.Columns("ophone1")
            Me.columnmembertypecode = Me.Columns("membertypecode")
            Me.columnprefix = Me.Columns("prefix")
            Me.columncemail = Me.Columns("cemail")
            Me.columncfax = Me.Columns("cfax")
            Me.columntype = Me.Columns("type")
        End Sub
        
        Private Sub InitClass()
            Me.columnmcode = New DataColumn("mcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmcode)
            Me.columnmname = New DataColumn("mname", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmname)
            Me.columnadd1 = New DataColumn("add1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnadd1)
            Me.columnadd2 = New DataColumn("add2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnadd2)
            Me.columnadd3 = New DataColumn("add3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnadd3)
            Me.columncity = New DataColumn("city", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncity)
            Me.columnstate = New DataColumn("state", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstate)
            Me.columncountry = New DataColumn("country", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncountry)
            Me.columnpincode = New DataColumn("pincode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpincode)
            Me.columnphone1 = New DataColumn("phone1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone1)
            Me.columnoadd1 = New DataColumn("oadd1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnoadd1)
            Me.columnoadd2 = New DataColumn("oadd2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnoadd2)
            Me.columnoadd3 = New DataColumn("oadd3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnoadd3)
            Me.columnocity = New DataColumn("ocity", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnocity)
            Me.columnostate = New DataColumn("ostate", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnostate)
            Me.columnacountry = New DataColumn("acountry", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnacountry)
            Me.columnopincode = New DataColumn("opincode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnopincode)
            Me.columnophone1 = New DataColumn("ophone1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnophone1)
            Me.columnmembertypecode = New DataColumn("membertypecode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmembertypecode)
            Me.columnprefix = New DataColumn("prefix", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprefix)
            Me.columncemail = New DataColumn("cemail", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncemail)
            Me.columncfax = New DataColumn("cfax", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncfax)
            Me.columntype = New DataColumn("type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntype)
            Me.columnmcode.ReadOnly = true
            Me.columnmname.ReadOnly = true
            Me.columnadd1.ReadOnly = true
            Me.columnadd2.ReadOnly = true
            Me.columnadd3.ReadOnly = true
            Me.columncity.ReadOnly = true
            Me.columnstate.ReadOnly = true
            Me.columncountry.ReadOnly = true
            Me.columnpincode.ReadOnly = true
            Me.columnphone1.ReadOnly = true
            Me.columnoadd1.ReadOnly = true
            Me.columnoadd2.ReadOnly = true
            Me.columnoadd3.ReadOnly = true
            Me.columnocity.ReadOnly = true
            Me.columnostate.ReadOnly = true
            Me.columnacountry.ReadOnly = true
            Me.columnopincode.ReadOnly = true
            Me.columnophone1.ReadOnly = true
            Me.columnmembertypecode.ReadOnly = true
            Me.columnprefix.ReadOnly = true
            Me.columncemail.ReadOnly = true
            Me.columncfax.ReadOnly = true
            Me.columntype.ReadOnly = true
        End Sub
        
        Public Function NewVW_MEMBERDIRECTORYRow() As VW_MEMBERDIRECTORYRow
            Return CType(Me.NewRow,VW_MEMBERDIRECTORYRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VW_MEMBERDIRECTORYRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VW_MEMBERDIRECTORYRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VW_MEMBERDIRECTORYRowChangedEvent) Is Nothing) Then
                RaiseEvent VW_MEMBERDIRECTORYRowChanged(Me, New VW_MEMBERDIRECTORYRowChangeEvent(CType(e.Row,VW_MEMBERDIRECTORYRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VW_MEMBERDIRECTORYRowChangingEvent) Is Nothing) Then
                RaiseEvent VW_MEMBERDIRECTORYRowChanging(Me, New VW_MEMBERDIRECTORYRowChangeEvent(CType(e.Row,VW_MEMBERDIRECTORYRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VW_MEMBERDIRECTORYRowDeletedEvent) Is Nothing) Then
                RaiseEvent VW_MEMBERDIRECTORYRowDeleted(Me, New VW_MEMBERDIRECTORYRowChangeEvent(CType(e.Row,VW_MEMBERDIRECTORYRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VW_MEMBERDIRECTORYRowDeletingEvent) Is Nothing) Then
                RaiseEvent VW_MEMBERDIRECTORYRowDeleting(Me, New VW_MEMBERDIRECTORYRowChangeEvent(CType(e.Row,VW_MEMBERDIRECTORYRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVW_MEMBERDIRECTORYRow(ByVal row As VW_MEMBERDIRECTORYRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VW_MEMBERDIRECTORYRow
        Inherits DataRow
        
        Private tableVW_MEMBERDIRECTORY As VW_MEMBERDIRECTORYDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVW_MEMBERDIRECTORY = CType(Me.Table,VW_MEMBERDIRECTORYDataTable)
        End Sub
        
        Public Property mcode As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_MEMBERDIRECTORY.mcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_MEMBERDIRECTORY.mcodeColumn) = value
            End Set
        End Property
        
        Public Property mname As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_MEMBERDIRECTORY.mnameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_MEMBERDIRECTORY.mnameColumn) = value
            End Set
        End Property
        
        Public Property add1 As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_MEMBERDIRECTORY.add1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_MEMBERDIRECTORY.add1Column) = value
            End Set
        End Property
        
        Public Property add2 As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_MEMBERDIRECTORY.add2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_MEMBERDIRECTORY.add2Column) = value
            End Set
        End Property
        
        Public Property add3 As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_MEMBERDIRECTORY.add3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_MEMBERDIRECTORY.add3Column) = value
            End Set
        End Property
        
        Public Property city As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_MEMBERDIRECTORY.cityColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_MEMBERDIRECTORY.cityColumn) = value
            End Set
        End Property
        
        Public Property state As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_MEMBERDIRECTORY.stateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_MEMBERDIRECTORY.stateColumn) = value
            End Set
        End Property
        
        Public Property country As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_MEMBERDIRECTORY.countryColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_MEMBERDIRECTORY.countryColumn) = value
            End Set
        End Property
        
        Public Property pincode As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_MEMBERDIRECTORY.pincodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_MEMBERDIRECTORY.pincodeColumn) = value
            End Set
        End Property
        
        Public Property phone1 As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_MEMBERDIRECTORY.phone1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_MEMBERDIRECTORY.phone1Column) = value
            End Set
        End Property
        
        Public Property oadd1 As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_MEMBERDIRECTORY.oadd1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_MEMBERDIRECTORY.oadd1Column) = value
            End Set
        End Property
        
        Public Property oadd2 As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_MEMBERDIRECTORY.oadd2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_MEMBERDIRECTORY.oadd2Column) = value
            End Set
        End Property
        
        Public Property oadd3 As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_MEMBERDIRECTORY.oadd3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_MEMBERDIRECTORY.oadd3Column) = value
            End Set
        End Property
        
        Public Property ocity As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_MEMBERDIRECTORY.ocityColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_MEMBERDIRECTORY.ocityColumn) = value
            End Set
        End Property
        
        Public Property ostate As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_MEMBERDIRECTORY.ostateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_MEMBERDIRECTORY.ostateColumn) = value
            End Set
        End Property
        
        Public Property acountry As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_MEMBERDIRECTORY.acountryColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_MEMBERDIRECTORY.acountryColumn) = value
            End Set
        End Property
        
        Public Property opincode As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_MEMBERDIRECTORY.opincodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_MEMBERDIRECTORY.opincodeColumn) = value
            End Set
        End Property
        
        Public Property ophone1 As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_MEMBERDIRECTORY.ophone1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_MEMBERDIRECTORY.ophone1Column) = value
            End Set
        End Property
        
        Public Property membertypecode As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_MEMBERDIRECTORY.membertypecodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_MEMBERDIRECTORY.membertypecodeColumn) = value
            End Set
        End Property
        
        Public Property prefix As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_MEMBERDIRECTORY.prefixColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_MEMBERDIRECTORY.prefixColumn) = value
            End Set
        End Property
        
        Public Property cemail As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_MEMBERDIRECTORY.cemailColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_MEMBERDIRECTORY.cemailColumn) = value
            End Set
        End Property
        
        Public Property cfax As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_MEMBERDIRECTORY.cfaxColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_MEMBERDIRECTORY.cfaxColumn) = value
            End Set
        End Property
        
        Public Property type As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_MEMBERDIRECTORY.typeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_MEMBERDIRECTORY.typeColumn) = value
            End Set
        End Property
        
        Public Function IsmcodeNull() As Boolean
            Return Me.IsNull(Me.tableVW_MEMBERDIRECTORY.mcodeColumn)
        End Function
        
        Public Sub SetmcodeNull()
            Me(Me.tableVW_MEMBERDIRECTORY.mcodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsmnameNull() As Boolean
            Return Me.IsNull(Me.tableVW_MEMBERDIRECTORY.mnameColumn)
        End Function
        
        Public Sub SetmnameNull()
            Me(Me.tableVW_MEMBERDIRECTORY.mnameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isadd1Null() As Boolean
            Return Me.IsNull(Me.tableVW_MEMBERDIRECTORY.add1Column)
        End Function
        
        Public Sub Setadd1Null()
            Me(Me.tableVW_MEMBERDIRECTORY.add1Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isadd2Null() As Boolean
            Return Me.IsNull(Me.tableVW_MEMBERDIRECTORY.add2Column)
        End Function
        
        Public Sub Setadd2Null()
            Me(Me.tableVW_MEMBERDIRECTORY.add2Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isadd3Null() As Boolean
            Return Me.IsNull(Me.tableVW_MEMBERDIRECTORY.add3Column)
        End Function
        
        Public Sub Setadd3Null()
            Me(Me.tableVW_MEMBERDIRECTORY.add3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IscityNull() As Boolean
            Return Me.IsNull(Me.tableVW_MEMBERDIRECTORY.cityColumn)
        End Function
        
        Public Sub SetcityNull()
            Me(Me.tableVW_MEMBERDIRECTORY.cityColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsstateNull() As Boolean
            Return Me.IsNull(Me.tableVW_MEMBERDIRECTORY.stateColumn)
        End Function
        
        Public Sub SetstateNull()
            Me(Me.tableVW_MEMBERDIRECTORY.stateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscountryNull() As Boolean
            Return Me.IsNull(Me.tableVW_MEMBERDIRECTORY.countryColumn)
        End Function
        
        Public Sub SetcountryNull()
            Me(Me.tableVW_MEMBERDIRECTORY.countryColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IspincodeNull() As Boolean
            Return Me.IsNull(Me.tableVW_MEMBERDIRECTORY.pincodeColumn)
        End Function
        
        Public Sub SetpincodeNull()
            Me(Me.tableVW_MEMBERDIRECTORY.pincodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone1Null() As Boolean
            Return Me.IsNull(Me.tableVW_MEMBERDIRECTORY.phone1Column)
        End Function
        
        Public Sub Setphone1Null()
            Me(Me.tableVW_MEMBERDIRECTORY.phone1Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isoadd1Null() As Boolean
            Return Me.IsNull(Me.tableVW_MEMBERDIRECTORY.oadd1Column)
        End Function
        
        Public Sub Setoadd1Null()
            Me(Me.tableVW_MEMBERDIRECTORY.oadd1Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isoadd2Null() As Boolean
            Return Me.IsNull(Me.tableVW_MEMBERDIRECTORY.oadd2Column)
        End Function
        
        Public Sub Setoadd2Null()
            Me(Me.tableVW_MEMBERDIRECTORY.oadd2Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isoadd3Null() As Boolean
            Return Me.IsNull(Me.tableVW_MEMBERDIRECTORY.oadd3Column)
        End Function
        
        Public Sub Setoadd3Null()
            Me(Me.tableVW_MEMBERDIRECTORY.oadd3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsocityNull() As Boolean
            Return Me.IsNull(Me.tableVW_MEMBERDIRECTORY.ocityColumn)
        End Function
        
        Public Sub SetocityNull()
            Me(Me.tableVW_MEMBERDIRECTORY.ocityColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsostateNull() As Boolean
            Return Me.IsNull(Me.tableVW_MEMBERDIRECTORY.ostateColumn)
        End Function
        
        Public Sub SetostateNull()
            Me(Me.tableVW_MEMBERDIRECTORY.ostateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsacountryNull() As Boolean
            Return Me.IsNull(Me.tableVW_MEMBERDIRECTORY.acountryColumn)
        End Function
        
        Public Sub SetacountryNull()
            Me(Me.tableVW_MEMBERDIRECTORY.acountryColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsopincodeNull() As Boolean
            Return Me.IsNull(Me.tableVW_MEMBERDIRECTORY.opincodeColumn)
        End Function
        
        Public Sub SetopincodeNull()
            Me(Me.tableVW_MEMBERDIRECTORY.opincodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isophone1Null() As Boolean
            Return Me.IsNull(Me.tableVW_MEMBERDIRECTORY.ophone1Column)
        End Function
        
        Public Sub Setophone1Null()
            Me(Me.tableVW_MEMBERDIRECTORY.ophone1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsmembertypecodeNull() As Boolean
            Return Me.IsNull(Me.tableVW_MEMBERDIRECTORY.membertypecodeColumn)
        End Function
        
        Public Sub SetmembertypecodeNull()
            Me(Me.tableVW_MEMBERDIRECTORY.membertypecodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsprefixNull() As Boolean
            Return Me.IsNull(Me.tableVW_MEMBERDIRECTORY.prefixColumn)
        End Function
        
        Public Sub SetprefixNull()
            Me(Me.tableVW_MEMBERDIRECTORY.prefixColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscemailNull() As Boolean
            Return Me.IsNull(Me.tableVW_MEMBERDIRECTORY.cemailColumn)
        End Function
        
        Public Sub SetcemailNull()
            Me(Me.tableVW_MEMBERDIRECTORY.cemailColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscfaxNull() As Boolean
            Return Me.IsNull(Me.tableVW_MEMBERDIRECTORY.cfaxColumn)
        End Function
        
        Public Sub SetcfaxNull()
            Me(Me.tableVW_MEMBERDIRECTORY.cfaxColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstypeNull() As Boolean
            Return Me.IsNull(Me.tableVW_MEMBERDIRECTORY.typeColumn)
        End Function
        
        Public Sub SettypeNull()
            Me(Me.tableVW_MEMBERDIRECTORY.typeColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VW_MEMBERDIRECTORYRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VW_MEMBERDIRECTORYRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VW_MEMBERDIRECTORYRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VW_MEMBERDIRECTORYRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
