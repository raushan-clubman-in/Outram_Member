'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2502
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class Dataset1
    Inherits DataSet
    
    Private tablePosMaster As PosMasterDataTable
    
    Private tableVIEW_MONTHBILL As VIEW_MONTHBILLDataTable
    
    Private tableTOWER_MONTH_BILL As TOWER_MONTH_BILLDataTable
    
    Private tableMM_BILL As MM_BILLDataTable
    
    Private tableOPLBALNCE As OPLBALNCEDataTable
    
    Private tableVIEW_MONTHBILL_ROOM As VIEW_MONTHBILL_ROOMDataTable
    
    Private tablemembermaster As membermasterDataTable
    
    Private tableHOUSE As HOUSEDataTable
    
    Private tableDEBITNOTEPAYMENT As DEBITNOTEPAYMENTDataTable
    
    Private tableROOM_BILL As ROOM_BILLDataTable
    
    Private tableVIEW_MEMBER_DETAILS As VIEW_MEMBER_DETAILSDataTable
    
    Private tablememdet As memdetDataTable
    
    Private tableMAINCASHRECEIPT As MAINCASHRECEIPTDataTable
    
    Private tableHOUSE_BILL As HOUSE_BILLDataTable
    
    Private tableFACILITY_RPT As FACILITY_RPTDataTable
    
    Private tablefacility_view As facility_viewDataTable
    
    Private tableview_kot_details As view_kot_detailsDataTable
    
    Private tableVIEW_GNC_BILLDETAILS As VIEW_GNC_BILLDETAILSDataTable
    
    Private tableVIEW_MEM_REP_RECDET As VIEW_MEM_REP_RECDETDataTable
    
    Private tableVIEW_MEM_REP_ADDRESS As VIEW_MEM_REP_ADDRESSDataTable
    
    Private tableVIEW_MEM_REP_CLUB As VIEW_MEM_REP_CLUBDataTable
    
    Private tableVIEW_MEM_REP_Corp_Mem_List As VIEW_MEM_REP_Corp_Mem_ListDataTable
    
    Private tableVIEW_MEM_REP_Corp_Mst As VIEW_MEM_REP_Corp_MstDataTable
    
    Private tableVIEW_MEM_REP_DEPENDENT_ADDRESS As VIEW_MEM_REP_DEPENDENT_ADDRESSDataTable
    
    Private tableVIEW_MEM_REP_PROPOSER_SECONDER As VIEW_MEM_REP_PROPOSER_SECONDERDataTable
    
    Private tableVIEW_MEM_REP_QUALIFICATION As VIEW_MEM_REP_QUALIFICATIONDataTable
    
    Private tableVIEW_MEM_REP_RELATION As VIEW_MEM_REP_RELATIONDataTable
    
    Private tableVIEW_MEM_REP_STATUS As VIEW_MEM_REP_STATUSDataTable
    
    Private tableVIEW_MEM_REP_STICKER As VIEW_MEM_REP_STICKERDataTable
    
    Private tableVIEW_MEM_RPR As VIEW_MEM_RPRDataTable
    
    Private tableVIEW_MEM_REP_SPORTS As VIEW_MEM_REP_SPORTSDataTable
    
    Private tableVIEW_MEM_REP_ACTIVE_LIST As VIEW_MEM_REP_ACTIVE_LISTDataTable
    
    Private tableVIEW_MEM_REP_DEPENDENT As VIEW_MEM_REP_DEPENDENTDataTable
    
    Private tableVIEW_SUBS_SUMMARY As VIEW_SUBS_SUMMARYDataTable
    
    Private tableVIEW_MEM_REP_SUBS_FLT_MUM As VIEW_MEM_REP_SUBS_FLT_MUMDataTable
    
    Private tableVIEW_FACILITY_LIST As VIEW_FACILITY_LISTDataTable
    
    Private tableVIEW_ALU_BILLDETAILS As VIEW_ALU_BILLDETAILSDataTable
    
    Private tableView_Mem_MemberTypeConversion As View_Mem_MemberTypeConversionDataTable
    
    Private tableView_Mem_Memberstatuslist As View_Mem_MemberstatuslistDataTable
    
    Private tableView_Rec_Det As View_Rec_DetDataTable
    
    Private tableMM_MEMBERSTRENGTH As MM_MEMBERSTRENGTHDataTable
    
    Private tableVW_UNITWISE_MEMBER As VW_UNITWISE_MEMBERDataTable
    
    Private tablemm_membermaster As mm_membermasterDataTable
    
    Private tableVIEW_POS_SUMMARY As VIEW_POS_SUMMARYDataTable
    
    Private tableVIEW_MEM_CREDIT_DEFAULTER As VIEW_MEM_CREDIT_DEFAULTERDataTable
    
    Private tablemonth_bill As month_billDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("PosMaster")) Is Nothing) Then
                Me.Tables.Add(New PosMasterDataTable(ds.Tables("PosMaster")))
            End If
            If (Not (ds.Tables("VIEW_MONTHBILL")) Is Nothing) Then
                Me.Tables.Add(New VIEW_MONTHBILLDataTable(ds.Tables("VIEW_MONTHBILL")))
            End If
            If (Not (ds.Tables("TOWER_MONTH_BILL")) Is Nothing) Then
                Me.Tables.Add(New TOWER_MONTH_BILLDataTable(ds.Tables("TOWER_MONTH_BILL")))
            End If
            If (Not (ds.Tables("MM_BILL")) Is Nothing) Then
                Me.Tables.Add(New MM_BILLDataTable(ds.Tables("MM_BILL")))
            End If
            If (Not (ds.Tables("OPLBALNCE")) Is Nothing) Then
                Me.Tables.Add(New OPLBALNCEDataTable(ds.Tables("OPLBALNCE")))
            End If
            If (Not (ds.Tables("VIEW_MONTHBILL_ROOM")) Is Nothing) Then
                Me.Tables.Add(New VIEW_MONTHBILL_ROOMDataTable(ds.Tables("VIEW_MONTHBILL_ROOM")))
            End If
            If (Not (ds.Tables("membermaster")) Is Nothing) Then
                Me.Tables.Add(New membermasterDataTable(ds.Tables("membermaster")))
            End If
            If (Not (ds.Tables("HOUSE")) Is Nothing) Then
                Me.Tables.Add(New HOUSEDataTable(ds.Tables("HOUSE")))
            End If
            If (Not (ds.Tables("DEBITNOTEPAYMENT")) Is Nothing) Then
                Me.Tables.Add(New DEBITNOTEPAYMENTDataTable(ds.Tables("DEBITNOTEPAYMENT")))
            End If
            If (Not (ds.Tables("ROOM_BILL")) Is Nothing) Then
                Me.Tables.Add(New ROOM_BILLDataTable(ds.Tables("ROOM_BILL")))
            End If
            If (Not (ds.Tables("VIEW_MEMBER_DETAILS")) Is Nothing) Then
                Me.Tables.Add(New VIEW_MEMBER_DETAILSDataTable(ds.Tables("VIEW_MEMBER_DETAILS")))
            End If
            If (Not (ds.Tables("memdet")) Is Nothing) Then
                Me.Tables.Add(New memdetDataTable(ds.Tables("memdet")))
            End If
            If (Not (ds.Tables("MAINCASHRECEIPT")) Is Nothing) Then
                Me.Tables.Add(New MAINCASHRECEIPTDataTable(ds.Tables("MAINCASHRECEIPT")))
            End If
            If (Not (ds.Tables("HOUSE_BILL")) Is Nothing) Then
                Me.Tables.Add(New HOUSE_BILLDataTable(ds.Tables("HOUSE_BILL")))
            End If
            If (Not (ds.Tables("FACILITY_RPT")) Is Nothing) Then
                Me.Tables.Add(New FACILITY_RPTDataTable(ds.Tables("FACILITY_RPT")))
            End If
            If (Not (ds.Tables("facility_view")) Is Nothing) Then
                Me.Tables.Add(New facility_viewDataTable(ds.Tables("facility_view")))
            End If
            If (Not (ds.Tables("view_kot_details")) Is Nothing) Then
                Me.Tables.Add(New view_kot_detailsDataTable(ds.Tables("view_kot_details")))
            End If
            If (Not (ds.Tables("VIEW_GNC_BILLDETAILS")) Is Nothing) Then
                Me.Tables.Add(New VIEW_GNC_BILLDETAILSDataTable(ds.Tables("VIEW_GNC_BILLDETAILS")))
            End If
            If (Not (ds.Tables("VIEW_MEM_REP_RECDET")) Is Nothing) Then
                Me.Tables.Add(New VIEW_MEM_REP_RECDETDataTable(ds.Tables("VIEW_MEM_REP_RECDET")))
            End If
            If (Not (ds.Tables("VIEW_MEM_REP_ADDRESS")) Is Nothing) Then
                Me.Tables.Add(New VIEW_MEM_REP_ADDRESSDataTable(ds.Tables("VIEW_MEM_REP_ADDRESS")))
            End If
            If (Not (ds.Tables("VIEW_MEM_REP_CLUB")) Is Nothing) Then
                Me.Tables.Add(New VIEW_MEM_REP_CLUBDataTable(ds.Tables("VIEW_MEM_REP_CLUB")))
            End If
            If (Not (ds.Tables("VIEW_MEM_REP_Corp_Mem_List")) Is Nothing) Then
                Me.Tables.Add(New VIEW_MEM_REP_Corp_Mem_ListDataTable(ds.Tables("VIEW_MEM_REP_Corp_Mem_List")))
            End If
            If (Not (ds.Tables("VIEW_MEM_REP_Corp_Mst")) Is Nothing) Then
                Me.Tables.Add(New VIEW_MEM_REP_Corp_MstDataTable(ds.Tables("VIEW_MEM_REP_Corp_Mst")))
            End If
            If (Not (ds.Tables("VIEW_MEM_REP_DEPENDENT_ADDRESS")) Is Nothing) Then
                Me.Tables.Add(New VIEW_MEM_REP_DEPENDENT_ADDRESSDataTable(ds.Tables("VIEW_MEM_REP_DEPENDENT_ADDRESS")))
            End If
            If (Not (ds.Tables("VIEW_MEM_REP_PROPOSER_SECONDER")) Is Nothing) Then
                Me.Tables.Add(New VIEW_MEM_REP_PROPOSER_SECONDERDataTable(ds.Tables("VIEW_MEM_REP_PROPOSER_SECONDER")))
            End If
            If (Not (ds.Tables("VIEW_MEM_REP_QUALIFICATION")) Is Nothing) Then
                Me.Tables.Add(New VIEW_MEM_REP_QUALIFICATIONDataTable(ds.Tables("VIEW_MEM_REP_QUALIFICATION")))
            End If
            If (Not (ds.Tables("VIEW_MEM_REP_RELATION")) Is Nothing) Then
                Me.Tables.Add(New VIEW_MEM_REP_RELATIONDataTable(ds.Tables("VIEW_MEM_REP_RELATION")))
            End If
            If (Not (ds.Tables("VIEW_MEM_REP_STATUS")) Is Nothing) Then
                Me.Tables.Add(New VIEW_MEM_REP_STATUSDataTable(ds.Tables("VIEW_MEM_REP_STATUS")))
            End If
            If (Not (ds.Tables("VIEW_MEM_REP_STICKER")) Is Nothing) Then
                Me.Tables.Add(New VIEW_MEM_REP_STICKERDataTable(ds.Tables("VIEW_MEM_REP_STICKER")))
            End If
            If (Not (ds.Tables("VIEW_MEM_RPR")) Is Nothing) Then
                Me.Tables.Add(New VIEW_MEM_RPRDataTable(ds.Tables("VIEW_MEM_RPR")))
            End If
            If (Not (ds.Tables("VIEW_MEM_REP_SPORTS")) Is Nothing) Then
                Me.Tables.Add(New VIEW_MEM_REP_SPORTSDataTable(ds.Tables("VIEW_MEM_REP_SPORTS")))
            End If
            If (Not (ds.Tables("VIEW_MEM_REP_ACTIVE_LIST")) Is Nothing) Then
                Me.Tables.Add(New VIEW_MEM_REP_ACTIVE_LISTDataTable(ds.Tables("VIEW_MEM_REP_ACTIVE_LIST")))
            End If
            If (Not (ds.Tables("VIEW_MEM_REP_DEPENDENT")) Is Nothing) Then
                Me.Tables.Add(New VIEW_MEM_REP_DEPENDENTDataTable(ds.Tables("VIEW_MEM_REP_DEPENDENT")))
            End If
            If (Not (ds.Tables("VIEW_SUBS_SUMMARY")) Is Nothing) Then
                Me.Tables.Add(New VIEW_SUBS_SUMMARYDataTable(ds.Tables("VIEW_SUBS_SUMMARY")))
            End If
            If (Not (ds.Tables("VIEW_MEM_REP_SUBS_FLT_MUM")) Is Nothing) Then
                Me.Tables.Add(New VIEW_MEM_REP_SUBS_FLT_MUMDataTable(ds.Tables("VIEW_MEM_REP_SUBS_FLT_MUM")))
            End If
            If (Not (ds.Tables("VIEW_FACILITY_LIST")) Is Nothing) Then
                Me.Tables.Add(New VIEW_FACILITY_LISTDataTable(ds.Tables("VIEW_FACILITY_LIST")))
            End If
            If (Not (ds.Tables("VIEW_ALU_BILLDETAILS")) Is Nothing) Then
                Me.Tables.Add(New VIEW_ALU_BILLDETAILSDataTable(ds.Tables("VIEW_ALU_BILLDETAILS")))
            End If
            If (Not (ds.Tables("View_Mem_MemberTypeConversion")) Is Nothing) Then
                Me.Tables.Add(New View_Mem_MemberTypeConversionDataTable(ds.Tables("View_Mem_MemberTypeConversion")))
            End If
            If (Not (ds.Tables("View_Mem_Memberstatuslist")) Is Nothing) Then
                Me.Tables.Add(New View_Mem_MemberstatuslistDataTable(ds.Tables("View_Mem_Memberstatuslist")))
            End If
            If (Not (ds.Tables("View_Rec_Det")) Is Nothing) Then
                Me.Tables.Add(New View_Rec_DetDataTable(ds.Tables("View_Rec_Det")))
            End If
            If (Not (ds.Tables("MM_MEMBERSTRENGTH")) Is Nothing) Then
                Me.Tables.Add(New MM_MEMBERSTRENGTHDataTable(ds.Tables("MM_MEMBERSTRENGTH")))
            End If
            If (Not (ds.Tables("VW_UNITWISE_MEMBER")) Is Nothing) Then
                Me.Tables.Add(New VW_UNITWISE_MEMBERDataTable(ds.Tables("VW_UNITWISE_MEMBER")))
            End If
            If (Not (ds.Tables("mm_membermaster")) Is Nothing) Then
                Me.Tables.Add(New mm_membermasterDataTable(ds.Tables("mm_membermaster")))
            End If
            If (Not (ds.Tables("VIEW_POS_SUMMARY")) Is Nothing) Then
                Me.Tables.Add(New VIEW_POS_SUMMARYDataTable(ds.Tables("VIEW_POS_SUMMARY")))
            End If
            If (Not (ds.Tables("VIEW_MEM_CREDIT_DEFAULTER")) Is Nothing) Then
                Me.Tables.Add(New VIEW_MEM_CREDIT_DEFAULTERDataTable(ds.Tables("VIEW_MEM_CREDIT_DEFAULTER")))
            End If
            If (Not (ds.Tables("month_bill")) Is Nothing) Then
                Me.Tables.Add(New month_billDataTable(ds.Tables("month_bill")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PosMaster As PosMasterDataTable
        Get
            Return Me.tablePosMaster
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VIEW_MONTHBILL As VIEW_MONTHBILLDataTable
        Get
            Return Me.tableVIEW_MONTHBILL
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TOWER_MONTH_BILL As TOWER_MONTH_BILLDataTable
        Get
            Return Me.tableTOWER_MONTH_BILL
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MM_BILL As MM_BILLDataTable
        Get
            Return Me.tableMM_BILL
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OPLBALNCE As OPLBALNCEDataTable
        Get
            Return Me.tableOPLBALNCE
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VIEW_MONTHBILL_ROOM As VIEW_MONTHBILL_ROOMDataTable
        Get
            Return Me.tableVIEW_MONTHBILL_ROOM
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property membermaster As membermasterDataTable
        Get
            Return Me.tablemembermaster
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property HOUSE As HOUSEDataTable
        Get
            Return Me.tableHOUSE
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DEBITNOTEPAYMENT As DEBITNOTEPAYMENTDataTable
        Get
            Return Me.tableDEBITNOTEPAYMENT
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ROOM_BILL As ROOM_BILLDataTable
        Get
            Return Me.tableROOM_BILL
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VIEW_MEMBER_DETAILS As VIEW_MEMBER_DETAILSDataTable
        Get
            Return Me.tableVIEW_MEMBER_DETAILS
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property memdet As memdetDataTable
        Get
            Return Me.tablememdet
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MAINCASHRECEIPT As MAINCASHRECEIPTDataTable
        Get
            Return Me.tableMAINCASHRECEIPT
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property HOUSE_BILL As HOUSE_BILLDataTable
        Get
            Return Me.tableHOUSE_BILL
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FACILITY_RPT As FACILITY_RPTDataTable
        Get
            Return Me.tableFACILITY_RPT
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property facility_view As facility_viewDataTable
        Get
            Return Me.tablefacility_view
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property view_kot_details As view_kot_detailsDataTable
        Get
            Return Me.tableview_kot_details
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VIEW_GNC_BILLDETAILS As VIEW_GNC_BILLDETAILSDataTable
        Get
            Return Me.tableVIEW_GNC_BILLDETAILS
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VIEW_MEM_REP_RECDET As VIEW_MEM_REP_RECDETDataTable
        Get
            Return Me.tableVIEW_MEM_REP_RECDET
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VIEW_MEM_REP_ADDRESS As VIEW_MEM_REP_ADDRESSDataTable
        Get
            Return Me.tableVIEW_MEM_REP_ADDRESS
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VIEW_MEM_REP_CLUB As VIEW_MEM_REP_CLUBDataTable
        Get
            Return Me.tableVIEW_MEM_REP_CLUB
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VIEW_MEM_REP_Corp_Mem_List As VIEW_MEM_REP_Corp_Mem_ListDataTable
        Get
            Return Me.tableVIEW_MEM_REP_Corp_Mem_List
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VIEW_MEM_REP_Corp_Mst As VIEW_MEM_REP_Corp_MstDataTable
        Get
            Return Me.tableVIEW_MEM_REP_Corp_Mst
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VIEW_MEM_REP_DEPENDENT_ADDRESS As VIEW_MEM_REP_DEPENDENT_ADDRESSDataTable
        Get
            Return Me.tableVIEW_MEM_REP_DEPENDENT_ADDRESS
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VIEW_MEM_REP_PROPOSER_SECONDER As VIEW_MEM_REP_PROPOSER_SECONDERDataTable
        Get
            Return Me.tableVIEW_MEM_REP_PROPOSER_SECONDER
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VIEW_MEM_REP_QUALIFICATION As VIEW_MEM_REP_QUALIFICATIONDataTable
        Get
            Return Me.tableVIEW_MEM_REP_QUALIFICATION
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VIEW_MEM_REP_RELATION As VIEW_MEM_REP_RELATIONDataTable
        Get
            Return Me.tableVIEW_MEM_REP_RELATION
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VIEW_MEM_REP_STATUS As VIEW_MEM_REP_STATUSDataTable
        Get
            Return Me.tableVIEW_MEM_REP_STATUS
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VIEW_MEM_REP_STICKER As VIEW_MEM_REP_STICKERDataTable
        Get
            Return Me.tableVIEW_MEM_REP_STICKER
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VIEW_MEM_RPR As VIEW_MEM_RPRDataTable
        Get
            Return Me.tableVIEW_MEM_RPR
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VIEW_MEM_REP_SPORTS As VIEW_MEM_REP_SPORTSDataTable
        Get
            Return Me.tableVIEW_MEM_REP_SPORTS
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VIEW_MEM_REP_ACTIVE_LIST As VIEW_MEM_REP_ACTIVE_LISTDataTable
        Get
            Return Me.tableVIEW_MEM_REP_ACTIVE_LIST
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VIEW_MEM_REP_DEPENDENT As VIEW_MEM_REP_DEPENDENTDataTable
        Get
            Return Me.tableVIEW_MEM_REP_DEPENDENT
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VIEW_SUBS_SUMMARY As VIEW_SUBS_SUMMARYDataTable
        Get
            Return Me.tableVIEW_SUBS_SUMMARY
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VIEW_MEM_REP_SUBS_FLT_MUM As VIEW_MEM_REP_SUBS_FLT_MUMDataTable
        Get
            Return Me.tableVIEW_MEM_REP_SUBS_FLT_MUM
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VIEW_FACILITY_LIST As VIEW_FACILITY_LISTDataTable
        Get
            Return Me.tableVIEW_FACILITY_LIST
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VIEW_ALU_BILLDETAILS As VIEW_ALU_BILLDETAILSDataTable
        Get
            Return Me.tableVIEW_ALU_BILLDETAILS
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property View_Mem_MemberTypeConversion As View_Mem_MemberTypeConversionDataTable
        Get
            Return Me.tableView_Mem_MemberTypeConversion
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property View_Mem_Memberstatuslist As View_Mem_MemberstatuslistDataTable
        Get
            Return Me.tableView_Mem_Memberstatuslist
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property View_Rec_Det As View_Rec_DetDataTable
        Get
            Return Me.tableView_Rec_Det
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MM_MEMBERSTRENGTH As MM_MEMBERSTRENGTHDataTable
        Get
            Return Me.tableMM_MEMBERSTRENGTH
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VW_UNITWISE_MEMBER As VW_UNITWISE_MEMBERDataTable
        Get
            Return Me.tableVW_UNITWISE_MEMBER
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property mm_membermaster As mm_membermasterDataTable
        Get
            Return Me.tablemm_membermaster
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VIEW_POS_SUMMARY As VIEW_POS_SUMMARYDataTable
        Get
            Return Me.tableVIEW_POS_SUMMARY
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VIEW_MEM_CREDIT_DEFAULTER As VIEW_MEM_CREDIT_DEFAULTERDataTable
        Get
            Return Me.tableVIEW_MEM_CREDIT_DEFAULTER
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property month_bill As month_billDataTable
        Get
            Return Me.tablemonth_bill
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As Dataset1 = CType(MyBase.Clone,Dataset1)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("PosMaster")) Is Nothing) Then
            Me.Tables.Add(New PosMasterDataTable(ds.Tables("PosMaster")))
        End If
        If (Not (ds.Tables("VIEW_MONTHBILL")) Is Nothing) Then
            Me.Tables.Add(New VIEW_MONTHBILLDataTable(ds.Tables("VIEW_MONTHBILL")))
        End If
        If (Not (ds.Tables("TOWER_MONTH_BILL")) Is Nothing) Then
            Me.Tables.Add(New TOWER_MONTH_BILLDataTable(ds.Tables("TOWER_MONTH_BILL")))
        End If
        If (Not (ds.Tables("MM_BILL")) Is Nothing) Then
            Me.Tables.Add(New MM_BILLDataTable(ds.Tables("MM_BILL")))
        End If
        If (Not (ds.Tables("OPLBALNCE")) Is Nothing) Then
            Me.Tables.Add(New OPLBALNCEDataTable(ds.Tables("OPLBALNCE")))
        End If
        If (Not (ds.Tables("VIEW_MONTHBILL_ROOM")) Is Nothing) Then
            Me.Tables.Add(New VIEW_MONTHBILL_ROOMDataTable(ds.Tables("VIEW_MONTHBILL_ROOM")))
        End If
        If (Not (ds.Tables("membermaster")) Is Nothing) Then
            Me.Tables.Add(New membermasterDataTable(ds.Tables("membermaster")))
        End If
        If (Not (ds.Tables("HOUSE")) Is Nothing) Then
            Me.Tables.Add(New HOUSEDataTable(ds.Tables("HOUSE")))
        End If
        If (Not (ds.Tables("DEBITNOTEPAYMENT")) Is Nothing) Then
            Me.Tables.Add(New DEBITNOTEPAYMENTDataTable(ds.Tables("DEBITNOTEPAYMENT")))
        End If
        If (Not (ds.Tables("ROOM_BILL")) Is Nothing) Then
            Me.Tables.Add(New ROOM_BILLDataTable(ds.Tables("ROOM_BILL")))
        End If
        If (Not (ds.Tables("VIEW_MEMBER_DETAILS")) Is Nothing) Then
            Me.Tables.Add(New VIEW_MEMBER_DETAILSDataTable(ds.Tables("VIEW_MEMBER_DETAILS")))
        End If
        If (Not (ds.Tables("memdet")) Is Nothing) Then
            Me.Tables.Add(New memdetDataTable(ds.Tables("memdet")))
        End If
        If (Not (ds.Tables("MAINCASHRECEIPT")) Is Nothing) Then
            Me.Tables.Add(New MAINCASHRECEIPTDataTable(ds.Tables("MAINCASHRECEIPT")))
        End If
        If (Not (ds.Tables("HOUSE_BILL")) Is Nothing) Then
            Me.Tables.Add(New HOUSE_BILLDataTable(ds.Tables("HOUSE_BILL")))
        End If
        If (Not (ds.Tables("FACILITY_RPT")) Is Nothing) Then
            Me.Tables.Add(New FACILITY_RPTDataTable(ds.Tables("FACILITY_RPT")))
        End If
        If (Not (ds.Tables("facility_view")) Is Nothing) Then
            Me.Tables.Add(New facility_viewDataTable(ds.Tables("facility_view")))
        End If
        If (Not (ds.Tables("view_kot_details")) Is Nothing) Then
            Me.Tables.Add(New view_kot_detailsDataTable(ds.Tables("view_kot_details")))
        End If
        If (Not (ds.Tables("VIEW_GNC_BILLDETAILS")) Is Nothing) Then
            Me.Tables.Add(New VIEW_GNC_BILLDETAILSDataTable(ds.Tables("VIEW_GNC_BILLDETAILS")))
        End If
        If (Not (ds.Tables("VIEW_MEM_REP_RECDET")) Is Nothing) Then
            Me.Tables.Add(New VIEW_MEM_REP_RECDETDataTable(ds.Tables("VIEW_MEM_REP_RECDET")))
        End If
        If (Not (ds.Tables("VIEW_MEM_REP_ADDRESS")) Is Nothing) Then
            Me.Tables.Add(New VIEW_MEM_REP_ADDRESSDataTable(ds.Tables("VIEW_MEM_REP_ADDRESS")))
        End If
        If (Not (ds.Tables("VIEW_MEM_REP_CLUB")) Is Nothing) Then
            Me.Tables.Add(New VIEW_MEM_REP_CLUBDataTable(ds.Tables("VIEW_MEM_REP_CLUB")))
        End If
        If (Not (ds.Tables("VIEW_MEM_REP_Corp_Mem_List")) Is Nothing) Then
            Me.Tables.Add(New VIEW_MEM_REP_Corp_Mem_ListDataTable(ds.Tables("VIEW_MEM_REP_Corp_Mem_List")))
        End If
        If (Not (ds.Tables("VIEW_MEM_REP_Corp_Mst")) Is Nothing) Then
            Me.Tables.Add(New VIEW_MEM_REP_Corp_MstDataTable(ds.Tables("VIEW_MEM_REP_Corp_Mst")))
        End If
        If (Not (ds.Tables("VIEW_MEM_REP_DEPENDENT_ADDRESS")) Is Nothing) Then
            Me.Tables.Add(New VIEW_MEM_REP_DEPENDENT_ADDRESSDataTable(ds.Tables("VIEW_MEM_REP_DEPENDENT_ADDRESS")))
        End If
        If (Not (ds.Tables("VIEW_MEM_REP_PROPOSER_SECONDER")) Is Nothing) Then
            Me.Tables.Add(New VIEW_MEM_REP_PROPOSER_SECONDERDataTable(ds.Tables("VIEW_MEM_REP_PROPOSER_SECONDER")))
        End If
        If (Not (ds.Tables("VIEW_MEM_REP_QUALIFICATION")) Is Nothing) Then
            Me.Tables.Add(New VIEW_MEM_REP_QUALIFICATIONDataTable(ds.Tables("VIEW_MEM_REP_QUALIFICATION")))
        End If
        If (Not (ds.Tables("VIEW_MEM_REP_RELATION")) Is Nothing) Then
            Me.Tables.Add(New VIEW_MEM_REP_RELATIONDataTable(ds.Tables("VIEW_MEM_REP_RELATION")))
        End If
        If (Not (ds.Tables("VIEW_MEM_REP_STATUS")) Is Nothing) Then
            Me.Tables.Add(New VIEW_MEM_REP_STATUSDataTable(ds.Tables("VIEW_MEM_REP_STATUS")))
        End If
        If (Not (ds.Tables("VIEW_MEM_REP_STICKER")) Is Nothing) Then
            Me.Tables.Add(New VIEW_MEM_REP_STICKERDataTable(ds.Tables("VIEW_MEM_REP_STICKER")))
        End If
        If (Not (ds.Tables("VIEW_MEM_RPR")) Is Nothing) Then
            Me.Tables.Add(New VIEW_MEM_RPRDataTable(ds.Tables("VIEW_MEM_RPR")))
        End If
        If (Not (ds.Tables("VIEW_MEM_REP_SPORTS")) Is Nothing) Then
            Me.Tables.Add(New VIEW_MEM_REP_SPORTSDataTable(ds.Tables("VIEW_MEM_REP_SPORTS")))
        End If
        If (Not (ds.Tables("VIEW_MEM_REP_ACTIVE_LIST")) Is Nothing) Then
            Me.Tables.Add(New VIEW_MEM_REP_ACTIVE_LISTDataTable(ds.Tables("VIEW_MEM_REP_ACTIVE_LIST")))
        End If
        If (Not (ds.Tables("VIEW_MEM_REP_DEPENDENT")) Is Nothing) Then
            Me.Tables.Add(New VIEW_MEM_REP_DEPENDENTDataTable(ds.Tables("VIEW_MEM_REP_DEPENDENT")))
        End If
        If (Not (ds.Tables("VIEW_SUBS_SUMMARY")) Is Nothing) Then
            Me.Tables.Add(New VIEW_SUBS_SUMMARYDataTable(ds.Tables("VIEW_SUBS_SUMMARY")))
        End If
        If (Not (ds.Tables("VIEW_MEM_REP_SUBS_FLT_MUM")) Is Nothing) Then
            Me.Tables.Add(New VIEW_MEM_REP_SUBS_FLT_MUMDataTable(ds.Tables("VIEW_MEM_REP_SUBS_FLT_MUM")))
        End If
        If (Not (ds.Tables("VIEW_FACILITY_LIST")) Is Nothing) Then
            Me.Tables.Add(New VIEW_FACILITY_LISTDataTable(ds.Tables("VIEW_FACILITY_LIST")))
        End If
        If (Not (ds.Tables("VIEW_ALU_BILLDETAILS")) Is Nothing) Then
            Me.Tables.Add(New VIEW_ALU_BILLDETAILSDataTable(ds.Tables("VIEW_ALU_BILLDETAILS")))
        End If
        If (Not (ds.Tables("View_Mem_MemberTypeConversion")) Is Nothing) Then
            Me.Tables.Add(New View_Mem_MemberTypeConversionDataTable(ds.Tables("View_Mem_MemberTypeConversion")))
        End If
        If (Not (ds.Tables("View_Mem_Memberstatuslist")) Is Nothing) Then
            Me.Tables.Add(New View_Mem_MemberstatuslistDataTable(ds.Tables("View_Mem_Memberstatuslist")))
        End If
        If (Not (ds.Tables("View_Rec_Det")) Is Nothing) Then
            Me.Tables.Add(New View_Rec_DetDataTable(ds.Tables("View_Rec_Det")))
        End If
        If (Not (ds.Tables("MM_MEMBERSTRENGTH")) Is Nothing) Then
            Me.Tables.Add(New MM_MEMBERSTRENGTHDataTable(ds.Tables("MM_MEMBERSTRENGTH")))
        End If
        If (Not (ds.Tables("VW_UNITWISE_MEMBER")) Is Nothing) Then
            Me.Tables.Add(New VW_UNITWISE_MEMBERDataTable(ds.Tables("VW_UNITWISE_MEMBER")))
        End If
        If (Not (ds.Tables("mm_membermaster")) Is Nothing) Then
            Me.Tables.Add(New mm_membermasterDataTable(ds.Tables("mm_membermaster")))
        End If
        If (Not (ds.Tables("VIEW_POS_SUMMARY")) Is Nothing) Then
            Me.Tables.Add(New VIEW_POS_SUMMARYDataTable(ds.Tables("VIEW_POS_SUMMARY")))
        End If
        If (Not (ds.Tables("VIEW_MEM_CREDIT_DEFAULTER")) Is Nothing) Then
            Me.Tables.Add(New VIEW_MEM_CREDIT_DEFAULTERDataTable(ds.Tables("VIEW_MEM_CREDIT_DEFAULTER")))
        End If
        If (Not (ds.Tables("month_bill")) Is Nothing) Then
            Me.Tables.Add(New month_billDataTable(ds.Tables("month_bill")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tablePosMaster = CType(Me.Tables("PosMaster"),PosMasterDataTable)
        If (Not (Me.tablePosMaster) Is Nothing) Then
            Me.tablePosMaster.InitVars
        End If
        Me.tableVIEW_MONTHBILL = CType(Me.Tables("VIEW_MONTHBILL"),VIEW_MONTHBILLDataTable)
        If (Not (Me.tableVIEW_MONTHBILL) Is Nothing) Then
            Me.tableVIEW_MONTHBILL.InitVars
        End If
        Me.tableTOWER_MONTH_BILL = CType(Me.Tables("TOWER_MONTH_BILL"),TOWER_MONTH_BILLDataTable)
        If (Not (Me.tableTOWER_MONTH_BILL) Is Nothing) Then
            Me.tableTOWER_MONTH_BILL.InitVars
        End If
        Me.tableMM_BILL = CType(Me.Tables("MM_BILL"),MM_BILLDataTable)
        If (Not (Me.tableMM_BILL) Is Nothing) Then
            Me.tableMM_BILL.InitVars
        End If
        Me.tableOPLBALNCE = CType(Me.Tables("OPLBALNCE"),OPLBALNCEDataTable)
        If (Not (Me.tableOPLBALNCE) Is Nothing) Then
            Me.tableOPLBALNCE.InitVars
        End If
        Me.tableVIEW_MONTHBILL_ROOM = CType(Me.Tables("VIEW_MONTHBILL_ROOM"),VIEW_MONTHBILL_ROOMDataTable)
        If (Not (Me.tableVIEW_MONTHBILL_ROOM) Is Nothing) Then
            Me.tableVIEW_MONTHBILL_ROOM.InitVars
        End If
        Me.tablemembermaster = CType(Me.Tables("membermaster"),membermasterDataTable)
        If (Not (Me.tablemembermaster) Is Nothing) Then
            Me.tablemembermaster.InitVars
        End If
        Me.tableHOUSE = CType(Me.Tables("HOUSE"),HOUSEDataTable)
        If (Not (Me.tableHOUSE) Is Nothing) Then
            Me.tableHOUSE.InitVars
        End If
        Me.tableDEBITNOTEPAYMENT = CType(Me.Tables("DEBITNOTEPAYMENT"),DEBITNOTEPAYMENTDataTable)
        If (Not (Me.tableDEBITNOTEPAYMENT) Is Nothing) Then
            Me.tableDEBITNOTEPAYMENT.InitVars
        End If
        Me.tableROOM_BILL = CType(Me.Tables("ROOM_BILL"),ROOM_BILLDataTable)
        If (Not (Me.tableROOM_BILL) Is Nothing) Then
            Me.tableROOM_BILL.InitVars
        End If
        Me.tableVIEW_MEMBER_DETAILS = CType(Me.Tables("VIEW_MEMBER_DETAILS"),VIEW_MEMBER_DETAILSDataTable)
        If (Not (Me.tableVIEW_MEMBER_DETAILS) Is Nothing) Then
            Me.tableVIEW_MEMBER_DETAILS.InitVars
        End If
        Me.tablememdet = CType(Me.Tables("memdet"),memdetDataTable)
        If (Not (Me.tablememdet) Is Nothing) Then
            Me.tablememdet.InitVars
        End If
        Me.tableMAINCASHRECEIPT = CType(Me.Tables("MAINCASHRECEIPT"),MAINCASHRECEIPTDataTable)
        If (Not (Me.tableMAINCASHRECEIPT) Is Nothing) Then
            Me.tableMAINCASHRECEIPT.InitVars
        End If
        Me.tableHOUSE_BILL = CType(Me.Tables("HOUSE_BILL"),HOUSE_BILLDataTable)
        If (Not (Me.tableHOUSE_BILL) Is Nothing) Then
            Me.tableHOUSE_BILL.InitVars
        End If
        Me.tableFACILITY_RPT = CType(Me.Tables("FACILITY_RPT"),FACILITY_RPTDataTable)
        If (Not (Me.tableFACILITY_RPT) Is Nothing) Then
            Me.tableFACILITY_RPT.InitVars
        End If
        Me.tablefacility_view = CType(Me.Tables("facility_view"),facility_viewDataTable)
        If (Not (Me.tablefacility_view) Is Nothing) Then
            Me.tablefacility_view.InitVars
        End If
        Me.tableview_kot_details = CType(Me.Tables("view_kot_details"),view_kot_detailsDataTable)
        If (Not (Me.tableview_kot_details) Is Nothing) Then
            Me.tableview_kot_details.InitVars
        End If
        Me.tableVIEW_GNC_BILLDETAILS = CType(Me.Tables("VIEW_GNC_BILLDETAILS"),VIEW_GNC_BILLDETAILSDataTable)
        If (Not (Me.tableVIEW_GNC_BILLDETAILS) Is Nothing) Then
            Me.tableVIEW_GNC_BILLDETAILS.InitVars
        End If
        Me.tableVIEW_MEM_REP_RECDET = CType(Me.Tables("VIEW_MEM_REP_RECDET"),VIEW_MEM_REP_RECDETDataTable)
        If (Not (Me.tableVIEW_MEM_REP_RECDET) Is Nothing) Then
            Me.tableVIEW_MEM_REP_RECDET.InitVars
        End If
        Me.tableVIEW_MEM_REP_ADDRESS = CType(Me.Tables("VIEW_MEM_REP_ADDRESS"),VIEW_MEM_REP_ADDRESSDataTable)
        If (Not (Me.tableVIEW_MEM_REP_ADDRESS) Is Nothing) Then
            Me.tableVIEW_MEM_REP_ADDRESS.InitVars
        End If
        Me.tableVIEW_MEM_REP_CLUB = CType(Me.Tables("VIEW_MEM_REP_CLUB"),VIEW_MEM_REP_CLUBDataTable)
        If (Not (Me.tableVIEW_MEM_REP_CLUB) Is Nothing) Then
            Me.tableVIEW_MEM_REP_CLUB.InitVars
        End If
        Me.tableVIEW_MEM_REP_Corp_Mem_List = CType(Me.Tables("VIEW_MEM_REP_Corp_Mem_List"),VIEW_MEM_REP_Corp_Mem_ListDataTable)
        If (Not (Me.tableVIEW_MEM_REP_Corp_Mem_List) Is Nothing) Then
            Me.tableVIEW_MEM_REP_Corp_Mem_List.InitVars
        End If
        Me.tableVIEW_MEM_REP_Corp_Mst = CType(Me.Tables("VIEW_MEM_REP_Corp_Mst"),VIEW_MEM_REP_Corp_MstDataTable)
        If (Not (Me.tableVIEW_MEM_REP_Corp_Mst) Is Nothing) Then
            Me.tableVIEW_MEM_REP_Corp_Mst.InitVars
        End If
        Me.tableVIEW_MEM_REP_DEPENDENT_ADDRESS = CType(Me.Tables("VIEW_MEM_REP_DEPENDENT_ADDRESS"),VIEW_MEM_REP_DEPENDENT_ADDRESSDataTable)
        If (Not (Me.tableVIEW_MEM_REP_DEPENDENT_ADDRESS) Is Nothing) Then
            Me.tableVIEW_MEM_REP_DEPENDENT_ADDRESS.InitVars
        End If
        Me.tableVIEW_MEM_REP_PROPOSER_SECONDER = CType(Me.Tables("VIEW_MEM_REP_PROPOSER_SECONDER"),VIEW_MEM_REP_PROPOSER_SECONDERDataTable)
        If (Not (Me.tableVIEW_MEM_REP_PROPOSER_SECONDER) Is Nothing) Then
            Me.tableVIEW_MEM_REP_PROPOSER_SECONDER.InitVars
        End If
        Me.tableVIEW_MEM_REP_QUALIFICATION = CType(Me.Tables("VIEW_MEM_REP_QUALIFICATION"),VIEW_MEM_REP_QUALIFICATIONDataTable)
        If (Not (Me.tableVIEW_MEM_REP_QUALIFICATION) Is Nothing) Then
            Me.tableVIEW_MEM_REP_QUALIFICATION.InitVars
        End If
        Me.tableVIEW_MEM_REP_RELATION = CType(Me.Tables("VIEW_MEM_REP_RELATION"),VIEW_MEM_REP_RELATIONDataTable)
        If (Not (Me.tableVIEW_MEM_REP_RELATION) Is Nothing) Then
            Me.tableVIEW_MEM_REP_RELATION.InitVars
        End If
        Me.tableVIEW_MEM_REP_STATUS = CType(Me.Tables("VIEW_MEM_REP_STATUS"),VIEW_MEM_REP_STATUSDataTable)
        If (Not (Me.tableVIEW_MEM_REP_STATUS) Is Nothing) Then
            Me.tableVIEW_MEM_REP_STATUS.InitVars
        End If
        Me.tableVIEW_MEM_REP_STICKER = CType(Me.Tables("VIEW_MEM_REP_STICKER"),VIEW_MEM_REP_STICKERDataTable)
        If (Not (Me.tableVIEW_MEM_REP_STICKER) Is Nothing) Then
            Me.tableVIEW_MEM_REP_STICKER.InitVars
        End If
        Me.tableVIEW_MEM_RPR = CType(Me.Tables("VIEW_MEM_RPR"),VIEW_MEM_RPRDataTable)
        If (Not (Me.tableVIEW_MEM_RPR) Is Nothing) Then
            Me.tableVIEW_MEM_RPR.InitVars
        End If
        Me.tableVIEW_MEM_REP_SPORTS = CType(Me.Tables("VIEW_MEM_REP_SPORTS"),VIEW_MEM_REP_SPORTSDataTable)
        If (Not (Me.tableVIEW_MEM_REP_SPORTS) Is Nothing) Then
            Me.tableVIEW_MEM_REP_SPORTS.InitVars
        End If
        Me.tableVIEW_MEM_REP_ACTIVE_LIST = CType(Me.Tables("VIEW_MEM_REP_ACTIVE_LIST"),VIEW_MEM_REP_ACTIVE_LISTDataTable)
        If (Not (Me.tableVIEW_MEM_REP_ACTIVE_LIST) Is Nothing) Then
            Me.tableVIEW_MEM_REP_ACTIVE_LIST.InitVars
        End If
        Me.tableVIEW_MEM_REP_DEPENDENT = CType(Me.Tables("VIEW_MEM_REP_DEPENDENT"),VIEW_MEM_REP_DEPENDENTDataTable)
        If (Not (Me.tableVIEW_MEM_REP_DEPENDENT) Is Nothing) Then
            Me.tableVIEW_MEM_REP_DEPENDENT.InitVars
        End If
        Me.tableVIEW_SUBS_SUMMARY = CType(Me.Tables("VIEW_SUBS_SUMMARY"),VIEW_SUBS_SUMMARYDataTable)
        If (Not (Me.tableVIEW_SUBS_SUMMARY) Is Nothing) Then
            Me.tableVIEW_SUBS_SUMMARY.InitVars
        End If
        Me.tableVIEW_MEM_REP_SUBS_FLT_MUM = CType(Me.Tables("VIEW_MEM_REP_SUBS_FLT_MUM"),VIEW_MEM_REP_SUBS_FLT_MUMDataTable)
        If (Not (Me.tableVIEW_MEM_REP_SUBS_FLT_MUM) Is Nothing) Then
            Me.tableVIEW_MEM_REP_SUBS_FLT_MUM.InitVars
        End If
        Me.tableVIEW_FACILITY_LIST = CType(Me.Tables("VIEW_FACILITY_LIST"),VIEW_FACILITY_LISTDataTable)
        If (Not (Me.tableVIEW_FACILITY_LIST) Is Nothing) Then
            Me.tableVIEW_FACILITY_LIST.InitVars
        End If
        Me.tableVIEW_ALU_BILLDETAILS = CType(Me.Tables("VIEW_ALU_BILLDETAILS"),VIEW_ALU_BILLDETAILSDataTable)
        If (Not (Me.tableVIEW_ALU_BILLDETAILS) Is Nothing) Then
            Me.tableVIEW_ALU_BILLDETAILS.InitVars
        End If
        Me.tableView_Mem_MemberTypeConversion = CType(Me.Tables("View_Mem_MemberTypeConversion"),View_Mem_MemberTypeConversionDataTable)
        If (Not (Me.tableView_Mem_MemberTypeConversion) Is Nothing) Then
            Me.tableView_Mem_MemberTypeConversion.InitVars
        End If
        Me.tableView_Mem_Memberstatuslist = CType(Me.Tables("View_Mem_Memberstatuslist"),View_Mem_MemberstatuslistDataTable)
        If (Not (Me.tableView_Mem_Memberstatuslist) Is Nothing) Then
            Me.tableView_Mem_Memberstatuslist.InitVars
        End If
        Me.tableView_Rec_Det = CType(Me.Tables("View_Rec_Det"),View_Rec_DetDataTable)
        If (Not (Me.tableView_Rec_Det) Is Nothing) Then
            Me.tableView_Rec_Det.InitVars
        End If
        Me.tableMM_MEMBERSTRENGTH = CType(Me.Tables("MM_MEMBERSTRENGTH"),MM_MEMBERSTRENGTHDataTable)
        If (Not (Me.tableMM_MEMBERSTRENGTH) Is Nothing) Then
            Me.tableMM_MEMBERSTRENGTH.InitVars
        End If
        Me.tableVW_UNITWISE_MEMBER = CType(Me.Tables("VW_UNITWISE_MEMBER"),VW_UNITWISE_MEMBERDataTable)
        If (Not (Me.tableVW_UNITWISE_MEMBER) Is Nothing) Then
            Me.tableVW_UNITWISE_MEMBER.InitVars
        End If
        Me.tablemm_membermaster = CType(Me.Tables("mm_membermaster"),mm_membermasterDataTable)
        If (Not (Me.tablemm_membermaster) Is Nothing) Then
            Me.tablemm_membermaster.InitVars
        End If
        Me.tableVIEW_POS_SUMMARY = CType(Me.Tables("VIEW_POS_SUMMARY"),VIEW_POS_SUMMARYDataTable)
        If (Not (Me.tableVIEW_POS_SUMMARY) Is Nothing) Then
            Me.tableVIEW_POS_SUMMARY.InitVars
        End If
        Me.tableVIEW_MEM_CREDIT_DEFAULTER = CType(Me.Tables("VIEW_MEM_CREDIT_DEFAULTER"),VIEW_MEM_CREDIT_DEFAULTERDataTable)
        If (Not (Me.tableVIEW_MEM_CREDIT_DEFAULTER) Is Nothing) Then
            Me.tableVIEW_MEM_CREDIT_DEFAULTER.InitVars
        End If
        Me.tablemonth_bill = CType(Me.Tables("month_bill"),month_billDataTable)
        If (Not (Me.tablemonth_bill) Is Nothing) Then
            Me.tablemonth_bill.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "Dataset1"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/Dataset1.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tablePosMaster = New PosMasterDataTable
        Me.Tables.Add(Me.tablePosMaster)
        Me.tableVIEW_MONTHBILL = New VIEW_MONTHBILLDataTable
        Me.Tables.Add(Me.tableVIEW_MONTHBILL)
        Me.tableTOWER_MONTH_BILL = New TOWER_MONTH_BILLDataTable
        Me.Tables.Add(Me.tableTOWER_MONTH_BILL)
        Me.tableMM_BILL = New MM_BILLDataTable
        Me.Tables.Add(Me.tableMM_BILL)
        Me.tableOPLBALNCE = New OPLBALNCEDataTable
        Me.Tables.Add(Me.tableOPLBALNCE)
        Me.tableVIEW_MONTHBILL_ROOM = New VIEW_MONTHBILL_ROOMDataTable
        Me.Tables.Add(Me.tableVIEW_MONTHBILL_ROOM)
        Me.tablemembermaster = New membermasterDataTable
        Me.Tables.Add(Me.tablemembermaster)
        Me.tableHOUSE = New HOUSEDataTable
        Me.Tables.Add(Me.tableHOUSE)
        Me.tableDEBITNOTEPAYMENT = New DEBITNOTEPAYMENTDataTable
        Me.Tables.Add(Me.tableDEBITNOTEPAYMENT)
        Me.tableROOM_BILL = New ROOM_BILLDataTable
        Me.Tables.Add(Me.tableROOM_BILL)
        Me.tableVIEW_MEMBER_DETAILS = New VIEW_MEMBER_DETAILSDataTable
        Me.Tables.Add(Me.tableVIEW_MEMBER_DETAILS)
        Me.tablememdet = New memdetDataTable
        Me.Tables.Add(Me.tablememdet)
        Me.tableMAINCASHRECEIPT = New MAINCASHRECEIPTDataTable
        Me.Tables.Add(Me.tableMAINCASHRECEIPT)
        Me.tableHOUSE_BILL = New HOUSE_BILLDataTable
        Me.Tables.Add(Me.tableHOUSE_BILL)
        Me.tableFACILITY_RPT = New FACILITY_RPTDataTable
        Me.Tables.Add(Me.tableFACILITY_RPT)
        Me.tablefacility_view = New facility_viewDataTable
        Me.Tables.Add(Me.tablefacility_view)
        Me.tableview_kot_details = New view_kot_detailsDataTable
        Me.Tables.Add(Me.tableview_kot_details)
        Me.tableVIEW_GNC_BILLDETAILS = New VIEW_GNC_BILLDETAILSDataTable
        Me.Tables.Add(Me.tableVIEW_GNC_BILLDETAILS)
        Me.tableVIEW_MEM_REP_RECDET = New VIEW_MEM_REP_RECDETDataTable
        Me.Tables.Add(Me.tableVIEW_MEM_REP_RECDET)
        Me.tableVIEW_MEM_REP_ADDRESS = New VIEW_MEM_REP_ADDRESSDataTable
        Me.Tables.Add(Me.tableVIEW_MEM_REP_ADDRESS)
        Me.tableVIEW_MEM_REP_CLUB = New VIEW_MEM_REP_CLUBDataTable
        Me.Tables.Add(Me.tableVIEW_MEM_REP_CLUB)
        Me.tableVIEW_MEM_REP_Corp_Mem_List = New VIEW_MEM_REP_Corp_Mem_ListDataTable
        Me.Tables.Add(Me.tableVIEW_MEM_REP_Corp_Mem_List)
        Me.tableVIEW_MEM_REP_Corp_Mst = New VIEW_MEM_REP_Corp_MstDataTable
        Me.Tables.Add(Me.tableVIEW_MEM_REP_Corp_Mst)
        Me.tableVIEW_MEM_REP_DEPENDENT_ADDRESS = New VIEW_MEM_REP_DEPENDENT_ADDRESSDataTable
        Me.Tables.Add(Me.tableVIEW_MEM_REP_DEPENDENT_ADDRESS)
        Me.tableVIEW_MEM_REP_PROPOSER_SECONDER = New VIEW_MEM_REP_PROPOSER_SECONDERDataTable
        Me.Tables.Add(Me.tableVIEW_MEM_REP_PROPOSER_SECONDER)
        Me.tableVIEW_MEM_REP_QUALIFICATION = New VIEW_MEM_REP_QUALIFICATIONDataTable
        Me.Tables.Add(Me.tableVIEW_MEM_REP_QUALIFICATION)
        Me.tableVIEW_MEM_REP_RELATION = New VIEW_MEM_REP_RELATIONDataTable
        Me.Tables.Add(Me.tableVIEW_MEM_REP_RELATION)
        Me.tableVIEW_MEM_REP_STATUS = New VIEW_MEM_REP_STATUSDataTable
        Me.Tables.Add(Me.tableVIEW_MEM_REP_STATUS)
        Me.tableVIEW_MEM_REP_STICKER = New VIEW_MEM_REP_STICKERDataTable
        Me.Tables.Add(Me.tableVIEW_MEM_REP_STICKER)
        Me.tableVIEW_MEM_RPR = New VIEW_MEM_RPRDataTable
        Me.Tables.Add(Me.tableVIEW_MEM_RPR)
        Me.tableVIEW_MEM_REP_SPORTS = New VIEW_MEM_REP_SPORTSDataTable
        Me.Tables.Add(Me.tableVIEW_MEM_REP_SPORTS)
        Me.tableVIEW_MEM_REP_ACTIVE_LIST = New VIEW_MEM_REP_ACTIVE_LISTDataTable
        Me.Tables.Add(Me.tableVIEW_MEM_REP_ACTIVE_LIST)
        Me.tableVIEW_MEM_REP_DEPENDENT = New VIEW_MEM_REP_DEPENDENTDataTable
        Me.Tables.Add(Me.tableVIEW_MEM_REP_DEPENDENT)
        Me.tableVIEW_SUBS_SUMMARY = New VIEW_SUBS_SUMMARYDataTable
        Me.Tables.Add(Me.tableVIEW_SUBS_SUMMARY)
        Me.tableVIEW_MEM_REP_SUBS_FLT_MUM = New VIEW_MEM_REP_SUBS_FLT_MUMDataTable
        Me.Tables.Add(Me.tableVIEW_MEM_REP_SUBS_FLT_MUM)
        Me.tableVIEW_FACILITY_LIST = New VIEW_FACILITY_LISTDataTable
        Me.Tables.Add(Me.tableVIEW_FACILITY_LIST)
        Me.tableVIEW_ALU_BILLDETAILS = New VIEW_ALU_BILLDETAILSDataTable
        Me.Tables.Add(Me.tableVIEW_ALU_BILLDETAILS)
        Me.tableView_Mem_MemberTypeConversion = New View_Mem_MemberTypeConversionDataTable
        Me.Tables.Add(Me.tableView_Mem_MemberTypeConversion)
        Me.tableView_Mem_Memberstatuslist = New View_Mem_MemberstatuslistDataTable
        Me.Tables.Add(Me.tableView_Mem_Memberstatuslist)
        Me.tableView_Rec_Det = New View_Rec_DetDataTable
        Me.Tables.Add(Me.tableView_Rec_Det)
        Me.tableMM_MEMBERSTRENGTH = New MM_MEMBERSTRENGTHDataTable
        Me.Tables.Add(Me.tableMM_MEMBERSTRENGTH)
        Me.tableVW_UNITWISE_MEMBER = New VW_UNITWISE_MEMBERDataTable
        Me.Tables.Add(Me.tableVW_UNITWISE_MEMBER)
        Me.tablemm_membermaster = New mm_membermasterDataTable
        Me.Tables.Add(Me.tablemm_membermaster)
        Me.tableVIEW_POS_SUMMARY = New VIEW_POS_SUMMARYDataTable
        Me.Tables.Add(Me.tableVIEW_POS_SUMMARY)
        Me.tableVIEW_MEM_CREDIT_DEFAULTER = New VIEW_MEM_CREDIT_DEFAULTERDataTable
        Me.Tables.Add(Me.tableVIEW_MEM_CREDIT_DEFAULTER)
        Me.tablemonth_bill = New month_billDataTable
        Me.Tables.Add(Me.tablemonth_bill)
    End Sub
    
    Private Function ShouldSerializePosMaster() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeVIEW_MONTHBILL() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeTOWER_MONTH_BILL() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeMM_BILL() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeOPLBALNCE() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeVIEW_MONTHBILL_ROOM() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializemembermaster() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeHOUSE() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeDEBITNOTEPAYMENT() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeROOM_BILL() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeVIEW_MEMBER_DETAILS() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializememdet() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeMAINCASHRECEIPT() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeHOUSE_BILL() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeFACILITY_RPT() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializefacility_view() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeview_kot_details() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeVIEW_GNC_BILLDETAILS() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeVIEW_MEM_REP_RECDET() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeVIEW_MEM_REP_ADDRESS() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeVIEW_MEM_REP_CLUB() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeVIEW_MEM_REP_Corp_Mem_List() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeVIEW_MEM_REP_Corp_Mst() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeVIEW_MEM_REP_DEPENDENT_ADDRESS() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeVIEW_MEM_REP_PROPOSER_SECONDER() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeVIEW_MEM_REP_QUALIFICATION() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeVIEW_MEM_REP_RELATION() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeVIEW_MEM_REP_STATUS() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeVIEW_MEM_REP_STICKER() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeVIEW_MEM_RPR() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeVIEW_MEM_REP_SPORTS() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeVIEW_MEM_REP_ACTIVE_LIST() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeVIEW_MEM_REP_DEPENDENT() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeVIEW_SUBS_SUMMARY() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeVIEW_MEM_REP_SUBS_FLT_MUM() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeVIEW_FACILITY_LIST() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeVIEW_ALU_BILLDETAILS() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeView_Mem_MemberTypeConversion() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeView_Mem_Memberstatuslist() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeView_Rec_Det() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeMM_MEMBERSTRENGTH() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeVW_UNITWISE_MEMBER() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializemm_membermaster() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeVIEW_POS_SUMMARY() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeVIEW_MEM_CREDIT_DEFAULTER() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializemonth_bill() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub PosMasterRowChangeEventHandler(ByVal sender As Object, ByVal e As PosMasterRowChangeEvent)
    
    Public Delegate Sub VIEW_MONTHBILLRowChangeEventHandler(ByVal sender As Object, ByVal e As VIEW_MONTHBILLRowChangeEvent)
    
    Public Delegate Sub TOWER_MONTH_BILLRowChangeEventHandler(ByVal sender As Object, ByVal e As TOWER_MONTH_BILLRowChangeEvent)
    
    Public Delegate Sub MM_BILLRowChangeEventHandler(ByVal sender As Object, ByVal e As MM_BILLRowChangeEvent)
    
    Public Delegate Sub OPLBALNCERowChangeEventHandler(ByVal sender As Object, ByVal e As OPLBALNCERowChangeEvent)
    
    Public Delegate Sub VIEW_MONTHBILL_ROOMRowChangeEventHandler(ByVal sender As Object, ByVal e As VIEW_MONTHBILL_ROOMRowChangeEvent)
    
    Public Delegate Sub membermasterRowChangeEventHandler(ByVal sender As Object, ByVal e As membermasterRowChangeEvent)
    
    Public Delegate Sub HOUSERowChangeEventHandler(ByVal sender As Object, ByVal e As HOUSERowChangeEvent)
    
    Public Delegate Sub DEBITNOTEPAYMENTRowChangeEventHandler(ByVal sender As Object, ByVal e As DEBITNOTEPAYMENTRowChangeEvent)
    
    Public Delegate Sub ROOM_BILLRowChangeEventHandler(ByVal sender As Object, ByVal e As ROOM_BILLRowChangeEvent)
    
    Public Delegate Sub VIEW_MEMBER_DETAILSRowChangeEventHandler(ByVal sender As Object, ByVal e As VIEW_MEMBER_DETAILSRowChangeEvent)
    
    Public Delegate Sub memdetRowChangeEventHandler(ByVal sender As Object, ByVal e As memdetRowChangeEvent)
    
    Public Delegate Sub MAINCASHRECEIPTRowChangeEventHandler(ByVal sender As Object, ByVal e As MAINCASHRECEIPTRowChangeEvent)
    
    Public Delegate Sub HOUSE_BILLRowChangeEventHandler(ByVal sender As Object, ByVal e As HOUSE_BILLRowChangeEvent)
    
    Public Delegate Sub FACILITY_RPTRowChangeEventHandler(ByVal sender As Object, ByVal e As FACILITY_RPTRowChangeEvent)
    
    Public Delegate Sub facility_viewRowChangeEventHandler(ByVal sender As Object, ByVal e As facility_viewRowChangeEvent)
    
    Public Delegate Sub view_kot_detailsRowChangeEventHandler(ByVal sender As Object, ByVal e As view_kot_detailsRowChangeEvent)
    
    Public Delegate Sub VIEW_GNC_BILLDETAILSRowChangeEventHandler(ByVal sender As Object, ByVal e As VIEW_GNC_BILLDETAILSRowChangeEvent)
    
    Public Delegate Sub VIEW_MEM_REP_RECDETRowChangeEventHandler(ByVal sender As Object, ByVal e As VIEW_MEM_REP_RECDETRowChangeEvent)
    
    Public Delegate Sub VIEW_MEM_REP_ADDRESSRowChangeEventHandler(ByVal sender As Object, ByVal e As VIEW_MEM_REP_ADDRESSRowChangeEvent)
    
    Public Delegate Sub VIEW_MEM_REP_CLUBRowChangeEventHandler(ByVal sender As Object, ByVal e As VIEW_MEM_REP_CLUBRowChangeEvent)
    
    Public Delegate Sub VIEW_MEM_REP_Corp_Mem_ListRowChangeEventHandler(ByVal sender As Object, ByVal e As VIEW_MEM_REP_Corp_Mem_ListRowChangeEvent)
    
    Public Delegate Sub VIEW_MEM_REP_Corp_MstRowChangeEventHandler(ByVal sender As Object, ByVal e As VIEW_MEM_REP_Corp_MstRowChangeEvent)
    
    Public Delegate Sub VIEW_MEM_REP_DEPENDENT_ADDRESSRowChangeEventHandler(ByVal sender As Object, ByVal e As VIEW_MEM_REP_DEPENDENT_ADDRESSRowChangeEvent)
    
    Public Delegate Sub VIEW_MEM_REP_PROPOSER_SECONDERRowChangeEventHandler(ByVal sender As Object, ByVal e As VIEW_MEM_REP_PROPOSER_SECONDERRowChangeEvent)
    
    Public Delegate Sub VIEW_MEM_REP_QUALIFICATIONRowChangeEventHandler(ByVal sender As Object, ByVal e As VIEW_MEM_REP_QUALIFICATIONRowChangeEvent)
    
    Public Delegate Sub VIEW_MEM_REP_RELATIONRowChangeEventHandler(ByVal sender As Object, ByVal e As VIEW_MEM_REP_RELATIONRowChangeEvent)
    
    Public Delegate Sub VIEW_MEM_REP_STATUSRowChangeEventHandler(ByVal sender As Object, ByVal e As VIEW_MEM_REP_STATUSRowChangeEvent)
    
    Public Delegate Sub VIEW_MEM_REP_STICKERRowChangeEventHandler(ByVal sender As Object, ByVal e As VIEW_MEM_REP_STICKERRowChangeEvent)
    
    Public Delegate Sub VIEW_MEM_RPRRowChangeEventHandler(ByVal sender As Object, ByVal e As VIEW_MEM_RPRRowChangeEvent)
    
    Public Delegate Sub VIEW_MEM_REP_SPORTSRowChangeEventHandler(ByVal sender As Object, ByVal e As VIEW_MEM_REP_SPORTSRowChangeEvent)
    
    Public Delegate Sub VIEW_MEM_REP_ACTIVE_LISTRowChangeEventHandler(ByVal sender As Object, ByVal e As VIEW_MEM_REP_ACTIVE_LISTRowChangeEvent)
    
    Public Delegate Sub VIEW_MEM_REP_DEPENDENTRowChangeEventHandler(ByVal sender As Object, ByVal e As VIEW_MEM_REP_DEPENDENTRowChangeEvent)
    
    Public Delegate Sub VIEW_SUBS_SUMMARYRowChangeEventHandler(ByVal sender As Object, ByVal e As VIEW_SUBS_SUMMARYRowChangeEvent)
    
    Public Delegate Sub VIEW_MEM_REP_SUBS_FLT_MUMRowChangeEventHandler(ByVal sender As Object, ByVal e As VIEW_MEM_REP_SUBS_FLT_MUMRowChangeEvent)
    
    Public Delegate Sub VIEW_FACILITY_LISTRowChangeEventHandler(ByVal sender As Object, ByVal e As VIEW_FACILITY_LISTRowChangeEvent)
    
    Public Delegate Sub VIEW_ALU_BILLDETAILSRowChangeEventHandler(ByVal sender As Object, ByVal e As VIEW_ALU_BILLDETAILSRowChangeEvent)
    
    Public Delegate Sub View_Mem_MemberTypeConversionRowChangeEventHandler(ByVal sender As Object, ByVal e As View_Mem_MemberTypeConversionRowChangeEvent)
    
    Public Delegate Sub View_Mem_MemberstatuslistRowChangeEventHandler(ByVal sender As Object, ByVal e As View_Mem_MemberstatuslistRowChangeEvent)
    
    Public Delegate Sub View_Rec_DetRowChangeEventHandler(ByVal sender As Object, ByVal e As View_Rec_DetRowChangeEvent)
    
    Public Delegate Sub MM_MEMBERSTRENGTHRowChangeEventHandler(ByVal sender As Object, ByVal e As MM_MEMBERSTRENGTHRowChangeEvent)
    
    Public Delegate Sub VW_UNITWISE_MEMBERRowChangeEventHandler(ByVal sender As Object, ByVal e As VW_UNITWISE_MEMBERRowChangeEvent)
    
    Public Delegate Sub mm_membermasterRowChangeEventHandler(ByVal sender As Object, ByVal e As mm_membermasterRowChangeEvent)
    
    Public Delegate Sub VIEW_POS_SUMMARYRowChangeEventHandler(ByVal sender As Object, ByVal e As VIEW_POS_SUMMARYRowChangeEvent)
    
    Public Delegate Sub VIEW_MEM_CREDIT_DEFAULTERRowChangeEventHandler(ByVal sender As Object, ByVal e As VIEW_MEM_CREDIT_DEFAULTERRowChangeEvent)
    
    Public Delegate Sub month_billRowChangeEventHandler(ByVal sender As Object, ByVal e As month_billRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PosMasterDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnPOSCode As DataColumn
        
        Private columnPOSSeqno As DataColumn
        
        Private columnPOSDesc As DataColumn
        
        Private columnSalesCode As DataColumn
        
        Private columnStockCtrl As DataColumn
        
        Private columnCashbox As DataColumn
        
        Private columnCashAcctin As DataColumn
        
        Private columnCashSideledger As DataColumn
        
        Private columnCheque As DataColumn
        
        Private columnChequeAcctin As DataColumn
        
        Private columnChequeSideledger As DataColumn
        
        Private columnSalesAcctin As DataColumn
        
        Private columnSalesAcctdesc As DataColumn
        
        Private columnSalesSideledger As DataColumn
        
        Private columnRoom As DataColumn
        
        Private columnRoomAcctin As DataColumn
        
        Private columnRoomSideledger As DataColumn
        
        Private columnCoupon As DataColumn
        
        Private columnCouponAcctin As DataColumn
        
        Private columnCouponSideledger As DataColumn
        
        Private columnBillAcctin As DataColumn
        
        Private columnBillSideledger As DataColumn
        
        Private columnTipsAcctin As DataColumn
        
        Private columnTipsSideledger As DataColumn
        
        Private columnUpduserid As DataColumn
        
        Private columnUpddatetime As DataColumn
        
        Private columnRowid As DataColumn
        
        Private columnDiscountAcctIn As DataColumn
        
        Private columnDiscountSLAcctIn As DataColumn
        
        Private columnFreeze As DataColumn
        
        Private columnAddUSerId As DataColumn
        
        Private columnAddDateTime As DataColumn
        
        Private columnsalesaccountin As DataColumn
        
        Private columnPACKINGACCTIN As DataColumn
        
        Private columnPACKINGDESC As DataColumn
        
        Private columnSTORESTATUS As DataColumn
        
        Private columnPACKINGPERCENT As DataColumn
        
        Private columnORDERBYNO As DataColumn
        
        Private columnORDER As DataColumn
        
        Friend Sub New()
            MyBase.New("PosMaster")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property POSCodeColumn As DataColumn
            Get
                Return Me.columnPOSCode
            End Get
        End Property
        
        Friend ReadOnly Property POSSeqnoColumn As DataColumn
            Get
                Return Me.columnPOSSeqno
            End Get
        End Property
        
        Friend ReadOnly Property POSDescColumn As DataColumn
            Get
                Return Me.columnPOSDesc
            End Get
        End Property
        
        Friend ReadOnly Property SalesCodeColumn As DataColumn
            Get
                Return Me.columnSalesCode
            End Get
        End Property
        
        Friend ReadOnly Property StockCtrlColumn As DataColumn
            Get
                Return Me.columnStockCtrl
            End Get
        End Property
        
        Friend ReadOnly Property CashboxColumn As DataColumn
            Get
                Return Me.columnCashbox
            End Get
        End Property
        
        Friend ReadOnly Property CashAcctinColumn As DataColumn
            Get
                Return Me.columnCashAcctin
            End Get
        End Property
        
        Friend ReadOnly Property CashSideledgerColumn As DataColumn
            Get
                Return Me.columnCashSideledger
            End Get
        End Property
        
        Friend ReadOnly Property ChequeColumn As DataColumn
            Get
                Return Me.columnCheque
            End Get
        End Property
        
        Friend ReadOnly Property ChequeAcctinColumn As DataColumn
            Get
                Return Me.columnChequeAcctin
            End Get
        End Property
        
        Friend ReadOnly Property ChequeSideledgerColumn As DataColumn
            Get
                Return Me.columnChequeSideledger
            End Get
        End Property
        
        Friend ReadOnly Property SalesAcctinColumn As DataColumn
            Get
                Return Me.columnSalesAcctin
            End Get
        End Property
        
        Friend ReadOnly Property SalesAcctdescColumn As DataColumn
            Get
                Return Me.columnSalesAcctdesc
            End Get
        End Property
        
        Friend ReadOnly Property SalesSideledgerColumn As DataColumn
            Get
                Return Me.columnSalesSideledger
            End Get
        End Property
        
        Friend ReadOnly Property RoomColumn As DataColumn
            Get
                Return Me.columnRoom
            End Get
        End Property
        
        Friend ReadOnly Property RoomAcctinColumn As DataColumn
            Get
                Return Me.columnRoomAcctin
            End Get
        End Property
        
        Friend ReadOnly Property RoomSideledgerColumn As DataColumn
            Get
                Return Me.columnRoomSideledger
            End Get
        End Property
        
        Friend ReadOnly Property CouponColumn As DataColumn
            Get
                Return Me.columnCoupon
            End Get
        End Property
        
        Friend ReadOnly Property CouponAcctinColumn As DataColumn
            Get
                Return Me.columnCouponAcctin
            End Get
        End Property
        
        Friend ReadOnly Property CouponSideledgerColumn As DataColumn
            Get
                Return Me.columnCouponSideledger
            End Get
        End Property
        
        Friend ReadOnly Property BillAcctinColumn As DataColumn
            Get
                Return Me.columnBillAcctin
            End Get
        End Property
        
        Friend ReadOnly Property BillSideledgerColumn As DataColumn
            Get
                Return Me.columnBillSideledger
            End Get
        End Property
        
        Friend ReadOnly Property TipsAcctinColumn As DataColumn
            Get
                Return Me.columnTipsAcctin
            End Get
        End Property
        
        Friend ReadOnly Property TipsSideledgerColumn As DataColumn
            Get
                Return Me.columnTipsSideledger
            End Get
        End Property
        
        Friend ReadOnly Property UpduseridColumn As DataColumn
            Get
                Return Me.columnUpduserid
            End Get
        End Property
        
        Friend ReadOnly Property UpddatetimeColumn As DataColumn
            Get
                Return Me.columnUpddatetime
            End Get
        End Property
        
        Friend ReadOnly Property RowidColumn As DataColumn
            Get
                Return Me.columnRowid
            End Get
        End Property
        
        Friend ReadOnly Property DiscountAcctInColumn As DataColumn
            Get
                Return Me.columnDiscountAcctIn
            End Get
        End Property
        
        Friend ReadOnly Property DiscountSLAcctInColumn As DataColumn
            Get
                Return Me.columnDiscountSLAcctIn
            End Get
        End Property
        
        Friend ReadOnly Property FreezeColumn As DataColumn
            Get
                Return Me.columnFreeze
            End Get
        End Property
        
        Friend ReadOnly Property AddUSerIdColumn As DataColumn
            Get
                Return Me.columnAddUSerId
            End Get
        End Property
        
        Friend ReadOnly Property AddDateTimeColumn As DataColumn
            Get
                Return Me.columnAddDateTime
            End Get
        End Property
        
        Friend ReadOnly Property salesaccountinColumn As DataColumn
            Get
                Return Me.columnsalesaccountin
            End Get
        End Property
        
        Friend ReadOnly Property PACKINGACCTINColumn As DataColumn
            Get
                Return Me.columnPACKINGACCTIN
            End Get
        End Property
        
        Friend ReadOnly Property PACKINGDESCColumn As DataColumn
            Get
                Return Me.columnPACKINGDESC
            End Get
        End Property
        
        Friend ReadOnly Property STORESTATUSColumn As DataColumn
            Get
                Return Me.columnSTORESTATUS
            End Get
        End Property
        
        Friend ReadOnly Property PACKINGPERCENTColumn As DataColumn
            Get
                Return Me.columnPACKINGPERCENT
            End Get
        End Property
        
        Friend ReadOnly Property ORDERBYNOColumn As DataColumn
            Get
                Return Me.columnORDERBYNO
            End Get
        End Property
        
        Friend ReadOnly Property ORDERColumn As DataColumn
            Get
                Return Me.columnORDER
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PosMasterRow
            Get
                Return CType(Me.Rows(index),PosMasterRow)
            End Get
        End Property
        
        Public Event PosMasterRowChanged As PosMasterRowChangeEventHandler
        
        Public Event PosMasterRowChanging As PosMasterRowChangeEventHandler
        
        Public Event PosMasterRowDeleted As PosMasterRowChangeEventHandler
        
        Public Event PosMasterRowDeleting As PosMasterRowChangeEventHandler
        
        Public Overloads Sub AddPosMasterRow(ByVal row As PosMasterRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPosMasterRow( _
                    ByVal POSCode As String,  _
                    ByVal POSSeqno As Decimal,  _
                    ByVal POSDesc As String,  _
                    ByVal SalesCode As String,  _
                    ByVal StockCtrl As String,  _
                    ByVal Cashbox As String,  _
                    ByVal CashAcctin As String,  _
                    ByVal CashSideledger As String,  _
                    ByVal Cheque As String,  _
                    ByVal ChequeAcctin As String,  _
                    ByVal ChequeSideledger As String,  _
                    ByVal SalesAcctin As String,  _
                    ByVal SalesAcctdesc As String,  _
                    ByVal SalesSideledger As String,  _
                    ByVal Room As String,  _
                    ByVal RoomAcctin As String,  _
                    ByVal RoomSideledger As String,  _
                    ByVal Coupon As String,  _
                    ByVal CouponAcctin As String,  _
                    ByVal CouponSideledger As String,  _
                    ByVal BillAcctin As String,  _
                    ByVal BillSideledger As String,  _
                    ByVal TipsAcctin As String,  _
                    ByVal TipsSideledger As String,  _
                    ByVal Upduserid As String,  _
                    ByVal Upddatetime As Date,  _
                    ByVal Rowid As Decimal,  _
                    ByVal DiscountAcctIn As String,  _
                    ByVal DiscountSLAcctIn As String,  _
                    ByVal Freeze As String,  _
                    ByVal AddUSerId As String,  _
                    ByVal AddDateTime As Date,  _
                    ByVal salesaccountin As String,  _
                    ByVal PACKINGACCTIN As String,  _
                    ByVal PACKINGDESC As String,  _
                    ByVal STORESTATUS As String,  _
                    ByVal PACKINGPERCENT As Decimal,  _
                    ByVal ORDERBYNO As Integer,  _
                    ByVal ORDER As Integer) As PosMasterRow
            Dim rowPosMasterRow As PosMasterRow = CType(Me.NewRow,PosMasterRow)
            rowPosMasterRow.ItemArray = New Object() {POSCode, POSSeqno, POSDesc, SalesCode, StockCtrl, Cashbox, CashAcctin, CashSideledger, Cheque, ChequeAcctin, ChequeSideledger, SalesAcctin, SalesAcctdesc, SalesSideledger, Room, RoomAcctin, RoomSideledger, Coupon, CouponAcctin, CouponSideledger, BillAcctin, BillSideledger, TipsAcctin, TipsSideledger, Upduserid, Upddatetime, Rowid, DiscountAcctIn, DiscountSLAcctIn, Freeze, AddUSerId, AddDateTime, salesaccountin, PACKINGACCTIN, PACKINGDESC, STORESTATUS, PACKINGPERCENT, ORDERBYNO, ORDER}
            Me.Rows.Add(rowPosMasterRow)
            Return rowPosMasterRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PosMasterDataTable = CType(MyBase.Clone,PosMasterDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PosMasterDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnPOSCode = Me.Columns("POSCode")
            Me.columnPOSSeqno = Me.Columns("POSSeqno")
            Me.columnPOSDesc = Me.Columns("POSDesc")
            Me.columnSalesCode = Me.Columns("SalesCode")
            Me.columnStockCtrl = Me.Columns("StockCtrl")
            Me.columnCashbox = Me.Columns("Cashbox")
            Me.columnCashAcctin = Me.Columns("CashAcctin")
            Me.columnCashSideledger = Me.Columns("CashSideledger")
            Me.columnCheque = Me.Columns("Cheque")
            Me.columnChequeAcctin = Me.Columns("ChequeAcctin")
            Me.columnChequeSideledger = Me.Columns("ChequeSideledger")
            Me.columnSalesAcctin = Me.Columns("SalesAcctin")
            Me.columnSalesAcctdesc = Me.Columns("SalesAcctdesc")
            Me.columnSalesSideledger = Me.Columns("SalesSideledger")
            Me.columnRoom = Me.Columns("Room")
            Me.columnRoomAcctin = Me.Columns("RoomAcctin")
            Me.columnRoomSideledger = Me.Columns("RoomSideledger")
            Me.columnCoupon = Me.Columns("Coupon")
            Me.columnCouponAcctin = Me.Columns("CouponAcctin")
            Me.columnCouponSideledger = Me.Columns("CouponSideledger")
            Me.columnBillAcctin = Me.Columns("BillAcctin")
            Me.columnBillSideledger = Me.Columns("BillSideledger")
            Me.columnTipsAcctin = Me.Columns("TipsAcctin")
            Me.columnTipsSideledger = Me.Columns("TipsSideledger")
            Me.columnUpduserid = Me.Columns("Upduserid")
            Me.columnUpddatetime = Me.Columns("Upddatetime")
            Me.columnRowid = Me.Columns("Rowid")
            Me.columnDiscountAcctIn = Me.Columns("DiscountAcctIn")
            Me.columnDiscountSLAcctIn = Me.Columns("DiscountSLAcctIn")
            Me.columnFreeze = Me.Columns("Freeze")
            Me.columnAddUSerId = Me.Columns("AddUSerId")
            Me.columnAddDateTime = Me.Columns("AddDateTime")
            Me.columnsalesaccountin = Me.Columns("salesaccountin")
            Me.columnPACKINGACCTIN = Me.Columns("PACKINGACCTIN")
            Me.columnPACKINGDESC = Me.Columns("PACKINGDESC")
            Me.columnSTORESTATUS = Me.Columns("STORESTATUS")
            Me.columnPACKINGPERCENT = Me.Columns("PACKINGPERCENT")
            Me.columnORDERBYNO = Me.Columns("ORDERBYNO")
            Me.columnORDER = Me.Columns("ORDER")
        End Sub
        
        Private Sub InitClass()
            Me.columnPOSCode = New DataColumn("POSCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPOSCode)
            Me.columnPOSSeqno = New DataColumn("POSSeqno", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPOSSeqno)
            Me.columnPOSDesc = New DataColumn("POSDesc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPOSDesc)
            Me.columnSalesCode = New DataColumn("SalesCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSalesCode)
            Me.columnStockCtrl = New DataColumn("StockCtrl", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStockCtrl)
            Me.columnCashbox = New DataColumn("Cashbox", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCashbox)
            Me.columnCashAcctin = New DataColumn("CashAcctin", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCashAcctin)
            Me.columnCashSideledger = New DataColumn("CashSideledger", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCashSideledger)
            Me.columnCheque = New DataColumn("Cheque", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCheque)
            Me.columnChequeAcctin = New DataColumn("ChequeAcctin", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnChequeAcctin)
            Me.columnChequeSideledger = New DataColumn("ChequeSideledger", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnChequeSideledger)
            Me.columnSalesAcctin = New DataColumn("SalesAcctin", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSalesAcctin)
            Me.columnSalesAcctdesc = New DataColumn("SalesAcctdesc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSalesAcctdesc)
            Me.columnSalesSideledger = New DataColumn("SalesSideledger", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSalesSideledger)
            Me.columnRoom = New DataColumn("Room", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRoom)
            Me.columnRoomAcctin = New DataColumn("RoomAcctin", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRoomAcctin)
            Me.columnRoomSideledger = New DataColumn("RoomSideledger", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRoomSideledger)
            Me.columnCoupon = New DataColumn("Coupon", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCoupon)
            Me.columnCouponAcctin = New DataColumn("CouponAcctin", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCouponAcctin)
            Me.columnCouponSideledger = New DataColumn("CouponSideledger", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCouponSideledger)
            Me.columnBillAcctin = New DataColumn("BillAcctin", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBillAcctin)
            Me.columnBillSideledger = New DataColumn("BillSideledger", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBillSideledger)
            Me.columnTipsAcctin = New DataColumn("TipsAcctin", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTipsAcctin)
            Me.columnTipsSideledger = New DataColumn("TipsSideledger", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTipsSideledger)
            Me.columnUpduserid = New DataColumn("Upduserid", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUpduserid)
            Me.columnUpddatetime = New DataColumn("Upddatetime", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUpddatetime)
            Me.columnRowid = New DataColumn("Rowid", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRowid)
            Me.columnDiscountAcctIn = New DataColumn("DiscountAcctIn", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDiscountAcctIn)
            Me.columnDiscountSLAcctIn = New DataColumn("DiscountSLAcctIn", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDiscountSLAcctIn)
            Me.columnFreeze = New DataColumn("Freeze", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFreeze)
            Me.columnAddUSerId = New DataColumn("AddUSerId", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAddUSerId)
            Me.columnAddDateTime = New DataColumn("AddDateTime", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAddDateTime)
            Me.columnsalesaccountin = New DataColumn("salesaccountin", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsalesaccountin)
            Me.columnPACKINGACCTIN = New DataColumn("PACKINGACCTIN", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPACKINGACCTIN)
            Me.columnPACKINGDESC = New DataColumn("PACKINGDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPACKINGDESC)
            Me.columnSTORESTATUS = New DataColumn("STORESTATUS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSTORESTATUS)
            Me.columnPACKINGPERCENT = New DataColumn("PACKINGPERCENT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPACKINGPERCENT)
            Me.columnORDERBYNO = New DataColumn("ORDERBYNO", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnORDERBYNO)
            Me.columnORDER = New DataColumn("ORDER", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnORDER)
            Me.columnPOSCode.AllowDBNull = false
        End Sub
        
        Public Function NewPosMasterRow() As PosMasterRow
            Return CType(Me.NewRow,PosMasterRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PosMasterRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PosMasterRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PosMasterRowChangedEvent) Is Nothing) Then
                RaiseEvent PosMasterRowChanged(Me, New PosMasterRowChangeEvent(CType(e.Row,PosMasterRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PosMasterRowChangingEvent) Is Nothing) Then
                RaiseEvent PosMasterRowChanging(Me, New PosMasterRowChangeEvent(CType(e.Row,PosMasterRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PosMasterRowDeletedEvent) Is Nothing) Then
                RaiseEvent PosMasterRowDeleted(Me, New PosMasterRowChangeEvent(CType(e.Row,PosMasterRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PosMasterRowDeletingEvent) Is Nothing) Then
                RaiseEvent PosMasterRowDeleting(Me, New PosMasterRowChangeEvent(CType(e.Row,PosMasterRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePosMasterRow(ByVal row As PosMasterRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PosMasterRow
        Inherits DataRow
        
        Private tablePosMaster As PosMasterDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePosMaster = CType(Me.Table,PosMasterDataTable)
        End Sub
        
        Public Property POSCode As String
            Get
                Return CType(Me(Me.tablePosMaster.POSCodeColumn),String)
            End Get
            Set
                Me(Me.tablePosMaster.POSCodeColumn) = value
            End Set
        End Property
        
        Public Property POSSeqno As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePosMaster.POSSeqnoColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePosMaster.POSSeqnoColumn) = value
            End Set
        End Property
        
        Public Property POSDesc As String
            Get
                Try 
                    Return CType(Me(Me.tablePosMaster.POSDescColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePosMaster.POSDescColumn) = value
            End Set
        End Property
        
        Public Property SalesCode As String
            Get
                Try 
                    Return CType(Me(Me.tablePosMaster.SalesCodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePosMaster.SalesCodeColumn) = value
            End Set
        End Property
        
        Public Property StockCtrl As String
            Get
                Try 
                    Return CType(Me(Me.tablePosMaster.StockCtrlColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePosMaster.StockCtrlColumn) = value
            End Set
        End Property
        
        Public Property Cashbox As String
            Get
                Try 
                    Return CType(Me(Me.tablePosMaster.CashboxColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePosMaster.CashboxColumn) = value
            End Set
        End Property
        
        Public Property CashAcctin As String
            Get
                Try 
                    Return CType(Me(Me.tablePosMaster.CashAcctinColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePosMaster.CashAcctinColumn) = value
            End Set
        End Property
        
        Public Property CashSideledger As String
            Get
                Try 
                    Return CType(Me(Me.tablePosMaster.CashSideledgerColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePosMaster.CashSideledgerColumn) = value
            End Set
        End Property
        
        Public Property Cheque As String
            Get
                Try 
                    Return CType(Me(Me.tablePosMaster.ChequeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePosMaster.ChequeColumn) = value
            End Set
        End Property
        
        Public Property ChequeAcctin As String
            Get
                Try 
                    Return CType(Me(Me.tablePosMaster.ChequeAcctinColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePosMaster.ChequeAcctinColumn) = value
            End Set
        End Property
        
        Public Property ChequeSideledger As String
            Get
                Try 
                    Return CType(Me(Me.tablePosMaster.ChequeSideledgerColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePosMaster.ChequeSideledgerColumn) = value
            End Set
        End Property
        
        Public Property SalesAcctin As String
            Get
                Try 
                    Return CType(Me(Me.tablePosMaster.SalesAcctinColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePosMaster.SalesAcctinColumn) = value
            End Set
        End Property
        
        Public Property SalesAcctdesc As String
            Get
                Try 
                    Return CType(Me(Me.tablePosMaster.SalesAcctdescColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePosMaster.SalesAcctdescColumn) = value
            End Set
        End Property
        
        Public Property SalesSideledger As String
            Get
                Try 
                    Return CType(Me(Me.tablePosMaster.SalesSideledgerColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePosMaster.SalesSideledgerColumn) = value
            End Set
        End Property
        
        Public Property Room As String
            Get
                Try 
                    Return CType(Me(Me.tablePosMaster.RoomColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePosMaster.RoomColumn) = value
            End Set
        End Property
        
        Public Property RoomAcctin As String
            Get
                Try 
                    Return CType(Me(Me.tablePosMaster.RoomAcctinColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePosMaster.RoomAcctinColumn) = value
            End Set
        End Property
        
        Public Property RoomSideledger As String
            Get
                Try 
                    Return CType(Me(Me.tablePosMaster.RoomSideledgerColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePosMaster.RoomSideledgerColumn) = value
            End Set
        End Property
        
        Public Property Coupon As String
            Get
                Try 
                    Return CType(Me(Me.tablePosMaster.CouponColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePosMaster.CouponColumn) = value
            End Set
        End Property
        
        Public Property CouponAcctin As String
            Get
                Try 
                    Return CType(Me(Me.tablePosMaster.CouponAcctinColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePosMaster.CouponAcctinColumn) = value
            End Set
        End Property
        
        Public Property CouponSideledger As String
            Get
                Try 
                    Return CType(Me(Me.tablePosMaster.CouponSideledgerColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePosMaster.CouponSideledgerColumn) = value
            End Set
        End Property
        
        Public Property BillAcctin As String
            Get
                Try 
                    Return CType(Me(Me.tablePosMaster.BillAcctinColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePosMaster.BillAcctinColumn) = value
            End Set
        End Property
        
        Public Property BillSideledger As String
            Get
                Try 
                    Return CType(Me(Me.tablePosMaster.BillSideledgerColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePosMaster.BillSideledgerColumn) = value
            End Set
        End Property
        
        Public Property TipsAcctin As String
            Get
                Try 
                    Return CType(Me(Me.tablePosMaster.TipsAcctinColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePosMaster.TipsAcctinColumn) = value
            End Set
        End Property
        
        Public Property TipsSideledger As String
            Get
                Try 
                    Return CType(Me(Me.tablePosMaster.TipsSideledgerColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePosMaster.TipsSideledgerColumn) = value
            End Set
        End Property
        
        Public Property Upduserid As String
            Get
                Try 
                    Return CType(Me(Me.tablePosMaster.UpduseridColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePosMaster.UpduseridColumn) = value
            End Set
        End Property
        
        Public Property Upddatetime As Date
            Get
                Try 
                    Return CType(Me(Me.tablePosMaster.UpddatetimeColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePosMaster.UpddatetimeColumn) = value
            End Set
        End Property
        
        Public Property Rowid As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePosMaster.RowidColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePosMaster.RowidColumn) = value
            End Set
        End Property
        
        Public Property DiscountAcctIn As String
            Get
                Try 
                    Return CType(Me(Me.tablePosMaster.DiscountAcctInColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePosMaster.DiscountAcctInColumn) = value
            End Set
        End Property
        
        Public Property DiscountSLAcctIn As String
            Get
                Try 
                    Return CType(Me(Me.tablePosMaster.DiscountSLAcctInColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePosMaster.DiscountSLAcctInColumn) = value
            End Set
        End Property
        
        Public Property Freeze As String
            Get
                Try 
                    Return CType(Me(Me.tablePosMaster.FreezeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePosMaster.FreezeColumn) = value
            End Set
        End Property
        
        Public Property AddUSerId As String
            Get
                Try 
                    Return CType(Me(Me.tablePosMaster.AddUSerIdColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePosMaster.AddUSerIdColumn) = value
            End Set
        End Property
        
        Public Property AddDateTime As Date
            Get
                Try 
                    Return CType(Me(Me.tablePosMaster.AddDateTimeColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePosMaster.AddDateTimeColumn) = value
            End Set
        End Property
        
        Public Property salesaccountin As String
            Get
                Try 
                    Return CType(Me(Me.tablePosMaster.salesaccountinColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePosMaster.salesaccountinColumn) = value
            End Set
        End Property
        
        Public Property PACKINGACCTIN As String
            Get
                Try 
                    Return CType(Me(Me.tablePosMaster.PACKINGACCTINColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePosMaster.PACKINGACCTINColumn) = value
            End Set
        End Property
        
        Public Property PACKINGDESC As String
            Get
                Try 
                    Return CType(Me(Me.tablePosMaster.PACKINGDESCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePosMaster.PACKINGDESCColumn) = value
            End Set
        End Property
        
        Public Property STORESTATUS As String
            Get
                Try 
                    Return CType(Me(Me.tablePosMaster.STORESTATUSColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePosMaster.STORESTATUSColumn) = value
            End Set
        End Property
        
        Public Property PACKINGPERCENT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePosMaster.PACKINGPERCENTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePosMaster.PACKINGPERCENTColumn) = value
            End Set
        End Property
        
        Public Property ORDERBYNO As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePosMaster.ORDERBYNOColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePosMaster.ORDERBYNOColumn) = value
            End Set
        End Property
        
        Public Property ORDER As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePosMaster.ORDERColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePosMaster.ORDERColumn) = value
            End Set
        End Property
        
        Public Function IsPOSSeqnoNull() As Boolean
            Return Me.IsNull(Me.tablePosMaster.POSSeqnoColumn)
        End Function
        
        Public Sub SetPOSSeqnoNull()
            Me(Me.tablePosMaster.POSSeqnoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPOSDescNull() As Boolean
            Return Me.IsNull(Me.tablePosMaster.POSDescColumn)
        End Function
        
        Public Sub SetPOSDescNull()
            Me(Me.tablePosMaster.POSDescColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSalesCodeNull() As Boolean
            Return Me.IsNull(Me.tablePosMaster.SalesCodeColumn)
        End Function
        
        Public Sub SetSalesCodeNull()
            Me(Me.tablePosMaster.SalesCodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStockCtrlNull() As Boolean
            Return Me.IsNull(Me.tablePosMaster.StockCtrlColumn)
        End Function
        
        Public Sub SetStockCtrlNull()
            Me(Me.tablePosMaster.StockCtrlColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCashboxNull() As Boolean
            Return Me.IsNull(Me.tablePosMaster.CashboxColumn)
        End Function
        
        Public Sub SetCashboxNull()
            Me(Me.tablePosMaster.CashboxColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCashAcctinNull() As Boolean
            Return Me.IsNull(Me.tablePosMaster.CashAcctinColumn)
        End Function
        
        Public Sub SetCashAcctinNull()
            Me(Me.tablePosMaster.CashAcctinColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCashSideledgerNull() As Boolean
            Return Me.IsNull(Me.tablePosMaster.CashSideledgerColumn)
        End Function
        
        Public Sub SetCashSideledgerNull()
            Me(Me.tablePosMaster.CashSideledgerColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsChequeNull() As Boolean
            Return Me.IsNull(Me.tablePosMaster.ChequeColumn)
        End Function
        
        Public Sub SetChequeNull()
            Me(Me.tablePosMaster.ChequeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsChequeAcctinNull() As Boolean
            Return Me.IsNull(Me.tablePosMaster.ChequeAcctinColumn)
        End Function
        
        Public Sub SetChequeAcctinNull()
            Me(Me.tablePosMaster.ChequeAcctinColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsChequeSideledgerNull() As Boolean
            Return Me.IsNull(Me.tablePosMaster.ChequeSideledgerColumn)
        End Function
        
        Public Sub SetChequeSideledgerNull()
            Me(Me.tablePosMaster.ChequeSideledgerColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSalesAcctinNull() As Boolean
            Return Me.IsNull(Me.tablePosMaster.SalesAcctinColumn)
        End Function
        
        Public Sub SetSalesAcctinNull()
            Me(Me.tablePosMaster.SalesAcctinColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSalesAcctdescNull() As Boolean
            Return Me.IsNull(Me.tablePosMaster.SalesAcctdescColumn)
        End Function
        
        Public Sub SetSalesAcctdescNull()
            Me(Me.tablePosMaster.SalesAcctdescColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSalesSideledgerNull() As Boolean
            Return Me.IsNull(Me.tablePosMaster.SalesSideledgerColumn)
        End Function
        
        Public Sub SetSalesSideledgerNull()
            Me(Me.tablePosMaster.SalesSideledgerColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRoomNull() As Boolean
            Return Me.IsNull(Me.tablePosMaster.RoomColumn)
        End Function
        
        Public Sub SetRoomNull()
            Me(Me.tablePosMaster.RoomColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRoomAcctinNull() As Boolean
            Return Me.IsNull(Me.tablePosMaster.RoomAcctinColumn)
        End Function
        
        Public Sub SetRoomAcctinNull()
            Me(Me.tablePosMaster.RoomAcctinColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRoomSideledgerNull() As Boolean
            Return Me.IsNull(Me.tablePosMaster.RoomSideledgerColumn)
        End Function
        
        Public Sub SetRoomSideledgerNull()
            Me(Me.tablePosMaster.RoomSideledgerColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCouponNull() As Boolean
            Return Me.IsNull(Me.tablePosMaster.CouponColumn)
        End Function
        
        Public Sub SetCouponNull()
            Me(Me.tablePosMaster.CouponColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCouponAcctinNull() As Boolean
            Return Me.IsNull(Me.tablePosMaster.CouponAcctinColumn)
        End Function
        
        Public Sub SetCouponAcctinNull()
            Me(Me.tablePosMaster.CouponAcctinColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCouponSideledgerNull() As Boolean
            Return Me.IsNull(Me.tablePosMaster.CouponSideledgerColumn)
        End Function
        
        Public Sub SetCouponSideledgerNull()
            Me(Me.tablePosMaster.CouponSideledgerColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBillAcctinNull() As Boolean
            Return Me.IsNull(Me.tablePosMaster.BillAcctinColumn)
        End Function
        
        Public Sub SetBillAcctinNull()
            Me(Me.tablePosMaster.BillAcctinColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBillSideledgerNull() As Boolean
            Return Me.IsNull(Me.tablePosMaster.BillSideledgerColumn)
        End Function
        
        Public Sub SetBillSideledgerNull()
            Me(Me.tablePosMaster.BillSideledgerColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTipsAcctinNull() As Boolean
            Return Me.IsNull(Me.tablePosMaster.TipsAcctinColumn)
        End Function
        
        Public Sub SetTipsAcctinNull()
            Me(Me.tablePosMaster.TipsAcctinColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTipsSideledgerNull() As Boolean
            Return Me.IsNull(Me.tablePosMaster.TipsSideledgerColumn)
        End Function
        
        Public Sub SetTipsSideledgerNull()
            Me(Me.tablePosMaster.TipsSideledgerColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUpduseridNull() As Boolean
            Return Me.IsNull(Me.tablePosMaster.UpduseridColumn)
        End Function
        
        Public Sub SetUpduseridNull()
            Me(Me.tablePosMaster.UpduseridColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUpddatetimeNull() As Boolean
            Return Me.IsNull(Me.tablePosMaster.UpddatetimeColumn)
        End Function
        
        Public Sub SetUpddatetimeNull()
            Me(Me.tablePosMaster.UpddatetimeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRowidNull() As Boolean
            Return Me.IsNull(Me.tablePosMaster.RowidColumn)
        End Function
        
        Public Sub SetRowidNull()
            Me(Me.tablePosMaster.RowidColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDiscountAcctInNull() As Boolean
            Return Me.IsNull(Me.tablePosMaster.DiscountAcctInColumn)
        End Function
        
        Public Sub SetDiscountAcctInNull()
            Me(Me.tablePosMaster.DiscountAcctInColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDiscountSLAcctInNull() As Boolean
            Return Me.IsNull(Me.tablePosMaster.DiscountSLAcctInColumn)
        End Function
        
        Public Sub SetDiscountSLAcctInNull()
            Me(Me.tablePosMaster.DiscountSLAcctInColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFreezeNull() As Boolean
            Return Me.IsNull(Me.tablePosMaster.FreezeColumn)
        End Function
        
        Public Sub SetFreezeNull()
            Me(Me.tablePosMaster.FreezeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAddUSerIdNull() As Boolean
            Return Me.IsNull(Me.tablePosMaster.AddUSerIdColumn)
        End Function
        
        Public Sub SetAddUSerIdNull()
            Me(Me.tablePosMaster.AddUSerIdColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAddDateTimeNull() As Boolean
            Return Me.IsNull(Me.tablePosMaster.AddDateTimeColumn)
        End Function
        
        Public Sub SetAddDateTimeNull()
            Me(Me.tablePosMaster.AddDateTimeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IssalesaccountinNull() As Boolean
            Return Me.IsNull(Me.tablePosMaster.salesaccountinColumn)
        End Function
        
        Public Sub SetsalesaccountinNull()
            Me(Me.tablePosMaster.salesaccountinColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPACKINGACCTINNull() As Boolean
            Return Me.IsNull(Me.tablePosMaster.PACKINGACCTINColumn)
        End Function
        
        Public Sub SetPACKINGACCTINNull()
            Me(Me.tablePosMaster.PACKINGACCTINColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPACKINGDESCNull() As Boolean
            Return Me.IsNull(Me.tablePosMaster.PACKINGDESCColumn)
        End Function
        
        Public Sub SetPACKINGDESCNull()
            Me(Me.tablePosMaster.PACKINGDESCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSTORESTATUSNull() As Boolean
            Return Me.IsNull(Me.tablePosMaster.STORESTATUSColumn)
        End Function
        
        Public Sub SetSTORESTATUSNull()
            Me(Me.tablePosMaster.STORESTATUSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPACKINGPERCENTNull() As Boolean
            Return Me.IsNull(Me.tablePosMaster.PACKINGPERCENTColumn)
        End Function
        
        Public Sub SetPACKINGPERCENTNull()
            Me(Me.tablePosMaster.PACKINGPERCENTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsORDERBYNONull() As Boolean
            Return Me.IsNull(Me.tablePosMaster.ORDERBYNOColumn)
        End Function
        
        Public Sub SetORDERBYNONull()
            Me(Me.tablePosMaster.ORDERBYNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsORDERNull() As Boolean
            Return Me.IsNull(Me.tablePosMaster.ORDERColumn)
        End Function
        
        Public Sub SetORDERNull()
            Me(Me.tablePosMaster.ORDERColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PosMasterRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PosMasterRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PosMasterRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PosMasterRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_MONTHBILLDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSLCODE As DataColumn
        
        Private columnBILLDATE As DataColumn
        
        Private columnICECREAM As DataColumn
        
        Private columnVEG As DataColumn
        
        Private columnNONVEG As DataColumn
        
        Private columnCOFFEE As DataColumn
        
        Private columnJUICES As DataColumn
        
        Private columnBEAUTYPARLOUR As DataColumn
        
        Private columnGAMES As DataColumn
        
        Private columnBREADTOAST As DataColumn
        
        Private columnCHATITEM As DataColumn
        
        Private columnBAR As DataColumn
        
        Private columnMISCELLANOUS As DataColumn
        
        Friend Sub New()
            MyBase.New("VIEW_MONTHBILL")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property SLCODEColumn As DataColumn
            Get
                Return Me.columnSLCODE
            End Get
        End Property
        
        Friend ReadOnly Property BILLDATEColumn As DataColumn
            Get
                Return Me.columnBILLDATE
            End Get
        End Property
        
        Friend ReadOnly Property ICECREAMColumn As DataColumn
            Get
                Return Me.columnICECREAM
            End Get
        End Property
        
        Friend ReadOnly Property VEGColumn As DataColumn
            Get
                Return Me.columnVEG
            End Get
        End Property
        
        Friend ReadOnly Property NONVEGColumn As DataColumn
            Get
                Return Me.columnNONVEG
            End Get
        End Property
        
        Friend ReadOnly Property COFFEEColumn As DataColumn
            Get
                Return Me.columnCOFFEE
            End Get
        End Property
        
        Friend ReadOnly Property JUICESColumn As DataColumn
            Get
                Return Me.columnJUICES
            End Get
        End Property
        
        Friend ReadOnly Property BEAUTYPARLOURColumn As DataColumn
            Get
                Return Me.columnBEAUTYPARLOUR
            End Get
        End Property
        
        Friend ReadOnly Property GAMESColumn As DataColumn
            Get
                Return Me.columnGAMES
            End Get
        End Property
        
        Friend ReadOnly Property BREADTOASTColumn As DataColumn
            Get
                Return Me.columnBREADTOAST
            End Get
        End Property
        
        Friend ReadOnly Property CHATITEMColumn As DataColumn
            Get
                Return Me.columnCHATITEM
            End Get
        End Property
        
        Friend ReadOnly Property BARColumn As DataColumn
            Get
                Return Me.columnBAR
            End Get
        End Property
        
        Friend ReadOnly Property MISCELLANOUSColumn As DataColumn
            Get
                Return Me.columnMISCELLANOUS
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VIEW_MONTHBILLRow
            Get
                Return CType(Me.Rows(index),VIEW_MONTHBILLRow)
            End Get
        End Property
        
        Public Event VIEW_MONTHBILLRowChanged As VIEW_MONTHBILLRowChangeEventHandler
        
        Public Event VIEW_MONTHBILLRowChanging As VIEW_MONTHBILLRowChangeEventHandler
        
        Public Event VIEW_MONTHBILLRowDeleted As VIEW_MONTHBILLRowChangeEventHandler
        
        Public Event VIEW_MONTHBILLRowDeleting As VIEW_MONTHBILLRowChangeEventHandler
        
        Public Overloads Sub AddVIEW_MONTHBILLRow(ByVal row As VIEW_MONTHBILLRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVIEW_MONTHBILLRow(ByVal SLCODE As String, ByVal BILLDATE As Date, ByVal ICECREAM As Decimal, ByVal VEG As Decimal, ByVal NONVEG As Decimal, ByVal COFFEE As Decimal, ByVal JUICES As Decimal, ByVal BEAUTYPARLOUR As Decimal, ByVal GAMES As Decimal, ByVal BREADTOAST As Decimal, ByVal CHATITEM As Decimal, ByVal BAR As Decimal, ByVal MISCELLANOUS As Decimal) As VIEW_MONTHBILLRow
            Dim rowVIEW_MONTHBILLRow As VIEW_MONTHBILLRow = CType(Me.NewRow,VIEW_MONTHBILLRow)
            rowVIEW_MONTHBILLRow.ItemArray = New Object() {SLCODE, BILLDATE, ICECREAM, VEG, NONVEG, COFFEE, JUICES, BEAUTYPARLOUR, GAMES, BREADTOAST, CHATITEM, BAR, MISCELLANOUS}
            Me.Rows.Add(rowVIEW_MONTHBILLRow)
            Return rowVIEW_MONTHBILLRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VIEW_MONTHBILLDataTable = CType(MyBase.Clone,VIEW_MONTHBILLDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VIEW_MONTHBILLDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnSLCODE = Me.Columns("SLCODE")
            Me.columnBILLDATE = Me.Columns("BILLDATE")
            Me.columnICECREAM = Me.Columns("ICECREAM")
            Me.columnVEG = Me.Columns("VEG")
            Me.columnNONVEG = Me.Columns("NONVEG")
            Me.columnCOFFEE = Me.Columns("COFFEE")
            Me.columnJUICES = Me.Columns("JUICES")
            Me.columnBEAUTYPARLOUR = Me.Columns("BEAUTYPARLOUR")
            Me.columnGAMES = Me.Columns("GAMES")
            Me.columnBREADTOAST = Me.Columns("BREADTOAST")
            Me.columnCHATITEM = Me.Columns("CHATITEM")
            Me.columnBAR = Me.Columns("BAR")
            Me.columnMISCELLANOUS = Me.Columns("MISCELLANOUS")
        End Sub
        
        Private Sub InitClass()
            Me.columnSLCODE = New DataColumn("SLCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSLCODE)
            Me.columnBILLDATE = New DataColumn("BILLDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBILLDATE)
            Me.columnICECREAM = New DataColumn("ICECREAM", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnICECREAM)
            Me.columnVEG = New DataColumn("VEG", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVEG)
            Me.columnNONVEG = New DataColumn("NONVEG", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNONVEG)
            Me.columnCOFFEE = New DataColumn("COFFEE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCOFFEE)
            Me.columnJUICES = New DataColumn("JUICES", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnJUICES)
            Me.columnBEAUTYPARLOUR = New DataColumn("BEAUTYPARLOUR", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBEAUTYPARLOUR)
            Me.columnGAMES = New DataColumn("GAMES", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGAMES)
            Me.columnBREADTOAST = New DataColumn("BREADTOAST", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBREADTOAST)
            Me.columnCHATITEM = New DataColumn("CHATITEM", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCHATITEM)
            Me.columnBAR = New DataColumn("BAR", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBAR)
            Me.columnMISCELLANOUS = New DataColumn("MISCELLANOUS", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMISCELLANOUS)
            Me.columnSLCODE.AllowDBNull = false
            Me.columnICECREAM.AllowDBNull = false
            Me.columnVEG.AllowDBNull = false
            Me.columnNONVEG.AllowDBNull = false
            Me.columnCOFFEE.AllowDBNull = false
            Me.columnJUICES.AllowDBNull = false
            Me.columnBEAUTYPARLOUR.AllowDBNull = false
            Me.columnGAMES.AllowDBNull = false
            Me.columnBREADTOAST.AllowDBNull = false
            Me.columnCHATITEM.AllowDBNull = false
            Me.columnBAR.AllowDBNull = false
            Me.columnMISCELLANOUS.AllowDBNull = false
        End Sub
        
        Public Function NewVIEW_MONTHBILLRow() As VIEW_MONTHBILLRow
            Return CType(Me.NewRow,VIEW_MONTHBILLRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VIEW_MONTHBILLRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VIEW_MONTHBILLRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VIEW_MONTHBILLRowChangedEvent) Is Nothing) Then
                RaiseEvent VIEW_MONTHBILLRowChanged(Me, New VIEW_MONTHBILLRowChangeEvent(CType(e.Row,VIEW_MONTHBILLRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VIEW_MONTHBILLRowChangingEvent) Is Nothing) Then
                RaiseEvent VIEW_MONTHBILLRowChanging(Me, New VIEW_MONTHBILLRowChangeEvent(CType(e.Row,VIEW_MONTHBILLRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VIEW_MONTHBILLRowDeletedEvent) Is Nothing) Then
                RaiseEvent VIEW_MONTHBILLRowDeleted(Me, New VIEW_MONTHBILLRowChangeEvent(CType(e.Row,VIEW_MONTHBILLRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VIEW_MONTHBILLRowDeletingEvent) Is Nothing) Then
                RaiseEvent VIEW_MONTHBILLRowDeleting(Me, New VIEW_MONTHBILLRowChangeEvent(CType(e.Row,VIEW_MONTHBILLRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVIEW_MONTHBILLRow(ByVal row As VIEW_MONTHBILLRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_MONTHBILLRow
        Inherits DataRow
        
        Private tableVIEW_MONTHBILL As VIEW_MONTHBILLDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVIEW_MONTHBILL = CType(Me.Table,VIEW_MONTHBILLDataTable)
        End Sub
        
        Public Property SLCODE As String
            Get
                Return CType(Me(Me.tableVIEW_MONTHBILL.SLCODEColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_MONTHBILL.SLCODEColumn) = value
            End Set
        End Property
        
        Public Property BILLDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MONTHBILL.BILLDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MONTHBILL.BILLDATEColumn) = value
            End Set
        End Property
        
        Public Property ICECREAM As Decimal
            Get
                Return CType(Me(Me.tableVIEW_MONTHBILL.ICECREAMColumn),Decimal)
            End Get
            Set
                Me(Me.tableVIEW_MONTHBILL.ICECREAMColumn) = value
            End Set
        End Property
        
        Public Property VEG As Decimal
            Get
                Return CType(Me(Me.tableVIEW_MONTHBILL.VEGColumn),Decimal)
            End Get
            Set
                Me(Me.tableVIEW_MONTHBILL.VEGColumn) = value
            End Set
        End Property
        
        Public Property NONVEG As Decimal
            Get
                Return CType(Me(Me.tableVIEW_MONTHBILL.NONVEGColumn),Decimal)
            End Get
            Set
                Me(Me.tableVIEW_MONTHBILL.NONVEGColumn) = value
            End Set
        End Property
        
        Public Property COFFEE As Decimal
            Get
                Return CType(Me(Me.tableVIEW_MONTHBILL.COFFEEColumn),Decimal)
            End Get
            Set
                Me(Me.tableVIEW_MONTHBILL.COFFEEColumn) = value
            End Set
        End Property
        
        Public Property JUICES As Decimal
            Get
                Return CType(Me(Me.tableVIEW_MONTHBILL.JUICESColumn),Decimal)
            End Get
            Set
                Me(Me.tableVIEW_MONTHBILL.JUICESColumn) = value
            End Set
        End Property
        
        Public Property BEAUTYPARLOUR As Decimal
            Get
                Return CType(Me(Me.tableVIEW_MONTHBILL.BEAUTYPARLOURColumn),Decimal)
            End Get
            Set
                Me(Me.tableVIEW_MONTHBILL.BEAUTYPARLOURColumn) = value
            End Set
        End Property
        
        Public Property GAMES As Decimal
            Get
                Return CType(Me(Me.tableVIEW_MONTHBILL.GAMESColumn),Decimal)
            End Get
            Set
                Me(Me.tableVIEW_MONTHBILL.GAMESColumn) = value
            End Set
        End Property
        
        Public Property BREADTOAST As Decimal
            Get
                Return CType(Me(Me.tableVIEW_MONTHBILL.BREADTOASTColumn),Decimal)
            End Get
            Set
                Me(Me.tableVIEW_MONTHBILL.BREADTOASTColumn) = value
            End Set
        End Property
        
        Public Property CHATITEM As Decimal
            Get
                Return CType(Me(Me.tableVIEW_MONTHBILL.CHATITEMColumn),Decimal)
            End Get
            Set
                Me(Me.tableVIEW_MONTHBILL.CHATITEMColumn) = value
            End Set
        End Property
        
        Public Property BAR As Decimal
            Get
                Return CType(Me(Me.tableVIEW_MONTHBILL.BARColumn),Decimal)
            End Get
            Set
                Me(Me.tableVIEW_MONTHBILL.BARColumn) = value
            End Set
        End Property
        
        Public Property MISCELLANOUS As Decimal
            Get
                Return CType(Me(Me.tableVIEW_MONTHBILL.MISCELLANOUSColumn),Decimal)
            End Get
            Set
                Me(Me.tableVIEW_MONTHBILL.MISCELLANOUSColumn) = value
            End Set
        End Property
        
        Public Function IsBILLDATENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MONTHBILL.BILLDATEColumn)
        End Function
        
        Public Sub SetBILLDATENull()
            Me(Me.tableVIEW_MONTHBILL.BILLDATEColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_MONTHBILLRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VIEW_MONTHBILLRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VIEW_MONTHBILLRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VIEW_MONTHBILLRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TOWER_MONTH_BILLDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSLCODE As DataColumn
        
        Private columnMNAME As DataColumn
        
        Private columnCONTADD1 As DataColumn
        
        Private columnCONTADD2 As DataColumn
        
        Private columnCONTADD3 As DataColumn
        
        Private columnCONTCITY As DataColumn
        
        Private columnCONTPIN As DataColumn
        
        Private columnOBAL As DataColumn
        
        Private columnSBILL As DataColumn
        
        Friend Sub New()
            MyBase.New("TOWER_MONTH_BILL")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property SLCODEColumn As DataColumn
            Get
                Return Me.columnSLCODE
            End Get
        End Property
        
        Friend ReadOnly Property MNAMEColumn As DataColumn
            Get
                Return Me.columnMNAME
            End Get
        End Property
        
        Friend ReadOnly Property CONTADD1Column As DataColumn
            Get
                Return Me.columnCONTADD1
            End Get
        End Property
        
        Friend ReadOnly Property CONTADD2Column As DataColumn
            Get
                Return Me.columnCONTADD2
            End Get
        End Property
        
        Friend ReadOnly Property CONTADD3Column As DataColumn
            Get
                Return Me.columnCONTADD3
            End Get
        End Property
        
        Friend ReadOnly Property CONTCITYColumn As DataColumn
            Get
                Return Me.columnCONTCITY
            End Get
        End Property
        
        Friend ReadOnly Property CONTPINColumn As DataColumn
            Get
                Return Me.columnCONTPIN
            End Get
        End Property
        
        Friend ReadOnly Property OBALColumn As DataColumn
            Get
                Return Me.columnOBAL
            End Get
        End Property
        
        Friend ReadOnly Property SBILLColumn As DataColumn
            Get
                Return Me.columnSBILL
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As TOWER_MONTH_BILLRow
            Get
                Return CType(Me.Rows(index),TOWER_MONTH_BILLRow)
            End Get
        End Property
        
        Public Event TOWER_MONTH_BILLRowChanged As TOWER_MONTH_BILLRowChangeEventHandler
        
        Public Event TOWER_MONTH_BILLRowChanging As TOWER_MONTH_BILLRowChangeEventHandler
        
        Public Event TOWER_MONTH_BILLRowDeleted As TOWER_MONTH_BILLRowChangeEventHandler
        
        Public Event TOWER_MONTH_BILLRowDeleting As TOWER_MONTH_BILLRowChangeEventHandler
        
        Public Overloads Sub AddTOWER_MONTH_BILLRow(ByVal row As TOWER_MONTH_BILLRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddTOWER_MONTH_BILLRow(ByVal SLCODE As String, ByVal MNAME As String, ByVal CONTADD1 As String, ByVal CONTADD2 As String, ByVal CONTADD3 As String, ByVal CONTCITY As String, ByVal CONTPIN As String, ByVal OBAL As Integer, ByVal SBILL As Integer) As TOWER_MONTH_BILLRow
            Dim rowTOWER_MONTH_BILLRow As TOWER_MONTH_BILLRow = CType(Me.NewRow,TOWER_MONTH_BILLRow)
            rowTOWER_MONTH_BILLRow.ItemArray = New Object() {SLCODE, MNAME, CONTADD1, CONTADD2, CONTADD3, CONTCITY, CONTPIN, OBAL, SBILL}
            Me.Rows.Add(rowTOWER_MONTH_BILLRow)
            Return rowTOWER_MONTH_BILLRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As TOWER_MONTH_BILLDataTable = CType(MyBase.Clone,TOWER_MONTH_BILLDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New TOWER_MONTH_BILLDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnSLCODE = Me.Columns("SLCODE")
            Me.columnMNAME = Me.Columns("MNAME")
            Me.columnCONTADD1 = Me.Columns("CONTADD1")
            Me.columnCONTADD2 = Me.Columns("CONTADD2")
            Me.columnCONTADD3 = Me.Columns("CONTADD3")
            Me.columnCONTCITY = Me.Columns("CONTCITY")
            Me.columnCONTPIN = Me.Columns("CONTPIN")
            Me.columnOBAL = Me.Columns("OBAL")
            Me.columnSBILL = Me.Columns("SBILL")
        End Sub
        
        Private Sub InitClass()
            Me.columnSLCODE = New DataColumn("SLCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSLCODE)
            Me.columnMNAME = New DataColumn("MNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMNAME)
            Me.columnCONTADD1 = New DataColumn("CONTADD1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCONTADD1)
            Me.columnCONTADD2 = New DataColumn("CONTADD2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCONTADD2)
            Me.columnCONTADD3 = New DataColumn("CONTADD3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCONTADD3)
            Me.columnCONTCITY = New DataColumn("CONTCITY", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCONTCITY)
            Me.columnCONTPIN = New DataColumn("CONTPIN", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCONTPIN)
            Me.columnOBAL = New DataColumn("OBAL", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOBAL)
            Me.columnSBILL = New DataColumn("SBILL", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSBILL)
            Me.columnSLCODE.AllowDBNull = false
            Me.columnOBAL.AllowDBNull = false
            Me.columnSBILL.AllowDBNull = false
        End Sub
        
        Public Function NewTOWER_MONTH_BILLRow() As TOWER_MONTH_BILLRow
            Return CType(Me.NewRow,TOWER_MONTH_BILLRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New TOWER_MONTH_BILLRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(TOWER_MONTH_BILLRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TOWER_MONTH_BILLRowChangedEvent) Is Nothing) Then
                RaiseEvent TOWER_MONTH_BILLRowChanged(Me, New TOWER_MONTH_BILLRowChangeEvent(CType(e.Row,TOWER_MONTH_BILLRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TOWER_MONTH_BILLRowChangingEvent) Is Nothing) Then
                RaiseEvent TOWER_MONTH_BILLRowChanging(Me, New TOWER_MONTH_BILLRowChangeEvent(CType(e.Row,TOWER_MONTH_BILLRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TOWER_MONTH_BILLRowDeletedEvent) Is Nothing) Then
                RaiseEvent TOWER_MONTH_BILLRowDeleted(Me, New TOWER_MONTH_BILLRowChangeEvent(CType(e.Row,TOWER_MONTH_BILLRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TOWER_MONTH_BILLRowDeletingEvent) Is Nothing) Then
                RaiseEvent TOWER_MONTH_BILLRowDeleting(Me, New TOWER_MONTH_BILLRowChangeEvent(CType(e.Row,TOWER_MONTH_BILLRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveTOWER_MONTH_BILLRow(ByVal row As TOWER_MONTH_BILLRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TOWER_MONTH_BILLRow
        Inherits DataRow
        
        Private tableTOWER_MONTH_BILL As TOWER_MONTH_BILLDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableTOWER_MONTH_BILL = CType(Me.Table,TOWER_MONTH_BILLDataTable)
        End Sub
        
        Public Property SLCODE As String
            Get
                Return CType(Me(Me.tableTOWER_MONTH_BILL.SLCODEColumn),String)
            End Get
            Set
                Me(Me.tableTOWER_MONTH_BILL.SLCODEColumn) = value
            End Set
        End Property
        
        Public Property MNAME As String
            Get
                Try 
                    Return CType(Me(Me.tableTOWER_MONTH_BILL.MNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTOWER_MONTH_BILL.MNAMEColumn) = value
            End Set
        End Property
        
        Public Property CONTADD1 As String
            Get
                Try 
                    Return CType(Me(Me.tableTOWER_MONTH_BILL.CONTADD1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTOWER_MONTH_BILL.CONTADD1Column) = value
            End Set
        End Property
        
        Public Property CONTADD2 As String
            Get
                Try 
                    Return CType(Me(Me.tableTOWER_MONTH_BILL.CONTADD2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTOWER_MONTH_BILL.CONTADD2Column) = value
            End Set
        End Property
        
        Public Property CONTADD3 As String
            Get
                Try 
                    Return CType(Me(Me.tableTOWER_MONTH_BILL.CONTADD3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTOWER_MONTH_BILL.CONTADD3Column) = value
            End Set
        End Property
        
        Public Property CONTCITY As String
            Get
                Try 
                    Return CType(Me(Me.tableTOWER_MONTH_BILL.CONTCITYColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTOWER_MONTH_BILL.CONTCITYColumn) = value
            End Set
        End Property
        
        Public Property CONTPIN As String
            Get
                Try 
                    Return CType(Me(Me.tableTOWER_MONTH_BILL.CONTPINColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTOWER_MONTH_BILL.CONTPINColumn) = value
            End Set
        End Property
        
        Public Property OBAL As Integer
            Get
                Return CType(Me(Me.tableTOWER_MONTH_BILL.OBALColumn),Integer)
            End Get
            Set
                Me(Me.tableTOWER_MONTH_BILL.OBALColumn) = value
            End Set
        End Property
        
        Public Property SBILL As Integer
            Get
                Return CType(Me(Me.tableTOWER_MONTH_BILL.SBILLColumn),Integer)
            End Get
            Set
                Me(Me.tableTOWER_MONTH_BILL.SBILLColumn) = value
            End Set
        End Property
        
        Public Function IsMNAMENull() As Boolean
            Return Me.IsNull(Me.tableTOWER_MONTH_BILL.MNAMEColumn)
        End Function
        
        Public Sub SetMNAMENull()
            Me(Me.tableTOWER_MONTH_BILL.MNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCONTADD1Null() As Boolean
            Return Me.IsNull(Me.tableTOWER_MONTH_BILL.CONTADD1Column)
        End Function
        
        Public Sub SetCONTADD1Null()
            Me(Me.tableTOWER_MONTH_BILL.CONTADD1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsCONTADD2Null() As Boolean
            Return Me.IsNull(Me.tableTOWER_MONTH_BILL.CONTADD2Column)
        End Function
        
        Public Sub SetCONTADD2Null()
            Me(Me.tableTOWER_MONTH_BILL.CONTADD2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsCONTADD3Null() As Boolean
            Return Me.IsNull(Me.tableTOWER_MONTH_BILL.CONTADD3Column)
        End Function
        
        Public Sub SetCONTADD3Null()
            Me(Me.tableTOWER_MONTH_BILL.CONTADD3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsCONTCITYNull() As Boolean
            Return Me.IsNull(Me.tableTOWER_MONTH_BILL.CONTCITYColumn)
        End Function
        
        Public Sub SetCONTCITYNull()
            Me(Me.tableTOWER_MONTH_BILL.CONTCITYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCONTPINNull() As Boolean
            Return Me.IsNull(Me.tableTOWER_MONTH_BILL.CONTPINColumn)
        End Function
        
        Public Sub SetCONTPINNull()
            Me(Me.tableTOWER_MONTH_BILL.CONTPINColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TOWER_MONTH_BILLRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As TOWER_MONTH_BILLRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As TOWER_MONTH_BILLRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As TOWER_MONTH_BILLRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MM_BILLDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnMCODE As DataColumn
        
        Private columnMNAME As DataColumn
        
        Private columnCONTADD1 As DataColumn
        
        Private columnCONTADD2 As DataColumn
        
        Private columnCONTADD3 As DataColumn
        
        Private columnCONTCITY As DataColumn
        
        Private columnCONTPIN As DataColumn
        
        Private columnOBAL As DataColumn
        
        Private columnSBILL As DataColumn
        
        Private columnSLCODE As DataColumn
        
        Private columnBILLDATE As DataColumn
        
        Private columnICECREAM As DataColumn
        
        Private columnVEG As DataColumn
        
        Private columnNONVEG As DataColumn
        
        Private columnCOFFEE As DataColumn
        
        Private columnJUICES As DataColumn
        
        Private columnBEAUTYPARLOUR As DataColumn
        
        Private columnGAMES As DataColumn
        
        Private columnBREADTOAST As DataColumn
        
        Private columnCHATITEM As DataColumn
        
        Private columnBAR As DataColumn
        
        Private columnMISCELLANOUS As DataColumn
        
        Friend Sub New()
            MyBase.New("MM_BILL")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property MCODEColumn As DataColumn
            Get
                Return Me.columnMCODE
            End Get
        End Property
        
        Friend ReadOnly Property MNAMEColumn As DataColumn
            Get
                Return Me.columnMNAME
            End Get
        End Property
        
        Friend ReadOnly Property CONTADD1Column As DataColumn
            Get
                Return Me.columnCONTADD1
            End Get
        End Property
        
        Friend ReadOnly Property CONTADD2Column As DataColumn
            Get
                Return Me.columnCONTADD2
            End Get
        End Property
        
        Friend ReadOnly Property CONTADD3Column As DataColumn
            Get
                Return Me.columnCONTADD3
            End Get
        End Property
        
        Friend ReadOnly Property CONTCITYColumn As DataColumn
            Get
                Return Me.columnCONTCITY
            End Get
        End Property
        
        Friend ReadOnly Property CONTPINColumn As DataColumn
            Get
                Return Me.columnCONTPIN
            End Get
        End Property
        
        Friend ReadOnly Property OBALColumn As DataColumn
            Get
                Return Me.columnOBAL
            End Get
        End Property
        
        Friend ReadOnly Property SBILLColumn As DataColumn
            Get
                Return Me.columnSBILL
            End Get
        End Property
        
        Friend ReadOnly Property SLCODEColumn As DataColumn
            Get
                Return Me.columnSLCODE
            End Get
        End Property
        
        Friend ReadOnly Property BILLDATEColumn As DataColumn
            Get
                Return Me.columnBILLDATE
            End Get
        End Property
        
        Friend ReadOnly Property ICECREAMColumn As DataColumn
            Get
                Return Me.columnICECREAM
            End Get
        End Property
        
        Friend ReadOnly Property VEGColumn As DataColumn
            Get
                Return Me.columnVEG
            End Get
        End Property
        
        Friend ReadOnly Property NONVEGColumn As DataColumn
            Get
                Return Me.columnNONVEG
            End Get
        End Property
        
        Friend ReadOnly Property COFFEEColumn As DataColumn
            Get
                Return Me.columnCOFFEE
            End Get
        End Property
        
        Friend ReadOnly Property JUICESColumn As DataColumn
            Get
                Return Me.columnJUICES
            End Get
        End Property
        
        Friend ReadOnly Property BEAUTYPARLOURColumn As DataColumn
            Get
                Return Me.columnBEAUTYPARLOUR
            End Get
        End Property
        
        Friend ReadOnly Property GAMESColumn As DataColumn
            Get
                Return Me.columnGAMES
            End Get
        End Property
        
        Friend ReadOnly Property BREADTOASTColumn As DataColumn
            Get
                Return Me.columnBREADTOAST
            End Get
        End Property
        
        Friend ReadOnly Property CHATITEMColumn As DataColumn
            Get
                Return Me.columnCHATITEM
            End Get
        End Property
        
        Friend ReadOnly Property BARColumn As DataColumn
            Get
                Return Me.columnBAR
            End Get
        End Property
        
        Friend ReadOnly Property MISCELLANOUSColumn As DataColumn
            Get
                Return Me.columnMISCELLANOUS
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As MM_BILLRow
            Get
                Return CType(Me.Rows(index),MM_BILLRow)
            End Get
        End Property
        
        Public Event MM_BILLRowChanged As MM_BILLRowChangeEventHandler
        
        Public Event MM_BILLRowChanging As MM_BILLRowChangeEventHandler
        
        Public Event MM_BILLRowDeleted As MM_BILLRowChangeEventHandler
        
        Public Event MM_BILLRowDeleting As MM_BILLRowChangeEventHandler
        
        Public Overloads Sub AddMM_BILLRow(ByVal row As MM_BILLRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddMM_BILLRow( _
                    ByVal MCODE As String,  _
                    ByVal MNAME As String,  _
                    ByVal CONTADD1 As String,  _
                    ByVal CONTADD2 As String,  _
                    ByVal CONTADD3 As String,  _
                    ByVal CONTCITY As String,  _
                    ByVal CONTPIN As String,  _
                    ByVal OBAL As Integer,  _
                    ByVal SBILL As Integer,  _
                    ByVal SLCODE As String,  _
                    ByVal BILLDATE As Date,  _
                    ByVal ICECREAM As Decimal,  _
                    ByVal VEG As Decimal,  _
                    ByVal NONVEG As Decimal,  _
                    ByVal COFFEE As Decimal,  _
                    ByVal JUICES As Decimal,  _
                    ByVal BEAUTYPARLOUR As Decimal,  _
                    ByVal GAMES As Decimal,  _
                    ByVal BREADTOAST As Decimal,  _
                    ByVal CHATITEM As Decimal,  _
                    ByVal BAR As Decimal,  _
                    ByVal MISCELLANOUS As Decimal) As MM_BILLRow
            Dim rowMM_BILLRow As MM_BILLRow = CType(Me.NewRow,MM_BILLRow)
            rowMM_BILLRow.ItemArray = New Object() {MCODE, MNAME, CONTADD1, CONTADD2, CONTADD3, CONTCITY, CONTPIN, OBAL, SBILL, SLCODE, BILLDATE, ICECREAM, VEG, NONVEG, COFFEE, JUICES, BEAUTYPARLOUR, GAMES, BREADTOAST, CHATITEM, BAR, MISCELLANOUS}
            Me.Rows.Add(rowMM_BILLRow)
            Return rowMM_BILLRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As MM_BILLDataTable = CType(MyBase.Clone,MM_BILLDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New MM_BILLDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnMCODE = Me.Columns("MCODE")
            Me.columnMNAME = Me.Columns("MNAME")
            Me.columnCONTADD1 = Me.Columns("CONTADD1")
            Me.columnCONTADD2 = Me.Columns("CONTADD2")
            Me.columnCONTADD3 = Me.Columns("CONTADD3")
            Me.columnCONTCITY = Me.Columns("CONTCITY")
            Me.columnCONTPIN = Me.Columns("CONTPIN")
            Me.columnOBAL = Me.Columns("OBAL")
            Me.columnSBILL = Me.Columns("SBILL")
            Me.columnSLCODE = Me.Columns("SLCODE")
            Me.columnBILLDATE = Me.Columns("BILLDATE")
            Me.columnICECREAM = Me.Columns("ICECREAM")
            Me.columnVEG = Me.Columns("VEG")
            Me.columnNONVEG = Me.Columns("NONVEG")
            Me.columnCOFFEE = Me.Columns("COFFEE")
            Me.columnJUICES = Me.Columns("JUICES")
            Me.columnBEAUTYPARLOUR = Me.Columns("BEAUTYPARLOUR")
            Me.columnGAMES = Me.Columns("GAMES")
            Me.columnBREADTOAST = Me.Columns("BREADTOAST")
            Me.columnCHATITEM = Me.Columns("CHATITEM")
            Me.columnBAR = Me.Columns("BAR")
            Me.columnMISCELLANOUS = Me.Columns("MISCELLANOUS")
        End Sub
        
        Private Sub InitClass()
            Me.columnMCODE = New DataColumn("MCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMCODE)
            Me.columnMNAME = New DataColumn("MNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMNAME)
            Me.columnCONTADD1 = New DataColumn("CONTADD1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCONTADD1)
            Me.columnCONTADD2 = New DataColumn("CONTADD2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCONTADD2)
            Me.columnCONTADD3 = New DataColumn("CONTADD3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCONTADD3)
            Me.columnCONTCITY = New DataColumn("CONTCITY", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCONTCITY)
            Me.columnCONTPIN = New DataColumn("CONTPIN", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCONTPIN)
            Me.columnOBAL = New DataColumn("OBAL", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOBAL)
            Me.columnSBILL = New DataColumn("SBILL", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSBILL)
            Me.columnSLCODE = New DataColumn("SLCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSLCODE)
            Me.columnBILLDATE = New DataColumn("BILLDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBILLDATE)
            Me.columnICECREAM = New DataColumn("ICECREAM", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnICECREAM)
            Me.columnVEG = New DataColumn("VEG", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVEG)
            Me.columnNONVEG = New DataColumn("NONVEG", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNONVEG)
            Me.columnCOFFEE = New DataColumn("COFFEE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCOFFEE)
            Me.columnJUICES = New DataColumn("JUICES", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnJUICES)
            Me.columnBEAUTYPARLOUR = New DataColumn("BEAUTYPARLOUR", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBEAUTYPARLOUR)
            Me.columnGAMES = New DataColumn("GAMES", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGAMES)
            Me.columnBREADTOAST = New DataColumn("BREADTOAST", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBREADTOAST)
            Me.columnCHATITEM = New DataColumn("CHATITEM", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCHATITEM)
            Me.columnBAR = New DataColumn("BAR", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBAR)
            Me.columnMISCELLANOUS = New DataColumn("MISCELLANOUS", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMISCELLANOUS)
            Me.Constraints.Add(New UniqueConstraint("key1", New DataColumn() {Me.columnMCODE}, false))
            Me.columnMCODE.AllowDBNull = false
            Me.columnMCODE.Unique = true
            Me.columnOBAL.AllowDBNull = false
            Me.columnSBILL.AllowDBNull = false
            Me.columnSLCODE.AllowDBNull = false
            Me.columnICECREAM.AllowDBNull = false
            Me.columnVEG.AllowDBNull = false
            Me.columnNONVEG.AllowDBNull = false
            Me.columnCOFFEE.AllowDBNull = false
            Me.columnJUICES.AllowDBNull = false
            Me.columnBEAUTYPARLOUR.AllowDBNull = false
            Me.columnGAMES.AllowDBNull = false
            Me.columnBREADTOAST.AllowDBNull = false
            Me.columnCHATITEM.AllowDBNull = false
            Me.columnBAR.AllowDBNull = false
            Me.columnMISCELLANOUS.AllowDBNull = false
        End Sub
        
        Public Function NewMM_BILLRow() As MM_BILLRow
            Return CType(Me.NewRow,MM_BILLRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New MM_BILLRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(MM_BILLRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MM_BILLRowChangedEvent) Is Nothing) Then
                RaiseEvent MM_BILLRowChanged(Me, New MM_BILLRowChangeEvent(CType(e.Row,MM_BILLRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MM_BILLRowChangingEvent) Is Nothing) Then
                RaiseEvent MM_BILLRowChanging(Me, New MM_BILLRowChangeEvent(CType(e.Row,MM_BILLRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MM_BILLRowDeletedEvent) Is Nothing) Then
                RaiseEvent MM_BILLRowDeleted(Me, New MM_BILLRowChangeEvent(CType(e.Row,MM_BILLRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MM_BILLRowDeletingEvent) Is Nothing) Then
                RaiseEvent MM_BILLRowDeleting(Me, New MM_BILLRowChangeEvent(CType(e.Row,MM_BILLRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveMM_BILLRow(ByVal row As MM_BILLRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MM_BILLRow
        Inherits DataRow
        
        Private tableMM_BILL As MM_BILLDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableMM_BILL = CType(Me.Table,MM_BILLDataTable)
        End Sub
        
        Public Property MCODE As String
            Get
                Return CType(Me(Me.tableMM_BILL.MCODEColumn),String)
            End Get
            Set
                Me(Me.tableMM_BILL.MCODEColumn) = value
            End Set
        End Property
        
        Public Property MNAME As String
            Get
                Try 
                    Return CType(Me(Me.tableMM_BILL.MNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMM_BILL.MNAMEColumn) = value
            End Set
        End Property
        
        Public Property CONTADD1 As String
            Get
                Try 
                    Return CType(Me(Me.tableMM_BILL.CONTADD1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMM_BILL.CONTADD1Column) = value
            End Set
        End Property
        
        Public Property CONTADD2 As String
            Get
                Try 
                    Return CType(Me(Me.tableMM_BILL.CONTADD2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMM_BILL.CONTADD2Column) = value
            End Set
        End Property
        
        Public Property CONTADD3 As String
            Get
                Try 
                    Return CType(Me(Me.tableMM_BILL.CONTADD3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMM_BILL.CONTADD3Column) = value
            End Set
        End Property
        
        Public Property CONTCITY As String
            Get
                Try 
                    Return CType(Me(Me.tableMM_BILL.CONTCITYColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMM_BILL.CONTCITYColumn) = value
            End Set
        End Property
        
        Public Property CONTPIN As String
            Get
                Try 
                    Return CType(Me(Me.tableMM_BILL.CONTPINColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMM_BILL.CONTPINColumn) = value
            End Set
        End Property
        
        Public Property OBAL As Integer
            Get
                Return CType(Me(Me.tableMM_BILL.OBALColumn),Integer)
            End Get
            Set
                Me(Me.tableMM_BILL.OBALColumn) = value
            End Set
        End Property
        
        Public Property SBILL As Integer
            Get
                Return CType(Me(Me.tableMM_BILL.SBILLColumn),Integer)
            End Get
            Set
                Me(Me.tableMM_BILL.SBILLColumn) = value
            End Set
        End Property
        
        Public Property SLCODE As String
            Get
                Return CType(Me(Me.tableMM_BILL.SLCODEColumn),String)
            End Get
            Set
                Me(Me.tableMM_BILL.SLCODEColumn) = value
            End Set
        End Property
        
        Public Property BILLDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tableMM_BILL.BILLDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMM_BILL.BILLDATEColumn) = value
            End Set
        End Property
        
        Public Property ICECREAM As Decimal
            Get
                Return CType(Me(Me.tableMM_BILL.ICECREAMColumn),Decimal)
            End Get
            Set
                Me(Me.tableMM_BILL.ICECREAMColumn) = value
            End Set
        End Property
        
        Public Property VEG As Decimal
            Get
                Return CType(Me(Me.tableMM_BILL.VEGColumn),Decimal)
            End Get
            Set
                Me(Me.tableMM_BILL.VEGColumn) = value
            End Set
        End Property
        
        Public Property NONVEG As Decimal
            Get
                Return CType(Me(Me.tableMM_BILL.NONVEGColumn),Decimal)
            End Get
            Set
                Me(Me.tableMM_BILL.NONVEGColumn) = value
            End Set
        End Property
        
        Public Property COFFEE As Decimal
            Get
                Return CType(Me(Me.tableMM_BILL.COFFEEColumn),Decimal)
            End Get
            Set
                Me(Me.tableMM_BILL.COFFEEColumn) = value
            End Set
        End Property
        
        Public Property JUICES As Decimal
            Get
                Return CType(Me(Me.tableMM_BILL.JUICESColumn),Decimal)
            End Get
            Set
                Me(Me.tableMM_BILL.JUICESColumn) = value
            End Set
        End Property
        
        Public Property BEAUTYPARLOUR As Decimal
            Get
                Return CType(Me(Me.tableMM_BILL.BEAUTYPARLOURColumn),Decimal)
            End Get
            Set
                Me(Me.tableMM_BILL.BEAUTYPARLOURColumn) = value
            End Set
        End Property
        
        Public Property GAMES As Decimal
            Get
                Return CType(Me(Me.tableMM_BILL.GAMESColumn),Decimal)
            End Get
            Set
                Me(Me.tableMM_BILL.GAMESColumn) = value
            End Set
        End Property
        
        Public Property BREADTOAST As Decimal
            Get
                Return CType(Me(Me.tableMM_BILL.BREADTOASTColumn),Decimal)
            End Get
            Set
                Me(Me.tableMM_BILL.BREADTOASTColumn) = value
            End Set
        End Property
        
        Public Property CHATITEM As Decimal
            Get
                Return CType(Me(Me.tableMM_BILL.CHATITEMColumn),Decimal)
            End Get
            Set
                Me(Me.tableMM_BILL.CHATITEMColumn) = value
            End Set
        End Property
        
        Public Property BAR As Decimal
            Get
                Return CType(Me(Me.tableMM_BILL.BARColumn),Decimal)
            End Get
            Set
                Me(Me.tableMM_BILL.BARColumn) = value
            End Set
        End Property
        
        Public Property MISCELLANOUS As Decimal
            Get
                Return CType(Me(Me.tableMM_BILL.MISCELLANOUSColumn),Decimal)
            End Get
            Set
                Me(Me.tableMM_BILL.MISCELLANOUSColumn) = value
            End Set
        End Property
        
        Public Function IsMNAMENull() As Boolean
            Return Me.IsNull(Me.tableMM_BILL.MNAMEColumn)
        End Function
        
        Public Sub SetMNAMENull()
            Me(Me.tableMM_BILL.MNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCONTADD1Null() As Boolean
            Return Me.IsNull(Me.tableMM_BILL.CONTADD1Column)
        End Function
        
        Public Sub SetCONTADD1Null()
            Me(Me.tableMM_BILL.CONTADD1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsCONTADD2Null() As Boolean
            Return Me.IsNull(Me.tableMM_BILL.CONTADD2Column)
        End Function
        
        Public Sub SetCONTADD2Null()
            Me(Me.tableMM_BILL.CONTADD2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsCONTADD3Null() As Boolean
            Return Me.IsNull(Me.tableMM_BILL.CONTADD3Column)
        End Function
        
        Public Sub SetCONTADD3Null()
            Me(Me.tableMM_BILL.CONTADD3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsCONTCITYNull() As Boolean
            Return Me.IsNull(Me.tableMM_BILL.CONTCITYColumn)
        End Function
        
        Public Sub SetCONTCITYNull()
            Me(Me.tableMM_BILL.CONTCITYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCONTPINNull() As Boolean
            Return Me.IsNull(Me.tableMM_BILL.CONTPINColumn)
        End Function
        
        Public Sub SetCONTPINNull()
            Me(Me.tableMM_BILL.CONTPINColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBILLDATENull() As Boolean
            Return Me.IsNull(Me.tableMM_BILL.BILLDATEColumn)
        End Function
        
        Public Sub SetBILLDATENull()
            Me(Me.tableMM_BILL.BILLDATEColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MM_BILLRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As MM_BILLRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As MM_BILLRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As MM_BILLRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class OPLBALNCEDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSNO As DataColumn
        
        Private columnHEADDESC As DataColumn
        
        Private columnPAYMENTMODE As DataColumn
        
        Private columnBILLDATE As DataColumn
        
        Private columnSLCODE As DataColumn
        
        Private columnAMOUNT As DataColumn
        
        Private columnLOCCODE As DataColumn
        
        Private columnLOCDESC As DataColumn
        
        Friend Sub New()
            MyBase.New("OPLBALNCE")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property SNOColumn As DataColumn
            Get
                Return Me.columnSNO
            End Get
        End Property
        
        Friend ReadOnly Property HEADDESCColumn As DataColumn
            Get
                Return Me.columnHEADDESC
            End Get
        End Property
        
        Friend ReadOnly Property PAYMENTMODEColumn As DataColumn
            Get
                Return Me.columnPAYMENTMODE
            End Get
        End Property
        
        Friend ReadOnly Property BILLDATEColumn As DataColumn
            Get
                Return Me.columnBILLDATE
            End Get
        End Property
        
        Friend ReadOnly Property SLCODEColumn As DataColumn
            Get
                Return Me.columnSLCODE
            End Get
        End Property
        
        Friend ReadOnly Property AMOUNTColumn As DataColumn
            Get
                Return Me.columnAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property LOCCODEColumn As DataColumn
            Get
                Return Me.columnLOCCODE
            End Get
        End Property
        
        Friend ReadOnly Property LOCDESCColumn As DataColumn
            Get
                Return Me.columnLOCDESC
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As OPLBALNCERow
            Get
                Return CType(Me.Rows(index),OPLBALNCERow)
            End Get
        End Property
        
        Public Event OPLBALNCERowChanged As OPLBALNCERowChangeEventHandler
        
        Public Event OPLBALNCERowChanging As OPLBALNCERowChangeEventHandler
        
        Public Event OPLBALNCERowDeleted As OPLBALNCERowChangeEventHandler
        
        Public Event OPLBALNCERowDeleting As OPLBALNCERowChangeEventHandler
        
        Public Overloads Sub AddOPLBALNCERow(ByVal row As OPLBALNCERow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddOPLBALNCERow(ByVal SNO As Integer, ByVal HEADDESC As String, ByVal PAYMENTMODE As String, ByVal BILLDATE As Date, ByVal SLCODE As String, ByVal AMOUNT As Decimal, ByVal LOCCODE As String, ByVal LOCDESC As String) As OPLBALNCERow
            Dim rowOPLBALNCERow As OPLBALNCERow = CType(Me.NewRow,OPLBALNCERow)
            rowOPLBALNCERow.ItemArray = New Object() {SNO, HEADDESC, PAYMENTMODE, BILLDATE, SLCODE, AMOUNT, LOCCODE, LOCDESC}
            Me.Rows.Add(rowOPLBALNCERow)
            Return rowOPLBALNCERow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As OPLBALNCEDataTable = CType(MyBase.Clone,OPLBALNCEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New OPLBALNCEDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnSNO = Me.Columns("SNO")
            Me.columnHEADDESC = Me.Columns("HEADDESC")
            Me.columnPAYMENTMODE = Me.Columns("PAYMENTMODE")
            Me.columnBILLDATE = Me.Columns("BILLDATE")
            Me.columnSLCODE = Me.Columns("SLCODE")
            Me.columnAMOUNT = Me.Columns("AMOUNT")
            Me.columnLOCCODE = Me.Columns("LOCCODE")
            Me.columnLOCDESC = Me.Columns("LOCDESC")
        End Sub
        
        Private Sub InitClass()
            Me.columnSNO = New DataColumn("SNO", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSNO)
            Me.columnHEADDESC = New DataColumn("HEADDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHEADDESC)
            Me.columnPAYMENTMODE = New DataColumn("PAYMENTMODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPAYMENTMODE)
            Me.columnBILLDATE = New DataColumn("BILLDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBILLDATE)
            Me.columnSLCODE = New DataColumn("SLCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSLCODE)
            Me.columnAMOUNT = New DataColumn("AMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAMOUNT)
            Me.columnLOCCODE = New DataColumn("LOCCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLOCCODE)
            Me.columnLOCDESC = New DataColumn("LOCDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLOCDESC)
            Me.columnSNO.AllowDBNull = false
            Me.columnHEADDESC.AllowDBNull = false
            Me.columnPAYMENTMODE.AllowDBNull = false
            Me.columnSLCODE.AllowDBNull = false
            Me.columnAMOUNT.AllowDBNull = false
            Me.columnLOCDESC.AllowDBNull = false
        End Sub
        
        Public Function NewOPLBALNCERow() As OPLBALNCERow
            Return CType(Me.NewRow,OPLBALNCERow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New OPLBALNCERow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(OPLBALNCERow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OPLBALNCERowChangedEvent) Is Nothing) Then
                RaiseEvent OPLBALNCERowChanged(Me, New OPLBALNCERowChangeEvent(CType(e.Row,OPLBALNCERow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OPLBALNCERowChangingEvent) Is Nothing) Then
                RaiseEvent OPLBALNCERowChanging(Me, New OPLBALNCERowChangeEvent(CType(e.Row,OPLBALNCERow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OPLBALNCERowDeletedEvent) Is Nothing) Then
                RaiseEvent OPLBALNCERowDeleted(Me, New OPLBALNCERowChangeEvent(CType(e.Row,OPLBALNCERow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OPLBALNCERowDeletingEvent) Is Nothing) Then
                RaiseEvent OPLBALNCERowDeleting(Me, New OPLBALNCERowChangeEvent(CType(e.Row,OPLBALNCERow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveOPLBALNCERow(ByVal row As OPLBALNCERow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class OPLBALNCERow
        Inherits DataRow
        
        Private tableOPLBALNCE As OPLBALNCEDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableOPLBALNCE = CType(Me.Table,OPLBALNCEDataTable)
        End Sub
        
        Public Property SNO As Integer
            Get
                Return CType(Me(Me.tableOPLBALNCE.SNOColumn),Integer)
            End Get
            Set
                Me(Me.tableOPLBALNCE.SNOColumn) = value
            End Set
        End Property
        
        Public Property HEADDESC As String
            Get
                Return CType(Me(Me.tableOPLBALNCE.HEADDESCColumn),String)
            End Get
            Set
                Me(Me.tableOPLBALNCE.HEADDESCColumn) = value
            End Set
        End Property
        
        Public Property PAYMENTMODE As String
            Get
                Return CType(Me(Me.tableOPLBALNCE.PAYMENTMODEColumn),String)
            End Get
            Set
                Me(Me.tableOPLBALNCE.PAYMENTMODEColumn) = value
            End Set
        End Property
        
        Public Property BILLDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tableOPLBALNCE.BILLDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOPLBALNCE.BILLDATEColumn) = value
            End Set
        End Property
        
        Public Property SLCODE As String
            Get
                Return CType(Me(Me.tableOPLBALNCE.SLCODEColumn),String)
            End Get
            Set
                Me(Me.tableOPLBALNCE.SLCODEColumn) = value
            End Set
        End Property
        
        Public Property AMOUNT As Decimal
            Get
                Return CType(Me(Me.tableOPLBALNCE.AMOUNTColumn),Decimal)
            End Get
            Set
                Me(Me.tableOPLBALNCE.AMOUNTColumn) = value
            End Set
        End Property
        
        Public Property LOCCODE As String
            Get
                Try 
                    Return CType(Me(Me.tableOPLBALNCE.LOCCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOPLBALNCE.LOCCODEColumn) = value
            End Set
        End Property
        
        Public Property LOCDESC As String
            Get
                Return CType(Me(Me.tableOPLBALNCE.LOCDESCColumn),String)
            End Get
            Set
                Me(Me.tableOPLBALNCE.LOCDESCColumn) = value
            End Set
        End Property
        
        Public Function IsBILLDATENull() As Boolean
            Return Me.IsNull(Me.tableOPLBALNCE.BILLDATEColumn)
        End Function
        
        Public Sub SetBILLDATENull()
            Me(Me.tableOPLBALNCE.BILLDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLOCCODENull() As Boolean
            Return Me.IsNull(Me.tableOPLBALNCE.LOCCODEColumn)
        End Function
        
        Public Sub SetLOCCODENull()
            Me(Me.tableOPLBALNCE.LOCCODEColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class OPLBALNCERowChangeEvent
        Inherits EventArgs
        
        Private eventRow As OPLBALNCERow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As OPLBALNCERow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As OPLBALNCERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_MONTHBILL_ROOMDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSLCODE As DataColumn
        
        Private columnBILLDATE As DataColumn
        
        Private columnROOMTARIFF As DataColumn
        
        Private columnICECREAM As DataColumn
        
        Private columnVEG As DataColumn
        
        Private columnNONVEG As DataColumn
        
        Private columnCOFFEE As DataColumn
        
        Private columnJUICES As DataColumn
        
        Private columnGAMES As DataColumn
        
        Private columnBAR As DataColumn
        
        Private columnMISCELLANOUS As DataColumn
        
        Friend Sub New()
            MyBase.New("VIEW_MONTHBILL_ROOM")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property SLCODEColumn As DataColumn
            Get
                Return Me.columnSLCODE
            End Get
        End Property
        
        Friend ReadOnly Property BILLDATEColumn As DataColumn
            Get
                Return Me.columnBILLDATE
            End Get
        End Property
        
        Friend ReadOnly Property ROOMTARIFFColumn As DataColumn
            Get
                Return Me.columnROOMTARIFF
            End Get
        End Property
        
        Friend ReadOnly Property ICECREAMColumn As DataColumn
            Get
                Return Me.columnICECREAM
            End Get
        End Property
        
        Friend ReadOnly Property VEGColumn As DataColumn
            Get
                Return Me.columnVEG
            End Get
        End Property
        
        Friend ReadOnly Property NONVEGColumn As DataColumn
            Get
                Return Me.columnNONVEG
            End Get
        End Property
        
        Friend ReadOnly Property COFFEEColumn As DataColumn
            Get
                Return Me.columnCOFFEE
            End Get
        End Property
        
        Friend ReadOnly Property JUICESColumn As DataColumn
            Get
                Return Me.columnJUICES
            End Get
        End Property
        
        Friend ReadOnly Property GAMESColumn As DataColumn
            Get
                Return Me.columnGAMES
            End Get
        End Property
        
        Friend ReadOnly Property BARColumn As DataColumn
            Get
                Return Me.columnBAR
            End Get
        End Property
        
        Friend ReadOnly Property MISCELLANOUSColumn As DataColumn
            Get
                Return Me.columnMISCELLANOUS
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VIEW_MONTHBILL_ROOMRow
            Get
                Return CType(Me.Rows(index),VIEW_MONTHBILL_ROOMRow)
            End Get
        End Property
        
        Public Event VIEW_MONTHBILL_ROOMRowChanged As VIEW_MONTHBILL_ROOMRowChangeEventHandler
        
        Public Event VIEW_MONTHBILL_ROOMRowChanging As VIEW_MONTHBILL_ROOMRowChangeEventHandler
        
        Public Event VIEW_MONTHBILL_ROOMRowDeleted As VIEW_MONTHBILL_ROOMRowChangeEventHandler
        
        Public Event VIEW_MONTHBILL_ROOMRowDeleting As VIEW_MONTHBILL_ROOMRowChangeEventHandler
        
        Public Overloads Sub AddVIEW_MONTHBILL_ROOMRow(ByVal row As VIEW_MONTHBILL_ROOMRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVIEW_MONTHBILL_ROOMRow(ByVal SLCODE As String, ByVal BILLDATE As Date, ByVal ROOMTARIFF As Decimal, ByVal ICECREAM As Decimal, ByVal VEG As Decimal, ByVal NONVEG As Decimal, ByVal COFFEE As Decimal, ByVal JUICES As Decimal, ByVal GAMES As Decimal, ByVal BAR As Decimal, ByVal MISCELLANOUS As Decimal) As VIEW_MONTHBILL_ROOMRow
            Dim rowVIEW_MONTHBILL_ROOMRow As VIEW_MONTHBILL_ROOMRow = CType(Me.NewRow,VIEW_MONTHBILL_ROOMRow)
            rowVIEW_MONTHBILL_ROOMRow.ItemArray = New Object() {SLCODE, BILLDATE, ROOMTARIFF, ICECREAM, VEG, NONVEG, COFFEE, JUICES, GAMES, BAR, MISCELLANOUS}
            Me.Rows.Add(rowVIEW_MONTHBILL_ROOMRow)
            Return rowVIEW_MONTHBILL_ROOMRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VIEW_MONTHBILL_ROOMDataTable = CType(MyBase.Clone,VIEW_MONTHBILL_ROOMDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VIEW_MONTHBILL_ROOMDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnSLCODE = Me.Columns("SLCODE")
            Me.columnBILLDATE = Me.Columns("BILLDATE")
            Me.columnROOMTARIFF = Me.Columns("ROOMTARIFF")
            Me.columnICECREAM = Me.Columns("ICECREAM")
            Me.columnVEG = Me.Columns("VEG")
            Me.columnNONVEG = Me.Columns("NONVEG")
            Me.columnCOFFEE = Me.Columns("COFFEE")
            Me.columnJUICES = Me.Columns("JUICES")
            Me.columnGAMES = Me.Columns("GAMES")
            Me.columnBAR = Me.Columns("BAR")
            Me.columnMISCELLANOUS = Me.Columns("MISCELLANOUS")
        End Sub
        
        Private Sub InitClass()
            Me.columnSLCODE = New DataColumn("SLCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSLCODE)
            Me.columnBILLDATE = New DataColumn("BILLDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBILLDATE)
            Me.columnROOMTARIFF = New DataColumn("ROOMTARIFF", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnROOMTARIFF)
            Me.columnICECREAM = New DataColumn("ICECREAM", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnICECREAM)
            Me.columnVEG = New DataColumn("VEG", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVEG)
            Me.columnNONVEG = New DataColumn("NONVEG", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNONVEG)
            Me.columnCOFFEE = New DataColumn("COFFEE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCOFFEE)
            Me.columnJUICES = New DataColumn("JUICES", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnJUICES)
            Me.columnGAMES = New DataColumn("GAMES", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGAMES)
            Me.columnBAR = New DataColumn("BAR", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBAR)
            Me.columnMISCELLANOUS = New DataColumn("MISCELLANOUS", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMISCELLANOUS)
            Me.columnSLCODE.AllowDBNull = false
            Me.columnROOMTARIFF.AllowDBNull = false
            Me.columnICECREAM.AllowDBNull = false
            Me.columnVEG.AllowDBNull = false
            Me.columnNONVEG.AllowDBNull = false
            Me.columnCOFFEE.AllowDBNull = false
            Me.columnJUICES.AllowDBNull = false
            Me.columnGAMES.AllowDBNull = false
            Me.columnBAR.AllowDBNull = false
            Me.columnMISCELLANOUS.AllowDBNull = false
        End Sub
        
        Public Function NewVIEW_MONTHBILL_ROOMRow() As VIEW_MONTHBILL_ROOMRow
            Return CType(Me.NewRow,VIEW_MONTHBILL_ROOMRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VIEW_MONTHBILL_ROOMRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VIEW_MONTHBILL_ROOMRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VIEW_MONTHBILL_ROOMRowChangedEvent) Is Nothing) Then
                RaiseEvent VIEW_MONTHBILL_ROOMRowChanged(Me, New VIEW_MONTHBILL_ROOMRowChangeEvent(CType(e.Row,VIEW_MONTHBILL_ROOMRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VIEW_MONTHBILL_ROOMRowChangingEvent) Is Nothing) Then
                RaiseEvent VIEW_MONTHBILL_ROOMRowChanging(Me, New VIEW_MONTHBILL_ROOMRowChangeEvent(CType(e.Row,VIEW_MONTHBILL_ROOMRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VIEW_MONTHBILL_ROOMRowDeletedEvent) Is Nothing) Then
                RaiseEvent VIEW_MONTHBILL_ROOMRowDeleted(Me, New VIEW_MONTHBILL_ROOMRowChangeEvent(CType(e.Row,VIEW_MONTHBILL_ROOMRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VIEW_MONTHBILL_ROOMRowDeletingEvent) Is Nothing) Then
                RaiseEvent VIEW_MONTHBILL_ROOMRowDeleting(Me, New VIEW_MONTHBILL_ROOMRowChangeEvent(CType(e.Row,VIEW_MONTHBILL_ROOMRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVIEW_MONTHBILL_ROOMRow(ByVal row As VIEW_MONTHBILL_ROOMRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_MONTHBILL_ROOMRow
        Inherits DataRow
        
        Private tableVIEW_MONTHBILL_ROOM As VIEW_MONTHBILL_ROOMDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVIEW_MONTHBILL_ROOM = CType(Me.Table,VIEW_MONTHBILL_ROOMDataTable)
        End Sub
        
        Public Property SLCODE As String
            Get
                Return CType(Me(Me.tableVIEW_MONTHBILL_ROOM.SLCODEColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_MONTHBILL_ROOM.SLCODEColumn) = value
            End Set
        End Property
        
        Public Property BILLDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MONTHBILL_ROOM.BILLDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MONTHBILL_ROOM.BILLDATEColumn) = value
            End Set
        End Property
        
        Public Property ROOMTARIFF As Decimal
            Get
                Return CType(Me(Me.tableVIEW_MONTHBILL_ROOM.ROOMTARIFFColumn),Decimal)
            End Get
            Set
                Me(Me.tableVIEW_MONTHBILL_ROOM.ROOMTARIFFColumn) = value
            End Set
        End Property
        
        Public Property ICECREAM As Decimal
            Get
                Return CType(Me(Me.tableVIEW_MONTHBILL_ROOM.ICECREAMColumn),Decimal)
            End Get
            Set
                Me(Me.tableVIEW_MONTHBILL_ROOM.ICECREAMColumn) = value
            End Set
        End Property
        
        Public Property VEG As Decimal
            Get
                Return CType(Me(Me.tableVIEW_MONTHBILL_ROOM.VEGColumn),Decimal)
            End Get
            Set
                Me(Me.tableVIEW_MONTHBILL_ROOM.VEGColumn) = value
            End Set
        End Property
        
        Public Property NONVEG As Decimal
            Get
                Return CType(Me(Me.tableVIEW_MONTHBILL_ROOM.NONVEGColumn),Decimal)
            End Get
            Set
                Me(Me.tableVIEW_MONTHBILL_ROOM.NONVEGColumn) = value
            End Set
        End Property
        
        Public Property COFFEE As Decimal
            Get
                Return CType(Me(Me.tableVIEW_MONTHBILL_ROOM.COFFEEColumn),Decimal)
            End Get
            Set
                Me(Me.tableVIEW_MONTHBILL_ROOM.COFFEEColumn) = value
            End Set
        End Property
        
        Public Property JUICES As Decimal
            Get
                Return CType(Me(Me.tableVIEW_MONTHBILL_ROOM.JUICESColumn),Decimal)
            End Get
            Set
                Me(Me.tableVIEW_MONTHBILL_ROOM.JUICESColumn) = value
            End Set
        End Property
        
        Public Property GAMES As Decimal
            Get
                Return CType(Me(Me.tableVIEW_MONTHBILL_ROOM.GAMESColumn),Decimal)
            End Get
            Set
                Me(Me.tableVIEW_MONTHBILL_ROOM.GAMESColumn) = value
            End Set
        End Property
        
        Public Property BAR As Decimal
            Get
                Return CType(Me(Me.tableVIEW_MONTHBILL_ROOM.BARColumn),Decimal)
            End Get
            Set
                Me(Me.tableVIEW_MONTHBILL_ROOM.BARColumn) = value
            End Set
        End Property
        
        Public Property MISCELLANOUS As Decimal
            Get
                Return CType(Me(Me.tableVIEW_MONTHBILL_ROOM.MISCELLANOUSColumn),Decimal)
            End Get
            Set
                Me(Me.tableVIEW_MONTHBILL_ROOM.MISCELLANOUSColumn) = value
            End Set
        End Property
        
        Public Function IsBILLDATENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MONTHBILL_ROOM.BILLDATEColumn)
        End Function
        
        Public Sub SetBILLDATENull()
            Me(Me.tableVIEW_MONTHBILL_ROOM.BILLDATEColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_MONTHBILL_ROOMRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VIEW_MONTHBILL_ROOMRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VIEW_MONTHBILL_ROOMRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VIEW_MONTHBILL_ROOMRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class membermasterDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSequenceNo As DataColumn
        
        Private columnTAG As DataColumn
        
        Private columnMEMBERTYPECODE As DataColumn
        
        Private columnCOMPANY As DataColumn
        
        Private columnSUBCD As DataColumn
        
        Private columnMCODE As DataColumn
        
        Private columnMNAME As DataColumn
        
        Private columnMID As DataColumn
        
        Private columnDOB As DataColumn
        
        Private columnDOJ As DataColumn
        
        Private columnSEX As DataColumn
        
        Private columnMARITALSTATUS As DataColumn
        
        Private columnSPOUSE As DataColumn
        
        Private columnBG As DataColumn
        
        Private columnOCCUPATION As DataColumn
        
        Private columnBANKER As DataColumn
        
        Private columnBANKACNO As DataColumn
        
        Private columnHOBBIES As DataColumn
        
        Private columnOTHERINFO As DataColumn
        
        Private columnRESIDENT As DataColumn
        
        Private columnEQUALIFICATION As DataColumn
        
        Private columnPQUALIFICATION As DataColumn
        
        Private columnPROPOSER As DataColumn
        
        Private columnPROPOSERNAME As DataColumn
        
        Private columnSECONDER As DataColumn
        
        Private columnSECONDERNAME As DataColumn
        
        Private columnPAcopyst As DataColumn
        
        Private columnPADD1 As DataColumn
        
        Private columnPADD2 As DataColumn
        
        Private columnPADD3 As DataColumn
        
        Private columnPCITY As DataColumn
        
        Private columnPSTATE As DataColumn
        
        Private columnPCOUNTRY As DataColumn
        
        Private columnPPIN As DataColumn
        
        Private columnPPHONE1 As DataColumn
        
        Private columnPPHONE2 As DataColumn
        
        Private columnPCELL As DataColumn
        
        Private columnPEMAIL As DataColumn
        
        Private columnRAcopyst As DataColumn
        
        Private columnCADD1 As DataColumn
        
        Private columnCADD2 As DataColumn
        
        Private columnCADD3 As DataColumn
        
        Private columnCCITY As DataColumn
        
        Private columnCSTATE As DataColumn
        
        Private columnCCOUNTRY As DataColumn
        
        Private columnCPIN As DataColumn
        
        Private columnCPHONE1 As DataColumn
        
        Private columnCPHONE2 As DataColumn
        
        Private columnCCELL As DataColumn
        
        Private columnCEMAIL As DataColumn
        
        Private columnCONTADD1 As DataColumn
        
        Private columnCONTADD2 As DataColumn
        
        Private columnCONTADD3 As DataColumn
        
        Private columnCONTCITY As DataColumn
        
        Private columnCONTSTATE As DataColumn
        
        Private columnCONTCOUNTRY As DataColumn
        
        Private columnCONTPIN As DataColumn
        
        Private columnCONTPHONE1 As DataColumn
        
        Private columnCONTPHONE2 As DataColumn
        
        Private columnCONTCELL As DataColumn
        
        Private columnCONTEMAIL As DataColumn
        
        Private columnEMPTYPE As DataColumn
        
        Private columnBUSINESSNAME As DataColumn
        
        Private columnBAcopyst As DataColumn
        
        Private columnOADD1 As DataColumn
        
        Private columnOADD2 As DataColumn
        
        Private columnOADD3 As DataColumn
        
        Private columnOCITY As DataColumn
        
        Private columnOSTATE As DataColumn
        
        Private columnOCOUNTRY As DataColumn
        
        Private columnOPIN As DataColumn
        
        Private columnOPHONE1 As DataColumn
        
        Private columnOPHONE2 As DataColumn
        
        Private columnOCELL As DataColumn
        
        Private columnOEMAIL As DataColumn
        
        Private columnDOEPROFESSION As DataColumn
        
        Private columnBUSINESSNATURE As DataColumn
        
        Private columnPOSITIONHELD As DataColumn
        
        Private columnSERVICENAME As DataColumn
        
        Private columnSERVICEYEAR As DataColumn
        
        Private columnPANO As DataColumn
        
        Private columnBBANKER As DataColumn
        
        Private columnCCNO As DataColumn
        
        Private columnANNUALINCOME As DataColumn
        
        Private columnUPDUSERID As DataColumn
        
        Private columnUPDDATETIME As DataColumn
        
        Private columnTERMINATION As DataColumn
        
        Private columnTRN_CON_DATE As DataColumn
        
        Private columnCON_MCODE As DataColumn
        
        Private columnPFAX As DataColumn
        
        Private columnCFAX As DataColumn
        
        Private columnCONTFAX As DataColumn
        
        Private columnREASON As DataColumn
        
        Private columnPHOTO As DataColumn
        
        Private columnCREDITLIMIT As DataColumn
        
        Private columnLIMITAMOUNT As DataColumn
        
        Private columnWEBSITE As DataColumn
        
        Private columnImagefile As DataColumn
        
        Private columnsizefield As DataColumn
        
        Private columnVdate As DataColumn
        
        Private columnVyear As DataColumn
        
        Private columnValiddate As DataColumn
        
        Private columnTempTermination As DataColumn
        
        Private columnTempTermDate As DataColumn
        
        Private columnTempTermReason As DataColumn
        
        Private columnMemberid As DataColumn
        
        Private columnEndingDate As DataColumn
        
        Private columnTotalYears As DataColumn
        
        Private columnCardNo As DataColumn
        
        Private columnCardExpDate As DataColumn
        
        Private columnValidity As DataColumn
        
        Private columnPeriod As DataColumn
        
        Private columnCreditcardno As DataColumn
        
        Private columnCreditExpDt As DataColumn
        
        Private columnType As DataColumn
        
        Private columnSTATUSDATEFROM As DataColumn
        
        Private columnSTATUSDATETO As DataColumn
        
        Private columnCurentStatus As DataColumn
        
        Private columnFirstName As DataColumn
        
        Private columnMiddleName As DataColumn
        
        Private columnSurname As DataColumn
        
        Private column_Alias As DataColumn
        
        Private columnPrefix As DataColumn
        
        Private columnBillType As DataColumn
        
        Private columnNationality As DataColumn
        
        Private columnNationalityAtbirth As DataColumn
        
        Private columnBillbasis As DataColumn
        
        Private columnBillHead As DataColumn
        
        Private columnGDRLocker As DataColumn
        
        Private columnLDRLocker As DataColumn
        
        Private columnHPLocker As DataColumn
        
        Private columnMembershipTo As DataColumn
        
        Private columnsalut As DataColumn
        
        Private columnEntranceFee As DataColumn
        
        Private columnDevelopmentFee As DataColumn
        
        Private columnCriditNumber As DataColumn
        
        Private columnSecurityDeposit As DataColumn
        
        Private columnPlaceOfBirth As DataColumn
        
        Private columnCountryOfBirth As DataColumn
        
        Private columnLastArrivalInCal As DataColumn
        
        Private columnPeriodOfStay_year As DataColumn
        
        Private columnPeriodOfStay_Month As DataColumn
        
        Private columnPreviouslyProposed As DataColumn
        
        Private columnNoOfTimesProposed As DataColumn
        
        Private columnDateOfProposal As DataColumn
        
        Private columnResultOfProposal As DataColumn
        
        Private columnElected As DataColumn
        
        Private columnFatherName As DataColumn
        
        Private columnDOBfather As DataColumn
        
        Private columnWifeDOB As DataColumn
        
        Private columnMaidenNameWife As DataColumn
        
        Private columnNationalityWife As DataColumn
        
        Private columnWifesFatherName As DataColumn
        
        Private columnWifeFatherDOB As DataColumn
        
        Private columnApplNo As DataColumn
        
        Private columnApplDate As DataColumn
        
        Private columnCorporatest As DataColumn
        
        Private columnCorporateCode As DataColumn
        
        Private columnCompName As DataColumn
        
        Private columnDesignation As DataColumn
        
        Private columnProfessionInfo As DataColumn
        
        Private columnBuisnessInfo As DataColumn
        
        Private columnProducts As DataColumn
        
        Private columnAgentsDealers As DataColumn
        
        Private columnESTDdate As DataColumn
        
        Private columnNoOfEmp As DataColumn
        
        Private columnTurnover As DataColumn
        
        Private columnClient As DataColumn
        
        Private columnAppliedBut As DataColumn
        
        Private columnPositionInChamber As DataColumn
        
        Private columnQulificationstatus As DataColumn
        
        Private columnQualification1 As DataColumn
        
        Private columnDetails1 As DataColumn
        
        Private columnYearOfPassing1 As DataColumn
        
        Private columnInstitute1 As DataColumn
        
        Private columnDivision1 As DataColumn
        
        Private columnQualification2 As DataColumn
        
        Private columnDetails2 As DataColumn
        
        Private columnYearOfPassing2 As DataColumn
        
        Private columnInstitute2 As DataColumn
        
        Private columnDivision2 As DataColumn
        
        Private columnQualification3 As DataColumn
        
        Private columnDetails3 As DataColumn
        
        Private columnYearOfPassing3 As DataColumn
        
        Private columnInstitute3 As DataColumn
        
        Private columnDivision3 As DataColumn
        
        Private columnsportstatus As DataColumn
        
        Private columnGameType1 As DataColumn
        
        Private columnNameOfGame1 As DataColumn
        
        Private columnDescription1 As DataColumn
        
        Private columnGameType2 As DataColumn
        
        Private columnNameofGame2 As DataColumn
        
        Private columnDescription2 As DataColumn
        
        Private columnGameType3 As DataColumn
        
        Private columnNameOfGame3 As DataColumn
        
        Private columnDescription3 As DataColumn
        
        Private columnChildstatus As DataColumn
        
        Private columnChildName1 As DataColumn
        
        Private columnChildDob1 As DataColumn
        
        Private columnChildSex1 As DataColumn
        
        Private columnChildExpairy1 As DataColumn
        
        Private columnChildName2 As DataColumn
        
        Private columnChildDob2 As DataColumn
        
        Private columnChildSex2 As DataColumn
        
        Private columnChildExpairy2 As DataColumn
        
        Private columnChildName3 As DataColumn
        
        Private columnChildDob3 As DataColumn
        
        Private columnChildSex3 As DataColumn
        
        Private columnchildExpairy3 As DataColumn
        
        Private columnClubstatus As DataColumn
        
        Private columnOtherClubName1 As DataColumn
        
        Private columnOCAddress1 As DataColumn
        
        Private columnOCStatus1 As DataColumn
        
        Private columnOtherClubName2 As DataColumn
        
        Private columnOCAddress2 As DataColumn
        
        Private columnOCStatus2 As DataColumn
        
        Private columnOtherClubname3 As DataColumn
        
        Private columnOCAddress3 As DataColumn
        
        Private columnOCStataus As DataColumn
        
        Private columnadduser As DataColumn
        
        Private columnadddate As DataColumn
        
        Private columnfreeze As DataColumn
        
        Private columnRelativestatus As DataColumn
        
        Private columnRelativeName1 As DataColumn
        
        Private columnRelation1 As DataColumn
        
        Private columndateofbirth1 As DataColumn
        
        Private columnRelativeage1 As DataColumn
        
        Private columnRelativeSex1 As DataColumn
        
        Private columnRelativeaddress1 As DataColumn
        
        Private columnRelativeName2 As DataColumn
        
        Private columnRelation2 As DataColumn
        
        Private columndateofbirth2 As DataColumn
        
        Private columnRelativeage2 As DataColumn
        
        Private columnRelativeSex2 As DataColumn
        
        Private columnRelativeaddress2 As DataColumn
        
        Private columnRelativeName3 As DataColumn
        
        Private columnRelation3 As DataColumn
        
        Private columndateofbirth3 As DataColumn
        
        Private columnRelativeage3 As DataColumn
        
        Private columnRelativeSex3 As DataColumn
        
        Private columnRelativeaddress3 As DataColumn
        
        Private columnreferentialst As DataColumn
        
        Private columnmem_code1 As DataColumn
        
        Private columnmem_name1 As DataColumn
        
        Private columnrefmem_date1 As DataColumn
        
        Private columndeleted1 As DataColumn
        
        Private columnmem_code2 As DataColumn
        
        Private columnmem_name2 As DataColumn
        
        Private columnrefmem_date2 As DataColumn
        
        Private columndeleted2 As DataColumn
        
        Private columnmem_code3 As DataColumn
        
        Private columnmem_name3 As DataColumn
        
        Private columnrefmem_date3 As DataColumn
        
        Private columndeleted3 As DataColumn
        
        Private columnentrancefeest As DataColumn
        
        Private columnreceiptno1 As DataColumn
        
        Private columnstartdate1 As DataColumn
        
        Private columnamount1 As DataColumn
        
        Private columnreceiptno2 As DataColumn
        
        Private columnstartdate2 As DataColumn
        
        Private columnamount2 As DataColumn
        
        Private columnreceiptno3 As DataColumn
        
        Private columnstartdate3 As DataColumn
        
        Private columnamount3 As DataColumn
        
        Private columnOLD As DataColumn
        
        Private columnCardAmt As DataColumn
        
        Private columnMINIMUMUSAGE As DataColumn
        
        Private columnCREDITNO As DataColumn
        
        Private columnSPOUSEMOBILE As DataColumn
        
        Private columnPADD4 As DataColumn
        
        Private columnCADD4 As DataColumn
        
        Friend Sub New()
            MyBase.New("membermaster")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property SequenceNoColumn As DataColumn
            Get
                Return Me.columnSequenceNo
            End Get
        End Property
        
        Friend ReadOnly Property TAGColumn As DataColumn
            Get
                Return Me.columnTAG
            End Get
        End Property
        
        Friend ReadOnly Property MEMBERTYPECODEColumn As DataColumn
            Get
                Return Me.columnMEMBERTYPECODE
            End Get
        End Property
        
        Friend ReadOnly Property COMPANYColumn As DataColumn
            Get
                Return Me.columnCOMPANY
            End Get
        End Property
        
        Friend ReadOnly Property SUBCDColumn As DataColumn
            Get
                Return Me.columnSUBCD
            End Get
        End Property
        
        Friend ReadOnly Property MCODEColumn As DataColumn
            Get
                Return Me.columnMCODE
            End Get
        End Property
        
        Friend ReadOnly Property MNAMEColumn As DataColumn
            Get
                Return Me.columnMNAME
            End Get
        End Property
        
        Friend ReadOnly Property MIDColumn As DataColumn
            Get
                Return Me.columnMID
            End Get
        End Property
        
        Friend ReadOnly Property DOBColumn As DataColumn
            Get
                Return Me.columnDOB
            End Get
        End Property
        
        Friend ReadOnly Property DOJColumn As DataColumn
            Get
                Return Me.columnDOJ
            End Get
        End Property
        
        Friend ReadOnly Property SEXColumn As DataColumn
            Get
                Return Me.columnSEX
            End Get
        End Property
        
        Friend ReadOnly Property MARITALSTATUSColumn As DataColumn
            Get
                Return Me.columnMARITALSTATUS
            End Get
        End Property
        
        Friend ReadOnly Property SPOUSEColumn As DataColumn
            Get
                Return Me.columnSPOUSE
            End Get
        End Property
        
        Friend ReadOnly Property BGColumn As DataColumn
            Get
                Return Me.columnBG
            End Get
        End Property
        
        Friend ReadOnly Property OCCUPATIONColumn As DataColumn
            Get
                Return Me.columnOCCUPATION
            End Get
        End Property
        
        Friend ReadOnly Property BANKERColumn As DataColumn
            Get
                Return Me.columnBANKER
            End Get
        End Property
        
        Friend ReadOnly Property BANKACNOColumn As DataColumn
            Get
                Return Me.columnBANKACNO
            End Get
        End Property
        
        Friend ReadOnly Property HOBBIESColumn As DataColumn
            Get
                Return Me.columnHOBBIES
            End Get
        End Property
        
        Friend ReadOnly Property OTHERINFOColumn As DataColumn
            Get
                Return Me.columnOTHERINFO
            End Get
        End Property
        
        Friend ReadOnly Property RESIDENTColumn As DataColumn
            Get
                Return Me.columnRESIDENT
            End Get
        End Property
        
        Friend ReadOnly Property EQUALIFICATIONColumn As DataColumn
            Get
                Return Me.columnEQUALIFICATION
            End Get
        End Property
        
        Friend ReadOnly Property PQUALIFICATIONColumn As DataColumn
            Get
                Return Me.columnPQUALIFICATION
            End Get
        End Property
        
        Friend ReadOnly Property PROPOSERColumn As DataColumn
            Get
                Return Me.columnPROPOSER
            End Get
        End Property
        
        Friend ReadOnly Property PROPOSERNAMEColumn As DataColumn
            Get
                Return Me.columnPROPOSERNAME
            End Get
        End Property
        
        Friend ReadOnly Property SECONDERColumn As DataColumn
            Get
                Return Me.columnSECONDER
            End Get
        End Property
        
        Friend ReadOnly Property SECONDERNAMEColumn As DataColumn
            Get
                Return Me.columnSECONDERNAME
            End Get
        End Property
        
        Friend ReadOnly Property PAcopystColumn As DataColumn
            Get
                Return Me.columnPAcopyst
            End Get
        End Property
        
        Friend ReadOnly Property PADD1Column As DataColumn
            Get
                Return Me.columnPADD1
            End Get
        End Property
        
        Friend ReadOnly Property PADD2Column As DataColumn
            Get
                Return Me.columnPADD2
            End Get
        End Property
        
        Friend ReadOnly Property PADD3Column As DataColumn
            Get
                Return Me.columnPADD3
            End Get
        End Property
        
        Friend ReadOnly Property PCITYColumn As DataColumn
            Get
                Return Me.columnPCITY
            End Get
        End Property
        
        Friend ReadOnly Property PSTATEColumn As DataColumn
            Get
                Return Me.columnPSTATE
            End Get
        End Property
        
        Friend ReadOnly Property PCOUNTRYColumn As DataColumn
            Get
                Return Me.columnPCOUNTRY
            End Get
        End Property
        
        Friend ReadOnly Property PPINColumn As DataColumn
            Get
                Return Me.columnPPIN
            End Get
        End Property
        
        Friend ReadOnly Property PPHONE1Column As DataColumn
            Get
                Return Me.columnPPHONE1
            End Get
        End Property
        
        Friend ReadOnly Property PPHONE2Column As DataColumn
            Get
                Return Me.columnPPHONE2
            End Get
        End Property
        
        Friend ReadOnly Property PCELLColumn As DataColumn
            Get
                Return Me.columnPCELL
            End Get
        End Property
        
        Friend ReadOnly Property PEMAILColumn As DataColumn
            Get
                Return Me.columnPEMAIL
            End Get
        End Property
        
        Friend ReadOnly Property RAcopystColumn As DataColumn
            Get
                Return Me.columnRAcopyst
            End Get
        End Property
        
        Friend ReadOnly Property CADD1Column As DataColumn
            Get
                Return Me.columnCADD1
            End Get
        End Property
        
        Friend ReadOnly Property CADD2Column As DataColumn
            Get
                Return Me.columnCADD2
            End Get
        End Property
        
        Friend ReadOnly Property CADD3Column As DataColumn
            Get
                Return Me.columnCADD3
            End Get
        End Property
        
        Friend ReadOnly Property CCITYColumn As DataColumn
            Get
                Return Me.columnCCITY
            End Get
        End Property
        
        Friend ReadOnly Property CSTATEColumn As DataColumn
            Get
                Return Me.columnCSTATE
            End Get
        End Property
        
        Friend ReadOnly Property CCOUNTRYColumn As DataColumn
            Get
                Return Me.columnCCOUNTRY
            End Get
        End Property
        
        Friend ReadOnly Property CPINColumn As DataColumn
            Get
                Return Me.columnCPIN
            End Get
        End Property
        
        Friend ReadOnly Property CPHONE1Column As DataColumn
            Get
                Return Me.columnCPHONE1
            End Get
        End Property
        
        Friend ReadOnly Property CPHONE2Column As DataColumn
            Get
                Return Me.columnCPHONE2
            End Get
        End Property
        
        Friend ReadOnly Property CCELLColumn As DataColumn
            Get
                Return Me.columnCCELL
            End Get
        End Property
        
        Friend ReadOnly Property CEMAILColumn As DataColumn
            Get
                Return Me.columnCEMAIL
            End Get
        End Property
        
        Friend ReadOnly Property CONTADD1Column As DataColumn
            Get
                Return Me.columnCONTADD1
            End Get
        End Property
        
        Friend ReadOnly Property CONTADD2Column As DataColumn
            Get
                Return Me.columnCONTADD2
            End Get
        End Property
        
        Friend ReadOnly Property CONTADD3Column As DataColumn
            Get
                Return Me.columnCONTADD3
            End Get
        End Property
        
        Friend ReadOnly Property CONTCITYColumn As DataColumn
            Get
                Return Me.columnCONTCITY
            End Get
        End Property
        
        Friend ReadOnly Property CONTSTATEColumn As DataColumn
            Get
                Return Me.columnCONTSTATE
            End Get
        End Property
        
        Friend ReadOnly Property CONTCOUNTRYColumn As DataColumn
            Get
                Return Me.columnCONTCOUNTRY
            End Get
        End Property
        
        Friend ReadOnly Property CONTPINColumn As DataColumn
            Get
                Return Me.columnCONTPIN
            End Get
        End Property
        
        Friend ReadOnly Property CONTPHONE1Column As DataColumn
            Get
                Return Me.columnCONTPHONE1
            End Get
        End Property
        
        Friend ReadOnly Property CONTPHONE2Column As DataColumn
            Get
                Return Me.columnCONTPHONE2
            End Get
        End Property
        
        Friend ReadOnly Property CONTCELLColumn As DataColumn
            Get
                Return Me.columnCONTCELL
            End Get
        End Property
        
        Friend ReadOnly Property CONTEMAILColumn As DataColumn
            Get
                Return Me.columnCONTEMAIL
            End Get
        End Property
        
        Friend ReadOnly Property EMPTYPEColumn As DataColumn
            Get
                Return Me.columnEMPTYPE
            End Get
        End Property
        
        Friend ReadOnly Property BUSINESSNAMEColumn As DataColumn
            Get
                Return Me.columnBUSINESSNAME
            End Get
        End Property
        
        Friend ReadOnly Property BAcopystColumn As DataColumn
            Get
                Return Me.columnBAcopyst
            End Get
        End Property
        
        Friend ReadOnly Property OADD1Column As DataColumn
            Get
                Return Me.columnOADD1
            End Get
        End Property
        
        Friend ReadOnly Property OADD2Column As DataColumn
            Get
                Return Me.columnOADD2
            End Get
        End Property
        
        Friend ReadOnly Property OADD3Column As DataColumn
            Get
                Return Me.columnOADD3
            End Get
        End Property
        
        Friend ReadOnly Property OCITYColumn As DataColumn
            Get
                Return Me.columnOCITY
            End Get
        End Property
        
        Friend ReadOnly Property OSTATEColumn As DataColumn
            Get
                Return Me.columnOSTATE
            End Get
        End Property
        
        Friend ReadOnly Property OCOUNTRYColumn As DataColumn
            Get
                Return Me.columnOCOUNTRY
            End Get
        End Property
        
        Friend ReadOnly Property OPINColumn As DataColumn
            Get
                Return Me.columnOPIN
            End Get
        End Property
        
        Friend ReadOnly Property OPHONE1Column As DataColumn
            Get
                Return Me.columnOPHONE1
            End Get
        End Property
        
        Friend ReadOnly Property OPHONE2Column As DataColumn
            Get
                Return Me.columnOPHONE2
            End Get
        End Property
        
        Friend ReadOnly Property OCELLColumn As DataColumn
            Get
                Return Me.columnOCELL
            End Get
        End Property
        
        Friend ReadOnly Property OEMAILColumn As DataColumn
            Get
                Return Me.columnOEMAIL
            End Get
        End Property
        
        Friend ReadOnly Property DOEPROFESSIONColumn As DataColumn
            Get
                Return Me.columnDOEPROFESSION
            End Get
        End Property
        
        Friend ReadOnly Property BUSINESSNATUREColumn As DataColumn
            Get
                Return Me.columnBUSINESSNATURE
            End Get
        End Property
        
        Friend ReadOnly Property POSITIONHELDColumn As DataColumn
            Get
                Return Me.columnPOSITIONHELD
            End Get
        End Property
        
        Friend ReadOnly Property SERVICENAMEColumn As DataColumn
            Get
                Return Me.columnSERVICENAME
            End Get
        End Property
        
        Friend ReadOnly Property SERVICEYEARColumn As DataColumn
            Get
                Return Me.columnSERVICEYEAR
            End Get
        End Property
        
        Friend ReadOnly Property PANOColumn As DataColumn
            Get
                Return Me.columnPANO
            End Get
        End Property
        
        Friend ReadOnly Property BBANKERColumn As DataColumn
            Get
                Return Me.columnBBANKER
            End Get
        End Property
        
        Friend ReadOnly Property CCNOColumn As DataColumn
            Get
                Return Me.columnCCNO
            End Get
        End Property
        
        Friend ReadOnly Property ANNUALINCOMEColumn As DataColumn
            Get
                Return Me.columnANNUALINCOME
            End Get
        End Property
        
        Friend ReadOnly Property UPDUSERIDColumn As DataColumn
            Get
                Return Me.columnUPDUSERID
            End Get
        End Property
        
        Friend ReadOnly Property UPDDATETIMEColumn As DataColumn
            Get
                Return Me.columnUPDDATETIME
            End Get
        End Property
        
        Friend ReadOnly Property TERMINATIONColumn As DataColumn
            Get
                Return Me.columnTERMINATION
            End Get
        End Property
        
        Friend ReadOnly Property TRN_CON_DATEColumn As DataColumn
            Get
                Return Me.columnTRN_CON_DATE
            End Get
        End Property
        
        Friend ReadOnly Property CON_MCODEColumn As DataColumn
            Get
                Return Me.columnCON_MCODE
            End Get
        End Property
        
        Friend ReadOnly Property PFAXColumn As DataColumn
            Get
                Return Me.columnPFAX
            End Get
        End Property
        
        Friend ReadOnly Property CFAXColumn As DataColumn
            Get
                Return Me.columnCFAX
            End Get
        End Property
        
        Friend ReadOnly Property CONTFAXColumn As DataColumn
            Get
                Return Me.columnCONTFAX
            End Get
        End Property
        
        Friend ReadOnly Property REASONColumn As DataColumn
            Get
                Return Me.columnREASON
            End Get
        End Property
        
        Friend ReadOnly Property PHOTOColumn As DataColumn
            Get
                Return Me.columnPHOTO
            End Get
        End Property
        
        Friend ReadOnly Property CREDITLIMITColumn As DataColumn
            Get
                Return Me.columnCREDITLIMIT
            End Get
        End Property
        
        Friend ReadOnly Property LIMITAMOUNTColumn As DataColumn
            Get
                Return Me.columnLIMITAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property WEBSITEColumn As DataColumn
            Get
                Return Me.columnWEBSITE
            End Get
        End Property
        
        Friend ReadOnly Property ImagefileColumn As DataColumn
            Get
                Return Me.columnImagefile
            End Get
        End Property
        
        Friend ReadOnly Property sizefieldColumn As DataColumn
            Get
                Return Me.columnsizefield
            End Get
        End Property
        
        Friend ReadOnly Property VdateColumn As DataColumn
            Get
                Return Me.columnVdate
            End Get
        End Property
        
        Friend ReadOnly Property VyearColumn As DataColumn
            Get
                Return Me.columnVyear
            End Get
        End Property
        
        Friend ReadOnly Property ValiddateColumn As DataColumn
            Get
                Return Me.columnValiddate
            End Get
        End Property
        
        Friend ReadOnly Property TempTerminationColumn As DataColumn
            Get
                Return Me.columnTempTermination
            End Get
        End Property
        
        Friend ReadOnly Property TempTermDateColumn As DataColumn
            Get
                Return Me.columnTempTermDate
            End Get
        End Property
        
        Friend ReadOnly Property TempTermReasonColumn As DataColumn
            Get
                Return Me.columnTempTermReason
            End Get
        End Property
        
        Friend ReadOnly Property MemberidColumn As DataColumn
            Get
                Return Me.columnMemberid
            End Get
        End Property
        
        Friend ReadOnly Property EndingDateColumn As DataColumn
            Get
                Return Me.columnEndingDate
            End Get
        End Property
        
        Friend ReadOnly Property TotalYearsColumn As DataColumn
            Get
                Return Me.columnTotalYears
            End Get
        End Property
        
        Friend ReadOnly Property CardNoColumn As DataColumn
            Get
                Return Me.columnCardNo
            End Get
        End Property
        
        Friend ReadOnly Property CardExpDateColumn As DataColumn
            Get
                Return Me.columnCardExpDate
            End Get
        End Property
        
        Friend ReadOnly Property ValidityColumn As DataColumn
            Get
                Return Me.columnValidity
            End Get
        End Property
        
        Friend ReadOnly Property PeriodColumn As DataColumn
            Get
                Return Me.columnPeriod
            End Get
        End Property
        
        Friend ReadOnly Property CreditcardnoColumn As DataColumn
            Get
                Return Me.columnCreditcardno
            End Get
        End Property
        
        Friend ReadOnly Property CreditExpDtColumn As DataColumn
            Get
                Return Me.columnCreditExpDt
            End Get
        End Property
        
        Friend ReadOnly Property TypeColumn As DataColumn
            Get
                Return Me.columnType
            End Get
        End Property
        
        Friend ReadOnly Property STATUSDATEFROMColumn As DataColumn
            Get
                Return Me.columnSTATUSDATEFROM
            End Get
        End Property
        
        Friend ReadOnly Property STATUSDATETOColumn As DataColumn
            Get
                Return Me.columnSTATUSDATETO
            End Get
        End Property
        
        Friend ReadOnly Property CurentStatusColumn As DataColumn
            Get
                Return Me.columnCurentStatus
            End Get
        End Property
        
        Friend ReadOnly Property FirstNameColumn As DataColumn
            Get
                Return Me.columnFirstName
            End Get
        End Property
        
        Friend ReadOnly Property MiddleNameColumn As DataColumn
            Get
                Return Me.columnMiddleName
            End Get
        End Property
        
        Friend ReadOnly Property SurnameColumn As DataColumn
            Get
                Return Me.columnSurname
            End Get
        End Property
        
        Friend ReadOnly Property _AliasColumn As DataColumn
            Get
                Return Me.column_Alias
            End Get
        End Property
        
        Friend ReadOnly Property PrefixColumn As DataColumn
            Get
                Return Me.columnPrefix
            End Get
        End Property
        
        Friend ReadOnly Property BillTypeColumn As DataColumn
            Get
                Return Me.columnBillType
            End Get
        End Property
        
        Friend ReadOnly Property NationalityColumn As DataColumn
            Get
                Return Me.columnNationality
            End Get
        End Property
        
        Friend ReadOnly Property NationalityAtbirthColumn As DataColumn
            Get
                Return Me.columnNationalityAtbirth
            End Get
        End Property
        
        Friend ReadOnly Property BillbasisColumn As DataColumn
            Get
                Return Me.columnBillbasis
            End Get
        End Property
        
        Friend ReadOnly Property BillHeadColumn As DataColumn
            Get
                Return Me.columnBillHead
            End Get
        End Property
        
        Friend ReadOnly Property GDRLockerColumn As DataColumn
            Get
                Return Me.columnGDRLocker
            End Get
        End Property
        
        Friend ReadOnly Property LDRLockerColumn As DataColumn
            Get
                Return Me.columnLDRLocker
            End Get
        End Property
        
        Friend ReadOnly Property HPLockerColumn As DataColumn
            Get
                Return Me.columnHPLocker
            End Get
        End Property
        
        Friend ReadOnly Property MembershipToColumn As DataColumn
            Get
                Return Me.columnMembershipTo
            End Get
        End Property
        
        Friend ReadOnly Property salutColumn As DataColumn
            Get
                Return Me.columnsalut
            End Get
        End Property
        
        Friend ReadOnly Property EntranceFeeColumn As DataColumn
            Get
                Return Me.columnEntranceFee
            End Get
        End Property
        
        Friend ReadOnly Property DevelopmentFeeColumn As DataColumn
            Get
                Return Me.columnDevelopmentFee
            End Get
        End Property
        
        Friend ReadOnly Property CriditNumberColumn As DataColumn
            Get
                Return Me.columnCriditNumber
            End Get
        End Property
        
        Friend ReadOnly Property SecurityDepositColumn As DataColumn
            Get
                Return Me.columnSecurityDeposit
            End Get
        End Property
        
        Friend ReadOnly Property PlaceOfBirthColumn As DataColumn
            Get
                Return Me.columnPlaceOfBirth
            End Get
        End Property
        
        Friend ReadOnly Property CountryOfBirthColumn As DataColumn
            Get
                Return Me.columnCountryOfBirth
            End Get
        End Property
        
        Friend ReadOnly Property LastArrivalInCalColumn As DataColumn
            Get
                Return Me.columnLastArrivalInCal
            End Get
        End Property
        
        Friend ReadOnly Property PeriodOfStay_yearColumn As DataColumn
            Get
                Return Me.columnPeriodOfStay_year
            End Get
        End Property
        
        Friend ReadOnly Property PeriodOfStay_MonthColumn As DataColumn
            Get
                Return Me.columnPeriodOfStay_Month
            End Get
        End Property
        
        Friend ReadOnly Property PreviouslyProposedColumn As DataColumn
            Get
                Return Me.columnPreviouslyProposed
            End Get
        End Property
        
        Friend ReadOnly Property NoOfTimesProposedColumn As DataColumn
            Get
                Return Me.columnNoOfTimesProposed
            End Get
        End Property
        
        Friend ReadOnly Property DateOfProposalColumn As DataColumn
            Get
                Return Me.columnDateOfProposal
            End Get
        End Property
        
        Friend ReadOnly Property ResultOfProposalColumn As DataColumn
            Get
                Return Me.columnResultOfProposal
            End Get
        End Property
        
        Friend ReadOnly Property ElectedColumn As DataColumn
            Get
                Return Me.columnElected
            End Get
        End Property
        
        Friend ReadOnly Property FatherNameColumn As DataColumn
            Get
                Return Me.columnFatherName
            End Get
        End Property
        
        Friend ReadOnly Property DOBfatherColumn As DataColumn
            Get
                Return Me.columnDOBfather
            End Get
        End Property
        
        Friend ReadOnly Property WifeDOBColumn As DataColumn
            Get
                Return Me.columnWifeDOB
            End Get
        End Property
        
        Friend ReadOnly Property MaidenNameWifeColumn As DataColumn
            Get
                Return Me.columnMaidenNameWife
            End Get
        End Property
        
        Friend ReadOnly Property NationalityWifeColumn As DataColumn
            Get
                Return Me.columnNationalityWife
            End Get
        End Property
        
        Friend ReadOnly Property WifesFatherNameColumn As DataColumn
            Get
                Return Me.columnWifesFatherName
            End Get
        End Property
        
        Friend ReadOnly Property WifeFatherDOBColumn As DataColumn
            Get
                Return Me.columnWifeFatherDOB
            End Get
        End Property
        
        Friend ReadOnly Property ApplNoColumn As DataColumn
            Get
                Return Me.columnApplNo
            End Get
        End Property
        
        Friend ReadOnly Property ApplDateColumn As DataColumn
            Get
                Return Me.columnApplDate
            End Get
        End Property
        
        Friend ReadOnly Property CorporatestColumn As DataColumn
            Get
                Return Me.columnCorporatest
            End Get
        End Property
        
        Friend ReadOnly Property CorporateCodeColumn As DataColumn
            Get
                Return Me.columnCorporateCode
            End Get
        End Property
        
        Friend ReadOnly Property CompNameColumn As DataColumn
            Get
                Return Me.columnCompName
            End Get
        End Property
        
        Friend ReadOnly Property DesignationColumn As DataColumn
            Get
                Return Me.columnDesignation
            End Get
        End Property
        
        Friend ReadOnly Property ProfessionInfoColumn As DataColumn
            Get
                Return Me.columnProfessionInfo
            End Get
        End Property
        
        Friend ReadOnly Property BuisnessInfoColumn As DataColumn
            Get
                Return Me.columnBuisnessInfo
            End Get
        End Property
        
        Friend ReadOnly Property ProductsColumn As DataColumn
            Get
                Return Me.columnProducts
            End Get
        End Property
        
        Friend ReadOnly Property AgentsDealersColumn As DataColumn
            Get
                Return Me.columnAgentsDealers
            End Get
        End Property
        
        Friend ReadOnly Property ESTDdateColumn As DataColumn
            Get
                Return Me.columnESTDdate
            End Get
        End Property
        
        Friend ReadOnly Property NoOfEmpColumn As DataColumn
            Get
                Return Me.columnNoOfEmp
            End Get
        End Property
        
        Friend ReadOnly Property TurnoverColumn As DataColumn
            Get
                Return Me.columnTurnover
            End Get
        End Property
        
        Friend ReadOnly Property ClientColumn As DataColumn
            Get
                Return Me.columnClient
            End Get
        End Property
        
        Friend ReadOnly Property AppliedButColumn As DataColumn
            Get
                Return Me.columnAppliedBut
            End Get
        End Property
        
        Friend ReadOnly Property PositionInChamberColumn As DataColumn
            Get
                Return Me.columnPositionInChamber
            End Get
        End Property
        
        Friend ReadOnly Property QulificationstatusColumn As DataColumn
            Get
                Return Me.columnQulificationstatus
            End Get
        End Property
        
        Friend ReadOnly Property Qualification1Column As DataColumn
            Get
                Return Me.columnQualification1
            End Get
        End Property
        
        Friend ReadOnly Property Details1Column As DataColumn
            Get
                Return Me.columnDetails1
            End Get
        End Property
        
        Friend ReadOnly Property YearOfPassing1Column As DataColumn
            Get
                Return Me.columnYearOfPassing1
            End Get
        End Property
        
        Friend ReadOnly Property Institute1Column As DataColumn
            Get
                Return Me.columnInstitute1
            End Get
        End Property
        
        Friend ReadOnly Property Division1Column As DataColumn
            Get
                Return Me.columnDivision1
            End Get
        End Property
        
        Friend ReadOnly Property Qualification2Column As DataColumn
            Get
                Return Me.columnQualification2
            End Get
        End Property
        
        Friend ReadOnly Property Details2Column As DataColumn
            Get
                Return Me.columnDetails2
            End Get
        End Property
        
        Friend ReadOnly Property YearOfPassing2Column As DataColumn
            Get
                Return Me.columnYearOfPassing2
            End Get
        End Property
        
        Friend ReadOnly Property Institute2Column As DataColumn
            Get
                Return Me.columnInstitute2
            End Get
        End Property
        
        Friend ReadOnly Property Division2Column As DataColumn
            Get
                Return Me.columnDivision2
            End Get
        End Property
        
        Friend ReadOnly Property Qualification3Column As DataColumn
            Get
                Return Me.columnQualification3
            End Get
        End Property
        
        Friend ReadOnly Property Details3Column As DataColumn
            Get
                Return Me.columnDetails3
            End Get
        End Property
        
        Friend ReadOnly Property YearOfPassing3Column As DataColumn
            Get
                Return Me.columnYearOfPassing3
            End Get
        End Property
        
        Friend ReadOnly Property Institute3Column As DataColumn
            Get
                Return Me.columnInstitute3
            End Get
        End Property
        
        Friend ReadOnly Property Division3Column As DataColumn
            Get
                Return Me.columnDivision3
            End Get
        End Property
        
        Friend ReadOnly Property sportstatusColumn As DataColumn
            Get
                Return Me.columnsportstatus
            End Get
        End Property
        
        Friend ReadOnly Property GameType1Column As DataColumn
            Get
                Return Me.columnGameType1
            End Get
        End Property
        
        Friend ReadOnly Property NameOfGame1Column As DataColumn
            Get
                Return Me.columnNameOfGame1
            End Get
        End Property
        
        Friend ReadOnly Property Description1Column As DataColumn
            Get
                Return Me.columnDescription1
            End Get
        End Property
        
        Friend ReadOnly Property GameType2Column As DataColumn
            Get
                Return Me.columnGameType2
            End Get
        End Property
        
        Friend ReadOnly Property NameofGame2Column As DataColumn
            Get
                Return Me.columnNameofGame2
            End Get
        End Property
        
        Friend ReadOnly Property Description2Column As DataColumn
            Get
                Return Me.columnDescription2
            End Get
        End Property
        
        Friend ReadOnly Property GameType3Column As DataColumn
            Get
                Return Me.columnGameType3
            End Get
        End Property
        
        Friend ReadOnly Property NameOfGame3Column As DataColumn
            Get
                Return Me.columnNameOfGame3
            End Get
        End Property
        
        Friend ReadOnly Property Description3Column As DataColumn
            Get
                Return Me.columnDescription3
            End Get
        End Property
        
        Friend ReadOnly Property ChildstatusColumn As DataColumn
            Get
                Return Me.columnChildstatus
            End Get
        End Property
        
        Friend ReadOnly Property ChildName1Column As DataColumn
            Get
                Return Me.columnChildName1
            End Get
        End Property
        
        Friend ReadOnly Property ChildDob1Column As DataColumn
            Get
                Return Me.columnChildDob1
            End Get
        End Property
        
        Friend ReadOnly Property ChildSex1Column As DataColumn
            Get
                Return Me.columnChildSex1
            End Get
        End Property
        
        Friend ReadOnly Property ChildExpairy1Column As DataColumn
            Get
                Return Me.columnChildExpairy1
            End Get
        End Property
        
        Friend ReadOnly Property ChildName2Column As DataColumn
            Get
                Return Me.columnChildName2
            End Get
        End Property
        
        Friend ReadOnly Property ChildDob2Column As DataColumn
            Get
                Return Me.columnChildDob2
            End Get
        End Property
        
        Friend ReadOnly Property ChildSex2Column As DataColumn
            Get
                Return Me.columnChildSex2
            End Get
        End Property
        
        Friend ReadOnly Property ChildExpairy2Column As DataColumn
            Get
                Return Me.columnChildExpairy2
            End Get
        End Property
        
        Friend ReadOnly Property ChildName3Column As DataColumn
            Get
                Return Me.columnChildName3
            End Get
        End Property
        
        Friend ReadOnly Property ChildDob3Column As DataColumn
            Get
                Return Me.columnChildDob3
            End Get
        End Property
        
        Friend ReadOnly Property ChildSex3Column As DataColumn
            Get
                Return Me.columnChildSex3
            End Get
        End Property
        
        Friend ReadOnly Property childExpairy3Column As DataColumn
            Get
                Return Me.columnchildExpairy3
            End Get
        End Property
        
        Friend ReadOnly Property ClubstatusColumn As DataColumn
            Get
                Return Me.columnClubstatus
            End Get
        End Property
        
        Friend ReadOnly Property OtherClubName1Column As DataColumn
            Get
                Return Me.columnOtherClubName1
            End Get
        End Property
        
        Friend ReadOnly Property OCAddress1Column As DataColumn
            Get
                Return Me.columnOCAddress1
            End Get
        End Property
        
        Friend ReadOnly Property OCStatus1Column As DataColumn
            Get
                Return Me.columnOCStatus1
            End Get
        End Property
        
        Friend ReadOnly Property OtherClubName2Column As DataColumn
            Get
                Return Me.columnOtherClubName2
            End Get
        End Property
        
        Friend ReadOnly Property OCAddress2Column As DataColumn
            Get
                Return Me.columnOCAddress2
            End Get
        End Property
        
        Friend ReadOnly Property OCStatus2Column As DataColumn
            Get
                Return Me.columnOCStatus2
            End Get
        End Property
        
        Friend ReadOnly Property OtherClubname3Column As DataColumn
            Get
                Return Me.columnOtherClubname3
            End Get
        End Property
        
        Friend ReadOnly Property OCAddress3Column As DataColumn
            Get
                Return Me.columnOCAddress3
            End Get
        End Property
        
        Friend ReadOnly Property OCStatausColumn As DataColumn
            Get
                Return Me.columnOCStataus
            End Get
        End Property
        
        Friend ReadOnly Property adduserColumn As DataColumn
            Get
                Return Me.columnadduser
            End Get
        End Property
        
        Friend ReadOnly Property adddateColumn As DataColumn
            Get
                Return Me.columnadddate
            End Get
        End Property
        
        Friend ReadOnly Property freezeColumn As DataColumn
            Get
                Return Me.columnfreeze
            End Get
        End Property
        
        Friend ReadOnly Property RelativestatusColumn As DataColumn
            Get
                Return Me.columnRelativestatus
            End Get
        End Property
        
        Friend ReadOnly Property RelativeName1Column As DataColumn
            Get
                Return Me.columnRelativeName1
            End Get
        End Property
        
        Friend ReadOnly Property Relation1Column As DataColumn
            Get
                Return Me.columnRelation1
            End Get
        End Property
        
        Friend ReadOnly Property dateofbirth1Column As DataColumn
            Get
                Return Me.columndateofbirth1
            End Get
        End Property
        
        Friend ReadOnly Property Relativeage1Column As DataColumn
            Get
                Return Me.columnRelativeage1
            End Get
        End Property
        
        Friend ReadOnly Property RelativeSex1Column As DataColumn
            Get
                Return Me.columnRelativeSex1
            End Get
        End Property
        
        Friend ReadOnly Property Relativeaddress1Column As DataColumn
            Get
                Return Me.columnRelativeaddress1
            End Get
        End Property
        
        Friend ReadOnly Property RelativeName2Column As DataColumn
            Get
                Return Me.columnRelativeName2
            End Get
        End Property
        
        Friend ReadOnly Property Relation2Column As DataColumn
            Get
                Return Me.columnRelation2
            End Get
        End Property
        
        Friend ReadOnly Property dateofbirth2Column As DataColumn
            Get
                Return Me.columndateofbirth2
            End Get
        End Property
        
        Friend ReadOnly Property Relativeage2Column As DataColumn
            Get
                Return Me.columnRelativeage2
            End Get
        End Property
        
        Friend ReadOnly Property RelativeSex2Column As DataColumn
            Get
                Return Me.columnRelativeSex2
            End Get
        End Property
        
        Friend ReadOnly Property Relativeaddress2Column As DataColumn
            Get
                Return Me.columnRelativeaddress2
            End Get
        End Property
        
        Friend ReadOnly Property RelativeName3Column As DataColumn
            Get
                Return Me.columnRelativeName3
            End Get
        End Property
        
        Friend ReadOnly Property Relation3Column As DataColumn
            Get
                Return Me.columnRelation3
            End Get
        End Property
        
        Friend ReadOnly Property dateofbirth3Column As DataColumn
            Get
                Return Me.columndateofbirth3
            End Get
        End Property
        
        Friend ReadOnly Property Relativeage3Column As DataColumn
            Get
                Return Me.columnRelativeage3
            End Get
        End Property
        
        Friend ReadOnly Property RelativeSex3Column As DataColumn
            Get
                Return Me.columnRelativeSex3
            End Get
        End Property
        
        Friend ReadOnly Property Relativeaddress3Column As DataColumn
            Get
                Return Me.columnRelativeaddress3
            End Get
        End Property
        
        Friend ReadOnly Property referentialstColumn As DataColumn
            Get
                Return Me.columnreferentialst
            End Get
        End Property
        
        Friend ReadOnly Property mem_code1Column As DataColumn
            Get
                Return Me.columnmem_code1
            End Get
        End Property
        
        Friend ReadOnly Property mem_name1Column As DataColumn
            Get
                Return Me.columnmem_name1
            End Get
        End Property
        
        Friend ReadOnly Property refmem_date1Column As DataColumn
            Get
                Return Me.columnrefmem_date1
            End Get
        End Property
        
        Friend ReadOnly Property deleted1Column As DataColumn
            Get
                Return Me.columndeleted1
            End Get
        End Property
        
        Friend ReadOnly Property mem_code2Column As DataColumn
            Get
                Return Me.columnmem_code2
            End Get
        End Property
        
        Friend ReadOnly Property mem_name2Column As DataColumn
            Get
                Return Me.columnmem_name2
            End Get
        End Property
        
        Friend ReadOnly Property refmem_date2Column As DataColumn
            Get
                Return Me.columnrefmem_date2
            End Get
        End Property
        
        Friend ReadOnly Property deleted2Column As DataColumn
            Get
                Return Me.columndeleted2
            End Get
        End Property
        
        Friend ReadOnly Property mem_code3Column As DataColumn
            Get
                Return Me.columnmem_code3
            End Get
        End Property
        
        Friend ReadOnly Property mem_name3Column As DataColumn
            Get
                Return Me.columnmem_name3
            End Get
        End Property
        
        Friend ReadOnly Property refmem_date3Column As DataColumn
            Get
                Return Me.columnrefmem_date3
            End Get
        End Property
        
        Friend ReadOnly Property deleted3Column As DataColumn
            Get
                Return Me.columndeleted3
            End Get
        End Property
        
        Friend ReadOnly Property entrancefeestColumn As DataColumn
            Get
                Return Me.columnentrancefeest
            End Get
        End Property
        
        Friend ReadOnly Property receiptno1Column As DataColumn
            Get
                Return Me.columnreceiptno1
            End Get
        End Property
        
        Friend ReadOnly Property startdate1Column As DataColumn
            Get
                Return Me.columnstartdate1
            End Get
        End Property
        
        Friend ReadOnly Property amount1Column As DataColumn
            Get
                Return Me.columnamount1
            End Get
        End Property
        
        Friend ReadOnly Property receiptno2Column As DataColumn
            Get
                Return Me.columnreceiptno2
            End Get
        End Property
        
        Friend ReadOnly Property startdate2Column As DataColumn
            Get
                Return Me.columnstartdate2
            End Get
        End Property
        
        Friend ReadOnly Property amount2Column As DataColumn
            Get
                Return Me.columnamount2
            End Get
        End Property
        
        Friend ReadOnly Property receiptno3Column As DataColumn
            Get
                Return Me.columnreceiptno3
            End Get
        End Property
        
        Friend ReadOnly Property startdate3Column As DataColumn
            Get
                Return Me.columnstartdate3
            End Get
        End Property
        
        Friend ReadOnly Property amount3Column As DataColumn
            Get
                Return Me.columnamount3
            End Get
        End Property
        
        Friend ReadOnly Property OLDColumn As DataColumn
            Get
                Return Me.columnOLD
            End Get
        End Property
        
        Friend ReadOnly Property CardAmtColumn As DataColumn
            Get
                Return Me.columnCardAmt
            End Get
        End Property
        
        Friend ReadOnly Property MINIMUMUSAGEColumn As DataColumn
            Get
                Return Me.columnMINIMUMUSAGE
            End Get
        End Property
        
        Friend ReadOnly Property CREDITNOColumn As DataColumn
            Get
                Return Me.columnCREDITNO
            End Get
        End Property
        
        Friend ReadOnly Property SPOUSEMOBILEColumn As DataColumn
            Get
                Return Me.columnSPOUSEMOBILE
            End Get
        End Property
        
        Friend ReadOnly Property PADD4Column As DataColumn
            Get
                Return Me.columnPADD4
            End Get
        End Property
        
        Friend ReadOnly Property CADD4Column As DataColumn
            Get
                Return Me.columnCADD4
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As membermasterRow
            Get
                Return CType(Me.Rows(index),membermasterRow)
            End Get
        End Property
        
        Public Event membermasterRowChanged As membermasterRowChangeEventHandler
        
        Public Event membermasterRowChanging As membermasterRowChangeEventHandler
        
        Public Event membermasterRowDeleted As membermasterRowChangeEventHandler
        
        Public Event membermasterRowDeleting As membermasterRowChangeEventHandler
        
        Public Overloads Sub AddmembermasterRow(ByVal row As membermasterRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddmembermasterRow( _
                    ByVal TAG As String,  _
                    ByVal MEMBERTYPECODE As String,  _
                    ByVal COMPANY As String,  _
                    ByVal SUBCD As String,  _
                    ByVal MCODE As String,  _
                    ByVal MNAME As String,  _
                    ByVal MID As String,  _
                    ByVal DOB As Date,  _
                    ByVal DOJ As Date,  _
                    ByVal SEX As String,  _
                    ByVal MARITALSTATUS As String,  _
                    ByVal SPOUSE As String,  _
                    ByVal BG As String,  _
                    ByVal OCCUPATION As String,  _
                    ByVal BANKER As String,  _
                    ByVal BANKACNO As String,  _
                    ByVal HOBBIES As String,  _
                    ByVal OTHERINFO As String,  _
                    ByVal RESIDENT As String,  _
                    ByVal EQUALIFICATION As String,  _
                    ByVal PQUALIFICATION As String,  _
                    ByVal PROPOSER As String,  _
                    ByVal PROPOSERNAME As String,  _
                    ByVal SECONDER As String,  _
                    ByVal SECONDERNAME As String,  _
                    ByVal PAcopyst As String,  _
                    ByVal PADD1 As String,  _
                    ByVal PADD2 As String,  _
                    ByVal PADD3 As String,  _
                    ByVal PCITY As String,  _
                    ByVal PSTATE As String,  _
                    ByVal PCOUNTRY As String,  _
                    ByVal PPIN As String,  _
                    ByVal PPHONE1 As String,  _
                    ByVal PPHONE2 As String,  _
                    ByVal PCELL As String,  _
                    ByVal PEMAIL As String,  _
                    ByVal RAcopyst As String,  _
                    ByVal CADD1 As String,  _
                    ByVal CADD2 As String,  _
                    ByVal CADD3 As String,  _
                    ByVal CCITY As String,  _
                    ByVal CSTATE As String,  _
                    ByVal CCOUNTRY As String,  _
                    ByVal CPIN As String,  _
                    ByVal CPHONE1 As String,  _
                    ByVal CPHONE2 As String,  _
                    ByVal CCELL As String,  _
                    ByVal CEMAIL As String,  _
                    ByVal CONTADD1 As String,  _
                    ByVal CONTADD2 As String,  _
                    ByVal CONTADD3 As String,  _
                    ByVal CONTCITY As String,  _
                    ByVal CONTSTATE As String,  _
                    ByVal CONTCOUNTRY As String,  _
                    ByVal CONTPIN As String,  _
                    ByVal CONTPHONE1 As String,  _
                    ByVal CONTPHONE2 As String,  _
                    ByVal CONTCELL As String,  _
                    ByVal CONTEMAIL As String,  _
                    ByVal EMPTYPE As String,  _
                    ByVal BUSINESSNAME As String,  _
                    ByVal BAcopyst As String,  _
                    ByVal OADD1 As String,  _
                    ByVal OADD2 As String,  _
                    ByVal OADD3 As String,  _
                    ByVal OCITY As String,  _
                    ByVal OSTATE As String,  _
                    ByVal OCOUNTRY As String,  _
                    ByVal OPIN As String,  _
                    ByVal OPHONE1 As String,  _
                    ByVal OPHONE2 As String,  _
                    ByVal OCELL As String,  _
                    ByVal OEMAIL As String,  _
                    ByVal DOEPROFESSION As Date,  _
                    ByVal BUSINESSNATURE As String,  _
                    ByVal POSITIONHELD As String,  _
                    ByVal SERVICENAME As String,  _
                    ByVal SERVICEYEAR As Decimal,  _
                    ByVal PANO As String,  _
                    ByVal BBANKER As String,  _
                    ByVal CCNO As String,  _
                    ByVal ANNUALINCOME As Decimal,  _
                    ByVal UPDUSERID As String,  _
                    ByVal UPDDATETIME As Date,  _
                    ByVal TERMINATION As String,  _
                    ByVal TRN_CON_DATE As Date,  _
                    ByVal CON_MCODE As String,  _
                    ByVal PFAX As String,  _
                    ByVal CFAX As String,  _
                    ByVal CONTFAX As String,  _
                    ByVal REASON As String,  _
                    ByVal PHOTO As String,  _
                    ByVal CREDITLIMIT As Decimal,  _
                    ByVal LIMITAMOUNT As Decimal,  _
                    ByVal WEBSITE As String,  _
                    ByVal Imagefile() As Byte,  _
                    ByVal sizefield As Decimal,  _
                    ByVal Vdate As Date,  _
                    ByVal Vyear As Decimal,  _
                    ByVal Validdate As Date,  _
                    ByVal TempTermination As String,  _
                    ByVal TempTermDate As Date,  _
                    ByVal TempTermReason As String,  _
                    ByVal Memberid As String,  _
                    ByVal EndingDate As Date,  _
                    ByVal TotalYears As Decimal,  _
                    ByVal CardNo As String,  _
                    ByVal CardExpDate As Date,  _
                    ByVal Validity As String,  _
                    ByVal Period As String,  _
                    ByVal Creditcardno As String,  _
                    ByVal CreditExpDt As Date,  _
                    ByVal Type As String,  _
                    ByVal STATUSDATEFROM As Date,  _
                    ByVal STATUSDATETO As Date,  _
                    ByVal CurentStatus As String,  _
                    ByVal FirstName As String,  _
                    ByVal MiddleName As String,  _
                    ByVal Surname As String,  _
                    ByVal _Alias As String,  _
                    ByVal Prefix As String,  _
                    ByVal BillType As String,  _
                    ByVal Nationality As String,  _
                    ByVal NationalityAtbirth As String,  _
                    ByVal Billbasis As String,  _
                    ByVal BillHead As String,  _
                    ByVal GDRLocker As String,  _
                    ByVal LDRLocker As String,  _
                    ByVal HPLocker As String,  _
                    ByVal MembershipTo As Date,  _
                    ByVal salut As String,  _
                    ByVal EntranceFee As Double,  _
                    ByVal DevelopmentFee As Double,  _
                    ByVal CriditNumber As String,  _
                    ByVal SecurityDeposit As Decimal,  _
                    ByVal PlaceOfBirth As String,  _
                    ByVal CountryOfBirth As String,  _
                    ByVal LastArrivalInCal As Date,  _
                    ByVal PeriodOfStay_year As Decimal,  _
                    ByVal PeriodOfStay_Month As Decimal,  _
                    ByVal PreviouslyProposed As String,  _
                    ByVal NoOfTimesProposed As Decimal,  _
                    ByVal DateOfProposal As Date,  _
                    ByVal ResultOfProposal As String,  _
                    ByVal Elected As String,  _
                    ByVal FatherName As String,  _
                    ByVal DOBfather As Date,  _
                    ByVal WifeDOB As Date,  _
                    ByVal MaidenNameWife As String,  _
                    ByVal NationalityWife As String,  _
                    ByVal WifesFatherName As String,  _
                    ByVal WifeFatherDOB As Date,  _
                    ByVal ApplNo As String,  _
                    ByVal ApplDate As Date,  _
                    ByVal Corporatest As String,  _
                    ByVal CorporateCode As String,  _
                    ByVal CompName As String,  _
                    ByVal Designation As String,  _
                    ByVal ProfessionInfo As String,  _
                    ByVal BuisnessInfo As String,  _
                    ByVal Products As String,  _
                    ByVal AgentsDealers As String,  _
                    ByVal ESTDdate As Date,  _
                    ByVal NoOfEmp As Decimal,  _
                    ByVal Turnover As Double,  _
                    ByVal Client As String,  _
                    ByVal AppliedBut As String,  _
                    ByVal PositionInChamber As String,  _
                    ByVal Qulificationstatus As String,  _
                    ByVal Qualification1 As String,  _
                    ByVal Details1 As String,  _
                    ByVal YearOfPassing1 As String,  _
                    ByVal Institute1 As String,  _
                    ByVal Division1 As String,  _
                    ByVal Qualification2 As String,  _
                    ByVal Details2 As String,  _
                    ByVal YearOfPassing2 As String,  _
                    ByVal Institute2 As String,  _
                    ByVal Division2 As String,  _
                    ByVal Qualification3 As String,  _
                    ByVal Details3 As String,  _
                    ByVal YearOfPassing3 As String,  _
                    ByVal Institute3 As String,  _
                    ByVal Division3 As String,  _
                    ByVal sportstatus As String,  _
                    ByVal GameType1 As String,  _
                    ByVal NameOfGame1 As String,  _
                    ByVal Description1 As String,  _
                    ByVal GameType2 As String,  _
                    ByVal NameofGame2 As String,  _
                    ByVal Description2 As String,  _
                    ByVal GameType3 As String,  _
                    ByVal NameOfGame3 As String,  _
                    ByVal Description3 As String,  _
                    ByVal Childstatus As String,  _
                    ByVal ChildName1 As String,  _
                    ByVal ChildDob1 As String,  _
                    ByVal ChildSex1 As String,  _
                    ByVal ChildExpairy1 As String,  _
                    ByVal ChildName2 As String,  _
                    ByVal ChildDob2 As String,  _
                    ByVal ChildSex2 As String,  _
                    ByVal ChildExpairy2 As String,  _
                    ByVal ChildName3 As String,  _
                    ByVal ChildDob3 As String,  _
                    ByVal ChildSex3 As String,  _
                    ByVal childExpairy3 As String,  _
                    ByVal Clubstatus As String,  _
                    ByVal OtherClubName1 As String,  _
                    ByVal OCAddress1 As String,  _
                    ByVal OCStatus1 As String,  _
                    ByVal OtherClubName2 As String,  _
                    ByVal OCAddress2 As String,  _
                    ByVal OCStatus2 As String,  _
                    ByVal OtherClubname3 As String,  _
                    ByVal OCAddress3 As String,  _
                    ByVal OCStataus As String,  _
                    ByVal adduser As String,  _
                    ByVal adddate As Date,  _
                    ByVal freeze As String,  _
                    ByVal Relativestatus As String,  _
                    ByVal RelativeName1 As String,  _
                    ByVal Relation1 As String,  _
                    ByVal dateofbirth1 As String,  _
                    ByVal Relativeage1 As String,  _
                    ByVal RelativeSex1 As String,  _
                    ByVal Relativeaddress1 As String,  _
                    ByVal RelativeName2 As String,  _
                    ByVal Relation2 As String,  _
                    ByVal dateofbirth2 As String,  _
                    ByVal Relativeage2 As String,  _
                    ByVal RelativeSex2 As String,  _
                    ByVal Relativeaddress2 As String,  _
                    ByVal RelativeName3 As String,  _
                    ByVal Relation3 As String,  _
                    ByVal dateofbirth3 As String,  _
                    ByVal Relativeage3 As String,  _
                    ByVal RelativeSex3 As String,  _
                    ByVal Relativeaddress3 As String,  _
                    ByVal referentialst As String,  _
                    ByVal mem_code1 As String,  _
                    ByVal mem_name1 As String,  _
                    ByVal refmem_date1 As String,  _
                    ByVal deleted1 As String,  _
                    ByVal mem_code2 As String,  _
                    ByVal mem_name2 As String,  _
                    ByVal refmem_date2 As String,  _
                    ByVal deleted2 As String,  _
                    ByVal mem_code3 As String,  _
                    ByVal mem_name3 As String,  _
                    ByVal refmem_date3 As String,  _
                    ByVal deleted3 As String,  _
                    ByVal entrancefeest As String,  _
                    ByVal receiptno1 As String,  _
                    ByVal startdate1 As String,  _
                    ByVal amount1 As String,  _
                    ByVal receiptno2 As String,  _
                    ByVal startdate2 As String,  _
                    ByVal amount2 As String,  _
                    ByVal receiptno3 As String,  _
                    ByVal startdate3 As String,  _
                    ByVal amount3 As String,  _
                    ByVal OLD As String,  _
                    ByVal CardAmt As Decimal,  _
                    ByVal MINIMUMUSAGE As Decimal,  _
                    ByVal CREDITNO As String,  _
                    ByVal SPOUSEMOBILE As String,  _
                    ByVal PADD4 As String,  _
                    ByVal CADD4 As String) As membermasterRow
            Dim rowmembermasterRow As membermasterRow = CType(Me.NewRow,membermasterRow)
            rowmembermasterRow.ItemArray = New Object() {Nothing, TAG, MEMBERTYPECODE, COMPANY, SUBCD, MCODE, MNAME, MID, DOB, DOJ, SEX, MARITALSTATUS, SPOUSE, BG, OCCUPATION, BANKER, BANKACNO, HOBBIES, OTHERINFO, RESIDENT, EQUALIFICATION, PQUALIFICATION, PROPOSER, PROPOSERNAME, SECONDER, SECONDERNAME, PAcopyst, PADD1, PADD2, PADD3, PCITY, PSTATE, PCOUNTRY, PPIN, PPHONE1, PPHONE2, PCELL, PEMAIL, RAcopyst, CADD1, CADD2, CADD3, CCITY, CSTATE, CCOUNTRY, CPIN, CPHONE1, CPHONE2, CCELL, CEMAIL, CONTADD1, CONTADD2, CONTADD3, CONTCITY, CONTSTATE, CONTCOUNTRY, CONTPIN, CONTPHONE1, CONTPHONE2, CONTCELL, CONTEMAIL, EMPTYPE, BUSINESSNAME, BAcopyst, OADD1, OADD2, OADD3, OCITY, OSTATE, OCOUNTRY, OPIN, OPHONE1, OPHONE2, OCELL, OEMAIL, DOEPROFESSION, BUSINESSNATURE, POSITIONHELD, SERVICENAME, SERVICEYEAR, PANO, BBANKER, CCNO, ANNUALINCOME, UPDUSERID, UPDDATETIME, TERMINATION, TRN_CON_DATE, CON_MCODE, PFAX, CFAX, CONTFAX, REASON, PHOTO, CREDITLIMIT, LIMITAMOUNT, WEBSITE, Imagefile, sizefield, Vdate, Vyear, Validdate, TempTermination, TempTermDate, TempTermReason, Memberid, EndingDate, TotalYears, CardNo, CardExpDate, Validity, Period, Creditcardno, CreditExpDt, Type, STATUSDATEFROM, STATUSDATETO, CurentStatus, FirstName, MiddleName, Surname, _Alias, Prefix, BillType, Nationality, NationalityAtbirth, Billbasis, BillHead, GDRLocker, LDRLocker, HPLocker, MembershipTo, salut, EntranceFee, DevelopmentFee, CriditNumber, SecurityDeposit, PlaceOfBirth, CountryOfBirth, LastArrivalInCal, PeriodOfStay_year, PeriodOfStay_Month, PreviouslyProposed, NoOfTimesProposed, DateOfProposal, ResultOfProposal, Elected, FatherName, DOBfather, WifeDOB, MaidenNameWife, NationalityWife, WifesFatherName, WifeFatherDOB, ApplNo, ApplDate, Corporatest, CorporateCode, CompName, Designation, ProfessionInfo, BuisnessInfo, Products, AgentsDealers, ESTDdate, NoOfEmp, Turnover, Client, AppliedBut, PositionInChamber, Qulificationstatus, Qualification1, Details1, YearOfPassing1, Institute1, Division1, Qualification2, Details2, YearOfPassing2, Institute2, Division2, Qualification3, Details3, YearOfPassing3, Institute3, Division3, sportstatus, GameType1, NameOfGame1, Description1, GameType2, NameofGame2, Description2, GameType3, NameOfGame3, Description3, Childstatus, ChildName1, ChildDob1, ChildSex1, ChildExpairy1, ChildName2, ChildDob2, ChildSex2, ChildExpairy2, ChildName3, ChildDob3, ChildSex3, childExpairy3, Clubstatus, OtherClubName1, OCAddress1, OCStatus1, OtherClubName2, OCAddress2, OCStatus2, OtherClubname3, OCAddress3, OCStataus, adduser, adddate, freeze, Relativestatus, RelativeName1, Relation1, dateofbirth1, Relativeage1, RelativeSex1, Relativeaddress1, RelativeName2, Relation2, dateofbirth2, Relativeage2, RelativeSex2, Relativeaddress2, RelativeName3, Relation3, dateofbirth3, Relativeage3, RelativeSex3, Relativeaddress3, referentialst, mem_code1, mem_name1, refmem_date1, deleted1, mem_code2, mem_name2, refmem_date2, deleted2, mem_code3, mem_name3, refmem_date3, deleted3, entrancefeest, receiptno1, startdate1, amount1, receiptno2, startdate2, amount2, receiptno3, startdate3, amount3, OLD, CardAmt, MINIMUMUSAGE, CREDITNO, SPOUSEMOBILE, PADD4, CADD4}
            Me.Rows.Add(rowmembermasterRow)
            Return rowmembermasterRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As membermasterDataTable = CType(MyBase.Clone,membermasterDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New membermasterDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnSequenceNo = Me.Columns("SequenceNo")
            Me.columnTAG = Me.Columns("TAG")
            Me.columnMEMBERTYPECODE = Me.Columns("MEMBERTYPECODE")
            Me.columnCOMPANY = Me.Columns("COMPANY")
            Me.columnSUBCD = Me.Columns("SUBCD")
            Me.columnMCODE = Me.Columns("MCODE")
            Me.columnMNAME = Me.Columns("MNAME")
            Me.columnMID = Me.Columns("MID")
            Me.columnDOB = Me.Columns("DOB")
            Me.columnDOJ = Me.Columns("DOJ")
            Me.columnSEX = Me.Columns("SEX")
            Me.columnMARITALSTATUS = Me.Columns("MARITALSTATUS")
            Me.columnSPOUSE = Me.Columns("SPOUSE")
            Me.columnBG = Me.Columns("BG")
            Me.columnOCCUPATION = Me.Columns("OCCUPATION")
            Me.columnBANKER = Me.Columns("BANKER")
            Me.columnBANKACNO = Me.Columns("BANKACNO")
            Me.columnHOBBIES = Me.Columns("HOBBIES")
            Me.columnOTHERINFO = Me.Columns("OTHERINFO")
            Me.columnRESIDENT = Me.Columns("RESIDENT")
            Me.columnEQUALIFICATION = Me.Columns("EQUALIFICATION")
            Me.columnPQUALIFICATION = Me.Columns("PQUALIFICATION")
            Me.columnPROPOSER = Me.Columns("PROPOSER")
            Me.columnPROPOSERNAME = Me.Columns("PROPOSERNAME")
            Me.columnSECONDER = Me.Columns("SECONDER")
            Me.columnSECONDERNAME = Me.Columns("SECONDERNAME")
            Me.columnPAcopyst = Me.Columns("PAcopyst")
            Me.columnPADD1 = Me.Columns("PADD1")
            Me.columnPADD2 = Me.Columns("PADD2")
            Me.columnPADD3 = Me.Columns("PADD3")
            Me.columnPCITY = Me.Columns("PCITY")
            Me.columnPSTATE = Me.Columns("PSTATE")
            Me.columnPCOUNTRY = Me.Columns("PCOUNTRY")
            Me.columnPPIN = Me.Columns("PPIN")
            Me.columnPPHONE1 = Me.Columns("PPHONE1")
            Me.columnPPHONE2 = Me.Columns("PPHONE2")
            Me.columnPCELL = Me.Columns("PCELL")
            Me.columnPEMAIL = Me.Columns("PEMAIL")
            Me.columnRAcopyst = Me.Columns("RAcopyst")
            Me.columnCADD1 = Me.Columns("CADD1")
            Me.columnCADD2 = Me.Columns("CADD2")
            Me.columnCADD3 = Me.Columns("CADD3")
            Me.columnCCITY = Me.Columns("CCITY")
            Me.columnCSTATE = Me.Columns("CSTATE")
            Me.columnCCOUNTRY = Me.Columns("CCOUNTRY")
            Me.columnCPIN = Me.Columns("CPIN")
            Me.columnCPHONE1 = Me.Columns("CPHONE1")
            Me.columnCPHONE2 = Me.Columns("CPHONE2")
            Me.columnCCELL = Me.Columns("CCELL")
            Me.columnCEMAIL = Me.Columns("CEMAIL")
            Me.columnCONTADD1 = Me.Columns("CONTADD1")
            Me.columnCONTADD2 = Me.Columns("CONTADD2")
            Me.columnCONTADD3 = Me.Columns("CONTADD3")
            Me.columnCONTCITY = Me.Columns("CONTCITY")
            Me.columnCONTSTATE = Me.Columns("CONTSTATE")
            Me.columnCONTCOUNTRY = Me.Columns("CONTCOUNTRY")
            Me.columnCONTPIN = Me.Columns("CONTPIN")
            Me.columnCONTPHONE1 = Me.Columns("CONTPHONE1")
            Me.columnCONTPHONE2 = Me.Columns("CONTPHONE2")
            Me.columnCONTCELL = Me.Columns("CONTCELL")
            Me.columnCONTEMAIL = Me.Columns("CONTEMAIL")
            Me.columnEMPTYPE = Me.Columns("EMPTYPE")
            Me.columnBUSINESSNAME = Me.Columns("BUSINESSNAME")
            Me.columnBAcopyst = Me.Columns("BAcopyst")
            Me.columnOADD1 = Me.Columns("OADD1")
            Me.columnOADD2 = Me.Columns("OADD2")
            Me.columnOADD3 = Me.Columns("OADD3")
            Me.columnOCITY = Me.Columns("OCITY")
            Me.columnOSTATE = Me.Columns("OSTATE")
            Me.columnOCOUNTRY = Me.Columns("OCOUNTRY")
            Me.columnOPIN = Me.Columns("OPIN")
            Me.columnOPHONE1 = Me.Columns("OPHONE1")
            Me.columnOPHONE2 = Me.Columns("OPHONE2")
            Me.columnOCELL = Me.Columns("OCELL")
            Me.columnOEMAIL = Me.Columns("OEMAIL")
            Me.columnDOEPROFESSION = Me.Columns("DOEPROFESSION")
            Me.columnBUSINESSNATURE = Me.Columns("BUSINESSNATURE")
            Me.columnPOSITIONHELD = Me.Columns("POSITIONHELD")
            Me.columnSERVICENAME = Me.Columns("SERVICENAME")
            Me.columnSERVICEYEAR = Me.Columns("SERVICEYEAR")
            Me.columnPANO = Me.Columns("PANO")
            Me.columnBBANKER = Me.Columns("BBANKER")
            Me.columnCCNO = Me.Columns("CCNO")
            Me.columnANNUALINCOME = Me.Columns("ANNUALINCOME")
            Me.columnUPDUSERID = Me.Columns("UPDUSERID")
            Me.columnUPDDATETIME = Me.Columns("UPDDATETIME")
            Me.columnTERMINATION = Me.Columns("TERMINATION")
            Me.columnTRN_CON_DATE = Me.Columns("TRN_CON_DATE")
            Me.columnCON_MCODE = Me.Columns("CON_MCODE")
            Me.columnPFAX = Me.Columns("PFAX")
            Me.columnCFAX = Me.Columns("CFAX")
            Me.columnCONTFAX = Me.Columns("CONTFAX")
            Me.columnREASON = Me.Columns("REASON")
            Me.columnPHOTO = Me.Columns("PHOTO")
            Me.columnCREDITLIMIT = Me.Columns("CREDITLIMIT")
            Me.columnLIMITAMOUNT = Me.Columns("LIMITAMOUNT")
            Me.columnWEBSITE = Me.Columns("WEBSITE")
            Me.columnImagefile = Me.Columns("Imagefile")
            Me.columnsizefield = Me.Columns("sizefield")
            Me.columnVdate = Me.Columns("Vdate")
            Me.columnVyear = Me.Columns("Vyear")
            Me.columnValiddate = Me.Columns("Validdate")
            Me.columnTempTermination = Me.Columns("TempTermination")
            Me.columnTempTermDate = Me.Columns("TempTermDate")
            Me.columnTempTermReason = Me.Columns("TempTermReason")
            Me.columnMemberid = Me.Columns("Memberid")
            Me.columnEndingDate = Me.Columns("EndingDate")
            Me.columnTotalYears = Me.Columns("TotalYears")
            Me.columnCardNo = Me.Columns("CardNo")
            Me.columnCardExpDate = Me.Columns("CardExpDate")
            Me.columnValidity = Me.Columns("Validity")
            Me.columnPeriod = Me.Columns("Period")
            Me.columnCreditcardno = Me.Columns("Creditcardno")
            Me.columnCreditExpDt = Me.Columns("CreditExpDt")
            Me.columnType = Me.Columns("Type")
            Me.columnSTATUSDATEFROM = Me.Columns("STATUSDATEFROM")
            Me.columnSTATUSDATETO = Me.Columns("STATUSDATETO")
            Me.columnCurentStatus = Me.Columns("CurentStatus")
            Me.columnFirstName = Me.Columns("FirstName")
            Me.columnMiddleName = Me.Columns("MiddleName")
            Me.columnSurname = Me.Columns("Surname")
            Me.column_Alias = Me.Columns("Alias")
            Me.columnPrefix = Me.Columns("Prefix")
            Me.columnBillType = Me.Columns("BillType")
            Me.columnNationality = Me.Columns("Nationality")
            Me.columnNationalityAtbirth = Me.Columns("NationalityAtbirth")
            Me.columnBillbasis = Me.Columns("Billbasis")
            Me.columnBillHead = Me.Columns("BillHead")
            Me.columnGDRLocker = Me.Columns("GDRLocker")
            Me.columnLDRLocker = Me.Columns("LDRLocker")
            Me.columnHPLocker = Me.Columns("HPLocker")
            Me.columnMembershipTo = Me.Columns("MembershipTo")
            Me.columnsalut = Me.Columns("salut")
            Me.columnEntranceFee = Me.Columns("EntranceFee")
            Me.columnDevelopmentFee = Me.Columns("DevelopmentFee")
            Me.columnCriditNumber = Me.Columns("CriditNumber")
            Me.columnSecurityDeposit = Me.Columns("SecurityDeposit")
            Me.columnPlaceOfBirth = Me.Columns("PlaceOfBirth")
            Me.columnCountryOfBirth = Me.Columns("CountryOfBirth")
            Me.columnLastArrivalInCal = Me.Columns("LastArrivalInCal")
            Me.columnPeriodOfStay_year = Me.Columns("PeriodOfStay_year")
            Me.columnPeriodOfStay_Month = Me.Columns("PeriodOfStay_Month")
            Me.columnPreviouslyProposed = Me.Columns("PreviouslyProposed")
            Me.columnNoOfTimesProposed = Me.Columns("NoOfTimesProposed")
            Me.columnDateOfProposal = Me.Columns("DateOfProposal")
            Me.columnResultOfProposal = Me.Columns("ResultOfProposal")
            Me.columnElected = Me.Columns("Elected")
            Me.columnFatherName = Me.Columns("FatherName")
            Me.columnDOBfather = Me.Columns("DOBfather")
            Me.columnWifeDOB = Me.Columns("WifeDOB")
            Me.columnMaidenNameWife = Me.Columns("MaidenNameWife")
            Me.columnNationalityWife = Me.Columns("NationalityWife")
            Me.columnWifesFatherName = Me.Columns("WifesFatherName")
            Me.columnWifeFatherDOB = Me.Columns("WifeFatherDOB")
            Me.columnApplNo = Me.Columns("ApplNo")
            Me.columnApplDate = Me.Columns("ApplDate")
            Me.columnCorporatest = Me.Columns("Corporatest")
            Me.columnCorporateCode = Me.Columns("CorporateCode")
            Me.columnCompName = Me.Columns("CompName")
            Me.columnDesignation = Me.Columns("Designation")
            Me.columnProfessionInfo = Me.Columns("ProfessionInfo")
            Me.columnBuisnessInfo = Me.Columns("BuisnessInfo")
            Me.columnProducts = Me.Columns("Products")
            Me.columnAgentsDealers = Me.Columns("AgentsDealers")
            Me.columnESTDdate = Me.Columns("ESTDdate")
            Me.columnNoOfEmp = Me.Columns("NoOfEmp")
            Me.columnTurnover = Me.Columns("Turnover")
            Me.columnClient = Me.Columns("Client")
            Me.columnAppliedBut = Me.Columns("AppliedBut")
            Me.columnPositionInChamber = Me.Columns("PositionInChamber")
            Me.columnQulificationstatus = Me.Columns("Qulificationstatus")
            Me.columnQualification1 = Me.Columns("Qualification1")
            Me.columnDetails1 = Me.Columns("Details1")
            Me.columnYearOfPassing1 = Me.Columns("YearOfPassing1")
            Me.columnInstitute1 = Me.Columns("Institute1")
            Me.columnDivision1 = Me.Columns("Division1")
            Me.columnQualification2 = Me.Columns("Qualification2")
            Me.columnDetails2 = Me.Columns("Details2")
            Me.columnYearOfPassing2 = Me.Columns("YearOfPassing2")
            Me.columnInstitute2 = Me.Columns("Institute2")
            Me.columnDivision2 = Me.Columns("Division2")
            Me.columnQualification3 = Me.Columns("Qualification3")
            Me.columnDetails3 = Me.Columns("Details3")
            Me.columnYearOfPassing3 = Me.Columns("YearOfPassing3")
            Me.columnInstitute3 = Me.Columns("Institute3")
            Me.columnDivision3 = Me.Columns("Division3")
            Me.columnsportstatus = Me.Columns("sportstatus")
            Me.columnGameType1 = Me.Columns("GameType1")
            Me.columnNameOfGame1 = Me.Columns("NameOfGame1")
            Me.columnDescription1 = Me.Columns("Description1")
            Me.columnGameType2 = Me.Columns("GameType2")
            Me.columnNameofGame2 = Me.Columns("NameofGame2")
            Me.columnDescription2 = Me.Columns("Description2")
            Me.columnGameType3 = Me.Columns("GameType3")
            Me.columnNameOfGame3 = Me.Columns("NameOfGame3")
            Me.columnDescription3 = Me.Columns("Description3")
            Me.columnChildstatus = Me.Columns("Childstatus")
            Me.columnChildName1 = Me.Columns("ChildName1")
            Me.columnChildDob1 = Me.Columns("ChildDob1")
            Me.columnChildSex1 = Me.Columns("ChildSex1")
            Me.columnChildExpairy1 = Me.Columns("ChildExpairy1")
            Me.columnChildName2 = Me.Columns("ChildName2")
            Me.columnChildDob2 = Me.Columns("ChildDob2")
            Me.columnChildSex2 = Me.Columns("ChildSex2")
            Me.columnChildExpairy2 = Me.Columns("ChildExpairy2")
            Me.columnChildName3 = Me.Columns("ChildName3")
            Me.columnChildDob3 = Me.Columns("ChildDob3")
            Me.columnChildSex3 = Me.Columns("ChildSex3")
            Me.columnchildExpairy3 = Me.Columns("childExpairy3")
            Me.columnClubstatus = Me.Columns("Clubstatus")
            Me.columnOtherClubName1 = Me.Columns("OtherClubName1")
            Me.columnOCAddress1 = Me.Columns("OCAddress1")
            Me.columnOCStatus1 = Me.Columns("OCStatus1")
            Me.columnOtherClubName2 = Me.Columns("OtherClubName2")
            Me.columnOCAddress2 = Me.Columns("OCAddress2")
            Me.columnOCStatus2 = Me.Columns("OCStatus2")
            Me.columnOtherClubname3 = Me.Columns("OtherClubname3")
            Me.columnOCAddress3 = Me.Columns("OCAddress3")
            Me.columnOCStataus = Me.Columns("OCStataus")
            Me.columnadduser = Me.Columns("adduser")
            Me.columnadddate = Me.Columns("adddate")
            Me.columnfreeze = Me.Columns("freeze")
            Me.columnRelativestatus = Me.Columns("Relativestatus")
            Me.columnRelativeName1 = Me.Columns("RelativeName1")
            Me.columnRelation1 = Me.Columns("Relation1")
            Me.columndateofbirth1 = Me.Columns("dateofbirth1")
            Me.columnRelativeage1 = Me.Columns("Relativeage1")
            Me.columnRelativeSex1 = Me.Columns("RelativeSex1")
            Me.columnRelativeaddress1 = Me.Columns("Relativeaddress1")
            Me.columnRelativeName2 = Me.Columns("RelativeName2")
            Me.columnRelation2 = Me.Columns("Relation2")
            Me.columndateofbirth2 = Me.Columns("dateofbirth2")
            Me.columnRelativeage2 = Me.Columns("Relativeage2")
            Me.columnRelativeSex2 = Me.Columns("RelativeSex2")
            Me.columnRelativeaddress2 = Me.Columns("Relativeaddress2")
            Me.columnRelativeName3 = Me.Columns("RelativeName3")
            Me.columnRelation3 = Me.Columns("Relation3")
            Me.columndateofbirth3 = Me.Columns("dateofbirth3")
            Me.columnRelativeage3 = Me.Columns("Relativeage3")
            Me.columnRelativeSex3 = Me.Columns("RelativeSex3")
            Me.columnRelativeaddress3 = Me.Columns("Relativeaddress3")
            Me.columnreferentialst = Me.Columns("referentialst")
            Me.columnmem_code1 = Me.Columns("mem_code1")
            Me.columnmem_name1 = Me.Columns("mem_name1")
            Me.columnrefmem_date1 = Me.Columns("refmem_date1")
            Me.columndeleted1 = Me.Columns("deleted1")
            Me.columnmem_code2 = Me.Columns("mem_code2")
            Me.columnmem_name2 = Me.Columns("mem_name2")
            Me.columnrefmem_date2 = Me.Columns("refmem_date2")
            Me.columndeleted2 = Me.Columns("deleted2")
            Me.columnmem_code3 = Me.Columns("mem_code3")
            Me.columnmem_name3 = Me.Columns("mem_name3")
            Me.columnrefmem_date3 = Me.Columns("refmem_date3")
            Me.columndeleted3 = Me.Columns("deleted3")
            Me.columnentrancefeest = Me.Columns("entrancefeest")
            Me.columnreceiptno1 = Me.Columns("receiptno1")
            Me.columnstartdate1 = Me.Columns("startdate1")
            Me.columnamount1 = Me.Columns("amount1")
            Me.columnreceiptno2 = Me.Columns("receiptno2")
            Me.columnstartdate2 = Me.Columns("startdate2")
            Me.columnamount2 = Me.Columns("amount2")
            Me.columnreceiptno3 = Me.Columns("receiptno3")
            Me.columnstartdate3 = Me.Columns("startdate3")
            Me.columnamount3 = Me.Columns("amount3")
            Me.columnOLD = Me.Columns("OLD")
            Me.columnCardAmt = Me.Columns("CardAmt")
            Me.columnMINIMUMUSAGE = Me.Columns("MINIMUMUSAGE")
            Me.columnCREDITNO = Me.Columns("CREDITNO")
            Me.columnSPOUSEMOBILE = Me.Columns("SPOUSEMOBILE")
            Me.columnPADD4 = Me.Columns("PADD4")
            Me.columnCADD4 = Me.Columns("CADD4")
        End Sub
        
        Private Sub InitClass()
            Me.columnSequenceNo = New DataColumn("SequenceNo", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSequenceNo)
            Me.columnTAG = New DataColumn("TAG", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTAG)
            Me.columnMEMBERTYPECODE = New DataColumn("MEMBERTYPECODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEMBERTYPECODE)
            Me.columnCOMPANY = New DataColumn("COMPANY", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCOMPANY)
            Me.columnSUBCD = New DataColumn("SUBCD", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSUBCD)
            Me.columnMCODE = New DataColumn("MCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMCODE)
            Me.columnMNAME = New DataColumn("MNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMNAME)
            Me.columnMID = New DataColumn("MID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMID)
            Me.columnDOB = New DataColumn("DOB", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDOB)
            Me.columnDOJ = New DataColumn("DOJ", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDOJ)
            Me.columnSEX = New DataColumn("SEX", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSEX)
            Me.columnMARITALSTATUS = New DataColumn("MARITALSTATUS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMARITALSTATUS)
            Me.columnSPOUSE = New DataColumn("SPOUSE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSPOUSE)
            Me.columnBG = New DataColumn("BG", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBG)
            Me.columnOCCUPATION = New DataColumn("OCCUPATION", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOCCUPATION)
            Me.columnBANKER = New DataColumn("BANKER", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBANKER)
            Me.columnBANKACNO = New DataColumn("BANKACNO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBANKACNO)
            Me.columnHOBBIES = New DataColumn("HOBBIES", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHOBBIES)
            Me.columnOTHERINFO = New DataColumn("OTHERINFO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOTHERINFO)
            Me.columnRESIDENT = New DataColumn("RESIDENT", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRESIDENT)
            Me.columnEQUALIFICATION = New DataColumn("EQUALIFICATION", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEQUALIFICATION)
            Me.columnPQUALIFICATION = New DataColumn("PQUALIFICATION", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPQUALIFICATION)
            Me.columnPROPOSER = New DataColumn("PROPOSER", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPROPOSER)
            Me.columnPROPOSERNAME = New DataColumn("PROPOSERNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPROPOSERNAME)
            Me.columnSECONDER = New DataColumn("SECONDER", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSECONDER)
            Me.columnSECONDERNAME = New DataColumn("SECONDERNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSECONDERNAME)
            Me.columnPAcopyst = New DataColumn("PAcopyst", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPAcopyst)
            Me.columnPADD1 = New DataColumn("PADD1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPADD1)
            Me.columnPADD2 = New DataColumn("PADD2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPADD2)
            Me.columnPADD3 = New DataColumn("PADD3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPADD3)
            Me.columnPCITY = New DataColumn("PCITY", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPCITY)
            Me.columnPSTATE = New DataColumn("PSTATE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPSTATE)
            Me.columnPCOUNTRY = New DataColumn("PCOUNTRY", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPCOUNTRY)
            Me.columnPPIN = New DataColumn("PPIN", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPPIN)
            Me.columnPPHONE1 = New DataColumn("PPHONE1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPPHONE1)
            Me.columnPPHONE2 = New DataColumn("PPHONE2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPPHONE2)
            Me.columnPCELL = New DataColumn("PCELL", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPCELL)
            Me.columnPEMAIL = New DataColumn("PEMAIL", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPEMAIL)
            Me.columnRAcopyst = New DataColumn("RAcopyst", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRAcopyst)
            Me.columnCADD1 = New DataColumn("CADD1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCADD1)
            Me.columnCADD2 = New DataColumn("CADD2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCADD2)
            Me.columnCADD3 = New DataColumn("CADD3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCADD3)
            Me.columnCCITY = New DataColumn("CCITY", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCCITY)
            Me.columnCSTATE = New DataColumn("CSTATE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCSTATE)
            Me.columnCCOUNTRY = New DataColumn("CCOUNTRY", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCCOUNTRY)
            Me.columnCPIN = New DataColumn("CPIN", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCPIN)
            Me.columnCPHONE1 = New DataColumn("CPHONE1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCPHONE1)
            Me.columnCPHONE2 = New DataColumn("CPHONE2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCPHONE2)
            Me.columnCCELL = New DataColumn("CCELL", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCCELL)
            Me.columnCEMAIL = New DataColumn("CEMAIL", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCEMAIL)
            Me.columnCONTADD1 = New DataColumn("CONTADD1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCONTADD1)
            Me.columnCONTADD2 = New DataColumn("CONTADD2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCONTADD2)
            Me.columnCONTADD3 = New DataColumn("CONTADD3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCONTADD3)
            Me.columnCONTCITY = New DataColumn("CONTCITY", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCONTCITY)
            Me.columnCONTSTATE = New DataColumn("CONTSTATE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCONTSTATE)
            Me.columnCONTCOUNTRY = New DataColumn("CONTCOUNTRY", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCONTCOUNTRY)
            Me.columnCONTPIN = New DataColumn("CONTPIN", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCONTPIN)
            Me.columnCONTPHONE1 = New DataColumn("CONTPHONE1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCONTPHONE1)
            Me.columnCONTPHONE2 = New DataColumn("CONTPHONE2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCONTPHONE2)
            Me.columnCONTCELL = New DataColumn("CONTCELL", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCONTCELL)
            Me.columnCONTEMAIL = New DataColumn("CONTEMAIL", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCONTEMAIL)
            Me.columnEMPTYPE = New DataColumn("EMPTYPE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEMPTYPE)
            Me.columnBUSINESSNAME = New DataColumn("BUSINESSNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBUSINESSNAME)
            Me.columnBAcopyst = New DataColumn("BAcopyst", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBAcopyst)
            Me.columnOADD1 = New DataColumn("OADD1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOADD1)
            Me.columnOADD2 = New DataColumn("OADD2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOADD2)
            Me.columnOADD3 = New DataColumn("OADD3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOADD3)
            Me.columnOCITY = New DataColumn("OCITY", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOCITY)
            Me.columnOSTATE = New DataColumn("OSTATE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOSTATE)
            Me.columnOCOUNTRY = New DataColumn("OCOUNTRY", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOCOUNTRY)
            Me.columnOPIN = New DataColumn("OPIN", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOPIN)
            Me.columnOPHONE1 = New DataColumn("OPHONE1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOPHONE1)
            Me.columnOPHONE2 = New DataColumn("OPHONE2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOPHONE2)
            Me.columnOCELL = New DataColumn("OCELL", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOCELL)
            Me.columnOEMAIL = New DataColumn("OEMAIL", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOEMAIL)
            Me.columnDOEPROFESSION = New DataColumn("DOEPROFESSION", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDOEPROFESSION)
            Me.columnBUSINESSNATURE = New DataColumn("BUSINESSNATURE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBUSINESSNATURE)
            Me.columnPOSITIONHELD = New DataColumn("POSITIONHELD", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPOSITIONHELD)
            Me.columnSERVICENAME = New DataColumn("SERVICENAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSERVICENAME)
            Me.columnSERVICEYEAR = New DataColumn("SERVICEYEAR", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSERVICEYEAR)
            Me.columnPANO = New DataColumn("PANO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPANO)
            Me.columnBBANKER = New DataColumn("BBANKER", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBBANKER)
            Me.columnCCNO = New DataColumn("CCNO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCCNO)
            Me.columnANNUALINCOME = New DataColumn("ANNUALINCOME", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnANNUALINCOME)
            Me.columnUPDUSERID = New DataColumn("UPDUSERID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUPDUSERID)
            Me.columnUPDDATETIME = New DataColumn("UPDDATETIME", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUPDDATETIME)
            Me.columnTERMINATION = New DataColumn("TERMINATION", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTERMINATION)
            Me.columnTRN_CON_DATE = New DataColumn("TRN_CON_DATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTRN_CON_DATE)
            Me.columnCON_MCODE = New DataColumn("CON_MCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCON_MCODE)
            Me.columnPFAX = New DataColumn("PFAX", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPFAX)
            Me.columnCFAX = New DataColumn("CFAX", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCFAX)
            Me.columnCONTFAX = New DataColumn("CONTFAX", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCONTFAX)
            Me.columnREASON = New DataColumn("REASON", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnREASON)
            Me.columnPHOTO = New DataColumn("PHOTO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPHOTO)
            Me.columnCREDITLIMIT = New DataColumn("CREDITLIMIT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCREDITLIMIT)
            Me.columnLIMITAMOUNT = New DataColumn("LIMITAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLIMITAMOUNT)
            Me.columnWEBSITE = New DataColumn("WEBSITE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnWEBSITE)
            Me.columnImagefile = New DataColumn("Imagefile", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnImagefile)
            Me.columnsizefield = New DataColumn("sizefield", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsizefield)
            Me.columnVdate = New DataColumn("Vdate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVdate)
            Me.columnVyear = New DataColumn("Vyear", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVyear)
            Me.columnValiddate = New DataColumn("Validdate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnValiddate)
            Me.columnTempTermination = New DataColumn("TempTermination", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTempTermination)
            Me.columnTempTermDate = New DataColumn("TempTermDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTempTermDate)
            Me.columnTempTermReason = New DataColumn("TempTermReason", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTempTermReason)
            Me.columnMemberid = New DataColumn("Memberid", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMemberid)
            Me.columnEndingDate = New DataColumn("EndingDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEndingDate)
            Me.columnTotalYears = New DataColumn("TotalYears", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTotalYears)
            Me.columnCardNo = New DataColumn("CardNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCardNo)
            Me.columnCardExpDate = New DataColumn("CardExpDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCardExpDate)
            Me.columnValidity = New DataColumn("Validity", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnValidity)
            Me.columnPeriod = New DataColumn("Period", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPeriod)
            Me.columnCreditcardno = New DataColumn("Creditcardno", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCreditcardno)
            Me.columnCreditExpDt = New DataColumn("CreditExpDt", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCreditExpDt)
            Me.columnType = New DataColumn("Type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnType)
            Me.columnSTATUSDATEFROM = New DataColumn("STATUSDATEFROM", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSTATUSDATEFROM)
            Me.columnSTATUSDATETO = New DataColumn("STATUSDATETO", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSTATUSDATETO)
            Me.columnCurentStatus = New DataColumn("CurentStatus", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCurentStatus)
            Me.columnFirstName = New DataColumn("FirstName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFirstName)
            Me.columnMiddleName = New DataColumn("MiddleName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMiddleName)
            Me.columnSurname = New DataColumn("Surname", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSurname)
            Me.column_Alias = New DataColumn("Alias", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column_Alias)
            Me.columnPrefix = New DataColumn("Prefix", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPrefix)
            Me.columnBillType = New DataColumn("BillType", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBillType)
            Me.columnNationality = New DataColumn("Nationality", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNationality)
            Me.columnNationalityAtbirth = New DataColumn("NationalityAtbirth", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNationalityAtbirth)
            Me.columnBillbasis = New DataColumn("Billbasis", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBillbasis)
            Me.columnBillHead = New DataColumn("BillHead", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBillHead)
            Me.columnGDRLocker = New DataColumn("GDRLocker", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGDRLocker)
            Me.columnLDRLocker = New DataColumn("LDRLocker", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLDRLocker)
            Me.columnHPLocker = New DataColumn("HPLocker", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHPLocker)
            Me.columnMembershipTo = New DataColumn("MembershipTo", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMembershipTo)
            Me.columnsalut = New DataColumn("salut", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsalut)
            Me.columnEntranceFee = New DataColumn("EntranceFee", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEntranceFee)
            Me.columnDevelopmentFee = New DataColumn("DevelopmentFee", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDevelopmentFee)
            Me.columnCriditNumber = New DataColumn("CriditNumber", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCriditNumber)
            Me.columnSecurityDeposit = New DataColumn("SecurityDeposit", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSecurityDeposit)
            Me.columnPlaceOfBirth = New DataColumn("PlaceOfBirth", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPlaceOfBirth)
            Me.columnCountryOfBirth = New DataColumn("CountryOfBirth", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCountryOfBirth)
            Me.columnLastArrivalInCal = New DataColumn("LastArrivalInCal", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLastArrivalInCal)
            Me.columnPeriodOfStay_year = New DataColumn("PeriodOfStay_year", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPeriodOfStay_year)
            Me.columnPeriodOfStay_Month = New DataColumn("PeriodOfStay_Month", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPeriodOfStay_Month)
            Me.columnPreviouslyProposed = New DataColumn("PreviouslyProposed", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPreviouslyProposed)
            Me.columnNoOfTimesProposed = New DataColumn("NoOfTimesProposed", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNoOfTimesProposed)
            Me.columnDateOfProposal = New DataColumn("DateOfProposal", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDateOfProposal)
            Me.columnResultOfProposal = New DataColumn("ResultOfProposal", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnResultOfProposal)
            Me.columnElected = New DataColumn("Elected", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnElected)
            Me.columnFatherName = New DataColumn("FatherName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFatherName)
            Me.columnDOBfather = New DataColumn("DOBfather", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDOBfather)
            Me.columnWifeDOB = New DataColumn("WifeDOB", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnWifeDOB)
            Me.columnMaidenNameWife = New DataColumn("MaidenNameWife", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMaidenNameWife)
            Me.columnNationalityWife = New DataColumn("NationalityWife", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNationalityWife)
            Me.columnWifesFatherName = New DataColumn("WifesFatherName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnWifesFatherName)
            Me.columnWifeFatherDOB = New DataColumn("WifeFatherDOB", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnWifeFatherDOB)
            Me.columnApplNo = New DataColumn("ApplNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnApplNo)
            Me.columnApplDate = New DataColumn("ApplDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnApplDate)
            Me.columnCorporatest = New DataColumn("Corporatest", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCorporatest)
            Me.columnCorporateCode = New DataColumn("CorporateCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCorporateCode)
            Me.columnCompName = New DataColumn("CompName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCompName)
            Me.columnDesignation = New DataColumn("Designation", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDesignation)
            Me.columnProfessionInfo = New DataColumn("ProfessionInfo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnProfessionInfo)
            Me.columnBuisnessInfo = New DataColumn("BuisnessInfo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBuisnessInfo)
            Me.columnProducts = New DataColumn("Products", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnProducts)
            Me.columnAgentsDealers = New DataColumn("AgentsDealers", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAgentsDealers)
            Me.columnESTDdate = New DataColumn("ESTDdate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnESTDdate)
            Me.columnNoOfEmp = New DataColumn("NoOfEmp", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNoOfEmp)
            Me.columnTurnover = New DataColumn("Turnover", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTurnover)
            Me.columnClient = New DataColumn("Client", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnClient)
            Me.columnAppliedBut = New DataColumn("AppliedBut", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAppliedBut)
            Me.columnPositionInChamber = New DataColumn("PositionInChamber", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPositionInChamber)
            Me.columnQulificationstatus = New DataColumn("Qulificationstatus", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQulificationstatus)
            Me.columnQualification1 = New DataColumn("Qualification1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQualification1)
            Me.columnDetails1 = New DataColumn("Details1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDetails1)
            Me.columnYearOfPassing1 = New DataColumn("YearOfPassing1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnYearOfPassing1)
            Me.columnInstitute1 = New DataColumn("Institute1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnInstitute1)
            Me.columnDivision1 = New DataColumn("Division1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDivision1)
            Me.columnQualification2 = New DataColumn("Qualification2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQualification2)
            Me.columnDetails2 = New DataColumn("Details2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDetails2)
            Me.columnYearOfPassing2 = New DataColumn("YearOfPassing2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnYearOfPassing2)
            Me.columnInstitute2 = New DataColumn("Institute2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnInstitute2)
            Me.columnDivision2 = New DataColumn("Division2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDivision2)
            Me.columnQualification3 = New DataColumn("Qualification3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQualification3)
            Me.columnDetails3 = New DataColumn("Details3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDetails3)
            Me.columnYearOfPassing3 = New DataColumn("YearOfPassing3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnYearOfPassing3)
            Me.columnInstitute3 = New DataColumn("Institute3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnInstitute3)
            Me.columnDivision3 = New DataColumn("Division3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDivision3)
            Me.columnsportstatus = New DataColumn("sportstatus", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsportstatus)
            Me.columnGameType1 = New DataColumn("GameType1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGameType1)
            Me.columnNameOfGame1 = New DataColumn("NameOfGame1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNameOfGame1)
            Me.columnDescription1 = New DataColumn("Description1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescription1)
            Me.columnGameType2 = New DataColumn("GameType2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGameType2)
            Me.columnNameofGame2 = New DataColumn("NameofGame2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNameofGame2)
            Me.columnDescription2 = New DataColumn("Description2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescription2)
            Me.columnGameType3 = New DataColumn("GameType3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGameType3)
            Me.columnNameOfGame3 = New DataColumn("NameOfGame3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNameOfGame3)
            Me.columnDescription3 = New DataColumn("Description3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescription3)
            Me.columnChildstatus = New DataColumn("Childstatus", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnChildstatus)
            Me.columnChildName1 = New DataColumn("ChildName1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnChildName1)
            Me.columnChildDob1 = New DataColumn("ChildDob1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnChildDob1)
            Me.columnChildSex1 = New DataColumn("ChildSex1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnChildSex1)
            Me.columnChildExpairy1 = New DataColumn("ChildExpairy1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnChildExpairy1)
            Me.columnChildName2 = New DataColumn("ChildName2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnChildName2)
            Me.columnChildDob2 = New DataColumn("ChildDob2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnChildDob2)
            Me.columnChildSex2 = New DataColumn("ChildSex2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnChildSex2)
            Me.columnChildExpairy2 = New DataColumn("ChildExpairy2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnChildExpairy2)
            Me.columnChildName3 = New DataColumn("ChildName3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnChildName3)
            Me.columnChildDob3 = New DataColumn("ChildDob3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnChildDob3)
            Me.columnChildSex3 = New DataColumn("ChildSex3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnChildSex3)
            Me.columnchildExpairy3 = New DataColumn("childExpairy3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnchildExpairy3)
            Me.columnClubstatus = New DataColumn("Clubstatus", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnClubstatus)
            Me.columnOtherClubName1 = New DataColumn("OtherClubName1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOtherClubName1)
            Me.columnOCAddress1 = New DataColumn("OCAddress1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOCAddress1)
            Me.columnOCStatus1 = New DataColumn("OCStatus1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOCStatus1)
            Me.columnOtherClubName2 = New DataColumn("OtherClubName2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOtherClubName2)
            Me.columnOCAddress2 = New DataColumn("OCAddress2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOCAddress2)
            Me.columnOCStatus2 = New DataColumn("OCStatus2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOCStatus2)
            Me.columnOtherClubname3 = New DataColumn("OtherClubname3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOtherClubname3)
            Me.columnOCAddress3 = New DataColumn("OCAddress3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOCAddress3)
            Me.columnOCStataus = New DataColumn("OCStataus", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOCStataus)
            Me.columnadduser = New DataColumn("adduser", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnadduser)
            Me.columnadddate = New DataColumn("adddate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnadddate)
            Me.columnfreeze = New DataColumn("freeze", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfreeze)
            Me.columnRelativestatus = New DataColumn("Relativestatus", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRelativestatus)
            Me.columnRelativeName1 = New DataColumn("RelativeName1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRelativeName1)
            Me.columnRelation1 = New DataColumn("Relation1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRelation1)
            Me.columndateofbirth1 = New DataColumn("dateofbirth1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndateofbirth1)
            Me.columnRelativeage1 = New DataColumn("Relativeage1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRelativeage1)
            Me.columnRelativeSex1 = New DataColumn("RelativeSex1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRelativeSex1)
            Me.columnRelativeaddress1 = New DataColumn("Relativeaddress1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRelativeaddress1)
            Me.columnRelativeName2 = New DataColumn("RelativeName2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRelativeName2)
            Me.columnRelation2 = New DataColumn("Relation2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRelation2)
            Me.columndateofbirth2 = New DataColumn("dateofbirth2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndateofbirth2)
            Me.columnRelativeage2 = New DataColumn("Relativeage2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRelativeage2)
            Me.columnRelativeSex2 = New DataColumn("RelativeSex2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRelativeSex2)
            Me.columnRelativeaddress2 = New DataColumn("Relativeaddress2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRelativeaddress2)
            Me.columnRelativeName3 = New DataColumn("RelativeName3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRelativeName3)
            Me.columnRelation3 = New DataColumn("Relation3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRelation3)
            Me.columndateofbirth3 = New DataColumn("dateofbirth3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndateofbirth3)
            Me.columnRelativeage3 = New DataColumn("Relativeage3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRelativeage3)
            Me.columnRelativeSex3 = New DataColumn("RelativeSex3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRelativeSex3)
            Me.columnRelativeaddress3 = New DataColumn("Relativeaddress3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRelativeaddress3)
            Me.columnreferentialst = New DataColumn("referentialst", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnreferentialst)
            Me.columnmem_code1 = New DataColumn("mem_code1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmem_code1)
            Me.columnmem_name1 = New DataColumn("mem_name1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmem_name1)
            Me.columnrefmem_date1 = New DataColumn("refmem_date1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrefmem_date1)
            Me.columndeleted1 = New DataColumn("deleted1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndeleted1)
            Me.columnmem_code2 = New DataColumn("mem_code2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmem_code2)
            Me.columnmem_name2 = New DataColumn("mem_name2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmem_name2)
            Me.columnrefmem_date2 = New DataColumn("refmem_date2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrefmem_date2)
            Me.columndeleted2 = New DataColumn("deleted2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndeleted2)
            Me.columnmem_code3 = New DataColumn("mem_code3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmem_code3)
            Me.columnmem_name3 = New DataColumn("mem_name3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmem_name3)
            Me.columnrefmem_date3 = New DataColumn("refmem_date3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrefmem_date3)
            Me.columndeleted3 = New DataColumn("deleted3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndeleted3)
            Me.columnentrancefeest = New DataColumn("entrancefeest", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnentrancefeest)
            Me.columnreceiptno1 = New DataColumn("receiptno1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnreceiptno1)
            Me.columnstartdate1 = New DataColumn("startdate1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstartdate1)
            Me.columnamount1 = New DataColumn("amount1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount1)
            Me.columnreceiptno2 = New DataColumn("receiptno2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnreceiptno2)
            Me.columnstartdate2 = New DataColumn("startdate2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstartdate2)
            Me.columnamount2 = New DataColumn("amount2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount2)
            Me.columnreceiptno3 = New DataColumn("receiptno3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnreceiptno3)
            Me.columnstartdate3 = New DataColumn("startdate3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstartdate3)
            Me.columnamount3 = New DataColumn("amount3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount3)
            Me.columnOLD = New DataColumn("OLD", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOLD)
            Me.columnCardAmt = New DataColumn("CardAmt", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCardAmt)
            Me.columnMINIMUMUSAGE = New DataColumn("MINIMUMUSAGE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMINIMUMUSAGE)
            Me.columnCREDITNO = New DataColumn("CREDITNO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCREDITNO)
            Me.columnSPOUSEMOBILE = New DataColumn("SPOUSEMOBILE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSPOUSEMOBILE)
            Me.columnPADD4 = New DataColumn("PADD4", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPADD4)
            Me.columnCADD4 = New DataColumn("CADD4", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCADD4)
            Me.Constraints.Add(New UniqueConstraint("Dataset1Key1", New DataColumn() {Me.columnMCODE}, false))
            Me.columnSequenceNo.AutoIncrement = true
            Me.columnSequenceNo.AllowDBNull = false
            Me.columnSequenceNo.ReadOnly = true
            Me.columnMCODE.AllowDBNull = false
            Me.columnMCODE.Unique = true
        End Sub
        
        Public Function NewmembermasterRow() As membermasterRow
            Return CType(Me.NewRow,membermasterRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New membermasterRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(membermasterRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.membermasterRowChangedEvent) Is Nothing) Then
                RaiseEvent membermasterRowChanged(Me, New membermasterRowChangeEvent(CType(e.Row,membermasterRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.membermasterRowChangingEvent) Is Nothing) Then
                RaiseEvent membermasterRowChanging(Me, New membermasterRowChangeEvent(CType(e.Row,membermasterRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.membermasterRowDeletedEvent) Is Nothing) Then
                RaiseEvent membermasterRowDeleted(Me, New membermasterRowChangeEvent(CType(e.Row,membermasterRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.membermasterRowDeletingEvent) Is Nothing) Then
                RaiseEvent membermasterRowDeleting(Me, New membermasterRowChangeEvent(CType(e.Row,membermasterRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovemembermasterRow(ByVal row As membermasterRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class membermasterRow
        Inherits DataRow
        
        Private tablemembermaster As membermasterDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablemembermaster = CType(Me.Table,membermasterDataTable)
        End Sub
        
        Public Property SequenceNo As Decimal
            Get
                Return CType(Me(Me.tablemembermaster.SequenceNoColumn),Decimal)
            End Get
            Set
                Me(Me.tablemembermaster.SequenceNoColumn) = value
            End Set
        End Property
        
        Public Property TAG As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.TAGColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.TAGColumn) = value
            End Set
        End Property
        
        Public Property MEMBERTYPECODE As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.MEMBERTYPECODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.MEMBERTYPECODEColumn) = value
            End Set
        End Property
        
        Public Property COMPANY As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.COMPANYColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.COMPANYColumn) = value
            End Set
        End Property
        
        Public Property SUBCD As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.SUBCDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.SUBCDColumn) = value
            End Set
        End Property
        
        Public Property MCODE As String
            Get
                Return CType(Me(Me.tablemembermaster.MCODEColumn),String)
            End Get
            Set
                Me(Me.tablemembermaster.MCODEColumn) = value
            End Set
        End Property
        
        Public Property MNAME As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.MNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.MNAMEColumn) = value
            End Set
        End Property
        
        Public Property MID As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.MIDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.MIDColumn) = value
            End Set
        End Property
        
        Public Property DOB As Date
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.DOBColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.DOBColumn) = value
            End Set
        End Property
        
        Public Property DOJ As Date
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.DOJColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.DOJColumn) = value
            End Set
        End Property
        
        Public Property SEX As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.SEXColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.SEXColumn) = value
            End Set
        End Property
        
        Public Property MARITALSTATUS As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.MARITALSTATUSColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.MARITALSTATUSColumn) = value
            End Set
        End Property
        
        Public Property SPOUSE As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.SPOUSEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.SPOUSEColumn) = value
            End Set
        End Property
        
        Public Property BG As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.BGColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.BGColumn) = value
            End Set
        End Property
        
        Public Property OCCUPATION As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.OCCUPATIONColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.OCCUPATIONColumn) = value
            End Set
        End Property
        
        Public Property BANKER As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.BANKERColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.BANKERColumn) = value
            End Set
        End Property
        
        Public Property BANKACNO As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.BANKACNOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.BANKACNOColumn) = value
            End Set
        End Property
        
        Public Property HOBBIES As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.HOBBIESColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.HOBBIESColumn) = value
            End Set
        End Property
        
        Public Property OTHERINFO As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.OTHERINFOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.OTHERINFOColumn) = value
            End Set
        End Property
        
        Public Property RESIDENT As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.RESIDENTColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.RESIDENTColumn) = value
            End Set
        End Property
        
        Public Property EQUALIFICATION As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.EQUALIFICATIONColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.EQUALIFICATIONColumn) = value
            End Set
        End Property
        
        Public Property PQUALIFICATION As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.PQUALIFICATIONColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.PQUALIFICATIONColumn) = value
            End Set
        End Property
        
        Public Property PROPOSER As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.PROPOSERColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.PROPOSERColumn) = value
            End Set
        End Property
        
        Public Property PROPOSERNAME As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.PROPOSERNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.PROPOSERNAMEColumn) = value
            End Set
        End Property
        
        Public Property SECONDER As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.SECONDERColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.SECONDERColumn) = value
            End Set
        End Property
        
        Public Property SECONDERNAME As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.SECONDERNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.SECONDERNAMEColumn) = value
            End Set
        End Property
        
        Public Property PAcopyst As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.PAcopystColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.PAcopystColumn) = value
            End Set
        End Property
        
        Public Property PADD1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.PADD1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.PADD1Column) = value
            End Set
        End Property
        
        Public Property PADD2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.PADD2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.PADD2Column) = value
            End Set
        End Property
        
        Public Property PADD3 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.PADD3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.PADD3Column) = value
            End Set
        End Property
        
        Public Property PCITY As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.PCITYColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.PCITYColumn) = value
            End Set
        End Property
        
        Public Property PSTATE As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.PSTATEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.PSTATEColumn) = value
            End Set
        End Property
        
        Public Property PCOUNTRY As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.PCOUNTRYColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.PCOUNTRYColumn) = value
            End Set
        End Property
        
        Public Property PPIN As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.PPINColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.PPINColumn) = value
            End Set
        End Property
        
        Public Property PPHONE1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.PPHONE1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.PPHONE1Column) = value
            End Set
        End Property
        
        Public Property PPHONE2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.PPHONE2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.PPHONE2Column) = value
            End Set
        End Property
        
        Public Property PCELL As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.PCELLColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.PCELLColumn) = value
            End Set
        End Property
        
        Public Property PEMAIL As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.PEMAILColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.PEMAILColumn) = value
            End Set
        End Property
        
        Public Property RAcopyst As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.RAcopystColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.RAcopystColumn) = value
            End Set
        End Property
        
        Public Property CADD1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.CADD1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.CADD1Column) = value
            End Set
        End Property
        
        Public Property CADD2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.CADD2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.CADD2Column) = value
            End Set
        End Property
        
        Public Property CADD3 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.CADD3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.CADD3Column) = value
            End Set
        End Property
        
        Public Property CCITY As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.CCITYColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.CCITYColumn) = value
            End Set
        End Property
        
        Public Property CSTATE As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.CSTATEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.CSTATEColumn) = value
            End Set
        End Property
        
        Public Property CCOUNTRY As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.CCOUNTRYColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.CCOUNTRYColumn) = value
            End Set
        End Property
        
        Public Property CPIN As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.CPINColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.CPINColumn) = value
            End Set
        End Property
        
        Public Property CPHONE1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.CPHONE1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.CPHONE1Column) = value
            End Set
        End Property
        
        Public Property CPHONE2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.CPHONE2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.CPHONE2Column) = value
            End Set
        End Property
        
        Public Property CCELL As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.CCELLColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.CCELLColumn) = value
            End Set
        End Property
        
        Public Property CEMAIL As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.CEMAILColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.CEMAILColumn) = value
            End Set
        End Property
        
        Public Property CONTADD1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.CONTADD1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.CONTADD1Column) = value
            End Set
        End Property
        
        Public Property CONTADD2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.CONTADD2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.CONTADD2Column) = value
            End Set
        End Property
        
        Public Property CONTADD3 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.CONTADD3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.CONTADD3Column) = value
            End Set
        End Property
        
        Public Property CONTCITY As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.CONTCITYColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.CONTCITYColumn) = value
            End Set
        End Property
        
        Public Property CONTSTATE As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.CONTSTATEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.CONTSTATEColumn) = value
            End Set
        End Property
        
        Public Property CONTCOUNTRY As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.CONTCOUNTRYColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.CONTCOUNTRYColumn) = value
            End Set
        End Property
        
        Public Property CONTPIN As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.CONTPINColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.CONTPINColumn) = value
            End Set
        End Property
        
        Public Property CONTPHONE1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.CONTPHONE1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.CONTPHONE1Column) = value
            End Set
        End Property
        
        Public Property CONTPHONE2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.CONTPHONE2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.CONTPHONE2Column) = value
            End Set
        End Property
        
        Public Property CONTCELL As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.CONTCELLColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.CONTCELLColumn) = value
            End Set
        End Property
        
        Public Property CONTEMAIL As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.CONTEMAILColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.CONTEMAILColumn) = value
            End Set
        End Property
        
        Public Property EMPTYPE As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.EMPTYPEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.EMPTYPEColumn) = value
            End Set
        End Property
        
        Public Property BUSINESSNAME As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.BUSINESSNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.BUSINESSNAMEColumn) = value
            End Set
        End Property
        
        Public Property BAcopyst As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.BAcopystColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.BAcopystColumn) = value
            End Set
        End Property
        
        Public Property OADD1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.OADD1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.OADD1Column) = value
            End Set
        End Property
        
        Public Property OADD2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.OADD2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.OADD2Column) = value
            End Set
        End Property
        
        Public Property OADD3 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.OADD3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.OADD3Column) = value
            End Set
        End Property
        
        Public Property OCITY As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.OCITYColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.OCITYColumn) = value
            End Set
        End Property
        
        Public Property OSTATE As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.OSTATEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.OSTATEColumn) = value
            End Set
        End Property
        
        Public Property OCOUNTRY As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.OCOUNTRYColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.OCOUNTRYColumn) = value
            End Set
        End Property
        
        Public Property OPIN As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.OPINColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.OPINColumn) = value
            End Set
        End Property
        
        Public Property OPHONE1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.OPHONE1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.OPHONE1Column) = value
            End Set
        End Property
        
        Public Property OPHONE2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.OPHONE2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.OPHONE2Column) = value
            End Set
        End Property
        
        Public Property OCELL As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.OCELLColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.OCELLColumn) = value
            End Set
        End Property
        
        Public Property OEMAIL As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.OEMAILColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.OEMAILColumn) = value
            End Set
        End Property
        
        Public Property DOEPROFESSION As Date
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.DOEPROFESSIONColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.DOEPROFESSIONColumn) = value
            End Set
        End Property
        
        Public Property BUSINESSNATURE As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.BUSINESSNATUREColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.BUSINESSNATUREColumn) = value
            End Set
        End Property
        
        Public Property POSITIONHELD As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.POSITIONHELDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.POSITIONHELDColumn) = value
            End Set
        End Property
        
        Public Property SERVICENAME As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.SERVICENAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.SERVICENAMEColumn) = value
            End Set
        End Property
        
        Public Property SERVICEYEAR As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.SERVICEYEARColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.SERVICEYEARColumn) = value
            End Set
        End Property
        
        Public Property PANO As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.PANOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.PANOColumn) = value
            End Set
        End Property
        
        Public Property BBANKER As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.BBANKERColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.BBANKERColumn) = value
            End Set
        End Property
        
        Public Property CCNO As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.CCNOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.CCNOColumn) = value
            End Set
        End Property
        
        Public Property ANNUALINCOME As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.ANNUALINCOMEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.ANNUALINCOMEColumn) = value
            End Set
        End Property
        
        Public Property UPDUSERID As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.UPDUSERIDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.UPDUSERIDColumn) = value
            End Set
        End Property
        
        Public Property UPDDATETIME As Date
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.UPDDATETIMEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.UPDDATETIMEColumn) = value
            End Set
        End Property
        
        Public Property TERMINATION As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.TERMINATIONColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.TERMINATIONColumn) = value
            End Set
        End Property
        
        Public Property TRN_CON_DATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.TRN_CON_DATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.TRN_CON_DATEColumn) = value
            End Set
        End Property
        
        Public Property CON_MCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.CON_MCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.CON_MCODEColumn) = value
            End Set
        End Property
        
        Public Property PFAX As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.PFAXColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.PFAXColumn) = value
            End Set
        End Property
        
        Public Property CFAX As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.CFAXColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.CFAXColumn) = value
            End Set
        End Property
        
        Public Property CONTFAX As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.CONTFAXColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.CONTFAXColumn) = value
            End Set
        End Property
        
        Public Property REASON As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.REASONColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.REASONColumn) = value
            End Set
        End Property
        
        Public Property PHOTO As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.PHOTOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.PHOTOColumn) = value
            End Set
        End Property
        
        Public Property CREDITLIMIT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.CREDITLIMITColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.CREDITLIMITColumn) = value
            End Set
        End Property
        
        Public Property LIMITAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.LIMITAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.LIMITAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property WEBSITE As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.WEBSITEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.WEBSITEColumn) = value
            End Set
        End Property
        
        Public Property Imagefile As Byte()
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.ImagefileColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.ImagefileColumn) = value
            End Set
        End Property
        
        Public Property sizefield As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.sizefieldColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.sizefieldColumn) = value
            End Set
        End Property
        
        Public Property Vdate As Date
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.VdateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.VdateColumn) = value
            End Set
        End Property
        
        Public Property Vyear As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.VyearColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.VyearColumn) = value
            End Set
        End Property
        
        Public Property Validdate As Date
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.ValiddateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.ValiddateColumn) = value
            End Set
        End Property
        
        Public Property TempTermination As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.TempTerminationColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.TempTerminationColumn) = value
            End Set
        End Property
        
        Public Property TempTermDate As Date
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.TempTermDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.TempTermDateColumn) = value
            End Set
        End Property
        
        Public Property TempTermReason As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.TempTermReasonColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.TempTermReasonColumn) = value
            End Set
        End Property
        
        Public Property Memberid As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.MemberidColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.MemberidColumn) = value
            End Set
        End Property
        
        Public Property EndingDate As Date
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.EndingDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.EndingDateColumn) = value
            End Set
        End Property
        
        Public Property TotalYears As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.TotalYearsColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.TotalYearsColumn) = value
            End Set
        End Property
        
        Public Property CardNo As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.CardNoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.CardNoColumn) = value
            End Set
        End Property
        
        Public Property CardExpDate As Date
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.CardExpDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.CardExpDateColumn) = value
            End Set
        End Property
        
        Public Property Validity As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.ValidityColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.ValidityColumn) = value
            End Set
        End Property
        
        Public Property Period As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.PeriodColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.PeriodColumn) = value
            End Set
        End Property
        
        Public Property Creditcardno As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.CreditcardnoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.CreditcardnoColumn) = value
            End Set
        End Property
        
        Public Property CreditExpDt As Date
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.CreditExpDtColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.CreditExpDtColumn) = value
            End Set
        End Property
        
        Public Property Type As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.TypeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.TypeColumn) = value
            End Set
        End Property
        
        Public Property STATUSDATEFROM As Date
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.STATUSDATEFROMColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.STATUSDATEFROMColumn) = value
            End Set
        End Property
        
        Public Property STATUSDATETO As Date
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.STATUSDATETOColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.STATUSDATETOColumn) = value
            End Set
        End Property
        
        Public Property CurentStatus As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.CurentStatusColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.CurentStatusColumn) = value
            End Set
        End Property
        
        Public Property FirstName As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.FirstNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.FirstNameColumn) = value
            End Set
        End Property
        
        Public Property MiddleName As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.MiddleNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.MiddleNameColumn) = value
            End Set
        End Property
        
        Public Property Surname As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.SurnameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.SurnameColumn) = value
            End Set
        End Property
        
        Public Property _Alias As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster._AliasColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster._AliasColumn) = value
            End Set
        End Property
        
        Public Property Prefix As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.PrefixColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.PrefixColumn) = value
            End Set
        End Property
        
        Public Property BillType As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.BillTypeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.BillTypeColumn) = value
            End Set
        End Property
        
        Public Property Nationality As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.NationalityColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.NationalityColumn) = value
            End Set
        End Property
        
        Public Property NationalityAtbirth As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.NationalityAtbirthColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.NationalityAtbirthColumn) = value
            End Set
        End Property
        
        Public Property Billbasis As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.BillbasisColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.BillbasisColumn) = value
            End Set
        End Property
        
        Public Property BillHead As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.BillHeadColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.BillHeadColumn) = value
            End Set
        End Property
        
        Public Property GDRLocker As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.GDRLockerColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.GDRLockerColumn) = value
            End Set
        End Property
        
        Public Property LDRLocker As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.LDRLockerColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.LDRLockerColumn) = value
            End Set
        End Property
        
        Public Property HPLocker As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.HPLockerColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.HPLockerColumn) = value
            End Set
        End Property
        
        Public Property MembershipTo As Date
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.MembershipToColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.MembershipToColumn) = value
            End Set
        End Property
        
        Public Property salut As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.salutColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.salutColumn) = value
            End Set
        End Property
        
        Public Property EntranceFee As Double
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.EntranceFeeColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.EntranceFeeColumn) = value
            End Set
        End Property
        
        Public Property DevelopmentFee As Double
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.DevelopmentFeeColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.DevelopmentFeeColumn) = value
            End Set
        End Property
        
        Public Property CriditNumber As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.CriditNumberColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.CriditNumberColumn) = value
            End Set
        End Property
        
        Public Property SecurityDeposit As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.SecurityDepositColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.SecurityDepositColumn) = value
            End Set
        End Property
        
        Public Property PlaceOfBirth As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.PlaceOfBirthColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.PlaceOfBirthColumn) = value
            End Set
        End Property
        
        Public Property CountryOfBirth As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.CountryOfBirthColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.CountryOfBirthColumn) = value
            End Set
        End Property
        
        Public Property LastArrivalInCal As Date
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.LastArrivalInCalColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.LastArrivalInCalColumn) = value
            End Set
        End Property
        
        Public Property PeriodOfStay_year As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.PeriodOfStay_yearColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.PeriodOfStay_yearColumn) = value
            End Set
        End Property
        
        Public Property PeriodOfStay_Month As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.PeriodOfStay_MonthColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.PeriodOfStay_MonthColumn) = value
            End Set
        End Property
        
        Public Property PreviouslyProposed As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.PreviouslyProposedColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.PreviouslyProposedColumn) = value
            End Set
        End Property
        
        Public Property NoOfTimesProposed As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.NoOfTimesProposedColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.NoOfTimesProposedColumn) = value
            End Set
        End Property
        
        Public Property DateOfProposal As Date
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.DateOfProposalColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.DateOfProposalColumn) = value
            End Set
        End Property
        
        Public Property ResultOfProposal As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.ResultOfProposalColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.ResultOfProposalColumn) = value
            End Set
        End Property
        
        Public Property Elected As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.ElectedColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.ElectedColumn) = value
            End Set
        End Property
        
        Public Property FatherName As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.FatherNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.FatherNameColumn) = value
            End Set
        End Property
        
        Public Property DOBfather As Date
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.DOBfatherColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.DOBfatherColumn) = value
            End Set
        End Property
        
        Public Property WifeDOB As Date
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.WifeDOBColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.WifeDOBColumn) = value
            End Set
        End Property
        
        Public Property MaidenNameWife As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.MaidenNameWifeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.MaidenNameWifeColumn) = value
            End Set
        End Property
        
        Public Property NationalityWife As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.NationalityWifeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.NationalityWifeColumn) = value
            End Set
        End Property
        
        Public Property WifesFatherName As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.WifesFatherNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.WifesFatherNameColumn) = value
            End Set
        End Property
        
        Public Property WifeFatherDOB As Date
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.WifeFatherDOBColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.WifeFatherDOBColumn) = value
            End Set
        End Property
        
        Public Property ApplNo As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.ApplNoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.ApplNoColumn) = value
            End Set
        End Property
        
        Public Property ApplDate As Date
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.ApplDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.ApplDateColumn) = value
            End Set
        End Property
        
        Public Property Corporatest As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.CorporatestColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.CorporatestColumn) = value
            End Set
        End Property
        
        Public Property CorporateCode As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.CorporateCodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.CorporateCodeColumn) = value
            End Set
        End Property
        
        Public Property CompName As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.CompNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.CompNameColumn) = value
            End Set
        End Property
        
        Public Property Designation As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.DesignationColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.DesignationColumn) = value
            End Set
        End Property
        
        Public Property ProfessionInfo As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.ProfessionInfoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.ProfessionInfoColumn) = value
            End Set
        End Property
        
        Public Property BuisnessInfo As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.BuisnessInfoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.BuisnessInfoColumn) = value
            End Set
        End Property
        
        Public Property Products As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.ProductsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.ProductsColumn) = value
            End Set
        End Property
        
        Public Property AgentsDealers As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.AgentsDealersColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.AgentsDealersColumn) = value
            End Set
        End Property
        
        Public Property ESTDdate As Date
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.ESTDdateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.ESTDdateColumn) = value
            End Set
        End Property
        
        Public Property NoOfEmp As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.NoOfEmpColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.NoOfEmpColumn) = value
            End Set
        End Property
        
        Public Property Turnover As Double
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.TurnoverColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.TurnoverColumn) = value
            End Set
        End Property
        
        Public Property Client As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.ClientColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.ClientColumn) = value
            End Set
        End Property
        
        Public Property AppliedBut As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.AppliedButColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.AppliedButColumn) = value
            End Set
        End Property
        
        Public Property PositionInChamber As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.PositionInChamberColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.PositionInChamberColumn) = value
            End Set
        End Property
        
        Public Property Qulificationstatus As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.QulificationstatusColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.QulificationstatusColumn) = value
            End Set
        End Property
        
        Public Property Qualification1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.Qualification1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.Qualification1Column) = value
            End Set
        End Property
        
        Public Property Details1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.Details1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.Details1Column) = value
            End Set
        End Property
        
        Public Property YearOfPassing1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.YearOfPassing1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.YearOfPassing1Column) = value
            End Set
        End Property
        
        Public Property Institute1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.Institute1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.Institute1Column) = value
            End Set
        End Property
        
        Public Property Division1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.Division1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.Division1Column) = value
            End Set
        End Property
        
        Public Property Qualification2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.Qualification2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.Qualification2Column) = value
            End Set
        End Property
        
        Public Property Details2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.Details2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.Details2Column) = value
            End Set
        End Property
        
        Public Property YearOfPassing2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.YearOfPassing2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.YearOfPassing2Column) = value
            End Set
        End Property
        
        Public Property Institute2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.Institute2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.Institute2Column) = value
            End Set
        End Property
        
        Public Property Division2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.Division2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.Division2Column) = value
            End Set
        End Property
        
        Public Property Qualification3 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.Qualification3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.Qualification3Column) = value
            End Set
        End Property
        
        Public Property Details3 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.Details3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.Details3Column) = value
            End Set
        End Property
        
        Public Property YearOfPassing3 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.YearOfPassing3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.YearOfPassing3Column) = value
            End Set
        End Property
        
        Public Property Institute3 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.Institute3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.Institute3Column) = value
            End Set
        End Property
        
        Public Property Division3 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.Division3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.Division3Column) = value
            End Set
        End Property
        
        Public Property sportstatus As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.sportstatusColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.sportstatusColumn) = value
            End Set
        End Property
        
        Public Property GameType1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.GameType1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.GameType1Column) = value
            End Set
        End Property
        
        Public Property NameOfGame1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.NameOfGame1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.NameOfGame1Column) = value
            End Set
        End Property
        
        Public Property Description1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.Description1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.Description1Column) = value
            End Set
        End Property
        
        Public Property GameType2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.GameType2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.GameType2Column) = value
            End Set
        End Property
        
        Public Property NameofGame2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.NameofGame2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.NameofGame2Column) = value
            End Set
        End Property
        
        Public Property Description2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.Description2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.Description2Column) = value
            End Set
        End Property
        
        Public Property GameType3 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.GameType3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.GameType3Column) = value
            End Set
        End Property
        
        Public Property NameOfGame3 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.NameOfGame3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.NameOfGame3Column) = value
            End Set
        End Property
        
        Public Property Description3 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.Description3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.Description3Column) = value
            End Set
        End Property
        
        Public Property Childstatus As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.ChildstatusColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.ChildstatusColumn) = value
            End Set
        End Property
        
        Public Property ChildName1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.ChildName1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.ChildName1Column) = value
            End Set
        End Property
        
        Public Property ChildDob1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.ChildDob1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.ChildDob1Column) = value
            End Set
        End Property
        
        Public Property ChildSex1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.ChildSex1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.ChildSex1Column) = value
            End Set
        End Property
        
        Public Property ChildExpairy1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.ChildExpairy1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.ChildExpairy1Column) = value
            End Set
        End Property
        
        Public Property ChildName2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.ChildName2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.ChildName2Column) = value
            End Set
        End Property
        
        Public Property ChildDob2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.ChildDob2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.ChildDob2Column) = value
            End Set
        End Property
        
        Public Property ChildSex2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.ChildSex2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.ChildSex2Column) = value
            End Set
        End Property
        
        Public Property ChildExpairy2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.ChildExpairy2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.ChildExpairy2Column) = value
            End Set
        End Property
        
        Public Property ChildName3 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.ChildName3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.ChildName3Column) = value
            End Set
        End Property
        
        Public Property ChildDob3 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.ChildDob3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.ChildDob3Column) = value
            End Set
        End Property
        
        Public Property ChildSex3 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.ChildSex3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.ChildSex3Column) = value
            End Set
        End Property
        
        Public Property childExpairy3 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.childExpairy3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.childExpairy3Column) = value
            End Set
        End Property
        
        Public Property Clubstatus As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.ClubstatusColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.ClubstatusColumn) = value
            End Set
        End Property
        
        Public Property OtherClubName1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.OtherClubName1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.OtherClubName1Column) = value
            End Set
        End Property
        
        Public Property OCAddress1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.OCAddress1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.OCAddress1Column) = value
            End Set
        End Property
        
        Public Property OCStatus1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.OCStatus1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.OCStatus1Column) = value
            End Set
        End Property
        
        Public Property OtherClubName2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.OtherClubName2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.OtherClubName2Column) = value
            End Set
        End Property
        
        Public Property OCAddress2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.OCAddress2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.OCAddress2Column) = value
            End Set
        End Property
        
        Public Property OCStatus2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.OCStatus2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.OCStatus2Column) = value
            End Set
        End Property
        
        Public Property OtherClubname3 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.OtherClubname3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.OtherClubname3Column) = value
            End Set
        End Property
        
        Public Property OCAddress3 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.OCAddress3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.OCAddress3Column) = value
            End Set
        End Property
        
        Public Property OCStataus As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.OCStatausColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.OCStatausColumn) = value
            End Set
        End Property
        
        Public Property adduser As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.adduserColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.adduserColumn) = value
            End Set
        End Property
        
        Public Property adddate As Date
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.adddateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.adddateColumn) = value
            End Set
        End Property
        
        Public Property freeze As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.freezeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.freezeColumn) = value
            End Set
        End Property
        
        Public Property Relativestatus As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.RelativestatusColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.RelativestatusColumn) = value
            End Set
        End Property
        
        Public Property RelativeName1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.RelativeName1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.RelativeName1Column) = value
            End Set
        End Property
        
        Public Property Relation1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.Relation1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.Relation1Column) = value
            End Set
        End Property
        
        Public Property dateofbirth1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.dateofbirth1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.dateofbirth1Column) = value
            End Set
        End Property
        
        Public Property Relativeage1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.Relativeage1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.Relativeage1Column) = value
            End Set
        End Property
        
        Public Property RelativeSex1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.RelativeSex1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.RelativeSex1Column) = value
            End Set
        End Property
        
        Public Property Relativeaddress1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.Relativeaddress1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.Relativeaddress1Column) = value
            End Set
        End Property
        
        Public Property RelativeName2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.RelativeName2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.RelativeName2Column) = value
            End Set
        End Property
        
        Public Property Relation2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.Relation2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.Relation2Column) = value
            End Set
        End Property
        
        Public Property dateofbirth2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.dateofbirth2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.dateofbirth2Column) = value
            End Set
        End Property
        
        Public Property Relativeage2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.Relativeage2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.Relativeage2Column) = value
            End Set
        End Property
        
        Public Property RelativeSex2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.RelativeSex2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.RelativeSex2Column) = value
            End Set
        End Property
        
        Public Property Relativeaddress2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.Relativeaddress2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.Relativeaddress2Column) = value
            End Set
        End Property
        
        Public Property RelativeName3 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.RelativeName3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.RelativeName3Column) = value
            End Set
        End Property
        
        Public Property Relation3 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.Relation3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.Relation3Column) = value
            End Set
        End Property
        
        Public Property dateofbirth3 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.dateofbirth3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.dateofbirth3Column) = value
            End Set
        End Property
        
        Public Property Relativeage3 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.Relativeage3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.Relativeage3Column) = value
            End Set
        End Property
        
        Public Property RelativeSex3 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.RelativeSex3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.RelativeSex3Column) = value
            End Set
        End Property
        
        Public Property Relativeaddress3 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.Relativeaddress3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.Relativeaddress3Column) = value
            End Set
        End Property
        
        Public Property referentialst As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.referentialstColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.referentialstColumn) = value
            End Set
        End Property
        
        Public Property mem_code1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.mem_code1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.mem_code1Column) = value
            End Set
        End Property
        
        Public Property mem_name1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.mem_name1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.mem_name1Column) = value
            End Set
        End Property
        
        Public Property refmem_date1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.refmem_date1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.refmem_date1Column) = value
            End Set
        End Property
        
        Public Property deleted1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.deleted1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.deleted1Column) = value
            End Set
        End Property
        
        Public Property mem_code2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.mem_code2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.mem_code2Column) = value
            End Set
        End Property
        
        Public Property mem_name2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.mem_name2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.mem_name2Column) = value
            End Set
        End Property
        
        Public Property refmem_date2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.refmem_date2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.refmem_date2Column) = value
            End Set
        End Property
        
        Public Property deleted2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.deleted2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.deleted2Column) = value
            End Set
        End Property
        
        Public Property mem_code3 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.mem_code3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.mem_code3Column) = value
            End Set
        End Property
        
        Public Property mem_name3 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.mem_name3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.mem_name3Column) = value
            End Set
        End Property
        
        Public Property refmem_date3 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.refmem_date3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.refmem_date3Column) = value
            End Set
        End Property
        
        Public Property deleted3 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.deleted3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.deleted3Column) = value
            End Set
        End Property
        
        Public Property entrancefeest As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.entrancefeestColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.entrancefeestColumn) = value
            End Set
        End Property
        
        Public Property receiptno1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.receiptno1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.receiptno1Column) = value
            End Set
        End Property
        
        Public Property startdate1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.startdate1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.startdate1Column) = value
            End Set
        End Property
        
        Public Property amount1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.amount1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.amount1Column) = value
            End Set
        End Property
        
        Public Property receiptno2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.receiptno2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.receiptno2Column) = value
            End Set
        End Property
        
        Public Property startdate2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.startdate2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.startdate2Column) = value
            End Set
        End Property
        
        Public Property amount2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.amount2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.amount2Column) = value
            End Set
        End Property
        
        Public Property receiptno3 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.receiptno3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.receiptno3Column) = value
            End Set
        End Property
        
        Public Property startdate3 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.startdate3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.startdate3Column) = value
            End Set
        End Property
        
        Public Property amount3 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.amount3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.amount3Column) = value
            End Set
        End Property
        
        Public Property OLD As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.OLDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.OLDColumn) = value
            End Set
        End Property
        
        Public Property CardAmt As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.CardAmtColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.CardAmtColumn) = value
            End Set
        End Property
        
        Public Property MINIMUMUSAGE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.MINIMUMUSAGEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.MINIMUMUSAGEColumn) = value
            End Set
        End Property
        
        Public Property CREDITNO As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.CREDITNOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.CREDITNOColumn) = value
            End Set
        End Property
        
        Public Property SPOUSEMOBILE As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.SPOUSEMOBILEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.SPOUSEMOBILEColumn) = value
            End Set
        End Property
        
        Public Property PADD4 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.PADD4Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.PADD4Column) = value
            End Set
        End Property
        
        Public Property CADD4 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster.CADD4Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster.CADD4Column) = value
            End Set
        End Property
        
        Public Function IsTAGNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.TAGColumn)
        End Function
        
        Public Sub SetTAGNull()
            Me(Me.tablemembermaster.TAGColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMEMBERTYPECODENull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.MEMBERTYPECODEColumn)
        End Function
        
        Public Sub SetMEMBERTYPECODENull()
            Me(Me.tablemembermaster.MEMBERTYPECODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCOMPANYNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.COMPANYColumn)
        End Function
        
        Public Sub SetCOMPANYNull()
            Me(Me.tablemembermaster.COMPANYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSUBCDNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.SUBCDColumn)
        End Function
        
        Public Sub SetSUBCDNull()
            Me(Me.tablemembermaster.SUBCDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMNAMENull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.MNAMEColumn)
        End Function
        
        Public Sub SetMNAMENull()
            Me(Me.tablemembermaster.MNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMIDNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.MIDColumn)
        End Function
        
        Public Sub SetMIDNull()
            Me(Me.tablemembermaster.MIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDOBNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.DOBColumn)
        End Function
        
        Public Sub SetDOBNull()
            Me(Me.tablemembermaster.DOBColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDOJNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.DOJColumn)
        End Function
        
        Public Sub SetDOJNull()
            Me(Me.tablemembermaster.DOJColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSEXNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.SEXColumn)
        End Function
        
        Public Sub SetSEXNull()
            Me(Me.tablemembermaster.SEXColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMARITALSTATUSNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.MARITALSTATUSColumn)
        End Function
        
        Public Sub SetMARITALSTATUSNull()
            Me(Me.tablemembermaster.MARITALSTATUSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSPOUSENull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.SPOUSEColumn)
        End Function
        
        Public Sub SetSPOUSENull()
            Me(Me.tablemembermaster.SPOUSEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBGNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.BGColumn)
        End Function
        
        Public Sub SetBGNull()
            Me(Me.tablemembermaster.BGColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOCCUPATIONNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.OCCUPATIONColumn)
        End Function
        
        Public Sub SetOCCUPATIONNull()
            Me(Me.tablemembermaster.OCCUPATIONColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBANKERNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.BANKERColumn)
        End Function
        
        Public Sub SetBANKERNull()
            Me(Me.tablemembermaster.BANKERColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBANKACNONull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.BANKACNOColumn)
        End Function
        
        Public Sub SetBANKACNONull()
            Me(Me.tablemembermaster.BANKACNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHOBBIESNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.HOBBIESColumn)
        End Function
        
        Public Sub SetHOBBIESNull()
            Me(Me.tablemembermaster.HOBBIESColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOTHERINFONull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.OTHERINFOColumn)
        End Function
        
        Public Sub SetOTHERINFONull()
            Me(Me.tablemembermaster.OTHERINFOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRESIDENTNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.RESIDENTColumn)
        End Function
        
        Public Sub SetRESIDENTNull()
            Me(Me.tablemembermaster.RESIDENTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEQUALIFICATIONNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.EQUALIFICATIONColumn)
        End Function
        
        Public Sub SetEQUALIFICATIONNull()
            Me(Me.tablemembermaster.EQUALIFICATIONColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPQUALIFICATIONNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.PQUALIFICATIONColumn)
        End Function
        
        Public Sub SetPQUALIFICATIONNull()
            Me(Me.tablemembermaster.PQUALIFICATIONColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPROPOSERNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.PROPOSERColumn)
        End Function
        
        Public Sub SetPROPOSERNull()
            Me(Me.tablemembermaster.PROPOSERColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPROPOSERNAMENull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.PROPOSERNAMEColumn)
        End Function
        
        Public Sub SetPROPOSERNAMENull()
            Me(Me.tablemembermaster.PROPOSERNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSECONDERNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.SECONDERColumn)
        End Function
        
        Public Sub SetSECONDERNull()
            Me(Me.tablemembermaster.SECONDERColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSECONDERNAMENull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.SECONDERNAMEColumn)
        End Function
        
        Public Sub SetSECONDERNAMENull()
            Me(Me.tablemembermaster.SECONDERNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPAcopystNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.PAcopystColumn)
        End Function
        
        Public Sub SetPAcopystNull()
            Me(Me.tablemembermaster.PAcopystColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPADD1Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.PADD1Column)
        End Function
        
        Public Sub SetPADD1Null()
            Me(Me.tablemembermaster.PADD1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsPADD2Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.PADD2Column)
        End Function
        
        Public Sub SetPADD2Null()
            Me(Me.tablemembermaster.PADD2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsPADD3Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.PADD3Column)
        End Function
        
        Public Sub SetPADD3Null()
            Me(Me.tablemembermaster.PADD3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsPCITYNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.PCITYColumn)
        End Function
        
        Public Sub SetPCITYNull()
            Me(Me.tablemembermaster.PCITYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPSTATENull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.PSTATEColumn)
        End Function
        
        Public Sub SetPSTATENull()
            Me(Me.tablemembermaster.PSTATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPCOUNTRYNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.PCOUNTRYColumn)
        End Function
        
        Public Sub SetPCOUNTRYNull()
            Me(Me.tablemembermaster.PCOUNTRYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPPINNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.PPINColumn)
        End Function
        
        Public Sub SetPPINNull()
            Me(Me.tablemembermaster.PPINColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPPHONE1Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.PPHONE1Column)
        End Function
        
        Public Sub SetPPHONE1Null()
            Me(Me.tablemembermaster.PPHONE1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsPPHONE2Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.PPHONE2Column)
        End Function
        
        Public Sub SetPPHONE2Null()
            Me(Me.tablemembermaster.PPHONE2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsPCELLNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.PCELLColumn)
        End Function
        
        Public Sub SetPCELLNull()
            Me(Me.tablemembermaster.PCELLColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPEMAILNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.PEMAILColumn)
        End Function
        
        Public Sub SetPEMAILNull()
            Me(Me.tablemembermaster.PEMAILColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRAcopystNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.RAcopystColumn)
        End Function
        
        Public Sub SetRAcopystNull()
            Me(Me.tablemembermaster.RAcopystColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCADD1Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.CADD1Column)
        End Function
        
        Public Sub SetCADD1Null()
            Me(Me.tablemembermaster.CADD1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsCADD2Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.CADD2Column)
        End Function
        
        Public Sub SetCADD2Null()
            Me(Me.tablemembermaster.CADD2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsCADD3Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.CADD3Column)
        End Function
        
        Public Sub SetCADD3Null()
            Me(Me.tablemembermaster.CADD3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsCCITYNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.CCITYColumn)
        End Function
        
        Public Sub SetCCITYNull()
            Me(Me.tablemembermaster.CCITYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCSTATENull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.CSTATEColumn)
        End Function
        
        Public Sub SetCSTATENull()
            Me(Me.tablemembermaster.CSTATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCCOUNTRYNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.CCOUNTRYColumn)
        End Function
        
        Public Sub SetCCOUNTRYNull()
            Me(Me.tablemembermaster.CCOUNTRYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCPINNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.CPINColumn)
        End Function
        
        Public Sub SetCPINNull()
            Me(Me.tablemembermaster.CPINColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCPHONE1Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.CPHONE1Column)
        End Function
        
        Public Sub SetCPHONE1Null()
            Me(Me.tablemembermaster.CPHONE1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsCPHONE2Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.CPHONE2Column)
        End Function
        
        Public Sub SetCPHONE2Null()
            Me(Me.tablemembermaster.CPHONE2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsCCELLNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.CCELLColumn)
        End Function
        
        Public Sub SetCCELLNull()
            Me(Me.tablemembermaster.CCELLColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCEMAILNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.CEMAILColumn)
        End Function
        
        Public Sub SetCEMAILNull()
            Me(Me.tablemembermaster.CEMAILColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCONTADD1Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.CONTADD1Column)
        End Function
        
        Public Sub SetCONTADD1Null()
            Me(Me.tablemembermaster.CONTADD1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsCONTADD2Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.CONTADD2Column)
        End Function
        
        Public Sub SetCONTADD2Null()
            Me(Me.tablemembermaster.CONTADD2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsCONTADD3Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.CONTADD3Column)
        End Function
        
        Public Sub SetCONTADD3Null()
            Me(Me.tablemembermaster.CONTADD3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsCONTCITYNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.CONTCITYColumn)
        End Function
        
        Public Sub SetCONTCITYNull()
            Me(Me.tablemembermaster.CONTCITYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCONTSTATENull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.CONTSTATEColumn)
        End Function
        
        Public Sub SetCONTSTATENull()
            Me(Me.tablemembermaster.CONTSTATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCONTCOUNTRYNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.CONTCOUNTRYColumn)
        End Function
        
        Public Sub SetCONTCOUNTRYNull()
            Me(Me.tablemembermaster.CONTCOUNTRYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCONTPINNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.CONTPINColumn)
        End Function
        
        Public Sub SetCONTPINNull()
            Me(Me.tablemembermaster.CONTPINColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCONTPHONE1Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.CONTPHONE1Column)
        End Function
        
        Public Sub SetCONTPHONE1Null()
            Me(Me.tablemembermaster.CONTPHONE1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsCONTPHONE2Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.CONTPHONE2Column)
        End Function
        
        Public Sub SetCONTPHONE2Null()
            Me(Me.tablemembermaster.CONTPHONE2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsCONTCELLNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.CONTCELLColumn)
        End Function
        
        Public Sub SetCONTCELLNull()
            Me(Me.tablemembermaster.CONTCELLColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCONTEMAILNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.CONTEMAILColumn)
        End Function
        
        Public Sub SetCONTEMAILNull()
            Me(Me.tablemembermaster.CONTEMAILColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEMPTYPENull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.EMPTYPEColumn)
        End Function
        
        Public Sub SetEMPTYPENull()
            Me(Me.tablemembermaster.EMPTYPEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBUSINESSNAMENull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.BUSINESSNAMEColumn)
        End Function
        
        Public Sub SetBUSINESSNAMENull()
            Me(Me.tablemembermaster.BUSINESSNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBAcopystNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.BAcopystColumn)
        End Function
        
        Public Sub SetBAcopystNull()
            Me(Me.tablemembermaster.BAcopystColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOADD1Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.OADD1Column)
        End Function
        
        Public Sub SetOADD1Null()
            Me(Me.tablemembermaster.OADD1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsOADD2Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.OADD2Column)
        End Function
        
        Public Sub SetOADD2Null()
            Me(Me.tablemembermaster.OADD2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsOADD3Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.OADD3Column)
        End Function
        
        Public Sub SetOADD3Null()
            Me(Me.tablemembermaster.OADD3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsOCITYNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.OCITYColumn)
        End Function
        
        Public Sub SetOCITYNull()
            Me(Me.tablemembermaster.OCITYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOSTATENull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.OSTATEColumn)
        End Function
        
        Public Sub SetOSTATENull()
            Me(Me.tablemembermaster.OSTATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOCOUNTRYNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.OCOUNTRYColumn)
        End Function
        
        Public Sub SetOCOUNTRYNull()
            Me(Me.tablemembermaster.OCOUNTRYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOPINNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.OPINColumn)
        End Function
        
        Public Sub SetOPINNull()
            Me(Me.tablemembermaster.OPINColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOPHONE1Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.OPHONE1Column)
        End Function
        
        Public Sub SetOPHONE1Null()
            Me(Me.tablemembermaster.OPHONE1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsOPHONE2Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.OPHONE2Column)
        End Function
        
        Public Sub SetOPHONE2Null()
            Me(Me.tablemembermaster.OPHONE2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsOCELLNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.OCELLColumn)
        End Function
        
        Public Sub SetOCELLNull()
            Me(Me.tablemembermaster.OCELLColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOEMAILNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.OEMAILColumn)
        End Function
        
        Public Sub SetOEMAILNull()
            Me(Me.tablemembermaster.OEMAILColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDOEPROFESSIONNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.DOEPROFESSIONColumn)
        End Function
        
        Public Sub SetDOEPROFESSIONNull()
            Me(Me.tablemembermaster.DOEPROFESSIONColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBUSINESSNATURENull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.BUSINESSNATUREColumn)
        End Function
        
        Public Sub SetBUSINESSNATURENull()
            Me(Me.tablemembermaster.BUSINESSNATUREColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPOSITIONHELDNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.POSITIONHELDColumn)
        End Function
        
        Public Sub SetPOSITIONHELDNull()
            Me(Me.tablemembermaster.POSITIONHELDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSERVICENAMENull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.SERVICENAMEColumn)
        End Function
        
        Public Sub SetSERVICENAMENull()
            Me(Me.tablemembermaster.SERVICENAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSERVICEYEARNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.SERVICEYEARColumn)
        End Function
        
        Public Sub SetSERVICEYEARNull()
            Me(Me.tablemembermaster.SERVICEYEARColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPANONull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.PANOColumn)
        End Function
        
        Public Sub SetPANONull()
            Me(Me.tablemembermaster.PANOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBBANKERNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.BBANKERColumn)
        End Function
        
        Public Sub SetBBANKERNull()
            Me(Me.tablemembermaster.BBANKERColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCCNONull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.CCNOColumn)
        End Function
        
        Public Sub SetCCNONull()
            Me(Me.tablemembermaster.CCNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsANNUALINCOMENull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.ANNUALINCOMEColumn)
        End Function
        
        Public Sub SetANNUALINCOMENull()
            Me(Me.tablemembermaster.ANNUALINCOMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUPDUSERIDNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.UPDUSERIDColumn)
        End Function
        
        Public Sub SetUPDUSERIDNull()
            Me(Me.tablemembermaster.UPDUSERIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUPDDATETIMENull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.UPDDATETIMEColumn)
        End Function
        
        Public Sub SetUPDDATETIMENull()
            Me(Me.tablemembermaster.UPDDATETIMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTERMINATIONNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.TERMINATIONColumn)
        End Function
        
        Public Sub SetTERMINATIONNull()
            Me(Me.tablemembermaster.TERMINATIONColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTRN_CON_DATENull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.TRN_CON_DATEColumn)
        End Function
        
        Public Sub SetTRN_CON_DATENull()
            Me(Me.tablemembermaster.TRN_CON_DATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCON_MCODENull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.CON_MCODEColumn)
        End Function
        
        Public Sub SetCON_MCODENull()
            Me(Me.tablemembermaster.CON_MCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPFAXNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.PFAXColumn)
        End Function
        
        Public Sub SetPFAXNull()
            Me(Me.tablemembermaster.PFAXColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCFAXNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.CFAXColumn)
        End Function
        
        Public Sub SetCFAXNull()
            Me(Me.tablemembermaster.CFAXColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCONTFAXNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.CONTFAXColumn)
        End Function
        
        Public Sub SetCONTFAXNull()
            Me(Me.tablemembermaster.CONTFAXColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsREASONNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.REASONColumn)
        End Function
        
        Public Sub SetREASONNull()
            Me(Me.tablemembermaster.REASONColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPHOTONull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.PHOTOColumn)
        End Function
        
        Public Sub SetPHOTONull()
            Me(Me.tablemembermaster.PHOTOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCREDITLIMITNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.CREDITLIMITColumn)
        End Function
        
        Public Sub SetCREDITLIMITNull()
            Me(Me.tablemembermaster.CREDITLIMITColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLIMITAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.LIMITAMOUNTColumn)
        End Function
        
        Public Sub SetLIMITAMOUNTNull()
            Me(Me.tablemembermaster.LIMITAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsWEBSITENull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.WEBSITEColumn)
        End Function
        
        Public Sub SetWEBSITENull()
            Me(Me.tablemembermaster.WEBSITEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsImagefileNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.ImagefileColumn)
        End Function
        
        Public Sub SetImagefileNull()
            Me(Me.tablemembermaster.ImagefileColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IssizefieldNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.sizefieldColumn)
        End Function
        
        Public Sub SetsizefieldNull()
            Me(Me.tablemembermaster.sizefieldColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVdateNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.VdateColumn)
        End Function
        
        Public Sub SetVdateNull()
            Me(Me.tablemembermaster.VdateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVyearNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.VyearColumn)
        End Function
        
        Public Sub SetVyearNull()
            Me(Me.tablemembermaster.VyearColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsValiddateNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.ValiddateColumn)
        End Function
        
        Public Sub SetValiddateNull()
            Me(Me.tablemembermaster.ValiddateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTempTerminationNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.TempTerminationColumn)
        End Function
        
        Public Sub SetTempTerminationNull()
            Me(Me.tablemembermaster.TempTerminationColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTempTermDateNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.TempTermDateColumn)
        End Function
        
        Public Sub SetTempTermDateNull()
            Me(Me.tablemembermaster.TempTermDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTempTermReasonNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.TempTermReasonColumn)
        End Function
        
        Public Sub SetTempTermReasonNull()
            Me(Me.tablemembermaster.TempTermReasonColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMemberidNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.MemberidColumn)
        End Function
        
        Public Sub SetMemberidNull()
            Me(Me.tablemembermaster.MemberidColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEndingDateNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.EndingDateColumn)
        End Function
        
        Public Sub SetEndingDateNull()
            Me(Me.tablemembermaster.EndingDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTotalYearsNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.TotalYearsColumn)
        End Function
        
        Public Sub SetTotalYearsNull()
            Me(Me.tablemembermaster.TotalYearsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCardNoNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.CardNoColumn)
        End Function
        
        Public Sub SetCardNoNull()
            Me(Me.tablemembermaster.CardNoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCardExpDateNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.CardExpDateColumn)
        End Function
        
        Public Sub SetCardExpDateNull()
            Me(Me.tablemembermaster.CardExpDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsValidityNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.ValidityColumn)
        End Function
        
        Public Sub SetValidityNull()
            Me(Me.tablemembermaster.ValidityColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPeriodNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.PeriodColumn)
        End Function
        
        Public Sub SetPeriodNull()
            Me(Me.tablemembermaster.PeriodColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCreditcardnoNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.CreditcardnoColumn)
        End Function
        
        Public Sub SetCreditcardnoNull()
            Me(Me.tablemembermaster.CreditcardnoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCreditExpDtNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.CreditExpDtColumn)
        End Function
        
        Public Sub SetCreditExpDtNull()
            Me(Me.tablemembermaster.CreditExpDtColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTypeNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.TypeColumn)
        End Function
        
        Public Sub SetTypeNull()
            Me(Me.tablemembermaster.TypeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSTATUSDATEFROMNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.STATUSDATEFROMColumn)
        End Function
        
        Public Sub SetSTATUSDATEFROMNull()
            Me(Me.tablemembermaster.STATUSDATEFROMColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSTATUSDATETONull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.STATUSDATETOColumn)
        End Function
        
        Public Sub SetSTATUSDATETONull()
            Me(Me.tablemembermaster.STATUSDATETOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCurentStatusNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.CurentStatusColumn)
        End Function
        
        Public Sub SetCurentStatusNull()
            Me(Me.tablemembermaster.CurentStatusColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFirstNameNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.FirstNameColumn)
        End Function
        
        Public Sub SetFirstNameNull()
            Me(Me.tablemembermaster.FirstNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMiddleNameNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.MiddleNameColumn)
        End Function
        
        Public Sub SetMiddleNameNull()
            Me(Me.tablemembermaster.MiddleNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSurnameNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.SurnameColumn)
        End Function
        
        Public Sub SetSurnameNull()
            Me(Me.tablemembermaster.SurnameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Is_AliasNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster._AliasColumn)
        End Function
        
        Public Sub Set_AliasNull()
            Me(Me.tablemembermaster._AliasColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPrefixNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.PrefixColumn)
        End Function
        
        Public Sub SetPrefixNull()
            Me(Me.tablemembermaster.PrefixColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBillTypeNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.BillTypeColumn)
        End Function
        
        Public Sub SetBillTypeNull()
            Me(Me.tablemembermaster.BillTypeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNationalityNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.NationalityColumn)
        End Function
        
        Public Sub SetNationalityNull()
            Me(Me.tablemembermaster.NationalityColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNationalityAtbirthNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.NationalityAtbirthColumn)
        End Function
        
        Public Sub SetNationalityAtbirthNull()
            Me(Me.tablemembermaster.NationalityAtbirthColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBillbasisNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.BillbasisColumn)
        End Function
        
        Public Sub SetBillbasisNull()
            Me(Me.tablemembermaster.BillbasisColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBillHeadNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.BillHeadColumn)
        End Function
        
        Public Sub SetBillHeadNull()
            Me(Me.tablemembermaster.BillHeadColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGDRLockerNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.GDRLockerColumn)
        End Function
        
        Public Sub SetGDRLockerNull()
            Me(Me.tablemembermaster.GDRLockerColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLDRLockerNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.LDRLockerColumn)
        End Function
        
        Public Sub SetLDRLockerNull()
            Me(Me.tablemembermaster.LDRLockerColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHPLockerNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.HPLockerColumn)
        End Function
        
        Public Sub SetHPLockerNull()
            Me(Me.tablemembermaster.HPLockerColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMembershipToNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.MembershipToColumn)
        End Function
        
        Public Sub SetMembershipToNull()
            Me(Me.tablemembermaster.MembershipToColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IssalutNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.salutColumn)
        End Function
        
        Public Sub SetsalutNull()
            Me(Me.tablemembermaster.salutColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEntranceFeeNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.EntranceFeeColumn)
        End Function
        
        Public Sub SetEntranceFeeNull()
            Me(Me.tablemembermaster.EntranceFeeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDevelopmentFeeNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.DevelopmentFeeColumn)
        End Function
        
        Public Sub SetDevelopmentFeeNull()
            Me(Me.tablemembermaster.DevelopmentFeeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCriditNumberNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.CriditNumberColumn)
        End Function
        
        Public Sub SetCriditNumberNull()
            Me(Me.tablemembermaster.CriditNumberColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSecurityDepositNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.SecurityDepositColumn)
        End Function
        
        Public Sub SetSecurityDepositNull()
            Me(Me.tablemembermaster.SecurityDepositColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPlaceOfBirthNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.PlaceOfBirthColumn)
        End Function
        
        Public Sub SetPlaceOfBirthNull()
            Me(Me.tablemembermaster.PlaceOfBirthColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCountryOfBirthNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.CountryOfBirthColumn)
        End Function
        
        Public Sub SetCountryOfBirthNull()
            Me(Me.tablemembermaster.CountryOfBirthColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLastArrivalInCalNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.LastArrivalInCalColumn)
        End Function
        
        Public Sub SetLastArrivalInCalNull()
            Me(Me.tablemembermaster.LastArrivalInCalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPeriodOfStay_yearNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.PeriodOfStay_yearColumn)
        End Function
        
        Public Sub SetPeriodOfStay_yearNull()
            Me(Me.tablemembermaster.PeriodOfStay_yearColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPeriodOfStay_MonthNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.PeriodOfStay_MonthColumn)
        End Function
        
        Public Sub SetPeriodOfStay_MonthNull()
            Me(Me.tablemembermaster.PeriodOfStay_MonthColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPreviouslyProposedNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.PreviouslyProposedColumn)
        End Function
        
        Public Sub SetPreviouslyProposedNull()
            Me(Me.tablemembermaster.PreviouslyProposedColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNoOfTimesProposedNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.NoOfTimesProposedColumn)
        End Function
        
        Public Sub SetNoOfTimesProposedNull()
            Me(Me.tablemembermaster.NoOfTimesProposedColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDateOfProposalNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.DateOfProposalColumn)
        End Function
        
        Public Sub SetDateOfProposalNull()
            Me(Me.tablemembermaster.DateOfProposalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsResultOfProposalNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.ResultOfProposalColumn)
        End Function
        
        Public Sub SetResultOfProposalNull()
            Me(Me.tablemembermaster.ResultOfProposalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsElectedNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.ElectedColumn)
        End Function
        
        Public Sub SetElectedNull()
            Me(Me.tablemembermaster.ElectedColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFatherNameNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.FatherNameColumn)
        End Function
        
        Public Sub SetFatherNameNull()
            Me(Me.tablemembermaster.FatherNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDOBfatherNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.DOBfatherColumn)
        End Function
        
        Public Sub SetDOBfatherNull()
            Me(Me.tablemembermaster.DOBfatherColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsWifeDOBNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.WifeDOBColumn)
        End Function
        
        Public Sub SetWifeDOBNull()
            Me(Me.tablemembermaster.WifeDOBColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMaidenNameWifeNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.MaidenNameWifeColumn)
        End Function
        
        Public Sub SetMaidenNameWifeNull()
            Me(Me.tablemembermaster.MaidenNameWifeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNationalityWifeNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.NationalityWifeColumn)
        End Function
        
        Public Sub SetNationalityWifeNull()
            Me(Me.tablemembermaster.NationalityWifeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsWifesFatherNameNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.WifesFatherNameColumn)
        End Function
        
        Public Sub SetWifesFatherNameNull()
            Me(Me.tablemembermaster.WifesFatherNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsWifeFatherDOBNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.WifeFatherDOBColumn)
        End Function
        
        Public Sub SetWifeFatherDOBNull()
            Me(Me.tablemembermaster.WifeFatherDOBColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsApplNoNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.ApplNoColumn)
        End Function
        
        Public Sub SetApplNoNull()
            Me(Me.tablemembermaster.ApplNoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsApplDateNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.ApplDateColumn)
        End Function
        
        Public Sub SetApplDateNull()
            Me(Me.tablemembermaster.ApplDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCorporatestNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.CorporatestColumn)
        End Function
        
        Public Sub SetCorporatestNull()
            Me(Me.tablemembermaster.CorporatestColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCorporateCodeNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.CorporateCodeColumn)
        End Function
        
        Public Sub SetCorporateCodeNull()
            Me(Me.tablemembermaster.CorporateCodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCompNameNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.CompNameColumn)
        End Function
        
        Public Sub SetCompNameNull()
            Me(Me.tablemembermaster.CompNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDesignationNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.DesignationColumn)
        End Function
        
        Public Sub SetDesignationNull()
            Me(Me.tablemembermaster.DesignationColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsProfessionInfoNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.ProfessionInfoColumn)
        End Function
        
        Public Sub SetProfessionInfoNull()
            Me(Me.tablemembermaster.ProfessionInfoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBuisnessInfoNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.BuisnessInfoColumn)
        End Function
        
        Public Sub SetBuisnessInfoNull()
            Me(Me.tablemembermaster.BuisnessInfoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsProductsNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.ProductsColumn)
        End Function
        
        Public Sub SetProductsNull()
            Me(Me.tablemembermaster.ProductsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAgentsDealersNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.AgentsDealersColumn)
        End Function
        
        Public Sub SetAgentsDealersNull()
            Me(Me.tablemembermaster.AgentsDealersColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsESTDdateNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.ESTDdateColumn)
        End Function
        
        Public Sub SetESTDdateNull()
            Me(Me.tablemembermaster.ESTDdateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNoOfEmpNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.NoOfEmpColumn)
        End Function
        
        Public Sub SetNoOfEmpNull()
            Me(Me.tablemembermaster.NoOfEmpColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTurnoverNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.TurnoverColumn)
        End Function
        
        Public Sub SetTurnoverNull()
            Me(Me.tablemembermaster.TurnoverColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsClientNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.ClientColumn)
        End Function
        
        Public Sub SetClientNull()
            Me(Me.tablemembermaster.ClientColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAppliedButNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.AppliedButColumn)
        End Function
        
        Public Sub SetAppliedButNull()
            Me(Me.tablemembermaster.AppliedButColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPositionInChamberNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.PositionInChamberColumn)
        End Function
        
        Public Sub SetPositionInChamberNull()
            Me(Me.tablemembermaster.PositionInChamberColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsQulificationstatusNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.QulificationstatusColumn)
        End Function
        
        Public Sub SetQulificationstatusNull()
            Me(Me.tablemembermaster.QulificationstatusColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsQualification1Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.Qualification1Column)
        End Function
        
        Public Sub SetQualification1Null()
            Me(Me.tablemembermaster.Qualification1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsDetails1Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.Details1Column)
        End Function
        
        Public Sub SetDetails1Null()
            Me(Me.tablemembermaster.Details1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsYearOfPassing1Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.YearOfPassing1Column)
        End Function
        
        Public Sub SetYearOfPassing1Null()
            Me(Me.tablemembermaster.YearOfPassing1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsInstitute1Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.Institute1Column)
        End Function
        
        Public Sub SetInstitute1Null()
            Me(Me.tablemembermaster.Institute1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsDivision1Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.Division1Column)
        End Function
        
        Public Sub SetDivision1Null()
            Me(Me.tablemembermaster.Division1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsQualification2Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.Qualification2Column)
        End Function
        
        Public Sub SetQualification2Null()
            Me(Me.tablemembermaster.Qualification2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsDetails2Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.Details2Column)
        End Function
        
        Public Sub SetDetails2Null()
            Me(Me.tablemembermaster.Details2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsYearOfPassing2Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.YearOfPassing2Column)
        End Function
        
        Public Sub SetYearOfPassing2Null()
            Me(Me.tablemembermaster.YearOfPassing2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsInstitute2Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.Institute2Column)
        End Function
        
        Public Sub SetInstitute2Null()
            Me(Me.tablemembermaster.Institute2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsDivision2Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.Division2Column)
        End Function
        
        Public Sub SetDivision2Null()
            Me(Me.tablemembermaster.Division2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsQualification3Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.Qualification3Column)
        End Function
        
        Public Sub SetQualification3Null()
            Me(Me.tablemembermaster.Qualification3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsDetails3Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.Details3Column)
        End Function
        
        Public Sub SetDetails3Null()
            Me(Me.tablemembermaster.Details3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsYearOfPassing3Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.YearOfPassing3Column)
        End Function
        
        Public Sub SetYearOfPassing3Null()
            Me(Me.tablemembermaster.YearOfPassing3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsInstitute3Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.Institute3Column)
        End Function
        
        Public Sub SetInstitute3Null()
            Me(Me.tablemembermaster.Institute3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsDivision3Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.Division3Column)
        End Function
        
        Public Sub SetDivision3Null()
            Me(Me.tablemembermaster.Division3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IssportstatusNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.sportstatusColumn)
        End Function
        
        Public Sub SetsportstatusNull()
            Me(Me.tablemembermaster.sportstatusColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGameType1Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.GameType1Column)
        End Function
        
        Public Sub SetGameType1Null()
            Me(Me.tablemembermaster.GameType1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsNameOfGame1Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.NameOfGame1Column)
        End Function
        
        Public Sub SetNameOfGame1Null()
            Me(Me.tablemembermaster.NameOfGame1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsDescription1Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.Description1Column)
        End Function
        
        Public Sub SetDescription1Null()
            Me(Me.tablemembermaster.Description1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsGameType2Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.GameType2Column)
        End Function
        
        Public Sub SetGameType2Null()
            Me(Me.tablemembermaster.GameType2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsNameofGame2Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.NameofGame2Column)
        End Function
        
        Public Sub SetNameofGame2Null()
            Me(Me.tablemembermaster.NameofGame2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsDescription2Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.Description2Column)
        End Function
        
        Public Sub SetDescription2Null()
            Me(Me.tablemembermaster.Description2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsGameType3Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.GameType3Column)
        End Function
        
        Public Sub SetGameType3Null()
            Me(Me.tablemembermaster.GameType3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsNameOfGame3Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.NameOfGame3Column)
        End Function
        
        Public Sub SetNameOfGame3Null()
            Me(Me.tablemembermaster.NameOfGame3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsDescription3Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.Description3Column)
        End Function
        
        Public Sub SetDescription3Null()
            Me(Me.tablemembermaster.Description3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsChildstatusNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.ChildstatusColumn)
        End Function
        
        Public Sub SetChildstatusNull()
            Me(Me.tablemembermaster.ChildstatusColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsChildName1Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.ChildName1Column)
        End Function
        
        Public Sub SetChildName1Null()
            Me(Me.tablemembermaster.ChildName1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsChildDob1Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.ChildDob1Column)
        End Function
        
        Public Sub SetChildDob1Null()
            Me(Me.tablemembermaster.ChildDob1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsChildSex1Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.ChildSex1Column)
        End Function
        
        Public Sub SetChildSex1Null()
            Me(Me.tablemembermaster.ChildSex1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsChildExpairy1Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.ChildExpairy1Column)
        End Function
        
        Public Sub SetChildExpairy1Null()
            Me(Me.tablemembermaster.ChildExpairy1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsChildName2Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.ChildName2Column)
        End Function
        
        Public Sub SetChildName2Null()
            Me(Me.tablemembermaster.ChildName2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsChildDob2Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.ChildDob2Column)
        End Function
        
        Public Sub SetChildDob2Null()
            Me(Me.tablemembermaster.ChildDob2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsChildSex2Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.ChildSex2Column)
        End Function
        
        Public Sub SetChildSex2Null()
            Me(Me.tablemembermaster.ChildSex2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsChildExpairy2Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.ChildExpairy2Column)
        End Function
        
        Public Sub SetChildExpairy2Null()
            Me(Me.tablemembermaster.ChildExpairy2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsChildName3Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.ChildName3Column)
        End Function
        
        Public Sub SetChildName3Null()
            Me(Me.tablemembermaster.ChildName3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsChildDob3Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.ChildDob3Column)
        End Function
        
        Public Sub SetChildDob3Null()
            Me(Me.tablemembermaster.ChildDob3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsChildSex3Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.ChildSex3Column)
        End Function
        
        Public Sub SetChildSex3Null()
            Me(Me.tablemembermaster.ChildSex3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IschildExpairy3Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.childExpairy3Column)
        End Function
        
        Public Sub SetchildExpairy3Null()
            Me(Me.tablemembermaster.childExpairy3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsClubstatusNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.ClubstatusColumn)
        End Function
        
        Public Sub SetClubstatusNull()
            Me(Me.tablemembermaster.ClubstatusColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOtherClubName1Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.OtherClubName1Column)
        End Function
        
        Public Sub SetOtherClubName1Null()
            Me(Me.tablemembermaster.OtherClubName1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsOCAddress1Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.OCAddress1Column)
        End Function
        
        Public Sub SetOCAddress1Null()
            Me(Me.tablemembermaster.OCAddress1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsOCStatus1Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.OCStatus1Column)
        End Function
        
        Public Sub SetOCStatus1Null()
            Me(Me.tablemembermaster.OCStatus1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsOtherClubName2Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.OtherClubName2Column)
        End Function
        
        Public Sub SetOtherClubName2Null()
            Me(Me.tablemembermaster.OtherClubName2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsOCAddress2Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.OCAddress2Column)
        End Function
        
        Public Sub SetOCAddress2Null()
            Me(Me.tablemembermaster.OCAddress2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsOCStatus2Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.OCStatus2Column)
        End Function
        
        Public Sub SetOCStatus2Null()
            Me(Me.tablemembermaster.OCStatus2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsOtherClubname3Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.OtherClubname3Column)
        End Function
        
        Public Sub SetOtherClubname3Null()
            Me(Me.tablemembermaster.OtherClubname3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsOCAddress3Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.OCAddress3Column)
        End Function
        
        Public Sub SetOCAddress3Null()
            Me(Me.tablemembermaster.OCAddress3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsOCStatausNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.OCStatausColumn)
        End Function
        
        Public Sub SetOCStatausNull()
            Me(Me.tablemembermaster.OCStatausColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsadduserNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.adduserColumn)
        End Function
        
        Public Sub SetadduserNull()
            Me(Me.tablemembermaster.adduserColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsadddateNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.adddateColumn)
        End Function
        
        Public Sub SetadddateNull()
            Me(Me.tablemembermaster.adddateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsfreezeNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.freezeColumn)
        End Function
        
        Public Sub SetfreezeNull()
            Me(Me.tablemembermaster.freezeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRelativestatusNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.RelativestatusColumn)
        End Function
        
        Public Sub SetRelativestatusNull()
            Me(Me.tablemembermaster.RelativestatusColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRelativeName1Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.RelativeName1Column)
        End Function
        
        Public Sub SetRelativeName1Null()
            Me(Me.tablemembermaster.RelativeName1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsRelation1Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.Relation1Column)
        End Function
        
        Public Sub SetRelation1Null()
            Me(Me.tablemembermaster.Relation1Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isdateofbirth1Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.dateofbirth1Column)
        End Function
        
        Public Sub Setdateofbirth1Null()
            Me(Me.tablemembermaster.dateofbirth1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsRelativeage1Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.Relativeage1Column)
        End Function
        
        Public Sub SetRelativeage1Null()
            Me(Me.tablemembermaster.Relativeage1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsRelativeSex1Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.RelativeSex1Column)
        End Function
        
        Public Sub SetRelativeSex1Null()
            Me(Me.tablemembermaster.RelativeSex1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsRelativeaddress1Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.Relativeaddress1Column)
        End Function
        
        Public Sub SetRelativeaddress1Null()
            Me(Me.tablemembermaster.Relativeaddress1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsRelativeName2Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.RelativeName2Column)
        End Function
        
        Public Sub SetRelativeName2Null()
            Me(Me.tablemembermaster.RelativeName2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsRelation2Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.Relation2Column)
        End Function
        
        Public Sub SetRelation2Null()
            Me(Me.tablemembermaster.Relation2Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isdateofbirth2Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.dateofbirth2Column)
        End Function
        
        Public Sub Setdateofbirth2Null()
            Me(Me.tablemembermaster.dateofbirth2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsRelativeage2Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.Relativeage2Column)
        End Function
        
        Public Sub SetRelativeage2Null()
            Me(Me.tablemembermaster.Relativeage2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsRelativeSex2Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.RelativeSex2Column)
        End Function
        
        Public Sub SetRelativeSex2Null()
            Me(Me.tablemembermaster.RelativeSex2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsRelativeaddress2Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.Relativeaddress2Column)
        End Function
        
        Public Sub SetRelativeaddress2Null()
            Me(Me.tablemembermaster.Relativeaddress2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsRelativeName3Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.RelativeName3Column)
        End Function
        
        Public Sub SetRelativeName3Null()
            Me(Me.tablemembermaster.RelativeName3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsRelation3Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.Relation3Column)
        End Function
        
        Public Sub SetRelation3Null()
            Me(Me.tablemembermaster.Relation3Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isdateofbirth3Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.dateofbirth3Column)
        End Function
        
        Public Sub Setdateofbirth3Null()
            Me(Me.tablemembermaster.dateofbirth3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsRelativeage3Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.Relativeage3Column)
        End Function
        
        Public Sub SetRelativeage3Null()
            Me(Me.tablemembermaster.Relativeage3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsRelativeSex3Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.RelativeSex3Column)
        End Function
        
        Public Sub SetRelativeSex3Null()
            Me(Me.tablemembermaster.RelativeSex3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsRelativeaddress3Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.Relativeaddress3Column)
        End Function
        
        Public Sub SetRelativeaddress3Null()
            Me(Me.tablemembermaster.Relativeaddress3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsreferentialstNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.referentialstColumn)
        End Function
        
        Public Sub SetreferentialstNull()
            Me(Me.tablemembermaster.referentialstColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ismem_code1Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.mem_code1Column)
        End Function
        
        Public Sub Setmem_code1Null()
            Me(Me.tablemembermaster.mem_code1Column) = System.Convert.DBNull
        End Sub
        
        Public Function Ismem_name1Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.mem_name1Column)
        End Function
        
        Public Sub Setmem_name1Null()
            Me(Me.tablemembermaster.mem_name1Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isrefmem_date1Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.refmem_date1Column)
        End Function
        
        Public Sub Setrefmem_date1Null()
            Me(Me.tablemembermaster.refmem_date1Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isdeleted1Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.deleted1Column)
        End Function
        
        Public Sub Setdeleted1Null()
            Me(Me.tablemembermaster.deleted1Column) = System.Convert.DBNull
        End Sub
        
        Public Function Ismem_code2Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.mem_code2Column)
        End Function
        
        Public Sub Setmem_code2Null()
            Me(Me.tablemembermaster.mem_code2Column) = System.Convert.DBNull
        End Sub
        
        Public Function Ismem_name2Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.mem_name2Column)
        End Function
        
        Public Sub Setmem_name2Null()
            Me(Me.tablemembermaster.mem_name2Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isrefmem_date2Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.refmem_date2Column)
        End Function
        
        Public Sub Setrefmem_date2Null()
            Me(Me.tablemembermaster.refmem_date2Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isdeleted2Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.deleted2Column)
        End Function
        
        Public Sub Setdeleted2Null()
            Me(Me.tablemembermaster.deleted2Column) = System.Convert.DBNull
        End Sub
        
        Public Function Ismem_code3Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.mem_code3Column)
        End Function
        
        Public Sub Setmem_code3Null()
            Me(Me.tablemembermaster.mem_code3Column) = System.Convert.DBNull
        End Sub
        
        Public Function Ismem_name3Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.mem_name3Column)
        End Function
        
        Public Sub Setmem_name3Null()
            Me(Me.tablemembermaster.mem_name3Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isrefmem_date3Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.refmem_date3Column)
        End Function
        
        Public Sub Setrefmem_date3Null()
            Me(Me.tablemembermaster.refmem_date3Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isdeleted3Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.deleted3Column)
        End Function
        
        Public Sub Setdeleted3Null()
            Me(Me.tablemembermaster.deleted3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsentrancefeestNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.entrancefeestColumn)
        End Function
        
        Public Sub SetentrancefeestNull()
            Me(Me.tablemembermaster.entrancefeestColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isreceiptno1Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.receiptno1Column)
        End Function
        
        Public Sub Setreceiptno1Null()
            Me(Me.tablemembermaster.receiptno1Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isstartdate1Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.startdate1Column)
        End Function
        
        Public Sub Setstartdate1Null()
            Me(Me.tablemembermaster.startdate1Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isamount1Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.amount1Column)
        End Function
        
        Public Sub Setamount1Null()
            Me(Me.tablemembermaster.amount1Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isreceiptno2Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.receiptno2Column)
        End Function
        
        Public Sub Setreceiptno2Null()
            Me(Me.tablemembermaster.receiptno2Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isstartdate2Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.startdate2Column)
        End Function
        
        Public Sub Setstartdate2Null()
            Me(Me.tablemembermaster.startdate2Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isamount2Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.amount2Column)
        End Function
        
        Public Sub Setamount2Null()
            Me(Me.tablemembermaster.amount2Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isreceiptno3Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.receiptno3Column)
        End Function
        
        Public Sub Setreceiptno3Null()
            Me(Me.tablemembermaster.receiptno3Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isstartdate3Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.startdate3Column)
        End Function
        
        Public Sub Setstartdate3Null()
            Me(Me.tablemembermaster.startdate3Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isamount3Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.amount3Column)
        End Function
        
        Public Sub Setamount3Null()
            Me(Me.tablemembermaster.amount3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsOLDNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.OLDColumn)
        End Function
        
        Public Sub SetOLDNull()
            Me(Me.tablemembermaster.OLDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCardAmtNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.CardAmtColumn)
        End Function
        
        Public Sub SetCardAmtNull()
            Me(Me.tablemembermaster.CardAmtColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMINIMUMUSAGENull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.MINIMUMUSAGEColumn)
        End Function
        
        Public Sub SetMINIMUMUSAGENull()
            Me(Me.tablemembermaster.MINIMUMUSAGEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCREDITNONull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.CREDITNOColumn)
        End Function
        
        Public Sub SetCREDITNONull()
            Me(Me.tablemembermaster.CREDITNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSPOUSEMOBILENull() As Boolean
            Return Me.IsNull(Me.tablemembermaster.SPOUSEMOBILEColumn)
        End Function
        
        Public Sub SetSPOUSEMOBILENull()
            Me(Me.tablemembermaster.SPOUSEMOBILEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPADD4Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.PADD4Column)
        End Function
        
        Public Sub SetPADD4Null()
            Me(Me.tablemembermaster.PADD4Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsCADD4Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster.CADD4Column)
        End Function
        
        Public Sub SetCADD4Null()
            Me(Me.tablemembermaster.CADD4Column) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class membermasterRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As membermasterRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As membermasterRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As membermasterRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class HOUSEDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSLCODE As DataColumn
        
        Private columnBILLDATE As DataColumn
        
        Private columnLOCDESC As DataColumn
        
        Private columnLOCCODE As DataColumn
        
        Private columnAMOUNT As DataColumn
        
        Friend Sub New()
            MyBase.New("HOUSE")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property SLCODEColumn As DataColumn
            Get
                Return Me.columnSLCODE
            End Get
        End Property
        
        Friend ReadOnly Property BILLDATEColumn As DataColumn
            Get
                Return Me.columnBILLDATE
            End Get
        End Property
        
        Friend ReadOnly Property LOCDESCColumn As DataColumn
            Get
                Return Me.columnLOCDESC
            End Get
        End Property
        
        Friend ReadOnly Property LOCCODEColumn As DataColumn
            Get
                Return Me.columnLOCCODE
            End Get
        End Property
        
        Friend ReadOnly Property AMOUNTColumn As DataColumn
            Get
                Return Me.columnAMOUNT
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As HOUSERow
            Get
                Return CType(Me.Rows(index),HOUSERow)
            End Get
        End Property
        
        Public Event HOUSERowChanged As HOUSERowChangeEventHandler
        
        Public Event HOUSERowChanging As HOUSERowChangeEventHandler
        
        Public Event HOUSERowDeleted As HOUSERowChangeEventHandler
        
        Public Event HOUSERowDeleting As HOUSERowChangeEventHandler
        
        Public Overloads Sub AddHOUSERow(ByVal row As HOUSERow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddHOUSERow(ByVal SLCODE As String, ByVal BILLDATE As Date, ByVal LOCDESC As String, ByVal LOCCODE As String, ByVal AMOUNT As Decimal) As HOUSERow
            Dim rowHOUSERow As HOUSERow = CType(Me.NewRow,HOUSERow)
            rowHOUSERow.ItemArray = New Object() {SLCODE, BILLDATE, LOCDESC, LOCCODE, AMOUNT}
            Me.Rows.Add(rowHOUSERow)
            Return rowHOUSERow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As HOUSEDataTable = CType(MyBase.Clone,HOUSEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New HOUSEDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnSLCODE = Me.Columns("SLCODE")
            Me.columnBILLDATE = Me.Columns("BILLDATE")
            Me.columnLOCDESC = Me.Columns("LOCDESC")
            Me.columnLOCCODE = Me.Columns("LOCCODE")
            Me.columnAMOUNT = Me.Columns("AMOUNT")
        End Sub
        
        Private Sub InitClass()
            Me.columnSLCODE = New DataColumn("SLCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSLCODE)
            Me.columnBILLDATE = New DataColumn("BILLDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBILLDATE)
            Me.columnLOCDESC = New DataColumn("LOCDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLOCDESC)
            Me.columnLOCCODE = New DataColumn("LOCCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLOCCODE)
            Me.columnAMOUNT = New DataColumn("AMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAMOUNT)
            Me.columnSLCODE.AllowDBNull = false
            Me.columnLOCDESC.AllowDBNull = false
        End Sub
        
        Public Function NewHOUSERow() As HOUSERow
            Return CType(Me.NewRow,HOUSERow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New HOUSERow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(HOUSERow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.HOUSERowChangedEvent) Is Nothing) Then
                RaiseEvent HOUSERowChanged(Me, New HOUSERowChangeEvent(CType(e.Row,HOUSERow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.HOUSERowChangingEvent) Is Nothing) Then
                RaiseEvent HOUSERowChanging(Me, New HOUSERowChangeEvent(CType(e.Row,HOUSERow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.HOUSERowDeletedEvent) Is Nothing) Then
                RaiseEvent HOUSERowDeleted(Me, New HOUSERowChangeEvent(CType(e.Row,HOUSERow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.HOUSERowDeletingEvent) Is Nothing) Then
                RaiseEvent HOUSERowDeleting(Me, New HOUSERowChangeEvent(CType(e.Row,HOUSERow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveHOUSERow(ByVal row As HOUSERow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class HOUSERow
        Inherits DataRow
        
        Private tableHOUSE As HOUSEDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableHOUSE = CType(Me.Table,HOUSEDataTable)
        End Sub
        
        Public Property SLCODE As String
            Get
                Return CType(Me(Me.tableHOUSE.SLCODEColumn),String)
            End Get
            Set
                Me(Me.tableHOUSE.SLCODEColumn) = value
            End Set
        End Property
        
        Public Property BILLDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tableHOUSE.BILLDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableHOUSE.BILLDATEColumn) = value
            End Set
        End Property
        
        Public Property LOCDESC As String
            Get
                Return CType(Me(Me.tableHOUSE.LOCDESCColumn),String)
            End Get
            Set
                Me(Me.tableHOUSE.LOCDESCColumn) = value
            End Set
        End Property
        
        Public Property LOCCODE As String
            Get
                Try 
                    Return CType(Me(Me.tableHOUSE.LOCCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableHOUSE.LOCCODEColumn) = value
            End Set
        End Property
        
        Public Property AMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableHOUSE.AMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableHOUSE.AMOUNTColumn) = value
            End Set
        End Property
        
        Public Function IsBILLDATENull() As Boolean
            Return Me.IsNull(Me.tableHOUSE.BILLDATEColumn)
        End Function
        
        Public Sub SetBILLDATENull()
            Me(Me.tableHOUSE.BILLDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLOCCODENull() As Boolean
            Return Me.IsNull(Me.tableHOUSE.LOCCODEColumn)
        End Function
        
        Public Sub SetLOCCODENull()
            Me(Me.tableHOUSE.LOCCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableHOUSE.AMOUNTColumn)
        End Function
        
        Public Sub SetAMOUNTNull()
            Me(Me.tableHOUSE.AMOUNTColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class HOUSERowChangeEvent
        Inherits EventArgs
        
        Private eventRow As HOUSERow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As HOUSERow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As HOUSERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DEBITNOTEPAYMENTDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSNO As DataColumn
        
        Private columnSLCODE As DataColumn
        
        Private columnHEADDESC As DataColumn
        
        Private columnAMOUNT As DataColumn
        
        Private columnBILLDATE As DataColumn
        
        Friend Sub New()
            MyBase.New("DEBITNOTEPAYMENT")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property SNOColumn As DataColumn
            Get
                Return Me.columnSNO
            End Get
        End Property
        
        Friend ReadOnly Property SLCODEColumn As DataColumn
            Get
                Return Me.columnSLCODE
            End Get
        End Property
        
        Friend ReadOnly Property HEADDESCColumn As DataColumn
            Get
                Return Me.columnHEADDESC
            End Get
        End Property
        
        Friend ReadOnly Property AMOUNTColumn As DataColumn
            Get
                Return Me.columnAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property BILLDATEColumn As DataColumn
            Get
                Return Me.columnBILLDATE
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As DEBITNOTEPAYMENTRow
            Get
                Return CType(Me.Rows(index),DEBITNOTEPAYMENTRow)
            End Get
        End Property
        
        Public Event DEBITNOTEPAYMENTRowChanged As DEBITNOTEPAYMENTRowChangeEventHandler
        
        Public Event DEBITNOTEPAYMENTRowChanging As DEBITNOTEPAYMENTRowChangeEventHandler
        
        Public Event DEBITNOTEPAYMENTRowDeleted As DEBITNOTEPAYMENTRowChangeEventHandler
        
        Public Event DEBITNOTEPAYMENTRowDeleting As DEBITNOTEPAYMENTRowChangeEventHandler
        
        Public Overloads Sub AddDEBITNOTEPAYMENTRow(ByVal row As DEBITNOTEPAYMENTRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddDEBITNOTEPAYMENTRow(ByVal SNO As Integer, ByVal SLCODE As String, ByVal HEADDESC As String, ByVal AMOUNT As Decimal, ByVal BILLDATE As Date) As DEBITNOTEPAYMENTRow
            Dim rowDEBITNOTEPAYMENTRow As DEBITNOTEPAYMENTRow = CType(Me.NewRow,DEBITNOTEPAYMENTRow)
            rowDEBITNOTEPAYMENTRow.ItemArray = New Object() {SNO, SLCODE, HEADDESC, AMOUNT, BILLDATE}
            Me.Rows.Add(rowDEBITNOTEPAYMENTRow)
            Return rowDEBITNOTEPAYMENTRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As DEBITNOTEPAYMENTDataTable = CType(MyBase.Clone,DEBITNOTEPAYMENTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New DEBITNOTEPAYMENTDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnSNO = Me.Columns("SNO")
            Me.columnSLCODE = Me.Columns("SLCODE")
            Me.columnHEADDESC = Me.Columns("HEADDESC")
            Me.columnAMOUNT = Me.Columns("AMOUNT")
            Me.columnBILLDATE = Me.Columns("BILLDATE")
        End Sub
        
        Private Sub InitClass()
            Me.columnSNO = New DataColumn("SNO", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSNO)
            Me.columnSLCODE = New DataColumn("SLCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSLCODE)
            Me.columnHEADDESC = New DataColumn("HEADDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHEADDESC)
            Me.columnAMOUNT = New DataColumn("AMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAMOUNT)
            Me.columnBILLDATE = New DataColumn("BILLDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBILLDATE)
            Me.columnSNO.AllowDBNull = false
            Me.columnSLCODE.AllowDBNull = false
            Me.columnHEADDESC.AllowDBNull = false
        End Sub
        
        Public Function NewDEBITNOTEPAYMENTRow() As DEBITNOTEPAYMENTRow
            Return CType(Me.NewRow,DEBITNOTEPAYMENTRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New DEBITNOTEPAYMENTRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(DEBITNOTEPAYMENTRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DEBITNOTEPAYMENTRowChangedEvent) Is Nothing) Then
                RaiseEvent DEBITNOTEPAYMENTRowChanged(Me, New DEBITNOTEPAYMENTRowChangeEvent(CType(e.Row,DEBITNOTEPAYMENTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DEBITNOTEPAYMENTRowChangingEvent) Is Nothing) Then
                RaiseEvent DEBITNOTEPAYMENTRowChanging(Me, New DEBITNOTEPAYMENTRowChangeEvent(CType(e.Row,DEBITNOTEPAYMENTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DEBITNOTEPAYMENTRowDeletedEvent) Is Nothing) Then
                RaiseEvent DEBITNOTEPAYMENTRowDeleted(Me, New DEBITNOTEPAYMENTRowChangeEvent(CType(e.Row,DEBITNOTEPAYMENTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DEBITNOTEPAYMENTRowDeletingEvent) Is Nothing) Then
                RaiseEvent DEBITNOTEPAYMENTRowDeleting(Me, New DEBITNOTEPAYMENTRowChangeEvent(CType(e.Row,DEBITNOTEPAYMENTRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveDEBITNOTEPAYMENTRow(ByVal row As DEBITNOTEPAYMENTRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DEBITNOTEPAYMENTRow
        Inherits DataRow
        
        Private tableDEBITNOTEPAYMENT As DEBITNOTEPAYMENTDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableDEBITNOTEPAYMENT = CType(Me.Table,DEBITNOTEPAYMENTDataTable)
        End Sub
        
        Public Property SNO As Integer
            Get
                Return CType(Me(Me.tableDEBITNOTEPAYMENT.SNOColumn),Integer)
            End Get
            Set
                Me(Me.tableDEBITNOTEPAYMENT.SNOColumn) = value
            End Set
        End Property
        
        Public Property SLCODE As String
            Get
                Return CType(Me(Me.tableDEBITNOTEPAYMENT.SLCODEColumn),String)
            End Get
            Set
                Me(Me.tableDEBITNOTEPAYMENT.SLCODEColumn) = value
            End Set
        End Property
        
        Public Property HEADDESC As String
            Get
                Return CType(Me(Me.tableDEBITNOTEPAYMENT.HEADDESCColumn),String)
            End Get
            Set
                Me(Me.tableDEBITNOTEPAYMENT.HEADDESCColumn) = value
            End Set
        End Property
        
        Public Property AMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDEBITNOTEPAYMENT.AMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDEBITNOTEPAYMENT.AMOUNTColumn) = value
            End Set
        End Property
        
        Public Property BILLDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tableDEBITNOTEPAYMENT.BILLDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDEBITNOTEPAYMENT.BILLDATEColumn) = value
            End Set
        End Property
        
        Public Function IsAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableDEBITNOTEPAYMENT.AMOUNTColumn)
        End Function
        
        Public Sub SetAMOUNTNull()
            Me(Me.tableDEBITNOTEPAYMENT.AMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBILLDATENull() As Boolean
            Return Me.IsNull(Me.tableDEBITNOTEPAYMENT.BILLDATEColumn)
        End Function
        
        Public Sub SetBILLDATENull()
            Me(Me.tableDEBITNOTEPAYMENT.BILLDATEColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DEBITNOTEPAYMENTRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As DEBITNOTEPAYMENTRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As DEBITNOTEPAYMENTRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As DEBITNOTEPAYMENTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ROOM_BILLDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnBILLDATE As DataColumn
        
        Private columnSLCODE As DataColumn
        
        Private columnAMOUNT As DataColumn
        
        Private columnLOCCODE As DataColumn
        
        Private columnLOCDESC As DataColumn
        
        Friend Sub New()
            MyBase.New("ROOM_BILL")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property BILLDATEColumn As DataColumn
            Get
                Return Me.columnBILLDATE
            End Get
        End Property
        
        Friend ReadOnly Property SLCODEColumn As DataColumn
            Get
                Return Me.columnSLCODE
            End Get
        End Property
        
        Friend ReadOnly Property AMOUNTColumn As DataColumn
            Get
                Return Me.columnAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property LOCCODEColumn As DataColumn
            Get
                Return Me.columnLOCCODE
            End Get
        End Property
        
        Friend ReadOnly Property LOCDESCColumn As DataColumn
            Get
                Return Me.columnLOCDESC
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ROOM_BILLRow
            Get
                Return CType(Me.Rows(index),ROOM_BILLRow)
            End Get
        End Property
        
        Public Event ROOM_BILLRowChanged As ROOM_BILLRowChangeEventHandler
        
        Public Event ROOM_BILLRowChanging As ROOM_BILLRowChangeEventHandler
        
        Public Event ROOM_BILLRowDeleted As ROOM_BILLRowChangeEventHandler
        
        Public Event ROOM_BILLRowDeleting As ROOM_BILLRowChangeEventHandler
        
        Public Overloads Sub AddROOM_BILLRow(ByVal row As ROOM_BILLRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddROOM_BILLRow(ByVal BILLDATE As Date, ByVal SLCODE As String, ByVal AMOUNT As Decimal, ByVal LOCCODE As String, ByVal LOCDESC As String) As ROOM_BILLRow
            Dim rowROOM_BILLRow As ROOM_BILLRow = CType(Me.NewRow,ROOM_BILLRow)
            rowROOM_BILLRow.ItemArray = New Object() {BILLDATE, SLCODE, AMOUNT, LOCCODE, LOCDESC}
            Me.Rows.Add(rowROOM_BILLRow)
            Return rowROOM_BILLRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ROOM_BILLDataTable = CType(MyBase.Clone,ROOM_BILLDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ROOM_BILLDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnBILLDATE = Me.Columns("BILLDATE")
            Me.columnSLCODE = Me.Columns("SLCODE")
            Me.columnAMOUNT = Me.Columns("AMOUNT")
            Me.columnLOCCODE = Me.Columns("LOCCODE")
            Me.columnLOCDESC = Me.Columns("LOCDESC")
        End Sub
        
        Private Sub InitClass()
            Me.columnBILLDATE = New DataColumn("BILLDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBILLDATE)
            Me.columnSLCODE = New DataColumn("SLCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSLCODE)
            Me.columnAMOUNT = New DataColumn("AMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAMOUNT)
            Me.columnLOCCODE = New DataColumn("LOCCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLOCCODE)
            Me.columnLOCDESC = New DataColumn("LOCDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLOCDESC)
            Me.columnSLCODE.AllowDBNull = false
            Me.columnAMOUNT.AllowDBNull = false
            Me.columnLOCDESC.AllowDBNull = false
        End Sub
        
        Public Function NewROOM_BILLRow() As ROOM_BILLRow
            Return CType(Me.NewRow,ROOM_BILLRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ROOM_BILLRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ROOM_BILLRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ROOM_BILLRowChangedEvent) Is Nothing) Then
                RaiseEvent ROOM_BILLRowChanged(Me, New ROOM_BILLRowChangeEvent(CType(e.Row,ROOM_BILLRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ROOM_BILLRowChangingEvent) Is Nothing) Then
                RaiseEvent ROOM_BILLRowChanging(Me, New ROOM_BILLRowChangeEvent(CType(e.Row,ROOM_BILLRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ROOM_BILLRowDeletedEvent) Is Nothing) Then
                RaiseEvent ROOM_BILLRowDeleted(Me, New ROOM_BILLRowChangeEvent(CType(e.Row,ROOM_BILLRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ROOM_BILLRowDeletingEvent) Is Nothing) Then
                RaiseEvent ROOM_BILLRowDeleting(Me, New ROOM_BILLRowChangeEvent(CType(e.Row,ROOM_BILLRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveROOM_BILLRow(ByVal row As ROOM_BILLRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ROOM_BILLRow
        Inherits DataRow
        
        Private tableROOM_BILL As ROOM_BILLDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableROOM_BILL = CType(Me.Table,ROOM_BILLDataTable)
        End Sub
        
        Public Property BILLDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tableROOM_BILL.BILLDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableROOM_BILL.BILLDATEColumn) = value
            End Set
        End Property
        
        Public Property SLCODE As String
            Get
                Return CType(Me(Me.tableROOM_BILL.SLCODEColumn),String)
            End Get
            Set
                Me(Me.tableROOM_BILL.SLCODEColumn) = value
            End Set
        End Property
        
        Public Property AMOUNT As Decimal
            Get
                Return CType(Me(Me.tableROOM_BILL.AMOUNTColumn),Decimal)
            End Get
            Set
                Me(Me.tableROOM_BILL.AMOUNTColumn) = value
            End Set
        End Property
        
        Public Property LOCCODE As String
            Get
                Try 
                    Return CType(Me(Me.tableROOM_BILL.LOCCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableROOM_BILL.LOCCODEColumn) = value
            End Set
        End Property
        
        Public Property LOCDESC As String
            Get
                Return CType(Me(Me.tableROOM_BILL.LOCDESCColumn),String)
            End Get
            Set
                Me(Me.tableROOM_BILL.LOCDESCColumn) = value
            End Set
        End Property
        
        Public Function IsBILLDATENull() As Boolean
            Return Me.IsNull(Me.tableROOM_BILL.BILLDATEColumn)
        End Function
        
        Public Sub SetBILLDATENull()
            Me(Me.tableROOM_BILL.BILLDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLOCCODENull() As Boolean
            Return Me.IsNull(Me.tableROOM_BILL.LOCCODEColumn)
        End Function
        
        Public Sub SetLOCCODENull()
            Me(Me.tableROOM_BILL.LOCCODEColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ROOM_BILLRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ROOM_BILLRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ROOM_BILLRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ROOM_BILLRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_MEMBER_DETAILSDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnMCODE As DataColumn
        
        Private columnMNAME As DataColumn
        
        Private columnDOB As DataColumn
        
        Private columnDOJ As DataColumn
        
        Private columnCURENTSTATUS As DataColumn
        
        Private columnMEMBERTYPECODE As DataColumn
        
        Friend Sub New()
            MyBase.New("VIEW_MEMBER_DETAILS")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property MCODEColumn As DataColumn
            Get
                Return Me.columnMCODE
            End Get
        End Property
        
        Friend ReadOnly Property MNAMEColumn As DataColumn
            Get
                Return Me.columnMNAME
            End Get
        End Property
        
        Friend ReadOnly Property DOBColumn As DataColumn
            Get
                Return Me.columnDOB
            End Get
        End Property
        
        Friend ReadOnly Property DOJColumn As DataColumn
            Get
                Return Me.columnDOJ
            End Get
        End Property
        
        Friend ReadOnly Property CURENTSTATUSColumn As DataColumn
            Get
                Return Me.columnCURENTSTATUS
            End Get
        End Property
        
        Friend ReadOnly Property MEMBERTYPECODEColumn As DataColumn
            Get
                Return Me.columnMEMBERTYPECODE
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VIEW_MEMBER_DETAILSRow
            Get
                Return CType(Me.Rows(index),VIEW_MEMBER_DETAILSRow)
            End Get
        End Property
        
        Public Event VIEW_MEMBER_DETAILSRowChanged As VIEW_MEMBER_DETAILSRowChangeEventHandler
        
        Public Event VIEW_MEMBER_DETAILSRowChanging As VIEW_MEMBER_DETAILSRowChangeEventHandler
        
        Public Event VIEW_MEMBER_DETAILSRowDeleted As VIEW_MEMBER_DETAILSRowChangeEventHandler
        
        Public Event VIEW_MEMBER_DETAILSRowDeleting As VIEW_MEMBER_DETAILSRowChangeEventHandler
        
        Public Overloads Sub AddVIEW_MEMBER_DETAILSRow(ByVal row As VIEW_MEMBER_DETAILSRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVIEW_MEMBER_DETAILSRow(ByVal MCODE As String, ByVal MNAME As String, ByVal DOB As Date, ByVal DOJ As Date, ByVal CURENTSTATUS As String, ByVal MEMBERTYPECODE As String) As VIEW_MEMBER_DETAILSRow
            Dim rowVIEW_MEMBER_DETAILSRow As VIEW_MEMBER_DETAILSRow = CType(Me.NewRow,VIEW_MEMBER_DETAILSRow)
            rowVIEW_MEMBER_DETAILSRow.ItemArray = New Object() {MCODE, MNAME, DOB, DOJ, CURENTSTATUS, MEMBERTYPECODE}
            Me.Rows.Add(rowVIEW_MEMBER_DETAILSRow)
            Return rowVIEW_MEMBER_DETAILSRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VIEW_MEMBER_DETAILSDataTable = CType(MyBase.Clone,VIEW_MEMBER_DETAILSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VIEW_MEMBER_DETAILSDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnMCODE = Me.Columns("MCODE")
            Me.columnMNAME = Me.Columns("MNAME")
            Me.columnDOB = Me.Columns("DOB")
            Me.columnDOJ = Me.Columns("DOJ")
            Me.columnCURENTSTATUS = Me.Columns("CURENTSTATUS")
            Me.columnMEMBERTYPECODE = Me.Columns("MEMBERTYPECODE")
        End Sub
        
        Private Sub InitClass()
            Me.columnMCODE = New DataColumn("MCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMCODE)
            Me.columnMNAME = New DataColumn("MNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMNAME)
            Me.columnDOB = New DataColumn("DOB", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDOB)
            Me.columnDOJ = New DataColumn("DOJ", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDOJ)
            Me.columnCURENTSTATUS = New DataColumn("CURENTSTATUS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCURENTSTATUS)
            Me.columnMEMBERTYPECODE = New DataColumn("MEMBERTYPECODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEMBERTYPECODE)
            Me.columnMCODE.AllowDBNull = false
        End Sub
        
        Public Function NewVIEW_MEMBER_DETAILSRow() As VIEW_MEMBER_DETAILSRow
            Return CType(Me.NewRow,VIEW_MEMBER_DETAILSRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VIEW_MEMBER_DETAILSRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VIEW_MEMBER_DETAILSRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VIEW_MEMBER_DETAILSRowChangedEvent) Is Nothing) Then
                RaiseEvent VIEW_MEMBER_DETAILSRowChanged(Me, New VIEW_MEMBER_DETAILSRowChangeEvent(CType(e.Row,VIEW_MEMBER_DETAILSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VIEW_MEMBER_DETAILSRowChangingEvent) Is Nothing) Then
                RaiseEvent VIEW_MEMBER_DETAILSRowChanging(Me, New VIEW_MEMBER_DETAILSRowChangeEvent(CType(e.Row,VIEW_MEMBER_DETAILSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VIEW_MEMBER_DETAILSRowDeletedEvent) Is Nothing) Then
                RaiseEvent VIEW_MEMBER_DETAILSRowDeleted(Me, New VIEW_MEMBER_DETAILSRowChangeEvent(CType(e.Row,VIEW_MEMBER_DETAILSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VIEW_MEMBER_DETAILSRowDeletingEvent) Is Nothing) Then
                RaiseEvent VIEW_MEMBER_DETAILSRowDeleting(Me, New VIEW_MEMBER_DETAILSRowChangeEvent(CType(e.Row,VIEW_MEMBER_DETAILSRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVIEW_MEMBER_DETAILSRow(ByVal row As VIEW_MEMBER_DETAILSRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_MEMBER_DETAILSRow
        Inherits DataRow
        
        Private tableVIEW_MEMBER_DETAILS As VIEW_MEMBER_DETAILSDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVIEW_MEMBER_DETAILS = CType(Me.Table,VIEW_MEMBER_DETAILSDataTable)
        End Sub
        
        Public Property MCODE As String
            Get
                Return CType(Me(Me.tableVIEW_MEMBER_DETAILS.MCODEColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_MEMBER_DETAILS.MCODEColumn) = value
            End Set
        End Property
        
        Public Property MNAME As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEMBER_DETAILS.MNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEMBER_DETAILS.MNAMEColumn) = value
            End Set
        End Property
        
        Public Property DOB As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEMBER_DETAILS.DOBColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEMBER_DETAILS.DOBColumn) = value
            End Set
        End Property
        
        Public Property DOJ As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEMBER_DETAILS.DOJColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEMBER_DETAILS.DOJColumn) = value
            End Set
        End Property
        
        Public Property CURENTSTATUS As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEMBER_DETAILS.CURENTSTATUSColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEMBER_DETAILS.CURENTSTATUSColumn) = value
            End Set
        End Property
        
        Public Property MEMBERTYPECODE As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEMBER_DETAILS.MEMBERTYPECODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEMBER_DETAILS.MEMBERTYPECODEColumn) = value
            End Set
        End Property
        
        Public Function IsMNAMENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEMBER_DETAILS.MNAMEColumn)
        End Function
        
        Public Sub SetMNAMENull()
            Me(Me.tableVIEW_MEMBER_DETAILS.MNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDOBNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEMBER_DETAILS.DOBColumn)
        End Function
        
        Public Sub SetDOBNull()
            Me(Me.tableVIEW_MEMBER_DETAILS.DOBColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDOJNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEMBER_DETAILS.DOJColumn)
        End Function
        
        Public Sub SetDOJNull()
            Me(Me.tableVIEW_MEMBER_DETAILS.DOJColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCURENTSTATUSNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEMBER_DETAILS.CURENTSTATUSColumn)
        End Function
        
        Public Sub SetCURENTSTATUSNull()
            Me(Me.tableVIEW_MEMBER_DETAILS.CURENTSTATUSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMEMBERTYPECODENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEMBER_DETAILS.MEMBERTYPECODEColumn)
        End Function
        
        Public Sub SetMEMBERTYPECODENull()
            Me(Me.tableVIEW_MEMBER_DETAILS.MEMBERTYPECODEColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_MEMBER_DETAILSRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VIEW_MEMBER_DETAILSRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VIEW_MEMBER_DETAILSRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VIEW_MEMBER_DETAILSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class memdetDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnautoid As DataColumn
        
        Private columnmem_code As DataColumn
        
        Private columntype0 As DataColumn
        
        Private columntype1 As DataColumn
        
        Private columnstart_dt As DataColumn
        
        Private columnend_dt As DataColumn
        
        Private columnamount As DataColumn
        
        Private columnrct_no As DataColumn
        
        Private columnremarks As DataColumn
        
        Private columnswim_other As DataColumn
        
        Private columnname As DataColumn
        
        Private columnstatus As DataColumn
        
        Private columnrefmem_no As DataColumn
        
        Private columnrefmem_dt As DataColumn
        
        Private columnaddress As DataColumn
        
        Private columnrelation As DataColumn
        
        Private columnchild_nm As DataColumn
        
        Private columnsex As DataColumn
        
        Private columnchild_dob As DataColumn
        
        Private columnaqua_game As DataColumn
        
        Private columnmemb_wife As DataColumn
        
        Private columnfreeze As DataColumn
        
        Private columnadduserid As DataColumn
        
        Private columnadddatetime As DataColumn
        
        Private columnupdateuserid As DataColumn
        
        Private columnupdatedatetime As DataColumn
        
        Private columnedu_prof As DataColumn
        
        Private columnqual_det As DataColumn
        
        Private columninstitute As DataColumn
        
        Private columnyear_PASS As DataColumn
        
        Private columndivision As DataColumn
        
        Private columndeleted As DataColumn
        
        Private columnsubs As DataColumn
        
        Private columnpcode As DataColumn
        
        Private columnpname As DataColumn
        
        Friend Sub New()
            MyBase.New("memdet")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property autoidColumn As DataColumn
            Get
                Return Me.columnautoid
            End Get
        End Property
        
        Friend ReadOnly Property mem_codeColumn As DataColumn
            Get
                Return Me.columnmem_code
            End Get
        End Property
        
        Friend ReadOnly Property type0Column As DataColumn
            Get
                Return Me.columntype0
            End Get
        End Property
        
        Friend ReadOnly Property type1Column As DataColumn
            Get
                Return Me.columntype1
            End Get
        End Property
        
        Friend ReadOnly Property start_dtColumn As DataColumn
            Get
                Return Me.columnstart_dt
            End Get
        End Property
        
        Friend ReadOnly Property end_dtColumn As DataColumn
            Get
                Return Me.columnend_dt
            End Get
        End Property
        
        Friend ReadOnly Property amountColumn As DataColumn
            Get
                Return Me.columnamount
            End Get
        End Property
        
        Friend ReadOnly Property rct_noColumn As DataColumn
            Get
                Return Me.columnrct_no
            End Get
        End Property
        
        Friend ReadOnly Property remarksColumn As DataColumn
            Get
                Return Me.columnremarks
            End Get
        End Property
        
        Friend ReadOnly Property swim_otherColumn As DataColumn
            Get
                Return Me.columnswim_other
            End Get
        End Property
        
        Friend ReadOnly Property nameColumn As DataColumn
            Get
                Return Me.columnname
            End Get
        End Property
        
        Friend ReadOnly Property statusColumn As DataColumn
            Get
                Return Me.columnstatus
            End Get
        End Property
        
        Friend ReadOnly Property refmem_noColumn As DataColumn
            Get
                Return Me.columnrefmem_no
            End Get
        End Property
        
        Friend ReadOnly Property refmem_dtColumn As DataColumn
            Get
                Return Me.columnrefmem_dt
            End Get
        End Property
        
        Friend ReadOnly Property addressColumn As DataColumn
            Get
                Return Me.columnaddress
            End Get
        End Property
        
        Friend ReadOnly Property relationColumn As DataColumn
            Get
                Return Me.columnrelation
            End Get
        End Property
        
        Friend ReadOnly Property child_nmColumn As DataColumn
            Get
                Return Me.columnchild_nm
            End Get
        End Property
        
        Friend ReadOnly Property sexColumn As DataColumn
            Get
                Return Me.columnsex
            End Get
        End Property
        
        Friend ReadOnly Property child_dobColumn As DataColumn
            Get
                Return Me.columnchild_dob
            End Get
        End Property
        
        Friend ReadOnly Property aqua_gameColumn As DataColumn
            Get
                Return Me.columnaqua_game
            End Get
        End Property
        
        Friend ReadOnly Property memb_wifeColumn As DataColumn
            Get
                Return Me.columnmemb_wife
            End Get
        End Property
        
        Friend ReadOnly Property freezeColumn As DataColumn
            Get
                Return Me.columnfreeze
            End Get
        End Property
        
        Friend ReadOnly Property adduseridColumn As DataColumn
            Get
                Return Me.columnadduserid
            End Get
        End Property
        
        Friend ReadOnly Property adddatetimeColumn As DataColumn
            Get
                Return Me.columnadddatetime
            End Get
        End Property
        
        Friend ReadOnly Property updateuseridColumn As DataColumn
            Get
                Return Me.columnupdateuserid
            End Get
        End Property
        
        Friend ReadOnly Property updatedatetimeColumn As DataColumn
            Get
                Return Me.columnupdatedatetime
            End Get
        End Property
        
        Friend ReadOnly Property edu_profColumn As DataColumn
            Get
                Return Me.columnedu_prof
            End Get
        End Property
        
        Friend ReadOnly Property qual_detColumn As DataColumn
            Get
                Return Me.columnqual_det
            End Get
        End Property
        
        Friend ReadOnly Property instituteColumn As DataColumn
            Get
                Return Me.columninstitute
            End Get
        End Property
        
        Friend ReadOnly Property year_PASSColumn As DataColumn
            Get
                Return Me.columnyear_PASS
            End Get
        End Property
        
        Friend ReadOnly Property divisionColumn As DataColumn
            Get
                Return Me.columndivision
            End Get
        End Property
        
        Friend ReadOnly Property deletedColumn As DataColumn
            Get
                Return Me.columndeleted
            End Get
        End Property
        
        Friend ReadOnly Property subsColumn As DataColumn
            Get
                Return Me.columnsubs
            End Get
        End Property
        
        Friend ReadOnly Property pcodeColumn As DataColumn
            Get
                Return Me.columnpcode
            End Get
        End Property
        
        Friend ReadOnly Property pnameColumn As DataColumn
            Get
                Return Me.columnpname
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As memdetRow
            Get
                Return CType(Me.Rows(index),memdetRow)
            End Get
        End Property
        
        Public Event memdetRowChanged As memdetRowChangeEventHandler
        
        Public Event memdetRowChanging As memdetRowChangeEventHandler
        
        Public Event memdetRowDeleted As memdetRowChangeEventHandler
        
        Public Event memdetRowDeleting As memdetRowChangeEventHandler
        
        Public Overloads Sub AddmemdetRow(ByVal row As memdetRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddmemdetRow( _
                    ByVal mem_code As String,  _
                    ByVal type0 As String,  _
                    ByVal type1 As String,  _
                    ByVal start_dt As Date,  _
                    ByVal end_dt As Date,  _
                    ByVal amount As Decimal,  _
                    ByVal rct_no As String,  _
                    ByVal remarks As String,  _
                    ByVal swim_other As String,  _
                    ByVal name As String,  _
                    ByVal status As String,  _
                    ByVal refmem_no As String,  _
                    ByVal refmem_dt As Date,  _
                    ByVal address As String,  _
                    ByVal relation As String,  _
                    ByVal child_nm As String,  _
                    ByVal sex As String,  _
                    ByVal child_dob As Date,  _
                    ByVal aqua_game As String,  _
                    ByVal memb_wife As String,  _
                    ByVal freeze As String,  _
                    ByVal adduserid As String,  _
                    ByVal adddatetime As Date,  _
                    ByVal updateuserid As String,  _
                    ByVal updatedatetime As Date,  _
                    ByVal edu_prof As String,  _
                    ByVal qual_det As String,  _
                    ByVal institute As String,  _
                    ByVal year_PASS As String,  _
                    ByVal division As String,  _
                    ByVal deleted As String,  _
                    ByVal subs As String,  _
                    ByVal pcode As String,  _
                    ByVal pname As String) As memdetRow
            Dim rowmemdetRow As memdetRow = CType(Me.NewRow,memdetRow)
            rowmemdetRow.ItemArray = New Object() {Nothing, mem_code, type0, type1, start_dt, end_dt, amount, rct_no, remarks, swim_other, name, status, refmem_no, refmem_dt, address, relation, child_nm, sex, child_dob, aqua_game, memb_wife, freeze, adduserid, adddatetime, updateuserid, updatedatetime, edu_prof, qual_det, institute, year_PASS, division, deleted, subs, pcode, pname}
            Me.Rows.Add(rowmemdetRow)
            Return rowmemdetRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As memdetDataTable = CType(MyBase.Clone,memdetDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New memdetDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnautoid = Me.Columns("autoid")
            Me.columnmem_code = Me.Columns("mem_code")
            Me.columntype0 = Me.Columns("type0")
            Me.columntype1 = Me.Columns("type1")
            Me.columnstart_dt = Me.Columns("start_dt")
            Me.columnend_dt = Me.Columns("end_dt")
            Me.columnamount = Me.Columns("amount")
            Me.columnrct_no = Me.Columns("rct_no")
            Me.columnremarks = Me.Columns("remarks")
            Me.columnswim_other = Me.Columns("swim_other")
            Me.columnname = Me.Columns("name")
            Me.columnstatus = Me.Columns("status")
            Me.columnrefmem_no = Me.Columns("refmem_no")
            Me.columnrefmem_dt = Me.Columns("refmem_dt")
            Me.columnaddress = Me.Columns("address")
            Me.columnrelation = Me.Columns("relation")
            Me.columnchild_nm = Me.Columns("child_nm")
            Me.columnsex = Me.Columns("sex")
            Me.columnchild_dob = Me.Columns("child_dob")
            Me.columnaqua_game = Me.Columns("aqua_game")
            Me.columnmemb_wife = Me.Columns("memb_wife")
            Me.columnfreeze = Me.Columns("freeze")
            Me.columnadduserid = Me.Columns("adduserid")
            Me.columnadddatetime = Me.Columns("adddatetime")
            Me.columnupdateuserid = Me.Columns("updateuserid")
            Me.columnupdatedatetime = Me.Columns("updatedatetime")
            Me.columnedu_prof = Me.Columns("edu_prof")
            Me.columnqual_det = Me.Columns("qual_det")
            Me.columninstitute = Me.Columns("institute")
            Me.columnyear_PASS = Me.Columns("year_PASS")
            Me.columndivision = Me.Columns("division")
            Me.columndeleted = Me.Columns("deleted")
            Me.columnsubs = Me.Columns("subs")
            Me.columnpcode = Me.Columns("pcode")
            Me.columnpname = Me.Columns("pname")
        End Sub
        
        Private Sub InitClass()
            Me.columnautoid = New DataColumn("autoid", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnautoid)
            Me.columnmem_code = New DataColumn("mem_code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmem_code)
            Me.columntype0 = New DataColumn("type0", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntype0)
            Me.columntype1 = New DataColumn("type1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntype1)
            Me.columnstart_dt = New DataColumn("start_dt", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstart_dt)
            Me.columnend_dt = New DataColumn("end_dt", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnend_dt)
            Me.columnamount = New DataColumn("amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount)
            Me.columnrct_no = New DataColumn("rct_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrct_no)
            Me.columnremarks = New DataColumn("remarks", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnremarks)
            Me.columnswim_other = New DataColumn("swim_other", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnswim_other)
            Me.columnname = New DataColumn("name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnname)
            Me.columnstatus = New DataColumn("status", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstatus)
            Me.columnrefmem_no = New DataColumn("refmem_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrefmem_no)
            Me.columnrefmem_dt = New DataColumn("refmem_dt", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrefmem_dt)
            Me.columnaddress = New DataColumn("address", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnaddress)
            Me.columnrelation = New DataColumn("relation", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrelation)
            Me.columnchild_nm = New DataColumn("child_nm", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnchild_nm)
            Me.columnsex = New DataColumn("sex", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsex)
            Me.columnchild_dob = New DataColumn("child_dob", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnchild_dob)
            Me.columnaqua_game = New DataColumn("aqua_game", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnaqua_game)
            Me.columnmemb_wife = New DataColumn("memb_wife", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmemb_wife)
            Me.columnfreeze = New DataColumn("freeze", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfreeze)
            Me.columnadduserid = New DataColumn("adduserid", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnadduserid)
            Me.columnadddatetime = New DataColumn("adddatetime", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnadddatetime)
            Me.columnupdateuserid = New DataColumn("updateuserid", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnupdateuserid)
            Me.columnupdatedatetime = New DataColumn("updatedatetime", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnupdatedatetime)
            Me.columnedu_prof = New DataColumn("edu_prof", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnedu_prof)
            Me.columnqual_det = New DataColumn("qual_det", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnqual_det)
            Me.columninstitute = New DataColumn("institute", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columninstitute)
            Me.columnyear_PASS = New DataColumn("year_PASS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnyear_PASS)
            Me.columndivision = New DataColumn("division", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndivision)
            Me.columndeleted = New DataColumn("deleted", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndeleted)
            Me.columnsubs = New DataColumn("subs", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsubs)
            Me.columnpcode = New DataColumn("pcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpcode)
            Me.columnpname = New DataColumn("pname", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpname)
            Me.columnautoid.AutoIncrement = true
            Me.columnautoid.AllowDBNull = false
            Me.columnautoid.ReadOnly = true
        End Sub
        
        Public Function NewmemdetRow() As memdetRow
            Return CType(Me.NewRow,memdetRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New memdetRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(memdetRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.memdetRowChangedEvent) Is Nothing) Then
                RaiseEvent memdetRowChanged(Me, New memdetRowChangeEvent(CType(e.Row,memdetRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.memdetRowChangingEvent) Is Nothing) Then
                RaiseEvent memdetRowChanging(Me, New memdetRowChangeEvent(CType(e.Row,memdetRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.memdetRowDeletedEvent) Is Nothing) Then
                RaiseEvent memdetRowDeleted(Me, New memdetRowChangeEvent(CType(e.Row,memdetRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.memdetRowDeletingEvent) Is Nothing) Then
                RaiseEvent memdetRowDeleting(Me, New memdetRowChangeEvent(CType(e.Row,memdetRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovememdetRow(ByVal row As memdetRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class memdetRow
        Inherits DataRow
        
        Private tablememdet As memdetDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablememdet = CType(Me.Table,memdetDataTable)
        End Sub
        
        Public Property autoid As Decimal
            Get
                Return CType(Me(Me.tablememdet.autoidColumn),Decimal)
            End Get
            Set
                Me(Me.tablememdet.autoidColumn) = value
            End Set
        End Property
        
        Public Property mem_code As String
            Get
                Try 
                    Return CType(Me(Me.tablememdet.mem_codeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablememdet.mem_codeColumn) = value
            End Set
        End Property
        
        Public Property type0 As String
            Get
                Try 
                    Return CType(Me(Me.tablememdet.type0Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablememdet.type0Column) = value
            End Set
        End Property
        
        Public Property type1 As String
            Get
                Try 
                    Return CType(Me(Me.tablememdet.type1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablememdet.type1Column) = value
            End Set
        End Property
        
        Public Property start_dt As Date
            Get
                Try 
                    Return CType(Me(Me.tablememdet.start_dtColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablememdet.start_dtColumn) = value
            End Set
        End Property
        
        Public Property end_dt As Date
            Get
                Try 
                    Return CType(Me(Me.tablememdet.end_dtColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablememdet.end_dtColumn) = value
            End Set
        End Property
        
        Public Property amount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablememdet.amountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablememdet.amountColumn) = value
            End Set
        End Property
        
        Public Property rct_no As String
            Get
                Try 
                    Return CType(Me(Me.tablememdet.rct_noColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablememdet.rct_noColumn) = value
            End Set
        End Property
        
        Public Property remarks As String
            Get
                Try 
                    Return CType(Me(Me.tablememdet.remarksColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablememdet.remarksColumn) = value
            End Set
        End Property
        
        Public Property swim_other As String
            Get
                Try 
                    Return CType(Me(Me.tablememdet.swim_otherColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablememdet.swim_otherColumn) = value
            End Set
        End Property
        
        Public Property name As String
            Get
                Try 
                    Return CType(Me(Me.tablememdet.nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablememdet.nameColumn) = value
            End Set
        End Property
        
        Public Property status As String
            Get
                Try 
                    Return CType(Me(Me.tablememdet.statusColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablememdet.statusColumn) = value
            End Set
        End Property
        
        Public Property refmem_no As String
            Get
                Try 
                    Return CType(Me(Me.tablememdet.refmem_noColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablememdet.refmem_noColumn) = value
            End Set
        End Property
        
        Public Property refmem_dt As Date
            Get
                Try 
                    Return CType(Me(Me.tablememdet.refmem_dtColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablememdet.refmem_dtColumn) = value
            End Set
        End Property
        
        Public Property address As String
            Get
                Try 
                    Return CType(Me(Me.tablememdet.addressColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablememdet.addressColumn) = value
            End Set
        End Property
        
        Public Property relation As String
            Get
                Try 
                    Return CType(Me(Me.tablememdet.relationColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablememdet.relationColumn) = value
            End Set
        End Property
        
        Public Property child_nm As String
            Get
                Try 
                    Return CType(Me(Me.tablememdet.child_nmColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablememdet.child_nmColumn) = value
            End Set
        End Property
        
        Public Property sex As String
            Get
                Try 
                    Return CType(Me(Me.tablememdet.sexColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablememdet.sexColumn) = value
            End Set
        End Property
        
        Public Property child_dob As Date
            Get
                Try 
                    Return CType(Me(Me.tablememdet.child_dobColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablememdet.child_dobColumn) = value
            End Set
        End Property
        
        Public Property aqua_game As String
            Get
                Try 
                    Return CType(Me(Me.tablememdet.aqua_gameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablememdet.aqua_gameColumn) = value
            End Set
        End Property
        
        Public Property memb_wife As String
            Get
                Try 
                    Return CType(Me(Me.tablememdet.memb_wifeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablememdet.memb_wifeColumn) = value
            End Set
        End Property
        
        Public Property freeze As String
            Get
                Try 
                    Return CType(Me(Me.tablememdet.freezeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablememdet.freezeColumn) = value
            End Set
        End Property
        
        Public Property adduserid As String
            Get
                Try 
                    Return CType(Me(Me.tablememdet.adduseridColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablememdet.adduseridColumn) = value
            End Set
        End Property
        
        Public Property adddatetime As Date
            Get
                Try 
                    Return CType(Me(Me.tablememdet.adddatetimeColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablememdet.adddatetimeColumn) = value
            End Set
        End Property
        
        Public Property updateuserid As String
            Get
                Try 
                    Return CType(Me(Me.tablememdet.updateuseridColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablememdet.updateuseridColumn) = value
            End Set
        End Property
        
        Public Property updatedatetime As Date
            Get
                Try 
                    Return CType(Me(Me.tablememdet.updatedatetimeColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablememdet.updatedatetimeColumn) = value
            End Set
        End Property
        
        Public Property edu_prof As String
            Get
                Try 
                    Return CType(Me(Me.tablememdet.edu_profColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablememdet.edu_profColumn) = value
            End Set
        End Property
        
        Public Property qual_det As String
            Get
                Try 
                    Return CType(Me(Me.tablememdet.qual_detColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablememdet.qual_detColumn) = value
            End Set
        End Property
        
        Public Property institute As String
            Get
                Try 
                    Return CType(Me(Me.tablememdet.instituteColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablememdet.instituteColumn) = value
            End Set
        End Property
        
        Public Property year_PASS As String
            Get
                Try 
                    Return CType(Me(Me.tablememdet.year_PASSColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablememdet.year_PASSColumn) = value
            End Set
        End Property
        
        Public Property division As String
            Get
                Try 
                    Return CType(Me(Me.tablememdet.divisionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablememdet.divisionColumn) = value
            End Set
        End Property
        
        Public Property deleted As String
            Get
                Try 
                    Return CType(Me(Me.tablememdet.deletedColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablememdet.deletedColumn) = value
            End Set
        End Property
        
        Public Property subs As String
            Get
                Try 
                    Return CType(Me(Me.tablememdet.subsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablememdet.subsColumn) = value
            End Set
        End Property
        
        Public Property pcode As String
            Get
                Try 
                    Return CType(Me(Me.tablememdet.pcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablememdet.pcodeColumn) = value
            End Set
        End Property
        
        Public Property pname As String
            Get
                Try 
                    Return CType(Me(Me.tablememdet.pnameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablememdet.pnameColumn) = value
            End Set
        End Property
        
        Public Function Ismem_codeNull() As Boolean
            Return Me.IsNull(Me.tablememdet.mem_codeColumn)
        End Function
        
        Public Sub Setmem_codeNull()
            Me(Me.tablememdet.mem_codeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Istype0Null() As Boolean
            Return Me.IsNull(Me.tablememdet.type0Column)
        End Function
        
        Public Sub Settype0Null()
            Me(Me.tablememdet.type0Column) = System.Convert.DBNull
        End Sub
        
        Public Function Istype1Null() As Boolean
            Return Me.IsNull(Me.tablememdet.type1Column)
        End Function
        
        Public Sub Settype1Null()
            Me(Me.tablememdet.type1Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isstart_dtNull() As Boolean
            Return Me.IsNull(Me.tablememdet.start_dtColumn)
        End Function
        
        Public Sub Setstart_dtNull()
            Me(Me.tablememdet.start_dtColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isend_dtNull() As Boolean
            Return Me.IsNull(Me.tablememdet.end_dtColumn)
        End Function
        
        Public Sub Setend_dtNull()
            Me(Me.tablememdet.end_dtColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsamountNull() As Boolean
            Return Me.IsNull(Me.tablememdet.amountColumn)
        End Function
        
        Public Sub SetamountNull()
            Me(Me.tablememdet.amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isrct_noNull() As Boolean
            Return Me.IsNull(Me.tablememdet.rct_noColumn)
        End Function
        
        Public Sub Setrct_noNull()
            Me(Me.tablememdet.rct_noColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsremarksNull() As Boolean
            Return Me.IsNull(Me.tablememdet.remarksColumn)
        End Function
        
        Public Sub SetremarksNull()
            Me(Me.tablememdet.remarksColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isswim_otherNull() As Boolean
            Return Me.IsNull(Me.tablememdet.swim_otherColumn)
        End Function
        
        Public Sub Setswim_otherNull()
            Me(Me.tablememdet.swim_otherColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnameNull() As Boolean
            Return Me.IsNull(Me.tablememdet.nameColumn)
        End Function
        
        Public Sub SetnameNull()
            Me(Me.tablememdet.nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsstatusNull() As Boolean
            Return Me.IsNull(Me.tablememdet.statusColumn)
        End Function
        
        Public Sub SetstatusNull()
            Me(Me.tablememdet.statusColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isrefmem_noNull() As Boolean
            Return Me.IsNull(Me.tablememdet.refmem_noColumn)
        End Function
        
        Public Sub Setrefmem_noNull()
            Me(Me.tablememdet.refmem_noColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isrefmem_dtNull() As Boolean
            Return Me.IsNull(Me.tablememdet.refmem_dtColumn)
        End Function
        
        Public Sub Setrefmem_dtNull()
            Me(Me.tablememdet.refmem_dtColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsaddressNull() As Boolean
            Return Me.IsNull(Me.tablememdet.addressColumn)
        End Function
        
        Public Sub SetaddressNull()
            Me(Me.tablememdet.addressColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsrelationNull() As Boolean
            Return Me.IsNull(Me.tablememdet.relationColumn)
        End Function
        
        Public Sub SetrelationNull()
            Me(Me.tablememdet.relationColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ischild_nmNull() As Boolean
            Return Me.IsNull(Me.tablememdet.child_nmColumn)
        End Function
        
        Public Sub Setchild_nmNull()
            Me(Me.tablememdet.child_nmColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IssexNull() As Boolean
            Return Me.IsNull(Me.tablememdet.sexColumn)
        End Function
        
        Public Sub SetsexNull()
            Me(Me.tablememdet.sexColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ischild_dobNull() As Boolean
            Return Me.IsNull(Me.tablememdet.child_dobColumn)
        End Function
        
        Public Sub Setchild_dobNull()
            Me(Me.tablememdet.child_dobColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isaqua_gameNull() As Boolean
            Return Me.IsNull(Me.tablememdet.aqua_gameColumn)
        End Function
        
        Public Sub Setaqua_gameNull()
            Me(Me.tablememdet.aqua_gameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ismemb_wifeNull() As Boolean
            Return Me.IsNull(Me.tablememdet.memb_wifeColumn)
        End Function
        
        Public Sub Setmemb_wifeNull()
            Me(Me.tablememdet.memb_wifeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsfreezeNull() As Boolean
            Return Me.IsNull(Me.tablememdet.freezeColumn)
        End Function
        
        Public Sub SetfreezeNull()
            Me(Me.tablememdet.freezeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsadduseridNull() As Boolean
            Return Me.IsNull(Me.tablememdet.adduseridColumn)
        End Function
        
        Public Sub SetadduseridNull()
            Me(Me.tablememdet.adduseridColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsadddatetimeNull() As Boolean
            Return Me.IsNull(Me.tablememdet.adddatetimeColumn)
        End Function
        
        Public Sub SetadddatetimeNull()
            Me(Me.tablememdet.adddatetimeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsupdateuseridNull() As Boolean
            Return Me.IsNull(Me.tablememdet.updateuseridColumn)
        End Function
        
        Public Sub SetupdateuseridNull()
            Me(Me.tablememdet.updateuseridColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsupdatedatetimeNull() As Boolean
            Return Me.IsNull(Me.tablememdet.updatedatetimeColumn)
        End Function
        
        Public Sub SetupdatedatetimeNull()
            Me(Me.tablememdet.updatedatetimeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isedu_profNull() As Boolean
            Return Me.IsNull(Me.tablememdet.edu_profColumn)
        End Function
        
        Public Sub Setedu_profNull()
            Me(Me.tablememdet.edu_profColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isqual_detNull() As Boolean
            Return Me.IsNull(Me.tablememdet.qual_detColumn)
        End Function
        
        Public Sub Setqual_detNull()
            Me(Me.tablememdet.qual_detColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsinstituteNull() As Boolean
            Return Me.IsNull(Me.tablememdet.instituteColumn)
        End Function
        
        Public Sub SetinstituteNull()
            Me(Me.tablememdet.instituteColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isyear_PASSNull() As Boolean
            Return Me.IsNull(Me.tablememdet.year_PASSColumn)
        End Function
        
        Public Sub Setyear_PASSNull()
            Me(Me.tablememdet.year_PASSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdivisionNull() As Boolean
            Return Me.IsNull(Me.tablememdet.divisionColumn)
        End Function
        
        Public Sub SetdivisionNull()
            Me(Me.tablememdet.divisionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdeletedNull() As Boolean
            Return Me.IsNull(Me.tablememdet.deletedColumn)
        End Function
        
        Public Sub SetdeletedNull()
            Me(Me.tablememdet.deletedColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IssubsNull() As Boolean
            Return Me.IsNull(Me.tablememdet.subsColumn)
        End Function
        
        Public Sub SetsubsNull()
            Me(Me.tablememdet.subsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IspcodeNull() As Boolean
            Return Me.IsNull(Me.tablememdet.pcodeColumn)
        End Function
        
        Public Sub SetpcodeNull()
            Me(Me.tablememdet.pcodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IspnameNull() As Boolean
            Return Me.IsNull(Me.tablememdet.pnameColumn)
        End Function
        
        Public Sub SetpnameNull()
            Me(Me.tablememdet.pnameColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class memdetRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As memdetRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As memdetRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As memdetRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MAINCASHRECEIPTDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSNO As DataColumn
        
        Private columnSLCODE As DataColumn
        
        Private columnbillno As DataColumn
        
        Private columnHEADDESC As DataColumn
        
        Private columnAMOUNT As DataColumn
        
        Private columnbilldate As DataColumn
        
        Friend Sub New()
            MyBase.New("MAINCASHRECEIPT")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property SNOColumn As DataColumn
            Get
                Return Me.columnSNO
            End Get
        End Property
        
        Friend ReadOnly Property SLCODEColumn As DataColumn
            Get
                Return Me.columnSLCODE
            End Get
        End Property
        
        Friend ReadOnly Property billnoColumn As DataColumn
            Get
                Return Me.columnbillno
            End Get
        End Property
        
        Friend ReadOnly Property HEADDESCColumn As DataColumn
            Get
                Return Me.columnHEADDESC
            End Get
        End Property
        
        Friend ReadOnly Property AMOUNTColumn As DataColumn
            Get
                Return Me.columnAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property billdateColumn As DataColumn
            Get
                Return Me.columnbilldate
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As MAINCASHRECEIPTRow
            Get
                Return CType(Me.Rows(index),MAINCASHRECEIPTRow)
            End Get
        End Property
        
        Public Event MAINCASHRECEIPTRowChanged As MAINCASHRECEIPTRowChangeEventHandler
        
        Public Event MAINCASHRECEIPTRowChanging As MAINCASHRECEIPTRowChangeEventHandler
        
        Public Event MAINCASHRECEIPTRowDeleted As MAINCASHRECEIPTRowChangeEventHandler
        
        Public Event MAINCASHRECEIPTRowDeleting As MAINCASHRECEIPTRowChangeEventHandler
        
        Public Overloads Sub AddMAINCASHRECEIPTRow(ByVal row As MAINCASHRECEIPTRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddMAINCASHRECEIPTRow(ByVal SNO As Integer, ByVal SLCODE As String, ByVal billno As String, ByVal HEADDESC As String, ByVal AMOUNT As Decimal, ByVal billdate As Date) As MAINCASHRECEIPTRow
            Dim rowMAINCASHRECEIPTRow As MAINCASHRECEIPTRow = CType(Me.NewRow,MAINCASHRECEIPTRow)
            rowMAINCASHRECEIPTRow.ItemArray = New Object() {SNO, SLCODE, billno, HEADDESC, AMOUNT, billdate}
            Me.Rows.Add(rowMAINCASHRECEIPTRow)
            Return rowMAINCASHRECEIPTRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As MAINCASHRECEIPTDataTable = CType(MyBase.Clone,MAINCASHRECEIPTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New MAINCASHRECEIPTDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnSNO = Me.Columns("SNO")
            Me.columnSLCODE = Me.Columns("SLCODE")
            Me.columnbillno = Me.Columns("billno")
            Me.columnHEADDESC = Me.Columns("HEADDESC")
            Me.columnAMOUNT = Me.Columns("AMOUNT")
            Me.columnbilldate = Me.Columns("billdate")
        End Sub
        
        Private Sub InitClass()
            Me.columnSNO = New DataColumn("SNO", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSNO)
            Me.columnSLCODE = New DataColumn("SLCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSLCODE)
            Me.columnbillno = New DataColumn("billno", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnbillno)
            Me.columnHEADDESC = New DataColumn("HEADDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHEADDESC)
            Me.columnAMOUNT = New DataColumn("AMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAMOUNT)
            Me.columnbilldate = New DataColumn("billdate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnbilldate)
            Me.columnSNO.AllowDBNull = false
            Me.columnSLCODE.AllowDBNull = false
            Me.columnbilldate.AllowDBNull = false
        End Sub
        
        Public Function NewMAINCASHRECEIPTRow() As MAINCASHRECEIPTRow
            Return CType(Me.NewRow,MAINCASHRECEIPTRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New MAINCASHRECEIPTRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(MAINCASHRECEIPTRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MAINCASHRECEIPTRowChangedEvent) Is Nothing) Then
                RaiseEvent MAINCASHRECEIPTRowChanged(Me, New MAINCASHRECEIPTRowChangeEvent(CType(e.Row,MAINCASHRECEIPTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MAINCASHRECEIPTRowChangingEvent) Is Nothing) Then
                RaiseEvent MAINCASHRECEIPTRowChanging(Me, New MAINCASHRECEIPTRowChangeEvent(CType(e.Row,MAINCASHRECEIPTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MAINCASHRECEIPTRowDeletedEvent) Is Nothing) Then
                RaiseEvent MAINCASHRECEIPTRowDeleted(Me, New MAINCASHRECEIPTRowChangeEvent(CType(e.Row,MAINCASHRECEIPTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MAINCASHRECEIPTRowDeletingEvent) Is Nothing) Then
                RaiseEvent MAINCASHRECEIPTRowDeleting(Me, New MAINCASHRECEIPTRowChangeEvent(CType(e.Row,MAINCASHRECEIPTRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveMAINCASHRECEIPTRow(ByVal row As MAINCASHRECEIPTRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MAINCASHRECEIPTRow
        Inherits DataRow
        
        Private tableMAINCASHRECEIPT As MAINCASHRECEIPTDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableMAINCASHRECEIPT = CType(Me.Table,MAINCASHRECEIPTDataTable)
        End Sub
        
        Public Property SNO As Integer
            Get
                Return CType(Me(Me.tableMAINCASHRECEIPT.SNOColumn),Integer)
            End Get
            Set
                Me(Me.tableMAINCASHRECEIPT.SNOColumn) = value
            End Set
        End Property
        
        Public Property SLCODE As String
            Get
                Return CType(Me(Me.tableMAINCASHRECEIPT.SLCODEColumn),String)
            End Get
            Set
                Me(Me.tableMAINCASHRECEIPT.SLCODEColumn) = value
            End Set
        End Property
        
        Public Property billno As String
            Get
                Try 
                    Return CType(Me(Me.tableMAINCASHRECEIPT.billnoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINCASHRECEIPT.billnoColumn) = value
            End Set
        End Property
        
        Public Property HEADDESC As String
            Get
                Try 
                    Return CType(Me(Me.tableMAINCASHRECEIPT.HEADDESCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINCASHRECEIPT.HEADDESCColumn) = value
            End Set
        End Property
        
        Public Property AMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableMAINCASHRECEIPT.AMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINCASHRECEIPT.AMOUNTColumn) = value
            End Set
        End Property
        
        Public Property billdate As Date
            Get
                Return CType(Me(Me.tableMAINCASHRECEIPT.billdateColumn),Date)
            End Get
            Set
                Me(Me.tableMAINCASHRECEIPT.billdateColumn) = value
            End Set
        End Property
        
        Public Function IsbillnoNull() As Boolean
            Return Me.IsNull(Me.tableMAINCASHRECEIPT.billnoColumn)
        End Function
        
        Public Sub SetbillnoNull()
            Me(Me.tableMAINCASHRECEIPT.billnoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHEADDESCNull() As Boolean
            Return Me.IsNull(Me.tableMAINCASHRECEIPT.HEADDESCColumn)
        End Function
        
        Public Sub SetHEADDESCNull()
            Me(Me.tableMAINCASHRECEIPT.HEADDESCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableMAINCASHRECEIPT.AMOUNTColumn)
        End Function
        
        Public Sub SetAMOUNTNull()
            Me(Me.tableMAINCASHRECEIPT.AMOUNTColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MAINCASHRECEIPTRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As MAINCASHRECEIPTRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As MAINCASHRECEIPTRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As MAINCASHRECEIPTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class HOUSE_BILLDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnBILLNO As DataColumn
        
        Private columnBILLDATE As DataColumn
        
        Private columnSLCODE As DataColumn
        
        Private columnAMOUNT As DataColumn
        
        Private columnLOCCODE As DataColumn
        
        Private columnLOCDESC As DataColumn
        
        Friend Sub New()
            MyBase.New("HOUSE_BILL")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property BILLNOColumn As DataColumn
            Get
                Return Me.columnBILLNO
            End Get
        End Property
        
        Friend ReadOnly Property BILLDATEColumn As DataColumn
            Get
                Return Me.columnBILLDATE
            End Get
        End Property
        
        Friend ReadOnly Property SLCODEColumn As DataColumn
            Get
                Return Me.columnSLCODE
            End Get
        End Property
        
        Friend ReadOnly Property AMOUNTColumn As DataColumn
            Get
                Return Me.columnAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property LOCCODEColumn As DataColumn
            Get
                Return Me.columnLOCCODE
            End Get
        End Property
        
        Friend ReadOnly Property LOCDESCColumn As DataColumn
            Get
                Return Me.columnLOCDESC
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As HOUSE_BILLRow
            Get
                Return CType(Me.Rows(index),HOUSE_BILLRow)
            End Get
        End Property
        
        Public Event HOUSE_BILLRowChanged As HOUSE_BILLRowChangeEventHandler
        
        Public Event HOUSE_BILLRowChanging As HOUSE_BILLRowChangeEventHandler
        
        Public Event HOUSE_BILLRowDeleted As HOUSE_BILLRowChangeEventHandler
        
        Public Event HOUSE_BILLRowDeleting As HOUSE_BILLRowChangeEventHandler
        
        Public Overloads Sub AddHOUSE_BILLRow(ByVal row As HOUSE_BILLRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddHOUSE_BILLRow(ByVal BILLNO As String, ByVal BILLDATE As Date, ByVal SLCODE As String, ByVal AMOUNT As Decimal, ByVal LOCCODE As String, ByVal LOCDESC As String) As HOUSE_BILLRow
            Dim rowHOUSE_BILLRow As HOUSE_BILLRow = CType(Me.NewRow,HOUSE_BILLRow)
            rowHOUSE_BILLRow.ItemArray = New Object() {BILLNO, BILLDATE, SLCODE, AMOUNT, LOCCODE, LOCDESC}
            Me.Rows.Add(rowHOUSE_BILLRow)
            Return rowHOUSE_BILLRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As HOUSE_BILLDataTable = CType(MyBase.Clone,HOUSE_BILLDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New HOUSE_BILLDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnBILLNO = Me.Columns("BILLNO")
            Me.columnBILLDATE = Me.Columns("BILLDATE")
            Me.columnSLCODE = Me.Columns("SLCODE")
            Me.columnAMOUNT = Me.Columns("AMOUNT")
            Me.columnLOCCODE = Me.Columns("LOCCODE")
            Me.columnLOCDESC = Me.Columns("LOCDESC")
        End Sub
        
        Private Sub InitClass()
            Me.columnBILLNO = New DataColumn("BILLNO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBILLNO)
            Me.columnBILLDATE = New DataColumn("BILLDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBILLDATE)
            Me.columnSLCODE = New DataColumn("SLCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSLCODE)
            Me.columnAMOUNT = New DataColumn("AMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAMOUNT)
            Me.columnLOCCODE = New DataColumn("LOCCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLOCCODE)
            Me.columnLOCDESC = New DataColumn("LOCDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLOCDESC)
            Me.columnSLCODE.AllowDBNull = false
            Me.columnLOCCODE.AllowDBNull = false
            Me.columnLOCDESC.AllowDBNull = false
        End Sub
        
        Public Function NewHOUSE_BILLRow() As HOUSE_BILLRow
            Return CType(Me.NewRow,HOUSE_BILLRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New HOUSE_BILLRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(HOUSE_BILLRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.HOUSE_BILLRowChangedEvent) Is Nothing) Then
                RaiseEvent HOUSE_BILLRowChanged(Me, New HOUSE_BILLRowChangeEvent(CType(e.Row,HOUSE_BILLRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.HOUSE_BILLRowChangingEvent) Is Nothing) Then
                RaiseEvent HOUSE_BILLRowChanging(Me, New HOUSE_BILLRowChangeEvent(CType(e.Row,HOUSE_BILLRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.HOUSE_BILLRowDeletedEvent) Is Nothing) Then
                RaiseEvent HOUSE_BILLRowDeleted(Me, New HOUSE_BILLRowChangeEvent(CType(e.Row,HOUSE_BILLRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.HOUSE_BILLRowDeletingEvent) Is Nothing) Then
                RaiseEvent HOUSE_BILLRowDeleting(Me, New HOUSE_BILLRowChangeEvent(CType(e.Row,HOUSE_BILLRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveHOUSE_BILLRow(ByVal row As HOUSE_BILLRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class HOUSE_BILLRow
        Inherits DataRow
        
        Private tableHOUSE_BILL As HOUSE_BILLDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableHOUSE_BILL = CType(Me.Table,HOUSE_BILLDataTable)
        End Sub
        
        Public Property BILLNO As String
            Get
                Try 
                    Return CType(Me(Me.tableHOUSE_BILL.BILLNOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableHOUSE_BILL.BILLNOColumn) = value
            End Set
        End Property
        
        Public Property BILLDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tableHOUSE_BILL.BILLDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableHOUSE_BILL.BILLDATEColumn) = value
            End Set
        End Property
        
        Public Property SLCODE As String
            Get
                Return CType(Me(Me.tableHOUSE_BILL.SLCODEColumn),String)
            End Get
            Set
                Me(Me.tableHOUSE_BILL.SLCODEColumn) = value
            End Set
        End Property
        
        Public Property AMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableHOUSE_BILL.AMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableHOUSE_BILL.AMOUNTColumn) = value
            End Set
        End Property
        
        Public Property LOCCODE As String
            Get
                Return CType(Me(Me.tableHOUSE_BILL.LOCCODEColumn),String)
            End Get
            Set
                Me(Me.tableHOUSE_BILL.LOCCODEColumn) = value
            End Set
        End Property
        
        Public Property LOCDESC As String
            Get
                Return CType(Me(Me.tableHOUSE_BILL.LOCDESCColumn),String)
            End Get
            Set
                Me(Me.tableHOUSE_BILL.LOCDESCColumn) = value
            End Set
        End Property
        
        Public Function IsBILLNONull() As Boolean
            Return Me.IsNull(Me.tableHOUSE_BILL.BILLNOColumn)
        End Function
        
        Public Sub SetBILLNONull()
            Me(Me.tableHOUSE_BILL.BILLNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBILLDATENull() As Boolean
            Return Me.IsNull(Me.tableHOUSE_BILL.BILLDATEColumn)
        End Function
        
        Public Sub SetBILLDATENull()
            Me(Me.tableHOUSE_BILL.BILLDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableHOUSE_BILL.AMOUNTColumn)
        End Function
        
        Public Sub SetAMOUNTNull()
            Me(Me.tableHOUSE_BILL.AMOUNTColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class HOUSE_BILLRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As HOUSE_BILLRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As HOUSE_BILLRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As HOUSE_BILLRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class FACILITY_RPTDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnMCODE As DataColumn
        
        Private columnDNAME As DataColumn
        
        Private columnFCODE As DataColumn
        
        Private columnSUBSDESC As DataColumn
        
        Private columnMEMBERTYPE As DataColumn
        
        Private columnAPR As DataColumn
        
        Private columnMAY As DataColumn
        
        Private columnJUN As DataColumn
        
        Private columnJUL As DataColumn
        
        Private columnAUG As DataColumn
        
        Private columnSEP As DataColumn
        
        Private columnOCT As DataColumn
        
        Private columnNOV As DataColumn
        
        Private columnDEC As DataColumn
        
        Private columnJAN As DataColumn
        
        Private columnFEB As DataColumn
        
        Private columnMAR As DataColumn
        
        Private columnSTAXAMT As DataColumn
        
        Private columnSCHG As DataColumn
        
        Private columnNETAMOUNT As DataColumn
        
        Friend Sub New()
            MyBase.New("FACILITY_RPT")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property MCODEColumn As DataColumn
            Get
                Return Me.columnMCODE
            End Get
        End Property
        
        Friend ReadOnly Property DNAMEColumn As DataColumn
            Get
                Return Me.columnDNAME
            End Get
        End Property
        
        Friend ReadOnly Property FCODEColumn As DataColumn
            Get
                Return Me.columnFCODE
            End Get
        End Property
        
        Friend ReadOnly Property SUBSDESCColumn As DataColumn
            Get
                Return Me.columnSUBSDESC
            End Get
        End Property
        
        Friend ReadOnly Property MEMBERTYPEColumn As DataColumn
            Get
                Return Me.columnMEMBERTYPE
            End Get
        End Property
        
        Friend ReadOnly Property APRColumn As DataColumn
            Get
                Return Me.columnAPR
            End Get
        End Property
        
        Friend ReadOnly Property MAYColumn As DataColumn
            Get
                Return Me.columnMAY
            End Get
        End Property
        
        Friend ReadOnly Property JUNColumn As DataColumn
            Get
                Return Me.columnJUN
            End Get
        End Property
        
        Friend ReadOnly Property JULColumn As DataColumn
            Get
                Return Me.columnJUL
            End Get
        End Property
        
        Friend ReadOnly Property AUGColumn As DataColumn
            Get
                Return Me.columnAUG
            End Get
        End Property
        
        Friend ReadOnly Property SEPColumn As DataColumn
            Get
                Return Me.columnSEP
            End Get
        End Property
        
        Friend ReadOnly Property OCTColumn As DataColumn
            Get
                Return Me.columnOCT
            End Get
        End Property
        
        Friend ReadOnly Property NOVColumn As DataColumn
            Get
                Return Me.columnNOV
            End Get
        End Property
        
        Friend ReadOnly Property DECColumn As DataColumn
            Get
                Return Me.columnDEC
            End Get
        End Property
        
        Friend ReadOnly Property JANColumn As DataColumn
            Get
                Return Me.columnJAN
            End Get
        End Property
        
        Friend ReadOnly Property FEBColumn As DataColumn
            Get
                Return Me.columnFEB
            End Get
        End Property
        
        Friend ReadOnly Property MARColumn As DataColumn
            Get
                Return Me.columnMAR
            End Get
        End Property
        
        Friend ReadOnly Property STAXAMTColumn As DataColumn
            Get
                Return Me.columnSTAXAMT
            End Get
        End Property
        
        Friend ReadOnly Property SCHGColumn As DataColumn
            Get
                Return Me.columnSCHG
            End Get
        End Property
        
        Friend ReadOnly Property NETAMOUNTColumn As DataColumn
            Get
                Return Me.columnNETAMOUNT
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As FACILITY_RPTRow
            Get
                Return CType(Me.Rows(index),FACILITY_RPTRow)
            End Get
        End Property
        
        Public Event FACILITY_RPTRowChanged As FACILITY_RPTRowChangeEventHandler
        
        Public Event FACILITY_RPTRowChanging As FACILITY_RPTRowChangeEventHandler
        
        Public Event FACILITY_RPTRowDeleted As FACILITY_RPTRowChangeEventHandler
        
        Public Event FACILITY_RPTRowDeleting As FACILITY_RPTRowChangeEventHandler
        
        Public Overloads Sub AddFACILITY_RPTRow(ByVal row As FACILITY_RPTRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddFACILITY_RPTRow( _
                    ByVal MCODE As String,  _
                    ByVal DNAME As String,  _
                    ByVal FCODE As String,  _
                    ByVal SUBSDESC As String,  _
                    ByVal MEMBERTYPE As String,  _
                    ByVal APR As Decimal,  _
                    ByVal MAY As Decimal,  _
                    ByVal JUN As Decimal,  _
                    ByVal JUL As Decimal,  _
                    ByVal AUG As Decimal,  _
                    ByVal SEP As Decimal,  _
                    ByVal OCT As Decimal,  _
                    ByVal NOV As Decimal,  _
                    ByVal DEC As Decimal,  _
                    ByVal JAN As Decimal,  _
                    ByVal FEB As Decimal,  _
                    ByVal MAR As Decimal,  _
                    ByVal STAXAMT As Decimal,  _
                    ByVal SCHG As Decimal,  _
                    ByVal NETAMOUNT As Decimal) As FACILITY_RPTRow
            Dim rowFACILITY_RPTRow As FACILITY_RPTRow = CType(Me.NewRow,FACILITY_RPTRow)
            rowFACILITY_RPTRow.ItemArray = New Object() {MCODE, DNAME, FCODE, SUBSDESC, MEMBERTYPE, APR, MAY, JUN, JUL, AUG, SEP, OCT, NOV, DEC, JAN, FEB, MAR, STAXAMT, SCHG, NETAMOUNT}
            Me.Rows.Add(rowFACILITY_RPTRow)
            Return rowFACILITY_RPTRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As FACILITY_RPTDataTable = CType(MyBase.Clone,FACILITY_RPTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New FACILITY_RPTDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnMCODE = Me.Columns("MCODE")
            Me.columnDNAME = Me.Columns("DNAME")
            Me.columnFCODE = Me.Columns("FCODE")
            Me.columnSUBSDESC = Me.Columns("SUBSDESC")
            Me.columnMEMBERTYPE = Me.Columns("MEMBERTYPE")
            Me.columnAPR = Me.Columns("APR")
            Me.columnMAY = Me.Columns("MAY")
            Me.columnJUN = Me.Columns("JUN")
            Me.columnJUL = Me.Columns("JUL")
            Me.columnAUG = Me.Columns("AUG")
            Me.columnSEP = Me.Columns("SEP")
            Me.columnOCT = Me.Columns("OCT")
            Me.columnNOV = Me.Columns("NOV")
            Me.columnDEC = Me.Columns("DEC")
            Me.columnJAN = Me.Columns("JAN")
            Me.columnFEB = Me.Columns("FEB")
            Me.columnMAR = Me.Columns("MAR")
            Me.columnSTAXAMT = Me.Columns("STAXAMT")
            Me.columnSCHG = Me.Columns("SCHG")
            Me.columnNETAMOUNT = Me.Columns("NETAMOUNT")
        End Sub
        
        Private Sub InitClass()
            Me.columnMCODE = New DataColumn("MCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMCODE)
            Me.columnDNAME = New DataColumn("DNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDNAME)
            Me.columnFCODE = New DataColumn("FCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFCODE)
            Me.columnSUBSDESC = New DataColumn("SUBSDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSUBSDESC)
            Me.columnMEMBERTYPE = New DataColumn("MEMBERTYPE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEMBERTYPE)
            Me.columnAPR = New DataColumn("APR", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAPR)
            Me.columnMAY = New DataColumn("MAY", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMAY)
            Me.columnJUN = New DataColumn("JUN", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnJUN)
            Me.columnJUL = New DataColumn("JUL", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnJUL)
            Me.columnAUG = New DataColumn("AUG", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAUG)
            Me.columnSEP = New DataColumn("SEP", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSEP)
            Me.columnOCT = New DataColumn("OCT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOCT)
            Me.columnNOV = New DataColumn("NOV", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNOV)
            Me.columnDEC = New DataColumn("DEC", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDEC)
            Me.columnJAN = New DataColumn("JAN", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnJAN)
            Me.columnFEB = New DataColumn("FEB", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFEB)
            Me.columnMAR = New DataColumn("MAR", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMAR)
            Me.columnSTAXAMT = New DataColumn("STAXAMT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSTAXAMT)
            Me.columnSCHG = New DataColumn("SCHG", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSCHG)
            Me.columnNETAMOUNT = New DataColumn("NETAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNETAMOUNT)
            Me.columnSUBSDESC.AllowDBNull = false
        End Sub
        
        Public Function NewFACILITY_RPTRow() As FACILITY_RPTRow
            Return CType(Me.NewRow,FACILITY_RPTRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New FACILITY_RPTRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(FACILITY_RPTRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FACILITY_RPTRowChangedEvent) Is Nothing) Then
                RaiseEvent FACILITY_RPTRowChanged(Me, New FACILITY_RPTRowChangeEvent(CType(e.Row,FACILITY_RPTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FACILITY_RPTRowChangingEvent) Is Nothing) Then
                RaiseEvent FACILITY_RPTRowChanging(Me, New FACILITY_RPTRowChangeEvent(CType(e.Row,FACILITY_RPTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FACILITY_RPTRowDeletedEvent) Is Nothing) Then
                RaiseEvent FACILITY_RPTRowDeleted(Me, New FACILITY_RPTRowChangeEvent(CType(e.Row,FACILITY_RPTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FACILITY_RPTRowDeletingEvent) Is Nothing) Then
                RaiseEvent FACILITY_RPTRowDeleting(Me, New FACILITY_RPTRowChangeEvent(CType(e.Row,FACILITY_RPTRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveFACILITY_RPTRow(ByVal row As FACILITY_RPTRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class FACILITY_RPTRow
        Inherits DataRow
        
        Private tableFACILITY_RPT As FACILITY_RPTDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableFACILITY_RPT = CType(Me.Table,FACILITY_RPTDataTable)
        End Sub
        
        Public Property MCODE As String
            Get
                Try 
                    Return CType(Me(Me.tableFACILITY_RPT.MCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFACILITY_RPT.MCODEColumn) = value
            End Set
        End Property
        
        Public Property DNAME As String
            Get
                Try 
                    Return CType(Me(Me.tableFACILITY_RPT.DNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFACILITY_RPT.DNAMEColumn) = value
            End Set
        End Property
        
        Public Property FCODE As String
            Get
                Try 
                    Return CType(Me(Me.tableFACILITY_RPT.FCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFACILITY_RPT.FCODEColumn) = value
            End Set
        End Property
        
        Public Property SUBSDESC As String
            Get
                Return CType(Me(Me.tableFACILITY_RPT.SUBSDESCColumn),String)
            End Get
            Set
                Me(Me.tableFACILITY_RPT.SUBSDESCColumn) = value
            End Set
        End Property
        
        Public Property MEMBERTYPE As String
            Get
                Try 
                    Return CType(Me(Me.tableFACILITY_RPT.MEMBERTYPEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFACILITY_RPT.MEMBERTYPEColumn) = value
            End Set
        End Property
        
        Public Property APR As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableFACILITY_RPT.APRColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFACILITY_RPT.APRColumn) = value
            End Set
        End Property
        
        Public Property MAY As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableFACILITY_RPT.MAYColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFACILITY_RPT.MAYColumn) = value
            End Set
        End Property
        
        Public Property JUN As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableFACILITY_RPT.JUNColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFACILITY_RPT.JUNColumn) = value
            End Set
        End Property
        
        Public Property JUL As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableFACILITY_RPT.JULColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFACILITY_RPT.JULColumn) = value
            End Set
        End Property
        
        Public Property AUG As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableFACILITY_RPT.AUGColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFACILITY_RPT.AUGColumn) = value
            End Set
        End Property
        
        Public Property SEP As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableFACILITY_RPT.SEPColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFACILITY_RPT.SEPColumn) = value
            End Set
        End Property
        
        Public Property OCT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableFACILITY_RPT.OCTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFACILITY_RPT.OCTColumn) = value
            End Set
        End Property
        
        Public Property NOV As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableFACILITY_RPT.NOVColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFACILITY_RPT.NOVColumn) = value
            End Set
        End Property
        
        Public Property DEC As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableFACILITY_RPT.DECColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFACILITY_RPT.DECColumn) = value
            End Set
        End Property
        
        Public Property JAN As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableFACILITY_RPT.JANColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFACILITY_RPT.JANColumn) = value
            End Set
        End Property
        
        Public Property FEB As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableFACILITY_RPT.FEBColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFACILITY_RPT.FEBColumn) = value
            End Set
        End Property
        
        Public Property MAR As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableFACILITY_RPT.MARColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFACILITY_RPT.MARColumn) = value
            End Set
        End Property
        
        Public Property STAXAMT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableFACILITY_RPT.STAXAMTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFACILITY_RPT.STAXAMTColumn) = value
            End Set
        End Property
        
        Public Property SCHG As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableFACILITY_RPT.SCHGColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFACILITY_RPT.SCHGColumn) = value
            End Set
        End Property
        
        Public Property NETAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableFACILITY_RPT.NETAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFACILITY_RPT.NETAMOUNTColumn) = value
            End Set
        End Property
        
        Public Function IsMCODENull() As Boolean
            Return Me.IsNull(Me.tableFACILITY_RPT.MCODEColumn)
        End Function
        
        Public Sub SetMCODENull()
            Me(Me.tableFACILITY_RPT.MCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDNAMENull() As Boolean
            Return Me.IsNull(Me.tableFACILITY_RPT.DNAMEColumn)
        End Function
        
        Public Sub SetDNAMENull()
            Me(Me.tableFACILITY_RPT.DNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFCODENull() As Boolean
            Return Me.IsNull(Me.tableFACILITY_RPT.FCODEColumn)
        End Function
        
        Public Sub SetFCODENull()
            Me(Me.tableFACILITY_RPT.FCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMEMBERTYPENull() As Boolean
            Return Me.IsNull(Me.tableFACILITY_RPT.MEMBERTYPEColumn)
        End Function
        
        Public Sub SetMEMBERTYPENull()
            Me(Me.tableFACILITY_RPT.MEMBERTYPEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAPRNull() As Boolean
            Return Me.IsNull(Me.tableFACILITY_RPT.APRColumn)
        End Function
        
        Public Sub SetAPRNull()
            Me(Me.tableFACILITY_RPT.APRColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMAYNull() As Boolean
            Return Me.IsNull(Me.tableFACILITY_RPT.MAYColumn)
        End Function
        
        Public Sub SetMAYNull()
            Me(Me.tableFACILITY_RPT.MAYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsJUNNull() As Boolean
            Return Me.IsNull(Me.tableFACILITY_RPT.JUNColumn)
        End Function
        
        Public Sub SetJUNNull()
            Me(Me.tableFACILITY_RPT.JUNColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsJULNull() As Boolean
            Return Me.IsNull(Me.tableFACILITY_RPT.JULColumn)
        End Function
        
        Public Sub SetJULNull()
            Me(Me.tableFACILITY_RPT.JULColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAUGNull() As Boolean
            Return Me.IsNull(Me.tableFACILITY_RPT.AUGColumn)
        End Function
        
        Public Sub SetAUGNull()
            Me(Me.tableFACILITY_RPT.AUGColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSEPNull() As Boolean
            Return Me.IsNull(Me.tableFACILITY_RPT.SEPColumn)
        End Function
        
        Public Sub SetSEPNull()
            Me(Me.tableFACILITY_RPT.SEPColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOCTNull() As Boolean
            Return Me.IsNull(Me.tableFACILITY_RPT.OCTColumn)
        End Function
        
        Public Sub SetOCTNull()
            Me(Me.tableFACILITY_RPT.OCTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNOVNull() As Boolean
            Return Me.IsNull(Me.tableFACILITY_RPT.NOVColumn)
        End Function
        
        Public Sub SetNOVNull()
            Me(Me.tableFACILITY_RPT.NOVColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDECNull() As Boolean
            Return Me.IsNull(Me.tableFACILITY_RPT.DECColumn)
        End Function
        
        Public Sub SetDECNull()
            Me(Me.tableFACILITY_RPT.DECColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsJANNull() As Boolean
            Return Me.IsNull(Me.tableFACILITY_RPT.JANColumn)
        End Function
        
        Public Sub SetJANNull()
            Me(Me.tableFACILITY_RPT.JANColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFEBNull() As Boolean
            Return Me.IsNull(Me.tableFACILITY_RPT.FEBColumn)
        End Function
        
        Public Sub SetFEBNull()
            Me(Me.tableFACILITY_RPT.FEBColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMARNull() As Boolean
            Return Me.IsNull(Me.tableFACILITY_RPT.MARColumn)
        End Function
        
        Public Sub SetMARNull()
            Me(Me.tableFACILITY_RPT.MARColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSTAXAMTNull() As Boolean
            Return Me.IsNull(Me.tableFACILITY_RPT.STAXAMTColumn)
        End Function
        
        Public Sub SetSTAXAMTNull()
            Me(Me.tableFACILITY_RPT.STAXAMTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSCHGNull() As Boolean
            Return Me.IsNull(Me.tableFACILITY_RPT.SCHGColumn)
        End Function
        
        Public Sub SetSCHGNull()
            Me(Me.tableFACILITY_RPT.SCHGColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNETAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableFACILITY_RPT.NETAMOUNTColumn)
        End Function
        
        Public Sub SetNETAMOUNTNull()
            Me(Me.tableFACILITY_RPT.NETAMOUNTColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class FACILITY_RPTRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As FACILITY_RPTRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As FACILITY_RPTRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As FACILITY_RPTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class facility_viewDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnmcode As DataColumn
        
        Private columndname As DataColumn
        
        Private columnapr As DataColumn
        
        Private columnmay As DataColumn
        
        Friend Sub New()
            MyBase.New("facility_view")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property mcodeColumn As DataColumn
            Get
                Return Me.columnmcode
            End Get
        End Property
        
        Friend ReadOnly Property dnameColumn As DataColumn
            Get
                Return Me.columndname
            End Get
        End Property
        
        Friend ReadOnly Property aprColumn As DataColumn
            Get
                Return Me.columnapr
            End Get
        End Property
        
        Friend ReadOnly Property mayColumn As DataColumn
            Get
                Return Me.columnmay
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As facility_viewRow
            Get
                Return CType(Me.Rows(index),facility_viewRow)
            End Get
        End Property
        
        Public Event facility_viewRowChanged As facility_viewRowChangeEventHandler
        
        Public Event facility_viewRowChanging As facility_viewRowChangeEventHandler
        
        Public Event facility_viewRowDeleted As facility_viewRowChangeEventHandler
        
        Public Event facility_viewRowDeleting As facility_viewRowChangeEventHandler
        
        Public Overloads Sub Addfacility_viewRow(ByVal row As facility_viewRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addfacility_viewRow(ByVal mcode As String, ByVal dname() As Byte, ByVal apr As Decimal, ByVal may As Decimal) As facility_viewRow
            Dim rowfacility_viewRow As facility_viewRow = CType(Me.NewRow,facility_viewRow)
            rowfacility_viewRow.ItemArray = New Object() {mcode, dname, apr, may}
            Me.Rows.Add(rowfacility_viewRow)
            Return rowfacility_viewRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As facility_viewDataTable = CType(MyBase.Clone,facility_viewDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New facility_viewDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnmcode = Me.Columns("mcode")
            Me.columndname = Me.Columns("dname")
            Me.columnapr = Me.Columns("apr")
            Me.columnmay = Me.Columns("may")
        End Sub
        
        Private Sub InitClass()
            Me.columnmcode = New DataColumn("mcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmcode)
            Me.columndname = New DataColumn("dname", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndname)
            Me.columnapr = New DataColumn("apr", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnapr)
            Me.columnmay = New DataColumn("may", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmay)
        End Sub
        
        Public Function Newfacility_viewRow() As facility_viewRow
            Return CType(Me.NewRow,facility_viewRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New facility_viewRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(facility_viewRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.facility_viewRowChangedEvent) Is Nothing) Then
                RaiseEvent facility_viewRowChanged(Me, New facility_viewRowChangeEvent(CType(e.Row,facility_viewRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.facility_viewRowChangingEvent) Is Nothing) Then
                RaiseEvent facility_viewRowChanging(Me, New facility_viewRowChangeEvent(CType(e.Row,facility_viewRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.facility_viewRowDeletedEvent) Is Nothing) Then
                RaiseEvent facility_viewRowDeleted(Me, New facility_viewRowChangeEvent(CType(e.Row,facility_viewRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.facility_viewRowDeletingEvent) Is Nothing) Then
                RaiseEvent facility_viewRowDeleting(Me, New facility_viewRowChangeEvent(CType(e.Row,facility_viewRow), e.Action))
            End If
        End Sub
        
        Public Sub Removefacility_viewRow(ByVal row As facility_viewRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class facility_viewRow
        Inherits DataRow
        
        Private tablefacility_view As facility_viewDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablefacility_view = CType(Me.Table,facility_viewDataTable)
        End Sub
        
        Public Property mcode As String
            Get
                Try 
                    Return CType(Me(Me.tablefacility_view.mcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablefacility_view.mcodeColumn) = value
            End Set
        End Property
        
        Public Property dname As Byte()
            Get
                Try 
                    Return CType(Me(Me.tablefacility_view.dnameColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablefacility_view.dnameColumn) = value
            End Set
        End Property
        
        Public Property apr As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablefacility_view.aprColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablefacility_view.aprColumn) = value
            End Set
        End Property
        
        Public Property may As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablefacility_view.mayColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablefacility_view.mayColumn) = value
            End Set
        End Property
        
        Public Function IsmcodeNull() As Boolean
            Return Me.IsNull(Me.tablefacility_view.mcodeColumn)
        End Function
        
        Public Sub SetmcodeNull()
            Me(Me.tablefacility_view.mcodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdnameNull() As Boolean
            Return Me.IsNull(Me.tablefacility_view.dnameColumn)
        End Function
        
        Public Sub SetdnameNull()
            Me(Me.tablefacility_view.dnameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsaprNull() As Boolean
            Return Me.IsNull(Me.tablefacility_view.aprColumn)
        End Function
        
        Public Sub SetaprNull()
            Me(Me.tablefacility_view.aprColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsmayNull() As Boolean
            Return Me.IsNull(Me.tablefacility_view.mayColumn)
        End Function
        
        Public Sub SetmayNull()
            Me(Me.tablefacility_view.mayColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class facility_viewRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As facility_viewRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As facility_viewRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As facility_viewRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class view_kot_detailsDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnkotdate As DataColumn
        
        Private columnTYPENO As DataColumn
        
        Private columnMCODE As DataColumn
        
        Private columnPOSDESC As DataColumn
        
        Private columnAMOUNT As DataColumn
        
        Friend Sub New()
            MyBase.New("view_kot_details")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property kotdateColumn As DataColumn
            Get
                Return Me.columnkotdate
            End Get
        End Property
        
        Friend ReadOnly Property TYPENOColumn As DataColumn
            Get
                Return Me.columnTYPENO
            End Get
        End Property
        
        Friend ReadOnly Property MCODEColumn As DataColumn
            Get
                Return Me.columnMCODE
            End Get
        End Property
        
        Friend ReadOnly Property POSDESCColumn As DataColumn
            Get
                Return Me.columnPOSDESC
            End Get
        End Property
        
        Friend ReadOnly Property AMOUNTColumn As DataColumn
            Get
                Return Me.columnAMOUNT
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As view_kot_detailsRow
            Get
                Return CType(Me.Rows(index),view_kot_detailsRow)
            End Get
        End Property
        
        Public Event view_kot_detailsRowChanged As view_kot_detailsRowChangeEventHandler
        
        Public Event view_kot_detailsRowChanging As view_kot_detailsRowChangeEventHandler
        
        Public Event view_kot_detailsRowDeleted As view_kot_detailsRowChangeEventHandler
        
        Public Event view_kot_detailsRowDeleting As view_kot_detailsRowChangeEventHandler
        
        Public Overloads Sub Addview_kot_detailsRow(ByVal row As view_kot_detailsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addview_kot_detailsRow(ByVal kotdate As Date, ByVal TYPENO As String, ByVal MCODE As String, ByVal POSDESC As String, ByVal AMOUNT As Decimal) As view_kot_detailsRow
            Dim rowview_kot_detailsRow As view_kot_detailsRow = CType(Me.NewRow,view_kot_detailsRow)
            rowview_kot_detailsRow.ItemArray = New Object() {kotdate, TYPENO, MCODE, POSDESC, AMOUNT}
            Me.Rows.Add(rowview_kot_detailsRow)
            Return rowview_kot_detailsRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As view_kot_detailsDataTable = CType(MyBase.Clone,view_kot_detailsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New view_kot_detailsDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnkotdate = Me.Columns("kotdate")
            Me.columnTYPENO = Me.Columns("TYPENO")
            Me.columnMCODE = Me.Columns("MCODE")
            Me.columnPOSDESC = Me.Columns("POSDESC")
            Me.columnAMOUNT = Me.Columns("AMOUNT")
        End Sub
        
        Private Sub InitClass()
            Me.columnkotdate = New DataColumn("kotdate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnkotdate)
            Me.columnTYPENO = New DataColumn("TYPENO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTYPENO)
            Me.columnMCODE = New DataColumn("MCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMCODE)
            Me.columnPOSDESC = New DataColumn("POSDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPOSDESC)
            Me.columnAMOUNT = New DataColumn("AMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAMOUNT)
            Me.columnTYPENO.AllowDBNull = false
        End Sub
        
        Public Function Newview_kot_detailsRow() As view_kot_detailsRow
            Return CType(Me.NewRow,view_kot_detailsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New view_kot_detailsRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(view_kot_detailsRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.view_kot_detailsRowChangedEvent) Is Nothing) Then
                RaiseEvent view_kot_detailsRowChanged(Me, New view_kot_detailsRowChangeEvent(CType(e.Row,view_kot_detailsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.view_kot_detailsRowChangingEvent) Is Nothing) Then
                RaiseEvent view_kot_detailsRowChanging(Me, New view_kot_detailsRowChangeEvent(CType(e.Row,view_kot_detailsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.view_kot_detailsRowDeletedEvent) Is Nothing) Then
                RaiseEvent view_kot_detailsRowDeleted(Me, New view_kot_detailsRowChangeEvent(CType(e.Row,view_kot_detailsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.view_kot_detailsRowDeletingEvent) Is Nothing) Then
                RaiseEvent view_kot_detailsRowDeleting(Me, New view_kot_detailsRowChangeEvent(CType(e.Row,view_kot_detailsRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeview_kot_detailsRow(ByVal row As view_kot_detailsRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class view_kot_detailsRow
        Inherits DataRow
        
        Private tableview_kot_details As view_kot_detailsDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableview_kot_details = CType(Me.Table,view_kot_detailsDataTable)
        End Sub
        
        Public Property kotdate As Date
            Get
                Try 
                    Return CType(Me(Me.tableview_kot_details.kotdateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableview_kot_details.kotdateColumn) = value
            End Set
        End Property
        
        Public Property TYPENO As String
            Get
                Return CType(Me(Me.tableview_kot_details.TYPENOColumn),String)
            End Get
            Set
                Me(Me.tableview_kot_details.TYPENOColumn) = value
            End Set
        End Property
        
        Public Property MCODE As String
            Get
                Try 
                    Return CType(Me(Me.tableview_kot_details.MCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableview_kot_details.MCODEColumn) = value
            End Set
        End Property
        
        Public Property POSDESC As String
            Get
                Try 
                    Return CType(Me(Me.tableview_kot_details.POSDESCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableview_kot_details.POSDESCColumn) = value
            End Set
        End Property
        
        Public Property AMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableview_kot_details.AMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableview_kot_details.AMOUNTColumn) = value
            End Set
        End Property
        
        Public Function IskotdateNull() As Boolean
            Return Me.IsNull(Me.tableview_kot_details.kotdateColumn)
        End Function
        
        Public Sub SetkotdateNull()
            Me(Me.tableview_kot_details.kotdateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMCODENull() As Boolean
            Return Me.IsNull(Me.tableview_kot_details.MCODEColumn)
        End Function
        
        Public Sub SetMCODENull()
            Me(Me.tableview_kot_details.MCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPOSDESCNull() As Boolean
            Return Me.IsNull(Me.tableview_kot_details.POSDESCColumn)
        End Function
        
        Public Sub SetPOSDESCNull()
            Me(Me.tableview_kot_details.POSDESCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableview_kot_details.AMOUNTColumn)
        End Function
        
        Public Sub SetAMOUNTNull()
            Me(Me.tableview_kot_details.AMOUNTColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class view_kot_detailsRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As view_kot_detailsRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As view_kot_detailsRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As view_kot_detailsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_GNC_BILLDETAILSDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSNO As DataColumn
        
        Private columnMCODE As DataColumn
        
        Private columnMNAME As DataColumn
        
        Private columnBILLNO As DataColumn
        
        Private columnKOTDATE As DataColumn
        
        Private columnDRAMOUNT As DataColumn
        
        Private columnCRAMOUNT As DataColumn
        
        Private columnPOSCODE As DataColumn
        
        Private columnPOSDESC As DataColumn
        
        Private columnDESCRIPTION As DataColumn
        
        Friend Sub New()
            MyBase.New("VIEW_GNC_BILLDETAILS")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property SNOColumn As DataColumn
            Get
                Return Me.columnSNO
            End Get
        End Property
        
        Friend ReadOnly Property MCODEColumn As DataColumn
            Get
                Return Me.columnMCODE
            End Get
        End Property
        
        Friend ReadOnly Property MNAMEColumn As DataColumn
            Get
                Return Me.columnMNAME
            End Get
        End Property
        
        Friend ReadOnly Property BILLNOColumn As DataColumn
            Get
                Return Me.columnBILLNO
            End Get
        End Property
        
        Friend ReadOnly Property KOTDATEColumn As DataColumn
            Get
                Return Me.columnKOTDATE
            End Get
        End Property
        
        Friend ReadOnly Property DRAMOUNTColumn As DataColumn
            Get
                Return Me.columnDRAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property CRAMOUNTColumn As DataColumn
            Get
                Return Me.columnCRAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property POSCODEColumn As DataColumn
            Get
                Return Me.columnPOSCODE
            End Get
        End Property
        
        Friend ReadOnly Property POSDESCColumn As DataColumn
            Get
                Return Me.columnPOSDESC
            End Get
        End Property
        
        Friend ReadOnly Property DESCRIPTIONColumn As DataColumn
            Get
                Return Me.columnDESCRIPTION
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VIEW_GNC_BILLDETAILSRow
            Get
                Return CType(Me.Rows(index),VIEW_GNC_BILLDETAILSRow)
            End Get
        End Property
        
        Public Event VIEW_GNC_BILLDETAILSRowChanged As VIEW_GNC_BILLDETAILSRowChangeEventHandler
        
        Public Event VIEW_GNC_BILLDETAILSRowChanging As VIEW_GNC_BILLDETAILSRowChangeEventHandler
        
        Public Event VIEW_GNC_BILLDETAILSRowDeleted As VIEW_GNC_BILLDETAILSRowChangeEventHandler
        
        Public Event VIEW_GNC_BILLDETAILSRowDeleting As VIEW_GNC_BILLDETAILSRowChangeEventHandler
        
        Public Overloads Sub AddVIEW_GNC_BILLDETAILSRow(ByVal row As VIEW_GNC_BILLDETAILSRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVIEW_GNC_BILLDETAILSRow(ByVal SNO As Integer, ByVal MCODE As String, ByVal MNAME As String, ByVal BILLNO As String, ByVal KOTDATE As Date, ByVal DRAMOUNT As Decimal, ByVal CRAMOUNT As Decimal, ByVal POSCODE As String, ByVal POSDESC As String, ByVal DESCRIPTION As String) As VIEW_GNC_BILLDETAILSRow
            Dim rowVIEW_GNC_BILLDETAILSRow As VIEW_GNC_BILLDETAILSRow = CType(Me.NewRow,VIEW_GNC_BILLDETAILSRow)
            rowVIEW_GNC_BILLDETAILSRow.ItemArray = New Object() {SNO, MCODE, MNAME, BILLNO, KOTDATE, DRAMOUNT, CRAMOUNT, POSCODE, POSDESC, DESCRIPTION}
            Me.Rows.Add(rowVIEW_GNC_BILLDETAILSRow)
            Return rowVIEW_GNC_BILLDETAILSRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VIEW_GNC_BILLDETAILSDataTable = CType(MyBase.Clone,VIEW_GNC_BILLDETAILSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VIEW_GNC_BILLDETAILSDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnSNO = Me.Columns("SNO")
            Me.columnMCODE = Me.Columns("MCODE")
            Me.columnMNAME = Me.Columns("MNAME")
            Me.columnBILLNO = Me.Columns("BILLNO")
            Me.columnKOTDATE = Me.Columns("KOTDATE")
            Me.columnDRAMOUNT = Me.Columns("DRAMOUNT")
            Me.columnCRAMOUNT = Me.Columns("CRAMOUNT")
            Me.columnPOSCODE = Me.Columns("POSCODE")
            Me.columnPOSDESC = Me.Columns("POSDESC")
            Me.columnDESCRIPTION = Me.Columns("DESCRIPTION")
        End Sub
        
        Private Sub InitClass()
            Me.columnSNO = New DataColumn("SNO", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSNO)
            Me.columnMCODE = New DataColumn("MCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMCODE)
            Me.columnMNAME = New DataColumn("MNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMNAME)
            Me.columnBILLNO = New DataColumn("BILLNO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBILLNO)
            Me.columnKOTDATE = New DataColumn("KOTDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnKOTDATE)
            Me.columnDRAMOUNT = New DataColumn("DRAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDRAMOUNT)
            Me.columnCRAMOUNT = New DataColumn("CRAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCRAMOUNT)
            Me.columnPOSCODE = New DataColumn("POSCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPOSCODE)
            Me.columnPOSDESC = New DataColumn("POSDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPOSDESC)
            Me.columnDESCRIPTION = New DataColumn("DESCRIPTION", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDESCRIPTION)
            Me.columnSNO.AllowDBNull = false
            Me.columnMCODE.AllowDBNull = false
            Me.columnMNAME.AllowDBNull = false
            Me.columnBILLNO.AllowDBNull = false
            Me.columnKOTDATE.AllowDBNull = false
            Me.columnCRAMOUNT.AllowDBNull = false
            Me.columnPOSCODE.AllowDBNull = false
            Me.columnPOSDESC.AllowDBNull = false
            Me.columnDESCRIPTION.AllowDBNull = false
        End Sub
        
        Public Function NewVIEW_GNC_BILLDETAILSRow() As VIEW_GNC_BILLDETAILSRow
            Return CType(Me.NewRow,VIEW_GNC_BILLDETAILSRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VIEW_GNC_BILLDETAILSRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VIEW_GNC_BILLDETAILSRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VIEW_GNC_BILLDETAILSRowChangedEvent) Is Nothing) Then
                RaiseEvent VIEW_GNC_BILLDETAILSRowChanged(Me, New VIEW_GNC_BILLDETAILSRowChangeEvent(CType(e.Row,VIEW_GNC_BILLDETAILSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VIEW_GNC_BILLDETAILSRowChangingEvent) Is Nothing) Then
                RaiseEvent VIEW_GNC_BILLDETAILSRowChanging(Me, New VIEW_GNC_BILLDETAILSRowChangeEvent(CType(e.Row,VIEW_GNC_BILLDETAILSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VIEW_GNC_BILLDETAILSRowDeletedEvent) Is Nothing) Then
                RaiseEvent VIEW_GNC_BILLDETAILSRowDeleted(Me, New VIEW_GNC_BILLDETAILSRowChangeEvent(CType(e.Row,VIEW_GNC_BILLDETAILSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VIEW_GNC_BILLDETAILSRowDeletingEvent) Is Nothing) Then
                RaiseEvent VIEW_GNC_BILLDETAILSRowDeleting(Me, New VIEW_GNC_BILLDETAILSRowChangeEvent(CType(e.Row,VIEW_GNC_BILLDETAILSRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVIEW_GNC_BILLDETAILSRow(ByVal row As VIEW_GNC_BILLDETAILSRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_GNC_BILLDETAILSRow
        Inherits DataRow
        
        Private tableVIEW_GNC_BILLDETAILS As VIEW_GNC_BILLDETAILSDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVIEW_GNC_BILLDETAILS = CType(Me.Table,VIEW_GNC_BILLDETAILSDataTable)
        End Sub
        
        Public Property SNO As Integer
            Get
                Return CType(Me(Me.tableVIEW_GNC_BILLDETAILS.SNOColumn),Integer)
            End Get
            Set
                Me(Me.tableVIEW_GNC_BILLDETAILS.SNOColumn) = value
            End Set
        End Property
        
        Public Property MCODE As String
            Get
                Return CType(Me(Me.tableVIEW_GNC_BILLDETAILS.MCODEColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_GNC_BILLDETAILS.MCODEColumn) = value
            End Set
        End Property
        
        Public Property MNAME As String
            Get
                Return CType(Me(Me.tableVIEW_GNC_BILLDETAILS.MNAMEColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_GNC_BILLDETAILS.MNAMEColumn) = value
            End Set
        End Property
        
        Public Property BILLNO As String
            Get
                Return CType(Me(Me.tableVIEW_GNC_BILLDETAILS.BILLNOColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_GNC_BILLDETAILS.BILLNOColumn) = value
            End Set
        End Property
        
        Public Property KOTDATE As Date
            Get
                Return CType(Me(Me.tableVIEW_GNC_BILLDETAILS.KOTDATEColumn),Date)
            End Get
            Set
                Me(Me.tableVIEW_GNC_BILLDETAILS.KOTDATEColumn) = value
            End Set
        End Property
        
        Public Property DRAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_GNC_BILLDETAILS.DRAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_GNC_BILLDETAILS.DRAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property CRAMOUNT As Decimal
            Get
                Return CType(Me(Me.tableVIEW_GNC_BILLDETAILS.CRAMOUNTColumn),Decimal)
            End Get
            Set
                Me(Me.tableVIEW_GNC_BILLDETAILS.CRAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property POSCODE As String
            Get
                Return CType(Me(Me.tableVIEW_GNC_BILLDETAILS.POSCODEColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_GNC_BILLDETAILS.POSCODEColumn) = value
            End Set
        End Property
        
        Public Property POSDESC As String
            Get
                Return CType(Me(Me.tableVIEW_GNC_BILLDETAILS.POSDESCColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_GNC_BILLDETAILS.POSDESCColumn) = value
            End Set
        End Property
        
        Public Property DESCRIPTION As String
            Get
                Return CType(Me(Me.tableVIEW_GNC_BILLDETAILS.DESCRIPTIONColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_GNC_BILLDETAILS.DESCRIPTIONColumn) = value
            End Set
        End Property
        
        Public Function IsDRAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_GNC_BILLDETAILS.DRAMOUNTColumn)
        End Function
        
        Public Sub SetDRAMOUNTNull()
            Me(Me.tableVIEW_GNC_BILLDETAILS.DRAMOUNTColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_GNC_BILLDETAILSRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VIEW_GNC_BILLDETAILSRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VIEW_GNC_BILLDETAILSRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VIEW_GNC_BILLDETAILSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_MEM_REP_RECDETDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSNO As DataColumn
        
        Private columnMEM_NAME As DataColumn
        
        Private columnMEM_DOB As DataColumn
        
        Private columnMEM_SEX As DataColumn
        
        Private columnMCODE As DataColumn
        
        Private columnMNAME As DataColumn
        
        Private columnSPOUSE As DataColumn
        
        Private columnMEMBERTYPECODE As DataColumn
        
        Private columnCURRENTSTATUS As DataColumn
        
        Private columnMEMBERTYPE As DataColumn
        
        Private columnEMAILID As DataColumn
        
        Private columnPHONENO As DataColumn
        
        Private columnMOBILNO As DataColumn
        
        Private columnRECDATE As DataColumn
        
        Private columnRECNO As DataColumn
        
        Private columnRECAMOUNT As DataColumn
        
        Friend Sub New()
            MyBase.New("VIEW_MEM_REP_RECDET")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property SNOColumn As DataColumn
            Get
                Return Me.columnSNO
            End Get
        End Property
        
        Friend ReadOnly Property MEM_NAMEColumn As DataColumn
            Get
                Return Me.columnMEM_NAME
            End Get
        End Property
        
        Friend ReadOnly Property MEM_DOBColumn As DataColumn
            Get
                Return Me.columnMEM_DOB
            End Get
        End Property
        
        Friend ReadOnly Property MEM_SEXColumn As DataColumn
            Get
                Return Me.columnMEM_SEX
            End Get
        End Property
        
        Friend ReadOnly Property MCODEColumn As DataColumn
            Get
                Return Me.columnMCODE
            End Get
        End Property
        
        Friend ReadOnly Property MNAMEColumn As DataColumn
            Get
                Return Me.columnMNAME
            End Get
        End Property
        
        Friend ReadOnly Property SPOUSEColumn As DataColumn
            Get
                Return Me.columnSPOUSE
            End Get
        End Property
        
        Friend ReadOnly Property MEMBERTYPECODEColumn As DataColumn
            Get
                Return Me.columnMEMBERTYPECODE
            End Get
        End Property
        
        Friend ReadOnly Property CURRENTSTATUSColumn As DataColumn
            Get
                Return Me.columnCURRENTSTATUS
            End Get
        End Property
        
        Friend ReadOnly Property MEMBERTYPEColumn As DataColumn
            Get
                Return Me.columnMEMBERTYPE
            End Get
        End Property
        
        Friend ReadOnly Property EMAILIDColumn As DataColumn
            Get
                Return Me.columnEMAILID
            End Get
        End Property
        
        Friend ReadOnly Property PHONENOColumn As DataColumn
            Get
                Return Me.columnPHONENO
            End Get
        End Property
        
        Friend ReadOnly Property MOBILNOColumn As DataColumn
            Get
                Return Me.columnMOBILNO
            End Get
        End Property
        
        Friend ReadOnly Property RECDATEColumn As DataColumn
            Get
                Return Me.columnRECDATE
            End Get
        End Property
        
        Friend ReadOnly Property RECNOColumn As DataColumn
            Get
                Return Me.columnRECNO
            End Get
        End Property
        
        Friend ReadOnly Property RECAMOUNTColumn As DataColumn
            Get
                Return Me.columnRECAMOUNT
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VIEW_MEM_REP_RECDETRow
            Get
                Return CType(Me.Rows(index),VIEW_MEM_REP_RECDETRow)
            End Get
        End Property
        
        Public Event VIEW_MEM_REP_RECDETRowChanged As VIEW_MEM_REP_RECDETRowChangeEventHandler
        
        Public Event VIEW_MEM_REP_RECDETRowChanging As VIEW_MEM_REP_RECDETRowChangeEventHandler
        
        Public Event VIEW_MEM_REP_RECDETRowDeleted As VIEW_MEM_REP_RECDETRowChangeEventHandler
        
        Public Event VIEW_MEM_REP_RECDETRowDeleting As VIEW_MEM_REP_RECDETRowChangeEventHandler
        
        Public Overloads Sub AddVIEW_MEM_REP_RECDETRow(ByVal row As VIEW_MEM_REP_RECDETRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVIEW_MEM_REP_RECDETRow( _
                    ByVal SNO As Integer,  _
                    ByVal MEM_NAME As String,  _
                    ByVal MEM_DOB As Date,  _
                    ByVal MEM_SEX As String,  _
                    ByVal MCODE As String,  _
                    ByVal MNAME As String,  _
                    ByVal SPOUSE As String,  _
                    ByVal MEMBERTYPECODE As String,  _
                    ByVal CURRENTSTATUS As String,  _
                    ByVal MEMBERTYPE As String,  _
                    ByVal EMAILID As String,  _
                    ByVal PHONENO As String,  _
                    ByVal MOBILNO As String,  _
                    ByVal RECDATE As Date,  _
                    ByVal RECNO As String,  _
                    ByVal RECAMOUNT As Decimal) As VIEW_MEM_REP_RECDETRow
            Dim rowVIEW_MEM_REP_RECDETRow As VIEW_MEM_REP_RECDETRow = CType(Me.NewRow,VIEW_MEM_REP_RECDETRow)
            rowVIEW_MEM_REP_RECDETRow.ItemArray = New Object() {SNO, MEM_NAME, MEM_DOB, MEM_SEX, MCODE, MNAME, SPOUSE, MEMBERTYPECODE, CURRENTSTATUS, MEMBERTYPE, EMAILID, PHONENO, MOBILNO, RECDATE, RECNO, RECAMOUNT}
            Me.Rows.Add(rowVIEW_MEM_REP_RECDETRow)
            Return rowVIEW_MEM_REP_RECDETRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VIEW_MEM_REP_RECDETDataTable = CType(MyBase.Clone,VIEW_MEM_REP_RECDETDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VIEW_MEM_REP_RECDETDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnSNO = Me.Columns("SNO")
            Me.columnMEM_NAME = Me.Columns("MEM_NAME")
            Me.columnMEM_DOB = Me.Columns("MEM_DOB")
            Me.columnMEM_SEX = Me.Columns("MEM_SEX")
            Me.columnMCODE = Me.Columns("MCODE")
            Me.columnMNAME = Me.Columns("MNAME")
            Me.columnSPOUSE = Me.Columns("SPOUSE")
            Me.columnMEMBERTYPECODE = Me.Columns("MEMBERTYPECODE")
            Me.columnCURRENTSTATUS = Me.Columns("CURRENTSTATUS")
            Me.columnMEMBERTYPE = Me.Columns("MEMBERTYPE")
            Me.columnEMAILID = Me.Columns("EMAILID")
            Me.columnPHONENO = Me.Columns("PHONENO")
            Me.columnMOBILNO = Me.Columns("MOBILNO")
            Me.columnRECDATE = Me.Columns("RECDATE")
            Me.columnRECNO = Me.Columns("RECNO")
            Me.columnRECAMOUNT = Me.Columns("RECAMOUNT")
        End Sub
        
        Private Sub InitClass()
            Me.columnSNO = New DataColumn("SNO", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSNO)
            Me.columnMEM_NAME = New DataColumn("MEM_NAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEM_NAME)
            Me.columnMEM_DOB = New DataColumn("MEM_DOB", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEM_DOB)
            Me.columnMEM_SEX = New DataColumn("MEM_SEX", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEM_SEX)
            Me.columnMCODE = New DataColumn("MCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMCODE)
            Me.columnMNAME = New DataColumn("MNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMNAME)
            Me.columnSPOUSE = New DataColumn("SPOUSE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSPOUSE)
            Me.columnMEMBERTYPECODE = New DataColumn("MEMBERTYPECODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEMBERTYPECODE)
            Me.columnCURRENTSTATUS = New DataColumn("CURRENTSTATUS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCURRENTSTATUS)
            Me.columnMEMBERTYPE = New DataColumn("MEMBERTYPE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEMBERTYPE)
            Me.columnEMAILID = New DataColumn("EMAILID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEMAILID)
            Me.columnPHONENO = New DataColumn("PHONENO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPHONENO)
            Me.columnMOBILNO = New DataColumn("MOBILNO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMOBILNO)
            Me.columnRECDATE = New DataColumn("RECDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRECDATE)
            Me.columnRECNO = New DataColumn("RECNO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRECNO)
            Me.columnRECAMOUNT = New DataColumn("RECAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRECAMOUNT)
            Me.columnSNO.ReadOnly = true
            Me.columnMEM_NAME.ReadOnly = true
            Me.columnMEM_DOB.ReadOnly = true
            Me.columnMEM_SEX.ReadOnly = true
            Me.columnMCODE.ReadOnly = true
            Me.columnMNAME.ReadOnly = true
            Me.columnSPOUSE.ReadOnly = true
            Me.columnMEMBERTYPECODE.ReadOnly = true
            Me.columnCURRENTSTATUS.ReadOnly = true
            Me.columnMEMBERTYPE.ReadOnly = true
            Me.columnEMAILID.ReadOnly = true
            Me.columnPHONENO.ReadOnly = true
            Me.columnMOBILNO.ReadOnly = true
            Me.columnRECDATE.ReadOnly = true
            Me.columnRECNO.ReadOnly = true
            Me.columnRECAMOUNT.ReadOnly = true
        End Sub
        
        Public Function NewVIEW_MEM_REP_RECDETRow() As VIEW_MEM_REP_RECDETRow
            Return CType(Me.NewRow,VIEW_MEM_REP_RECDETRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VIEW_MEM_REP_RECDETRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VIEW_MEM_REP_RECDETRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VIEW_MEM_REP_RECDETRowChangedEvent) Is Nothing) Then
                RaiseEvent VIEW_MEM_REP_RECDETRowChanged(Me, New VIEW_MEM_REP_RECDETRowChangeEvent(CType(e.Row,VIEW_MEM_REP_RECDETRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VIEW_MEM_REP_RECDETRowChangingEvent) Is Nothing) Then
                RaiseEvent VIEW_MEM_REP_RECDETRowChanging(Me, New VIEW_MEM_REP_RECDETRowChangeEvent(CType(e.Row,VIEW_MEM_REP_RECDETRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VIEW_MEM_REP_RECDETRowDeletedEvent) Is Nothing) Then
                RaiseEvent VIEW_MEM_REP_RECDETRowDeleted(Me, New VIEW_MEM_REP_RECDETRowChangeEvent(CType(e.Row,VIEW_MEM_REP_RECDETRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VIEW_MEM_REP_RECDETRowDeletingEvent) Is Nothing) Then
                RaiseEvent VIEW_MEM_REP_RECDETRowDeleting(Me, New VIEW_MEM_REP_RECDETRowChangeEvent(CType(e.Row,VIEW_MEM_REP_RECDETRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVIEW_MEM_REP_RECDETRow(ByVal row As VIEW_MEM_REP_RECDETRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_MEM_REP_RECDETRow
        Inherits DataRow
        
        Private tableVIEW_MEM_REP_RECDET As VIEW_MEM_REP_RECDETDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVIEW_MEM_REP_RECDET = CType(Me.Table,VIEW_MEM_REP_RECDETDataTable)
        End Sub
        
        Public Property SNO As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_RECDET.SNOColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_RECDET.SNOColumn) = value
            End Set
        End Property
        
        Public Property MEM_NAME As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_RECDET.MEM_NAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_RECDET.MEM_NAMEColumn) = value
            End Set
        End Property
        
        Public Property MEM_DOB As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_RECDET.MEM_DOBColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_RECDET.MEM_DOBColumn) = value
            End Set
        End Property
        
        Public Property MEM_SEX As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_RECDET.MEM_SEXColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_RECDET.MEM_SEXColumn) = value
            End Set
        End Property
        
        Public Property MCODE As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_RECDET.MCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_RECDET.MCODEColumn) = value
            End Set
        End Property
        
        Public Property MNAME As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_RECDET.MNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_RECDET.MNAMEColumn) = value
            End Set
        End Property
        
        Public Property SPOUSE As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_RECDET.SPOUSEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_RECDET.SPOUSEColumn) = value
            End Set
        End Property
        
        Public Property MEMBERTYPECODE As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_RECDET.MEMBERTYPECODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_RECDET.MEMBERTYPECODEColumn) = value
            End Set
        End Property
        
        Public Property CURRENTSTATUS As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_RECDET.CURRENTSTATUSColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_RECDET.CURRENTSTATUSColumn) = value
            End Set
        End Property
        
        Public Property MEMBERTYPE As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_RECDET.MEMBERTYPEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_RECDET.MEMBERTYPEColumn) = value
            End Set
        End Property
        
        Public Property EMAILID As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_RECDET.EMAILIDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_RECDET.EMAILIDColumn) = value
            End Set
        End Property
        
        Public Property PHONENO As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_RECDET.PHONENOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_RECDET.PHONENOColumn) = value
            End Set
        End Property
        
        Public Property MOBILNO As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_RECDET.MOBILNOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_RECDET.MOBILNOColumn) = value
            End Set
        End Property
        
        Public Property RECDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_RECDET.RECDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_RECDET.RECDATEColumn) = value
            End Set
        End Property
        
        Public Property RECNO As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_RECDET.RECNOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_RECDET.RECNOColumn) = value
            End Set
        End Property
        
        Public Property RECAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_RECDET.RECAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_RECDET.RECAMOUNTColumn) = value
            End Set
        End Property
        
        Public Function IsSNONull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_RECDET.SNOColumn)
        End Function
        
        Public Sub SetSNONull()
            Me(Me.tableVIEW_MEM_REP_RECDET.SNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMEM_NAMENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_RECDET.MEM_NAMEColumn)
        End Function
        
        Public Sub SetMEM_NAMENull()
            Me(Me.tableVIEW_MEM_REP_RECDET.MEM_NAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMEM_DOBNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_RECDET.MEM_DOBColumn)
        End Function
        
        Public Sub SetMEM_DOBNull()
            Me(Me.tableVIEW_MEM_REP_RECDET.MEM_DOBColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMEM_SEXNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_RECDET.MEM_SEXColumn)
        End Function
        
        Public Sub SetMEM_SEXNull()
            Me(Me.tableVIEW_MEM_REP_RECDET.MEM_SEXColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMCODENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_RECDET.MCODEColumn)
        End Function
        
        Public Sub SetMCODENull()
            Me(Me.tableVIEW_MEM_REP_RECDET.MCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMNAMENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_RECDET.MNAMEColumn)
        End Function
        
        Public Sub SetMNAMENull()
            Me(Me.tableVIEW_MEM_REP_RECDET.MNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSPOUSENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_RECDET.SPOUSEColumn)
        End Function
        
        Public Sub SetSPOUSENull()
            Me(Me.tableVIEW_MEM_REP_RECDET.SPOUSEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMEMBERTYPECODENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_RECDET.MEMBERTYPECODEColumn)
        End Function
        
        Public Sub SetMEMBERTYPECODENull()
            Me(Me.tableVIEW_MEM_REP_RECDET.MEMBERTYPECODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCURRENTSTATUSNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_RECDET.CURRENTSTATUSColumn)
        End Function
        
        Public Sub SetCURRENTSTATUSNull()
            Me(Me.tableVIEW_MEM_REP_RECDET.CURRENTSTATUSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMEMBERTYPENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_RECDET.MEMBERTYPEColumn)
        End Function
        
        Public Sub SetMEMBERTYPENull()
            Me(Me.tableVIEW_MEM_REP_RECDET.MEMBERTYPEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEMAILIDNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_RECDET.EMAILIDColumn)
        End Function
        
        Public Sub SetEMAILIDNull()
            Me(Me.tableVIEW_MEM_REP_RECDET.EMAILIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPHONENONull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_RECDET.PHONENOColumn)
        End Function
        
        Public Sub SetPHONENONull()
            Me(Me.tableVIEW_MEM_REP_RECDET.PHONENOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMOBILNONull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_RECDET.MOBILNOColumn)
        End Function
        
        Public Sub SetMOBILNONull()
            Me(Me.tableVIEW_MEM_REP_RECDET.MOBILNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRECDATENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_RECDET.RECDATEColumn)
        End Function
        
        Public Sub SetRECDATENull()
            Me(Me.tableVIEW_MEM_REP_RECDET.RECDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRECNONull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_RECDET.RECNOColumn)
        End Function
        
        Public Sub SetRECNONull()
            Me(Me.tableVIEW_MEM_REP_RECDET.RECNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRECAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_RECDET.RECAMOUNTColumn)
        End Function
        
        Public Sub SetRECAMOUNTNull()
            Me(Me.tableVIEW_MEM_REP_RECDET.RECAMOUNTColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_MEM_REP_RECDETRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VIEW_MEM_REP_RECDETRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VIEW_MEM_REP_RECDETRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VIEW_MEM_REP_RECDETRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_MEM_REP_ADDRESSDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSNO As DataColumn
        
        Private columnMEM_NAME As DataColumn
        
        Private columnMEM_DOB As DataColumn
        
        Private columnMEM_SEX As DataColumn
        
        Private columnMCODE As DataColumn
        
        Private columnMNAME As DataColumn
        
        Private columnSPOUSE As DataColumn
        
        Private columnMEMBERTYPECODE As DataColumn
        
        Private columnCURRENTSTATUS As DataColumn
        
        Private columnMEMBERTYPE As DataColumn
        
        Private columnEMAILID As DataColumn
        
        Private columnPHONENO As DataColumn
        
        Private columnMOBILNO As DataColumn
        
        Private columnADDRESS As DataColumn
        
        Friend Sub New()
            MyBase.New("VIEW_MEM_REP_ADDRESS")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property SNOColumn As DataColumn
            Get
                Return Me.columnSNO
            End Get
        End Property
        
        Friend ReadOnly Property MEM_NAMEColumn As DataColumn
            Get
                Return Me.columnMEM_NAME
            End Get
        End Property
        
        Friend ReadOnly Property MEM_DOBColumn As DataColumn
            Get
                Return Me.columnMEM_DOB
            End Get
        End Property
        
        Friend ReadOnly Property MEM_SEXColumn As DataColumn
            Get
                Return Me.columnMEM_SEX
            End Get
        End Property
        
        Friend ReadOnly Property MCODEColumn As DataColumn
            Get
                Return Me.columnMCODE
            End Get
        End Property
        
        Friend ReadOnly Property MNAMEColumn As DataColumn
            Get
                Return Me.columnMNAME
            End Get
        End Property
        
        Friend ReadOnly Property SPOUSEColumn As DataColumn
            Get
                Return Me.columnSPOUSE
            End Get
        End Property
        
        Friend ReadOnly Property MEMBERTYPECODEColumn As DataColumn
            Get
                Return Me.columnMEMBERTYPECODE
            End Get
        End Property
        
        Friend ReadOnly Property CURRENTSTATUSColumn As DataColumn
            Get
                Return Me.columnCURRENTSTATUS
            End Get
        End Property
        
        Friend ReadOnly Property MEMBERTYPEColumn As DataColumn
            Get
                Return Me.columnMEMBERTYPE
            End Get
        End Property
        
        Friend ReadOnly Property EMAILIDColumn As DataColumn
            Get
                Return Me.columnEMAILID
            End Get
        End Property
        
        Friend ReadOnly Property PHONENOColumn As DataColumn
            Get
                Return Me.columnPHONENO
            End Get
        End Property
        
        Friend ReadOnly Property MOBILNOColumn As DataColumn
            Get
                Return Me.columnMOBILNO
            End Get
        End Property
        
        Friend ReadOnly Property ADDRESSColumn As DataColumn
            Get
                Return Me.columnADDRESS
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VIEW_MEM_REP_ADDRESSRow
            Get
                Return CType(Me.Rows(index),VIEW_MEM_REP_ADDRESSRow)
            End Get
        End Property
        
        Public Event VIEW_MEM_REP_ADDRESSRowChanged As VIEW_MEM_REP_ADDRESSRowChangeEventHandler
        
        Public Event VIEW_MEM_REP_ADDRESSRowChanging As VIEW_MEM_REP_ADDRESSRowChangeEventHandler
        
        Public Event VIEW_MEM_REP_ADDRESSRowDeleted As VIEW_MEM_REP_ADDRESSRowChangeEventHandler
        
        Public Event VIEW_MEM_REP_ADDRESSRowDeleting As VIEW_MEM_REP_ADDRESSRowChangeEventHandler
        
        Public Overloads Sub AddVIEW_MEM_REP_ADDRESSRow(ByVal row As VIEW_MEM_REP_ADDRESSRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVIEW_MEM_REP_ADDRESSRow(ByVal SNO As Integer, ByVal MEM_NAME As String, ByVal MEM_DOB As Date, ByVal MEM_SEX As String, ByVal MCODE As String, ByVal MNAME As String, ByVal SPOUSE As String, ByVal MEMBERTYPECODE As String, ByVal CURRENTSTATUS As String, ByVal MEMBERTYPE As String, ByVal EMAILID As String, ByVal PHONENO As String, ByVal MOBILNO As String, ByVal ADDRESS As String) As VIEW_MEM_REP_ADDRESSRow
            Dim rowVIEW_MEM_REP_ADDRESSRow As VIEW_MEM_REP_ADDRESSRow = CType(Me.NewRow,VIEW_MEM_REP_ADDRESSRow)
            rowVIEW_MEM_REP_ADDRESSRow.ItemArray = New Object() {SNO, MEM_NAME, MEM_DOB, MEM_SEX, MCODE, MNAME, SPOUSE, MEMBERTYPECODE, CURRENTSTATUS, MEMBERTYPE, EMAILID, PHONENO, MOBILNO, ADDRESS}
            Me.Rows.Add(rowVIEW_MEM_REP_ADDRESSRow)
            Return rowVIEW_MEM_REP_ADDRESSRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VIEW_MEM_REP_ADDRESSDataTable = CType(MyBase.Clone,VIEW_MEM_REP_ADDRESSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VIEW_MEM_REP_ADDRESSDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnSNO = Me.Columns("SNO")
            Me.columnMEM_NAME = Me.Columns("MEM_NAME")
            Me.columnMEM_DOB = Me.Columns("MEM_DOB")
            Me.columnMEM_SEX = Me.Columns("MEM_SEX")
            Me.columnMCODE = Me.Columns("MCODE")
            Me.columnMNAME = Me.Columns("MNAME")
            Me.columnSPOUSE = Me.Columns("SPOUSE")
            Me.columnMEMBERTYPECODE = Me.Columns("MEMBERTYPECODE")
            Me.columnCURRENTSTATUS = Me.Columns("CURRENTSTATUS")
            Me.columnMEMBERTYPE = Me.Columns("MEMBERTYPE")
            Me.columnEMAILID = Me.Columns("EMAILID")
            Me.columnPHONENO = Me.Columns("PHONENO")
            Me.columnMOBILNO = Me.Columns("MOBILNO")
            Me.columnADDRESS = Me.Columns("ADDRESS")
        End Sub
        
        Private Sub InitClass()
            Me.columnSNO = New DataColumn("SNO", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSNO)
            Me.columnMEM_NAME = New DataColumn("MEM_NAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEM_NAME)
            Me.columnMEM_DOB = New DataColumn("MEM_DOB", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEM_DOB)
            Me.columnMEM_SEX = New DataColumn("MEM_SEX", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEM_SEX)
            Me.columnMCODE = New DataColumn("MCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMCODE)
            Me.columnMNAME = New DataColumn("MNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMNAME)
            Me.columnSPOUSE = New DataColumn("SPOUSE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSPOUSE)
            Me.columnMEMBERTYPECODE = New DataColumn("MEMBERTYPECODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEMBERTYPECODE)
            Me.columnCURRENTSTATUS = New DataColumn("CURRENTSTATUS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCURRENTSTATUS)
            Me.columnMEMBERTYPE = New DataColumn("MEMBERTYPE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEMBERTYPE)
            Me.columnEMAILID = New DataColumn("EMAILID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEMAILID)
            Me.columnPHONENO = New DataColumn("PHONENO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPHONENO)
            Me.columnMOBILNO = New DataColumn("MOBILNO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMOBILNO)
            Me.columnADDRESS = New DataColumn("ADDRESS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnADDRESS)
            Me.columnSNO.AllowDBNull = false
            Me.columnMEM_NAME.AllowDBNull = false
            Me.columnMEM_DOB.AllowDBNull = false
            Me.columnMEM_SEX.AllowDBNull = false
            Me.columnMCODE.AllowDBNull = false
            Me.columnMNAME.AllowDBNull = false
            Me.columnSPOUSE.AllowDBNull = false
            Me.columnMEMBERTYPECODE.AllowDBNull = false
            Me.columnCURRENTSTATUS.AllowDBNull = false
            Me.columnMEMBERTYPE.AllowDBNull = false
            Me.columnEMAILID.AllowDBNull = false
            Me.columnMOBILNO.AllowDBNull = false
        End Sub
        
        Public Function NewVIEW_MEM_REP_ADDRESSRow() As VIEW_MEM_REP_ADDRESSRow
            Return CType(Me.NewRow,VIEW_MEM_REP_ADDRESSRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VIEW_MEM_REP_ADDRESSRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VIEW_MEM_REP_ADDRESSRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VIEW_MEM_REP_ADDRESSRowChangedEvent) Is Nothing) Then
                RaiseEvent VIEW_MEM_REP_ADDRESSRowChanged(Me, New VIEW_MEM_REP_ADDRESSRowChangeEvent(CType(e.Row,VIEW_MEM_REP_ADDRESSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VIEW_MEM_REP_ADDRESSRowChangingEvent) Is Nothing) Then
                RaiseEvent VIEW_MEM_REP_ADDRESSRowChanging(Me, New VIEW_MEM_REP_ADDRESSRowChangeEvent(CType(e.Row,VIEW_MEM_REP_ADDRESSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VIEW_MEM_REP_ADDRESSRowDeletedEvent) Is Nothing) Then
                RaiseEvent VIEW_MEM_REP_ADDRESSRowDeleted(Me, New VIEW_MEM_REP_ADDRESSRowChangeEvent(CType(e.Row,VIEW_MEM_REP_ADDRESSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VIEW_MEM_REP_ADDRESSRowDeletingEvent) Is Nothing) Then
                RaiseEvent VIEW_MEM_REP_ADDRESSRowDeleting(Me, New VIEW_MEM_REP_ADDRESSRowChangeEvent(CType(e.Row,VIEW_MEM_REP_ADDRESSRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVIEW_MEM_REP_ADDRESSRow(ByVal row As VIEW_MEM_REP_ADDRESSRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_MEM_REP_ADDRESSRow
        Inherits DataRow
        
        Private tableVIEW_MEM_REP_ADDRESS As VIEW_MEM_REP_ADDRESSDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVIEW_MEM_REP_ADDRESS = CType(Me.Table,VIEW_MEM_REP_ADDRESSDataTable)
        End Sub
        
        Public Property SNO As Integer
            Get
                Return CType(Me(Me.tableVIEW_MEM_REP_ADDRESS.SNOColumn),Integer)
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_ADDRESS.SNOColumn) = value
            End Set
        End Property
        
        Public Property MEM_NAME As String
            Get
                Return CType(Me(Me.tableVIEW_MEM_REP_ADDRESS.MEM_NAMEColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_ADDRESS.MEM_NAMEColumn) = value
            End Set
        End Property
        
        Public Property MEM_DOB As Date
            Get
                Return CType(Me(Me.tableVIEW_MEM_REP_ADDRESS.MEM_DOBColumn),Date)
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_ADDRESS.MEM_DOBColumn) = value
            End Set
        End Property
        
        Public Property MEM_SEX As String
            Get
                Return CType(Me(Me.tableVIEW_MEM_REP_ADDRESS.MEM_SEXColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_ADDRESS.MEM_SEXColumn) = value
            End Set
        End Property
        
        Public Property MCODE As String
            Get
                Return CType(Me(Me.tableVIEW_MEM_REP_ADDRESS.MCODEColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_ADDRESS.MCODEColumn) = value
            End Set
        End Property
        
        Public Property MNAME As String
            Get
                Return CType(Me(Me.tableVIEW_MEM_REP_ADDRESS.MNAMEColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_ADDRESS.MNAMEColumn) = value
            End Set
        End Property
        
        Public Property SPOUSE As String
            Get
                Return CType(Me(Me.tableVIEW_MEM_REP_ADDRESS.SPOUSEColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_ADDRESS.SPOUSEColumn) = value
            End Set
        End Property
        
        Public Property MEMBERTYPECODE As String
            Get
                Return CType(Me(Me.tableVIEW_MEM_REP_ADDRESS.MEMBERTYPECODEColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_ADDRESS.MEMBERTYPECODEColumn) = value
            End Set
        End Property
        
        Public Property CURRENTSTATUS As String
            Get
                Return CType(Me(Me.tableVIEW_MEM_REP_ADDRESS.CURRENTSTATUSColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_ADDRESS.CURRENTSTATUSColumn) = value
            End Set
        End Property
        
        Public Property MEMBERTYPE As String
            Get
                Return CType(Me(Me.tableVIEW_MEM_REP_ADDRESS.MEMBERTYPEColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_ADDRESS.MEMBERTYPEColumn) = value
            End Set
        End Property
        
        Public Property EMAILID As String
            Get
                Return CType(Me(Me.tableVIEW_MEM_REP_ADDRESS.EMAILIDColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_ADDRESS.EMAILIDColumn) = value
            End Set
        End Property
        
        Public Property PHONENO As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_ADDRESS.PHONENOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_ADDRESS.PHONENOColumn) = value
            End Set
        End Property
        
        Public Property MOBILNO As String
            Get
                Return CType(Me(Me.tableVIEW_MEM_REP_ADDRESS.MOBILNOColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_ADDRESS.MOBILNOColumn) = value
            End Set
        End Property
        
        Public Property ADDRESS As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_ADDRESS.ADDRESSColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_ADDRESS.ADDRESSColumn) = value
            End Set
        End Property
        
        Public Function IsPHONENONull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_ADDRESS.PHONENOColumn)
        End Function
        
        Public Sub SetPHONENONull()
            Me(Me.tableVIEW_MEM_REP_ADDRESS.PHONENOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsADDRESSNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_ADDRESS.ADDRESSColumn)
        End Function
        
        Public Sub SetADDRESSNull()
            Me(Me.tableVIEW_MEM_REP_ADDRESS.ADDRESSColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_MEM_REP_ADDRESSRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VIEW_MEM_REP_ADDRESSRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VIEW_MEM_REP_ADDRESSRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VIEW_MEM_REP_ADDRESSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_MEM_REP_CLUBDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSNO As DataColumn
        
        Private columnMEM_NAME As DataColumn
        
        Private columnMEM_DOB As DataColumn
        
        Private columnMEM_SEX As DataColumn
        
        Private columnMCODE As DataColumn
        
        Private columnMNAME As DataColumn
        
        Private columnSPOUSE As DataColumn
        
        Private columnMEMBERTYPECODE As DataColumn
        
        Private columnCURRENTSTATUS As DataColumn
        
        Private columnMEMBERTYPE As DataColumn
        
        Private columnEMAILID As DataColumn
        
        Private columnPHONENO As DataColumn
        
        Private columnMOBILNO As DataColumn
        
        Private columnCLUBNAME As DataColumn
        
        Private columnRELATION As DataColumn
        
        Private columnREMARKS As DataColumn
        
        Private columnREL_SEX As DataColumn
        
        Private columnREL_DOB As DataColumn
        
        Friend Sub New()
            MyBase.New("VIEW_MEM_REP_CLUB")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property SNOColumn As DataColumn
            Get
                Return Me.columnSNO
            End Get
        End Property
        
        Friend ReadOnly Property MEM_NAMEColumn As DataColumn
            Get
                Return Me.columnMEM_NAME
            End Get
        End Property
        
        Friend ReadOnly Property MEM_DOBColumn As DataColumn
            Get
                Return Me.columnMEM_DOB
            End Get
        End Property
        
        Friend ReadOnly Property MEM_SEXColumn As DataColumn
            Get
                Return Me.columnMEM_SEX
            End Get
        End Property
        
        Friend ReadOnly Property MCODEColumn As DataColumn
            Get
                Return Me.columnMCODE
            End Get
        End Property
        
        Friend ReadOnly Property MNAMEColumn As DataColumn
            Get
                Return Me.columnMNAME
            End Get
        End Property
        
        Friend ReadOnly Property SPOUSEColumn As DataColumn
            Get
                Return Me.columnSPOUSE
            End Get
        End Property
        
        Friend ReadOnly Property MEMBERTYPECODEColumn As DataColumn
            Get
                Return Me.columnMEMBERTYPECODE
            End Get
        End Property
        
        Friend ReadOnly Property CURRENTSTATUSColumn As DataColumn
            Get
                Return Me.columnCURRENTSTATUS
            End Get
        End Property
        
        Friend ReadOnly Property MEMBERTYPEColumn As DataColumn
            Get
                Return Me.columnMEMBERTYPE
            End Get
        End Property
        
        Friend ReadOnly Property EMAILIDColumn As DataColumn
            Get
                Return Me.columnEMAILID
            End Get
        End Property
        
        Friend ReadOnly Property PHONENOColumn As DataColumn
            Get
                Return Me.columnPHONENO
            End Get
        End Property
        
        Friend ReadOnly Property MOBILNOColumn As DataColumn
            Get
                Return Me.columnMOBILNO
            End Get
        End Property
        
        Friend ReadOnly Property CLUBNAMEColumn As DataColumn
            Get
                Return Me.columnCLUBNAME
            End Get
        End Property
        
        Friend ReadOnly Property RELATIONColumn As DataColumn
            Get
                Return Me.columnRELATION
            End Get
        End Property
        
        Friend ReadOnly Property REMARKSColumn As DataColumn
            Get
                Return Me.columnREMARKS
            End Get
        End Property
        
        Friend ReadOnly Property REL_SEXColumn As DataColumn
            Get
                Return Me.columnREL_SEX
            End Get
        End Property
        
        Friend ReadOnly Property REL_DOBColumn As DataColumn
            Get
                Return Me.columnREL_DOB
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VIEW_MEM_REP_CLUBRow
            Get
                Return CType(Me.Rows(index),VIEW_MEM_REP_CLUBRow)
            End Get
        End Property
        
        Public Event VIEW_MEM_REP_CLUBRowChanged As VIEW_MEM_REP_CLUBRowChangeEventHandler
        
        Public Event VIEW_MEM_REP_CLUBRowChanging As VIEW_MEM_REP_CLUBRowChangeEventHandler
        
        Public Event VIEW_MEM_REP_CLUBRowDeleted As VIEW_MEM_REP_CLUBRowChangeEventHandler
        
        Public Event VIEW_MEM_REP_CLUBRowDeleting As VIEW_MEM_REP_CLUBRowChangeEventHandler
        
        Public Overloads Sub AddVIEW_MEM_REP_CLUBRow(ByVal row As VIEW_MEM_REP_CLUBRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVIEW_MEM_REP_CLUBRow( _
                    ByVal SNO As Integer,  _
                    ByVal MEM_NAME As String,  _
                    ByVal MEM_DOB As Date,  _
                    ByVal MEM_SEX As String,  _
                    ByVal MCODE As String,  _
                    ByVal MNAME As String,  _
                    ByVal SPOUSE As String,  _
                    ByVal MEMBERTYPECODE As String,  _
                    ByVal CURRENTSTATUS As String,  _
                    ByVal MEMBERTYPE As String,  _
                    ByVal EMAILID As String,  _
                    ByVal PHONENO As String,  _
                    ByVal MOBILNO As String,  _
                    ByVal CLUBNAME As String,  _
                    ByVal RELATION As String,  _
                    ByVal REMARKS As String,  _
                    ByVal REL_SEX As String,  _
                    ByVal REL_DOB As Date) As VIEW_MEM_REP_CLUBRow
            Dim rowVIEW_MEM_REP_CLUBRow As VIEW_MEM_REP_CLUBRow = CType(Me.NewRow,VIEW_MEM_REP_CLUBRow)
            rowVIEW_MEM_REP_CLUBRow.ItemArray = New Object() {SNO, MEM_NAME, MEM_DOB, MEM_SEX, MCODE, MNAME, SPOUSE, MEMBERTYPECODE, CURRENTSTATUS, MEMBERTYPE, EMAILID, PHONENO, MOBILNO, CLUBNAME, RELATION, REMARKS, REL_SEX, REL_DOB}
            Me.Rows.Add(rowVIEW_MEM_REP_CLUBRow)
            Return rowVIEW_MEM_REP_CLUBRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VIEW_MEM_REP_CLUBDataTable = CType(MyBase.Clone,VIEW_MEM_REP_CLUBDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VIEW_MEM_REP_CLUBDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnSNO = Me.Columns("SNO")
            Me.columnMEM_NAME = Me.Columns("MEM_NAME")
            Me.columnMEM_DOB = Me.Columns("MEM_DOB")
            Me.columnMEM_SEX = Me.Columns("MEM_SEX")
            Me.columnMCODE = Me.Columns("MCODE")
            Me.columnMNAME = Me.Columns("MNAME")
            Me.columnSPOUSE = Me.Columns("SPOUSE")
            Me.columnMEMBERTYPECODE = Me.Columns("MEMBERTYPECODE")
            Me.columnCURRENTSTATUS = Me.Columns("CURRENTSTATUS")
            Me.columnMEMBERTYPE = Me.Columns("MEMBERTYPE")
            Me.columnEMAILID = Me.Columns("EMAILID")
            Me.columnPHONENO = Me.Columns("PHONENO")
            Me.columnMOBILNO = Me.Columns("MOBILNO")
            Me.columnCLUBNAME = Me.Columns("CLUBNAME")
            Me.columnRELATION = Me.Columns("RELATION")
            Me.columnREMARKS = Me.Columns("REMARKS")
            Me.columnREL_SEX = Me.Columns("REL_SEX")
            Me.columnREL_DOB = Me.Columns("REL_DOB")
        End Sub
        
        Private Sub InitClass()
            Me.columnSNO = New DataColumn("SNO", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSNO)
            Me.columnMEM_NAME = New DataColumn("MEM_NAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEM_NAME)
            Me.columnMEM_DOB = New DataColumn("MEM_DOB", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEM_DOB)
            Me.columnMEM_SEX = New DataColumn("MEM_SEX", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEM_SEX)
            Me.columnMCODE = New DataColumn("MCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMCODE)
            Me.columnMNAME = New DataColumn("MNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMNAME)
            Me.columnSPOUSE = New DataColumn("SPOUSE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSPOUSE)
            Me.columnMEMBERTYPECODE = New DataColumn("MEMBERTYPECODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEMBERTYPECODE)
            Me.columnCURRENTSTATUS = New DataColumn("CURRENTSTATUS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCURRENTSTATUS)
            Me.columnMEMBERTYPE = New DataColumn("MEMBERTYPE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEMBERTYPE)
            Me.columnEMAILID = New DataColumn("EMAILID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEMAILID)
            Me.columnPHONENO = New DataColumn("PHONENO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPHONENO)
            Me.columnMOBILNO = New DataColumn("MOBILNO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMOBILNO)
            Me.columnCLUBNAME = New DataColumn("CLUBNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCLUBNAME)
            Me.columnRELATION = New DataColumn("RELATION", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRELATION)
            Me.columnREMARKS = New DataColumn("REMARKS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnREMARKS)
            Me.columnREL_SEX = New DataColumn("REL_SEX", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnREL_SEX)
            Me.columnREL_DOB = New DataColumn("REL_DOB", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnREL_DOB)
            Me.columnSNO.ReadOnly = true
            Me.columnMEM_NAME.ReadOnly = true
            Me.columnMEM_DOB.ReadOnly = true
            Me.columnMEM_SEX.ReadOnly = true
            Me.columnMCODE.ReadOnly = true
            Me.columnMNAME.ReadOnly = true
            Me.columnSPOUSE.ReadOnly = true
            Me.columnMEMBERTYPECODE.ReadOnly = true
            Me.columnCURRENTSTATUS.ReadOnly = true
            Me.columnMEMBERTYPE.ReadOnly = true
            Me.columnEMAILID.ReadOnly = true
            Me.columnPHONENO.ReadOnly = true
            Me.columnMOBILNO.ReadOnly = true
            Me.columnCLUBNAME.ReadOnly = true
            Me.columnRELATION.ReadOnly = true
            Me.columnREMARKS.ReadOnly = true
            Me.columnREL_SEX.ReadOnly = true
            Me.columnREL_DOB.ReadOnly = true
        End Sub
        
        Public Function NewVIEW_MEM_REP_CLUBRow() As VIEW_MEM_REP_CLUBRow
            Return CType(Me.NewRow,VIEW_MEM_REP_CLUBRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VIEW_MEM_REP_CLUBRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VIEW_MEM_REP_CLUBRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VIEW_MEM_REP_CLUBRowChangedEvent) Is Nothing) Then
                RaiseEvent VIEW_MEM_REP_CLUBRowChanged(Me, New VIEW_MEM_REP_CLUBRowChangeEvent(CType(e.Row,VIEW_MEM_REP_CLUBRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VIEW_MEM_REP_CLUBRowChangingEvent) Is Nothing) Then
                RaiseEvent VIEW_MEM_REP_CLUBRowChanging(Me, New VIEW_MEM_REP_CLUBRowChangeEvent(CType(e.Row,VIEW_MEM_REP_CLUBRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VIEW_MEM_REP_CLUBRowDeletedEvent) Is Nothing) Then
                RaiseEvent VIEW_MEM_REP_CLUBRowDeleted(Me, New VIEW_MEM_REP_CLUBRowChangeEvent(CType(e.Row,VIEW_MEM_REP_CLUBRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VIEW_MEM_REP_CLUBRowDeletingEvent) Is Nothing) Then
                RaiseEvent VIEW_MEM_REP_CLUBRowDeleting(Me, New VIEW_MEM_REP_CLUBRowChangeEvent(CType(e.Row,VIEW_MEM_REP_CLUBRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVIEW_MEM_REP_CLUBRow(ByVal row As VIEW_MEM_REP_CLUBRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_MEM_REP_CLUBRow
        Inherits DataRow
        
        Private tableVIEW_MEM_REP_CLUB As VIEW_MEM_REP_CLUBDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVIEW_MEM_REP_CLUB = CType(Me.Table,VIEW_MEM_REP_CLUBDataTable)
        End Sub
        
        Public Property SNO As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_CLUB.SNOColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_CLUB.SNOColumn) = value
            End Set
        End Property
        
        Public Property MEM_NAME As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_CLUB.MEM_NAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_CLUB.MEM_NAMEColumn) = value
            End Set
        End Property
        
        Public Property MEM_DOB As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_CLUB.MEM_DOBColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_CLUB.MEM_DOBColumn) = value
            End Set
        End Property
        
        Public Property MEM_SEX As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_CLUB.MEM_SEXColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_CLUB.MEM_SEXColumn) = value
            End Set
        End Property
        
        Public Property MCODE As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_CLUB.MCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_CLUB.MCODEColumn) = value
            End Set
        End Property
        
        Public Property MNAME As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_CLUB.MNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_CLUB.MNAMEColumn) = value
            End Set
        End Property
        
        Public Property SPOUSE As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_CLUB.SPOUSEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_CLUB.SPOUSEColumn) = value
            End Set
        End Property
        
        Public Property MEMBERTYPECODE As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_CLUB.MEMBERTYPECODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_CLUB.MEMBERTYPECODEColumn) = value
            End Set
        End Property
        
        Public Property CURRENTSTATUS As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_CLUB.CURRENTSTATUSColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_CLUB.CURRENTSTATUSColumn) = value
            End Set
        End Property
        
        Public Property MEMBERTYPE As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_CLUB.MEMBERTYPEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_CLUB.MEMBERTYPEColumn) = value
            End Set
        End Property
        
        Public Property EMAILID As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_CLUB.EMAILIDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_CLUB.EMAILIDColumn) = value
            End Set
        End Property
        
        Public Property PHONENO As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_CLUB.PHONENOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_CLUB.PHONENOColumn) = value
            End Set
        End Property
        
        Public Property MOBILNO As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_CLUB.MOBILNOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_CLUB.MOBILNOColumn) = value
            End Set
        End Property
        
        Public Property CLUBNAME As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_CLUB.CLUBNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_CLUB.CLUBNAMEColumn) = value
            End Set
        End Property
        
        Public Property RELATION As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_CLUB.RELATIONColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_CLUB.RELATIONColumn) = value
            End Set
        End Property
        
        Public Property REMARKS As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_CLUB.REMARKSColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_CLUB.REMARKSColumn) = value
            End Set
        End Property
        
        Public Property REL_SEX As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_CLUB.REL_SEXColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_CLUB.REL_SEXColumn) = value
            End Set
        End Property
        
        Public Property REL_DOB As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_CLUB.REL_DOBColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_CLUB.REL_DOBColumn) = value
            End Set
        End Property
        
        Public Function IsSNONull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_CLUB.SNOColumn)
        End Function
        
        Public Sub SetSNONull()
            Me(Me.tableVIEW_MEM_REP_CLUB.SNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMEM_NAMENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_CLUB.MEM_NAMEColumn)
        End Function
        
        Public Sub SetMEM_NAMENull()
            Me(Me.tableVIEW_MEM_REP_CLUB.MEM_NAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMEM_DOBNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_CLUB.MEM_DOBColumn)
        End Function
        
        Public Sub SetMEM_DOBNull()
            Me(Me.tableVIEW_MEM_REP_CLUB.MEM_DOBColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMEM_SEXNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_CLUB.MEM_SEXColumn)
        End Function
        
        Public Sub SetMEM_SEXNull()
            Me(Me.tableVIEW_MEM_REP_CLUB.MEM_SEXColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMCODENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_CLUB.MCODEColumn)
        End Function
        
        Public Sub SetMCODENull()
            Me(Me.tableVIEW_MEM_REP_CLUB.MCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMNAMENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_CLUB.MNAMEColumn)
        End Function
        
        Public Sub SetMNAMENull()
            Me(Me.tableVIEW_MEM_REP_CLUB.MNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSPOUSENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_CLUB.SPOUSEColumn)
        End Function
        
        Public Sub SetSPOUSENull()
            Me(Me.tableVIEW_MEM_REP_CLUB.SPOUSEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMEMBERTYPECODENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_CLUB.MEMBERTYPECODEColumn)
        End Function
        
        Public Sub SetMEMBERTYPECODENull()
            Me(Me.tableVIEW_MEM_REP_CLUB.MEMBERTYPECODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCURRENTSTATUSNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_CLUB.CURRENTSTATUSColumn)
        End Function
        
        Public Sub SetCURRENTSTATUSNull()
            Me(Me.tableVIEW_MEM_REP_CLUB.CURRENTSTATUSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMEMBERTYPENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_CLUB.MEMBERTYPEColumn)
        End Function
        
        Public Sub SetMEMBERTYPENull()
            Me(Me.tableVIEW_MEM_REP_CLUB.MEMBERTYPEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEMAILIDNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_CLUB.EMAILIDColumn)
        End Function
        
        Public Sub SetEMAILIDNull()
            Me(Me.tableVIEW_MEM_REP_CLUB.EMAILIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPHONENONull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_CLUB.PHONENOColumn)
        End Function
        
        Public Sub SetPHONENONull()
            Me(Me.tableVIEW_MEM_REP_CLUB.PHONENOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMOBILNONull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_CLUB.MOBILNOColumn)
        End Function
        
        Public Sub SetMOBILNONull()
            Me(Me.tableVIEW_MEM_REP_CLUB.MOBILNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCLUBNAMENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_CLUB.CLUBNAMEColumn)
        End Function
        
        Public Sub SetCLUBNAMENull()
            Me(Me.tableVIEW_MEM_REP_CLUB.CLUBNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRELATIONNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_CLUB.RELATIONColumn)
        End Function
        
        Public Sub SetRELATIONNull()
            Me(Me.tableVIEW_MEM_REP_CLUB.RELATIONColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsREMARKSNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_CLUB.REMARKSColumn)
        End Function
        
        Public Sub SetREMARKSNull()
            Me(Me.tableVIEW_MEM_REP_CLUB.REMARKSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsREL_SEXNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_CLUB.REL_SEXColumn)
        End Function
        
        Public Sub SetREL_SEXNull()
            Me(Me.tableVIEW_MEM_REP_CLUB.REL_SEXColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsREL_DOBNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_CLUB.REL_DOBColumn)
        End Function
        
        Public Sub SetREL_DOBNull()
            Me(Me.tableVIEW_MEM_REP_CLUB.REL_DOBColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_MEM_REP_CLUBRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VIEW_MEM_REP_CLUBRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VIEW_MEM_REP_CLUBRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VIEW_MEM_REP_CLUBRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_MEM_REP_Corp_Mem_ListDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSNO As DataColumn
        
        Private columnMEM_NAME As DataColumn
        
        Private columnCORPCODE As DataColumn
        
        Private columnCORPNAME As DataColumn
        
        Private columnMEM_DOB As DataColumn
        
        Private columnMEM_SEX As DataColumn
        
        Private columnMCODE As DataColumn
        
        Private columnMNAME As DataColumn
        
        Private columnSPOUSE As DataColumn
        
        Private columnMEMBERTYPECODE As DataColumn
        
        Private columnCURRENTSTATUS As DataColumn
        
        Private columnMEMBERTYPE As DataColumn
        
        Private columnEMAILID As DataColumn
        
        Private columnPHONENO As DataColumn
        
        Private columnMOBILNO As DataColumn
        
        Friend Sub New()
            MyBase.New("VIEW_MEM_REP_Corp_Mem_List")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property SNOColumn As DataColumn
            Get
                Return Me.columnSNO
            End Get
        End Property
        
        Friend ReadOnly Property MEM_NAMEColumn As DataColumn
            Get
                Return Me.columnMEM_NAME
            End Get
        End Property
        
        Friend ReadOnly Property CORPCODEColumn As DataColumn
            Get
                Return Me.columnCORPCODE
            End Get
        End Property
        
        Friend ReadOnly Property CORPNAMEColumn As DataColumn
            Get
                Return Me.columnCORPNAME
            End Get
        End Property
        
        Friend ReadOnly Property MEM_DOBColumn As DataColumn
            Get
                Return Me.columnMEM_DOB
            End Get
        End Property
        
        Friend ReadOnly Property MEM_SEXColumn As DataColumn
            Get
                Return Me.columnMEM_SEX
            End Get
        End Property
        
        Friend ReadOnly Property MCODEColumn As DataColumn
            Get
                Return Me.columnMCODE
            End Get
        End Property
        
        Friend ReadOnly Property MNAMEColumn As DataColumn
            Get
                Return Me.columnMNAME
            End Get
        End Property
        
        Friend ReadOnly Property SPOUSEColumn As DataColumn
            Get
                Return Me.columnSPOUSE
            End Get
        End Property
        
        Friend ReadOnly Property MEMBERTYPECODEColumn As DataColumn
            Get
                Return Me.columnMEMBERTYPECODE
            End Get
        End Property
        
        Friend ReadOnly Property CURRENTSTATUSColumn As DataColumn
            Get
                Return Me.columnCURRENTSTATUS
            End Get
        End Property
        
        Friend ReadOnly Property MEMBERTYPEColumn As DataColumn
            Get
                Return Me.columnMEMBERTYPE
            End Get
        End Property
        
        Friend ReadOnly Property EMAILIDColumn As DataColumn
            Get
                Return Me.columnEMAILID
            End Get
        End Property
        
        Friend ReadOnly Property PHONENOColumn As DataColumn
            Get
                Return Me.columnPHONENO
            End Get
        End Property
        
        Friend ReadOnly Property MOBILNOColumn As DataColumn
            Get
                Return Me.columnMOBILNO
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VIEW_MEM_REP_Corp_Mem_ListRow
            Get
                Return CType(Me.Rows(index),VIEW_MEM_REP_Corp_Mem_ListRow)
            End Get
        End Property
        
        Public Event VIEW_MEM_REP_Corp_Mem_ListRowChanged As VIEW_MEM_REP_Corp_Mem_ListRowChangeEventHandler
        
        Public Event VIEW_MEM_REP_Corp_Mem_ListRowChanging As VIEW_MEM_REP_Corp_Mem_ListRowChangeEventHandler
        
        Public Event VIEW_MEM_REP_Corp_Mem_ListRowDeleted As VIEW_MEM_REP_Corp_Mem_ListRowChangeEventHandler
        
        Public Event VIEW_MEM_REP_Corp_Mem_ListRowDeleting As VIEW_MEM_REP_Corp_Mem_ListRowChangeEventHandler
        
        Public Overloads Sub AddVIEW_MEM_REP_Corp_Mem_ListRow(ByVal row As VIEW_MEM_REP_Corp_Mem_ListRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVIEW_MEM_REP_Corp_Mem_ListRow(ByVal SNO As Integer, ByVal MEM_NAME As String, ByVal CORPCODE As String, ByVal CORPNAME As String, ByVal MEM_DOB As Date, ByVal MEM_SEX As String, ByVal MCODE As String, ByVal MNAME As String, ByVal SPOUSE As String, ByVal MEMBERTYPECODE As String, ByVal CURRENTSTATUS As String, ByVal MEMBERTYPE As String, ByVal EMAILID As String, ByVal PHONENO As String, ByVal MOBILNO As String) As VIEW_MEM_REP_Corp_Mem_ListRow
            Dim rowVIEW_MEM_REP_Corp_Mem_ListRow As VIEW_MEM_REP_Corp_Mem_ListRow = CType(Me.NewRow,VIEW_MEM_REP_Corp_Mem_ListRow)
            rowVIEW_MEM_REP_Corp_Mem_ListRow.ItemArray = New Object() {SNO, MEM_NAME, CORPCODE, CORPNAME, MEM_DOB, MEM_SEX, MCODE, MNAME, SPOUSE, MEMBERTYPECODE, CURRENTSTATUS, MEMBERTYPE, EMAILID, PHONENO, MOBILNO}
            Me.Rows.Add(rowVIEW_MEM_REP_Corp_Mem_ListRow)
            Return rowVIEW_MEM_REP_Corp_Mem_ListRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VIEW_MEM_REP_Corp_Mem_ListDataTable = CType(MyBase.Clone,VIEW_MEM_REP_Corp_Mem_ListDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VIEW_MEM_REP_Corp_Mem_ListDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnSNO = Me.Columns("SNO")
            Me.columnMEM_NAME = Me.Columns("MEM_NAME")
            Me.columnCORPCODE = Me.Columns("CORPCODE")
            Me.columnCORPNAME = Me.Columns("CORPNAME")
            Me.columnMEM_DOB = Me.Columns("MEM_DOB")
            Me.columnMEM_SEX = Me.Columns("MEM_SEX")
            Me.columnMCODE = Me.Columns("MCODE")
            Me.columnMNAME = Me.Columns("MNAME")
            Me.columnSPOUSE = Me.Columns("SPOUSE")
            Me.columnMEMBERTYPECODE = Me.Columns("MEMBERTYPECODE")
            Me.columnCURRENTSTATUS = Me.Columns("CURRENTSTATUS")
            Me.columnMEMBERTYPE = Me.Columns("MEMBERTYPE")
            Me.columnEMAILID = Me.Columns("EMAILID")
            Me.columnPHONENO = Me.Columns("PHONENO")
            Me.columnMOBILNO = Me.Columns("MOBILNO")
        End Sub
        
        Private Sub InitClass()
            Me.columnSNO = New DataColumn("SNO", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSNO)
            Me.columnMEM_NAME = New DataColumn("MEM_NAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEM_NAME)
            Me.columnCORPCODE = New DataColumn("CORPCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCORPCODE)
            Me.columnCORPNAME = New DataColumn("CORPNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCORPNAME)
            Me.columnMEM_DOB = New DataColumn("MEM_DOB", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEM_DOB)
            Me.columnMEM_SEX = New DataColumn("MEM_SEX", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEM_SEX)
            Me.columnMCODE = New DataColumn("MCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMCODE)
            Me.columnMNAME = New DataColumn("MNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMNAME)
            Me.columnSPOUSE = New DataColumn("SPOUSE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSPOUSE)
            Me.columnMEMBERTYPECODE = New DataColumn("MEMBERTYPECODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEMBERTYPECODE)
            Me.columnCURRENTSTATUS = New DataColumn("CURRENTSTATUS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCURRENTSTATUS)
            Me.columnMEMBERTYPE = New DataColumn("MEMBERTYPE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEMBERTYPE)
            Me.columnEMAILID = New DataColumn("EMAILID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEMAILID)
            Me.columnPHONENO = New DataColumn("PHONENO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPHONENO)
            Me.columnMOBILNO = New DataColumn("MOBILNO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMOBILNO)
            Me.columnSNO.ReadOnly = true
            Me.columnMEM_NAME.ReadOnly = true
            Me.columnCORPCODE.ReadOnly = true
            Me.columnCORPNAME.ReadOnly = true
            Me.columnMEM_DOB.ReadOnly = true
            Me.columnMEM_SEX.ReadOnly = true
            Me.columnMCODE.ReadOnly = true
            Me.columnMNAME.ReadOnly = true
            Me.columnSPOUSE.ReadOnly = true
            Me.columnMEMBERTYPECODE.ReadOnly = true
            Me.columnCURRENTSTATUS.ReadOnly = true
            Me.columnMEMBERTYPE.ReadOnly = true
            Me.columnEMAILID.ReadOnly = true
            Me.columnPHONENO.ReadOnly = true
            Me.columnMOBILNO.ReadOnly = true
        End Sub
        
        Public Function NewVIEW_MEM_REP_Corp_Mem_ListRow() As VIEW_MEM_REP_Corp_Mem_ListRow
            Return CType(Me.NewRow,VIEW_MEM_REP_Corp_Mem_ListRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VIEW_MEM_REP_Corp_Mem_ListRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VIEW_MEM_REP_Corp_Mem_ListRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VIEW_MEM_REP_Corp_Mem_ListRowChangedEvent) Is Nothing) Then
                RaiseEvent VIEW_MEM_REP_Corp_Mem_ListRowChanged(Me, New VIEW_MEM_REP_Corp_Mem_ListRowChangeEvent(CType(e.Row,VIEW_MEM_REP_Corp_Mem_ListRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VIEW_MEM_REP_Corp_Mem_ListRowChangingEvent) Is Nothing) Then
                RaiseEvent VIEW_MEM_REP_Corp_Mem_ListRowChanging(Me, New VIEW_MEM_REP_Corp_Mem_ListRowChangeEvent(CType(e.Row,VIEW_MEM_REP_Corp_Mem_ListRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VIEW_MEM_REP_Corp_Mem_ListRowDeletedEvent) Is Nothing) Then
                RaiseEvent VIEW_MEM_REP_Corp_Mem_ListRowDeleted(Me, New VIEW_MEM_REP_Corp_Mem_ListRowChangeEvent(CType(e.Row,VIEW_MEM_REP_Corp_Mem_ListRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VIEW_MEM_REP_Corp_Mem_ListRowDeletingEvent) Is Nothing) Then
                RaiseEvent VIEW_MEM_REP_Corp_Mem_ListRowDeleting(Me, New VIEW_MEM_REP_Corp_Mem_ListRowChangeEvent(CType(e.Row,VIEW_MEM_REP_Corp_Mem_ListRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVIEW_MEM_REP_Corp_Mem_ListRow(ByVal row As VIEW_MEM_REP_Corp_Mem_ListRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_MEM_REP_Corp_Mem_ListRow
        Inherits DataRow
        
        Private tableVIEW_MEM_REP_Corp_Mem_List As VIEW_MEM_REP_Corp_Mem_ListDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVIEW_MEM_REP_Corp_Mem_List = CType(Me.Table,VIEW_MEM_REP_Corp_Mem_ListDataTable)
        End Sub
        
        Public Property SNO As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_Corp_Mem_List.SNOColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_Corp_Mem_List.SNOColumn) = value
            End Set
        End Property
        
        Public Property MEM_NAME As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_Corp_Mem_List.MEM_NAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_Corp_Mem_List.MEM_NAMEColumn) = value
            End Set
        End Property
        
        Public Property CORPCODE As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_Corp_Mem_List.CORPCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_Corp_Mem_List.CORPCODEColumn) = value
            End Set
        End Property
        
        Public Property CORPNAME As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_Corp_Mem_List.CORPNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_Corp_Mem_List.CORPNAMEColumn) = value
            End Set
        End Property
        
        Public Property MEM_DOB As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_Corp_Mem_List.MEM_DOBColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_Corp_Mem_List.MEM_DOBColumn) = value
            End Set
        End Property
        
        Public Property MEM_SEX As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_Corp_Mem_List.MEM_SEXColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_Corp_Mem_List.MEM_SEXColumn) = value
            End Set
        End Property
        
        Public Property MCODE As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_Corp_Mem_List.MCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_Corp_Mem_List.MCODEColumn) = value
            End Set
        End Property
        
        Public Property MNAME As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_Corp_Mem_List.MNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_Corp_Mem_List.MNAMEColumn) = value
            End Set
        End Property
        
        Public Property SPOUSE As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_Corp_Mem_List.SPOUSEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_Corp_Mem_List.SPOUSEColumn) = value
            End Set
        End Property
        
        Public Property MEMBERTYPECODE As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_Corp_Mem_List.MEMBERTYPECODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_Corp_Mem_List.MEMBERTYPECODEColumn) = value
            End Set
        End Property
        
        Public Property CURRENTSTATUS As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_Corp_Mem_List.CURRENTSTATUSColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_Corp_Mem_List.CURRENTSTATUSColumn) = value
            End Set
        End Property
        
        Public Property MEMBERTYPE As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_Corp_Mem_List.MEMBERTYPEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_Corp_Mem_List.MEMBERTYPEColumn) = value
            End Set
        End Property
        
        Public Property EMAILID As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_Corp_Mem_List.EMAILIDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_Corp_Mem_List.EMAILIDColumn) = value
            End Set
        End Property
        
        Public Property PHONENO As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_Corp_Mem_List.PHONENOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_Corp_Mem_List.PHONENOColumn) = value
            End Set
        End Property
        
        Public Property MOBILNO As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_Corp_Mem_List.MOBILNOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_Corp_Mem_List.MOBILNOColumn) = value
            End Set
        End Property
        
        Public Function IsSNONull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_Corp_Mem_List.SNOColumn)
        End Function
        
        Public Sub SetSNONull()
            Me(Me.tableVIEW_MEM_REP_Corp_Mem_List.SNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMEM_NAMENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_Corp_Mem_List.MEM_NAMEColumn)
        End Function
        
        Public Sub SetMEM_NAMENull()
            Me(Me.tableVIEW_MEM_REP_Corp_Mem_List.MEM_NAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCORPCODENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_Corp_Mem_List.CORPCODEColumn)
        End Function
        
        Public Sub SetCORPCODENull()
            Me(Me.tableVIEW_MEM_REP_Corp_Mem_List.CORPCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCORPNAMENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_Corp_Mem_List.CORPNAMEColumn)
        End Function
        
        Public Sub SetCORPNAMENull()
            Me(Me.tableVIEW_MEM_REP_Corp_Mem_List.CORPNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMEM_DOBNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_Corp_Mem_List.MEM_DOBColumn)
        End Function
        
        Public Sub SetMEM_DOBNull()
            Me(Me.tableVIEW_MEM_REP_Corp_Mem_List.MEM_DOBColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMEM_SEXNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_Corp_Mem_List.MEM_SEXColumn)
        End Function
        
        Public Sub SetMEM_SEXNull()
            Me(Me.tableVIEW_MEM_REP_Corp_Mem_List.MEM_SEXColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMCODENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_Corp_Mem_List.MCODEColumn)
        End Function
        
        Public Sub SetMCODENull()
            Me(Me.tableVIEW_MEM_REP_Corp_Mem_List.MCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMNAMENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_Corp_Mem_List.MNAMEColumn)
        End Function
        
        Public Sub SetMNAMENull()
            Me(Me.tableVIEW_MEM_REP_Corp_Mem_List.MNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSPOUSENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_Corp_Mem_List.SPOUSEColumn)
        End Function
        
        Public Sub SetSPOUSENull()
            Me(Me.tableVIEW_MEM_REP_Corp_Mem_List.SPOUSEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMEMBERTYPECODENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_Corp_Mem_List.MEMBERTYPECODEColumn)
        End Function
        
        Public Sub SetMEMBERTYPECODENull()
            Me(Me.tableVIEW_MEM_REP_Corp_Mem_List.MEMBERTYPECODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCURRENTSTATUSNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_Corp_Mem_List.CURRENTSTATUSColumn)
        End Function
        
        Public Sub SetCURRENTSTATUSNull()
            Me(Me.tableVIEW_MEM_REP_Corp_Mem_List.CURRENTSTATUSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMEMBERTYPENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_Corp_Mem_List.MEMBERTYPEColumn)
        End Function
        
        Public Sub SetMEMBERTYPENull()
            Me(Me.tableVIEW_MEM_REP_Corp_Mem_List.MEMBERTYPEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEMAILIDNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_Corp_Mem_List.EMAILIDColumn)
        End Function
        
        Public Sub SetEMAILIDNull()
            Me(Me.tableVIEW_MEM_REP_Corp_Mem_List.EMAILIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPHONENONull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_Corp_Mem_List.PHONENOColumn)
        End Function
        
        Public Sub SetPHONENONull()
            Me(Me.tableVIEW_MEM_REP_Corp_Mem_List.PHONENOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMOBILNONull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_Corp_Mem_List.MOBILNOColumn)
        End Function
        
        Public Sub SetMOBILNONull()
            Me(Me.tableVIEW_MEM_REP_Corp_Mem_List.MOBILNOColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_MEM_REP_Corp_Mem_ListRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VIEW_MEM_REP_Corp_Mem_ListRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VIEW_MEM_REP_Corp_Mem_ListRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VIEW_MEM_REP_Corp_Mem_ListRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_MEM_REP_Corp_MstDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCORPCODE As DataColumn
        
        Private columnCORPNAME As DataColumn
        
        Private columnSTARTINGDATE As DataColumn
        
        Private columnENDINGDATE As DataColumn
        
        Private columnSTATUS As DataColumn
        
        Private columnADD1 As DataColumn
        
        Private columnADD2 As DataColumn
        
        Private columnADD3 As DataColumn
        
        Private columnCITY As DataColumn
        
        Private columnENT_FEEAMT As DataColumn
        
        Private columnREMARKS As DataColumn
        
        Private columnPHONENO As DataColumn
        
        Private columnEMAILID As DataColumn
        
        Friend Sub New()
            MyBase.New("VIEW_MEM_REP_Corp_Mst")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CORPCODEColumn As DataColumn
            Get
                Return Me.columnCORPCODE
            End Get
        End Property
        
        Friend ReadOnly Property CORPNAMEColumn As DataColumn
            Get
                Return Me.columnCORPNAME
            End Get
        End Property
        
        Friend ReadOnly Property STARTINGDATEColumn As DataColumn
            Get
                Return Me.columnSTARTINGDATE
            End Get
        End Property
        
        Friend ReadOnly Property ENDINGDATEColumn As DataColumn
            Get
                Return Me.columnENDINGDATE
            End Get
        End Property
        
        Friend ReadOnly Property STATUSColumn As DataColumn
            Get
                Return Me.columnSTATUS
            End Get
        End Property
        
        Friend ReadOnly Property ADD1Column As DataColumn
            Get
                Return Me.columnADD1
            End Get
        End Property
        
        Friend ReadOnly Property ADD2Column As DataColumn
            Get
                Return Me.columnADD2
            End Get
        End Property
        
        Friend ReadOnly Property ADD3Column As DataColumn
            Get
                Return Me.columnADD3
            End Get
        End Property
        
        Friend ReadOnly Property CITYColumn As DataColumn
            Get
                Return Me.columnCITY
            End Get
        End Property
        
        Friend ReadOnly Property ENT_FEEAMTColumn As DataColumn
            Get
                Return Me.columnENT_FEEAMT
            End Get
        End Property
        
        Friend ReadOnly Property REMARKSColumn As DataColumn
            Get
                Return Me.columnREMARKS
            End Get
        End Property
        
        Friend ReadOnly Property PHONENOColumn As DataColumn
            Get
                Return Me.columnPHONENO
            End Get
        End Property
        
        Friend ReadOnly Property EMAILIDColumn As DataColumn
            Get
                Return Me.columnEMAILID
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VIEW_MEM_REP_Corp_MstRow
            Get
                Return CType(Me.Rows(index),VIEW_MEM_REP_Corp_MstRow)
            End Get
        End Property
        
        Public Event VIEW_MEM_REP_Corp_MstRowChanged As VIEW_MEM_REP_Corp_MstRowChangeEventHandler
        
        Public Event VIEW_MEM_REP_Corp_MstRowChanging As VIEW_MEM_REP_Corp_MstRowChangeEventHandler
        
        Public Event VIEW_MEM_REP_Corp_MstRowDeleted As VIEW_MEM_REP_Corp_MstRowChangeEventHandler
        
        Public Event VIEW_MEM_REP_Corp_MstRowDeleting As VIEW_MEM_REP_Corp_MstRowChangeEventHandler
        
        Public Overloads Sub AddVIEW_MEM_REP_Corp_MstRow(ByVal row As VIEW_MEM_REP_Corp_MstRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVIEW_MEM_REP_Corp_MstRow(ByVal CORPCODE As String, ByVal CORPNAME As String, ByVal STARTINGDATE As Date, ByVal ENDINGDATE As Date, ByVal STATUS As String, ByVal ADD1 As String, ByVal ADD2 As String, ByVal ADD3 As String, ByVal CITY As String, ByVal ENT_FEEAMT As Double, ByVal REMARKS As String, ByVal PHONENO As String, ByVal EMAILID As String) As VIEW_MEM_REP_Corp_MstRow
            Dim rowVIEW_MEM_REP_Corp_MstRow As VIEW_MEM_REP_Corp_MstRow = CType(Me.NewRow,VIEW_MEM_REP_Corp_MstRow)
            rowVIEW_MEM_REP_Corp_MstRow.ItemArray = New Object() {CORPCODE, CORPNAME, STARTINGDATE, ENDINGDATE, STATUS, ADD1, ADD2, ADD3, CITY, ENT_FEEAMT, REMARKS, PHONENO, EMAILID}
            Me.Rows.Add(rowVIEW_MEM_REP_Corp_MstRow)
            Return rowVIEW_MEM_REP_Corp_MstRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VIEW_MEM_REP_Corp_MstDataTable = CType(MyBase.Clone,VIEW_MEM_REP_Corp_MstDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VIEW_MEM_REP_Corp_MstDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCORPCODE = Me.Columns("CORPCODE")
            Me.columnCORPNAME = Me.Columns("CORPNAME")
            Me.columnSTARTINGDATE = Me.Columns("STARTINGDATE")
            Me.columnENDINGDATE = Me.Columns("ENDINGDATE")
            Me.columnSTATUS = Me.Columns("STATUS")
            Me.columnADD1 = Me.Columns("ADD1")
            Me.columnADD2 = Me.Columns("ADD2")
            Me.columnADD3 = Me.Columns("ADD3")
            Me.columnCITY = Me.Columns("CITY")
            Me.columnENT_FEEAMT = Me.Columns("ENT_FEEAMT")
            Me.columnREMARKS = Me.Columns("REMARKS")
            Me.columnPHONENO = Me.Columns("PHONENO")
            Me.columnEMAILID = Me.Columns("EMAILID")
        End Sub
        
        Private Sub InitClass()
            Me.columnCORPCODE = New DataColumn("CORPCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCORPCODE)
            Me.columnCORPNAME = New DataColumn("CORPNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCORPNAME)
            Me.columnSTARTINGDATE = New DataColumn("STARTINGDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSTARTINGDATE)
            Me.columnENDINGDATE = New DataColumn("ENDINGDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnENDINGDATE)
            Me.columnSTATUS = New DataColumn("STATUS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSTATUS)
            Me.columnADD1 = New DataColumn("ADD1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnADD1)
            Me.columnADD2 = New DataColumn("ADD2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnADD2)
            Me.columnADD3 = New DataColumn("ADD3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnADD3)
            Me.columnCITY = New DataColumn("CITY", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCITY)
            Me.columnENT_FEEAMT = New DataColumn("ENT_FEEAMT", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnENT_FEEAMT)
            Me.columnREMARKS = New DataColumn("REMARKS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnREMARKS)
            Me.columnPHONENO = New DataColumn("PHONENO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPHONENO)
            Me.columnEMAILID = New DataColumn("EMAILID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEMAILID)
            Me.columnCORPCODE.ReadOnly = true
            Me.columnCORPNAME.ReadOnly = true
            Me.columnSTARTINGDATE.ReadOnly = true
            Me.columnENDINGDATE.ReadOnly = true
            Me.columnSTATUS.ReadOnly = true
            Me.columnADD1.ReadOnly = true
            Me.columnADD2.ReadOnly = true
            Me.columnADD3.ReadOnly = true
            Me.columnCITY.ReadOnly = true
            Me.columnENT_FEEAMT.ReadOnly = true
            Me.columnREMARKS.ReadOnly = true
            Me.columnPHONENO.ReadOnly = true
            Me.columnEMAILID.ReadOnly = true
        End Sub
        
        Public Function NewVIEW_MEM_REP_Corp_MstRow() As VIEW_MEM_REP_Corp_MstRow
            Return CType(Me.NewRow,VIEW_MEM_REP_Corp_MstRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VIEW_MEM_REP_Corp_MstRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VIEW_MEM_REP_Corp_MstRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VIEW_MEM_REP_Corp_MstRowChangedEvent) Is Nothing) Then
                RaiseEvent VIEW_MEM_REP_Corp_MstRowChanged(Me, New VIEW_MEM_REP_Corp_MstRowChangeEvent(CType(e.Row,VIEW_MEM_REP_Corp_MstRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VIEW_MEM_REP_Corp_MstRowChangingEvent) Is Nothing) Then
                RaiseEvent VIEW_MEM_REP_Corp_MstRowChanging(Me, New VIEW_MEM_REP_Corp_MstRowChangeEvent(CType(e.Row,VIEW_MEM_REP_Corp_MstRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VIEW_MEM_REP_Corp_MstRowDeletedEvent) Is Nothing) Then
                RaiseEvent VIEW_MEM_REP_Corp_MstRowDeleted(Me, New VIEW_MEM_REP_Corp_MstRowChangeEvent(CType(e.Row,VIEW_MEM_REP_Corp_MstRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VIEW_MEM_REP_Corp_MstRowDeletingEvent) Is Nothing) Then
                RaiseEvent VIEW_MEM_REP_Corp_MstRowDeleting(Me, New VIEW_MEM_REP_Corp_MstRowChangeEvent(CType(e.Row,VIEW_MEM_REP_Corp_MstRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVIEW_MEM_REP_Corp_MstRow(ByVal row As VIEW_MEM_REP_Corp_MstRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_MEM_REP_Corp_MstRow
        Inherits DataRow
        
        Private tableVIEW_MEM_REP_Corp_Mst As VIEW_MEM_REP_Corp_MstDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVIEW_MEM_REP_Corp_Mst = CType(Me.Table,VIEW_MEM_REP_Corp_MstDataTable)
        End Sub
        
        Public Property CORPCODE As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_Corp_Mst.CORPCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_Corp_Mst.CORPCODEColumn) = value
            End Set
        End Property
        
        Public Property CORPNAME As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_Corp_Mst.CORPNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_Corp_Mst.CORPNAMEColumn) = value
            End Set
        End Property
        
        Public Property STARTINGDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_Corp_Mst.STARTINGDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_Corp_Mst.STARTINGDATEColumn) = value
            End Set
        End Property
        
        Public Property ENDINGDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_Corp_Mst.ENDINGDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_Corp_Mst.ENDINGDATEColumn) = value
            End Set
        End Property
        
        Public Property STATUS As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_Corp_Mst.STATUSColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_Corp_Mst.STATUSColumn) = value
            End Set
        End Property
        
        Public Property ADD1 As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_Corp_Mst.ADD1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_Corp_Mst.ADD1Column) = value
            End Set
        End Property
        
        Public Property ADD2 As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_Corp_Mst.ADD2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_Corp_Mst.ADD2Column) = value
            End Set
        End Property
        
        Public Property ADD3 As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_Corp_Mst.ADD3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_Corp_Mst.ADD3Column) = value
            End Set
        End Property
        
        Public Property CITY As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_Corp_Mst.CITYColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_Corp_Mst.CITYColumn) = value
            End Set
        End Property
        
        Public Property ENT_FEEAMT As Double
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_Corp_Mst.ENT_FEEAMTColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_Corp_Mst.ENT_FEEAMTColumn) = value
            End Set
        End Property
        
        Public Property REMARKS As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_Corp_Mst.REMARKSColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_Corp_Mst.REMARKSColumn) = value
            End Set
        End Property
        
        Public Property PHONENO As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_Corp_Mst.PHONENOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_Corp_Mst.PHONENOColumn) = value
            End Set
        End Property
        
        Public Property EMAILID As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_Corp_Mst.EMAILIDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_Corp_Mst.EMAILIDColumn) = value
            End Set
        End Property
        
        Public Function IsCORPCODENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_Corp_Mst.CORPCODEColumn)
        End Function
        
        Public Sub SetCORPCODENull()
            Me(Me.tableVIEW_MEM_REP_Corp_Mst.CORPCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCORPNAMENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_Corp_Mst.CORPNAMEColumn)
        End Function
        
        Public Sub SetCORPNAMENull()
            Me(Me.tableVIEW_MEM_REP_Corp_Mst.CORPNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSTARTINGDATENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_Corp_Mst.STARTINGDATEColumn)
        End Function
        
        Public Sub SetSTARTINGDATENull()
            Me(Me.tableVIEW_MEM_REP_Corp_Mst.STARTINGDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsENDINGDATENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_Corp_Mst.ENDINGDATEColumn)
        End Function
        
        Public Sub SetENDINGDATENull()
            Me(Me.tableVIEW_MEM_REP_Corp_Mst.ENDINGDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSTATUSNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_Corp_Mst.STATUSColumn)
        End Function
        
        Public Sub SetSTATUSNull()
            Me(Me.tableVIEW_MEM_REP_Corp_Mst.STATUSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsADD1Null() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_Corp_Mst.ADD1Column)
        End Function
        
        Public Sub SetADD1Null()
            Me(Me.tableVIEW_MEM_REP_Corp_Mst.ADD1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsADD2Null() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_Corp_Mst.ADD2Column)
        End Function
        
        Public Sub SetADD2Null()
            Me(Me.tableVIEW_MEM_REP_Corp_Mst.ADD2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsADD3Null() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_Corp_Mst.ADD3Column)
        End Function
        
        Public Sub SetADD3Null()
            Me(Me.tableVIEW_MEM_REP_Corp_Mst.ADD3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsCITYNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_Corp_Mst.CITYColumn)
        End Function
        
        Public Sub SetCITYNull()
            Me(Me.tableVIEW_MEM_REP_Corp_Mst.CITYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsENT_FEEAMTNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_Corp_Mst.ENT_FEEAMTColumn)
        End Function
        
        Public Sub SetENT_FEEAMTNull()
            Me(Me.tableVIEW_MEM_REP_Corp_Mst.ENT_FEEAMTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsREMARKSNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_Corp_Mst.REMARKSColumn)
        End Function
        
        Public Sub SetREMARKSNull()
            Me(Me.tableVIEW_MEM_REP_Corp_Mst.REMARKSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPHONENONull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_Corp_Mst.PHONENOColumn)
        End Function
        
        Public Sub SetPHONENONull()
            Me(Me.tableVIEW_MEM_REP_Corp_Mst.PHONENOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEMAILIDNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_Corp_Mst.EMAILIDColumn)
        End Function
        
        Public Sub SetEMAILIDNull()
            Me(Me.tableVIEW_MEM_REP_Corp_Mst.EMAILIDColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_MEM_REP_Corp_MstRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VIEW_MEM_REP_Corp_MstRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VIEW_MEM_REP_Corp_MstRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VIEW_MEM_REP_Corp_MstRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_MEM_REP_DEPENDENT_ADDRESSDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSNO As DataColumn
        
        Private columnMEM_SEX As DataColumn
        
        Private columnMCODE As DataColumn
        
        Private columnMNAME As DataColumn
        
        Private columnSPOUSE As DataColumn
        
        Private columnMEMBERTYPECODE As DataColumn
        
        Private columnCURRENTSTATUS As DataColumn
        
        Private columnMEMBERTYPE As DataColumn
        
        Private columnDEPENDENT As DataColumn
        
        Private columnDEPT_DOB As DataColumn
        
        Private columnDEPT_SEX As DataColumn
        
        Private columnRELATION As DataColumn
        
        Friend Sub New()
            MyBase.New("VIEW_MEM_REP_DEPENDENT_ADDRESS")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property SNOColumn As DataColumn
            Get
                Return Me.columnSNO
            End Get
        End Property
        
        Friend ReadOnly Property MEM_SEXColumn As DataColumn
            Get
                Return Me.columnMEM_SEX
            End Get
        End Property
        
        Friend ReadOnly Property MCODEColumn As DataColumn
            Get
                Return Me.columnMCODE
            End Get
        End Property
        
        Friend ReadOnly Property MNAMEColumn As DataColumn
            Get
                Return Me.columnMNAME
            End Get
        End Property
        
        Friend ReadOnly Property SPOUSEColumn As DataColumn
            Get
                Return Me.columnSPOUSE
            End Get
        End Property
        
        Friend ReadOnly Property MEMBERTYPECODEColumn As DataColumn
            Get
                Return Me.columnMEMBERTYPECODE
            End Get
        End Property
        
        Friend ReadOnly Property CURRENTSTATUSColumn As DataColumn
            Get
                Return Me.columnCURRENTSTATUS
            End Get
        End Property
        
        Friend ReadOnly Property MEMBERTYPEColumn As DataColumn
            Get
                Return Me.columnMEMBERTYPE
            End Get
        End Property
        
        Friend ReadOnly Property DEPENDENTColumn As DataColumn
            Get
                Return Me.columnDEPENDENT
            End Get
        End Property
        
        Friend ReadOnly Property DEPT_DOBColumn As DataColumn
            Get
                Return Me.columnDEPT_DOB
            End Get
        End Property
        
        Friend ReadOnly Property DEPT_SEXColumn As DataColumn
            Get
                Return Me.columnDEPT_SEX
            End Get
        End Property
        
        Friend ReadOnly Property RELATIONColumn As DataColumn
            Get
                Return Me.columnRELATION
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VIEW_MEM_REP_DEPENDENT_ADDRESSRow
            Get
                Return CType(Me.Rows(index),VIEW_MEM_REP_DEPENDENT_ADDRESSRow)
            End Get
        End Property
        
        Public Event VIEW_MEM_REP_DEPENDENT_ADDRESSRowChanged As VIEW_MEM_REP_DEPENDENT_ADDRESSRowChangeEventHandler
        
        Public Event VIEW_MEM_REP_DEPENDENT_ADDRESSRowChanging As VIEW_MEM_REP_DEPENDENT_ADDRESSRowChangeEventHandler
        
        Public Event VIEW_MEM_REP_DEPENDENT_ADDRESSRowDeleted As VIEW_MEM_REP_DEPENDENT_ADDRESSRowChangeEventHandler
        
        Public Event VIEW_MEM_REP_DEPENDENT_ADDRESSRowDeleting As VIEW_MEM_REP_DEPENDENT_ADDRESSRowChangeEventHandler
        
        Public Overloads Sub AddVIEW_MEM_REP_DEPENDENT_ADDRESSRow(ByVal row As VIEW_MEM_REP_DEPENDENT_ADDRESSRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVIEW_MEM_REP_DEPENDENT_ADDRESSRow(ByVal SNO As Integer, ByVal MEM_SEX As String, ByVal MCODE As String, ByVal MNAME As String, ByVal SPOUSE As String, ByVal MEMBERTYPECODE As String, ByVal CURRENTSTATUS As String, ByVal MEMBERTYPE As String, ByVal DEPENDENT As String, ByVal DEPT_DOB As Date, ByVal DEPT_SEX As String, ByVal RELATION As String) As VIEW_MEM_REP_DEPENDENT_ADDRESSRow
            Dim rowVIEW_MEM_REP_DEPENDENT_ADDRESSRow As VIEW_MEM_REP_DEPENDENT_ADDRESSRow = CType(Me.NewRow,VIEW_MEM_REP_DEPENDENT_ADDRESSRow)
            rowVIEW_MEM_REP_DEPENDENT_ADDRESSRow.ItemArray = New Object() {SNO, MEM_SEX, MCODE, MNAME, SPOUSE, MEMBERTYPECODE, CURRENTSTATUS, MEMBERTYPE, DEPENDENT, DEPT_DOB, DEPT_SEX, RELATION}
            Me.Rows.Add(rowVIEW_MEM_REP_DEPENDENT_ADDRESSRow)
            Return rowVIEW_MEM_REP_DEPENDENT_ADDRESSRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VIEW_MEM_REP_DEPENDENT_ADDRESSDataTable = CType(MyBase.Clone,VIEW_MEM_REP_DEPENDENT_ADDRESSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VIEW_MEM_REP_DEPENDENT_ADDRESSDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnSNO = Me.Columns("SNO")
            Me.columnMEM_SEX = Me.Columns("MEM_SEX")
            Me.columnMCODE = Me.Columns("MCODE")
            Me.columnMNAME = Me.Columns("MNAME")
            Me.columnSPOUSE = Me.Columns("SPOUSE")
            Me.columnMEMBERTYPECODE = Me.Columns("MEMBERTYPECODE")
            Me.columnCURRENTSTATUS = Me.Columns("CURRENTSTATUS")
            Me.columnMEMBERTYPE = Me.Columns("MEMBERTYPE")
            Me.columnDEPENDENT = Me.Columns("DEPENDENT")
            Me.columnDEPT_DOB = Me.Columns("DEPT_DOB")
            Me.columnDEPT_SEX = Me.Columns("DEPT_SEX")
            Me.columnRELATION = Me.Columns("RELATION")
        End Sub
        
        Private Sub InitClass()
            Me.columnSNO = New DataColumn("SNO", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSNO)
            Me.columnMEM_SEX = New DataColumn("MEM_SEX", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEM_SEX)
            Me.columnMCODE = New DataColumn("MCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMCODE)
            Me.columnMNAME = New DataColumn("MNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMNAME)
            Me.columnSPOUSE = New DataColumn("SPOUSE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSPOUSE)
            Me.columnMEMBERTYPECODE = New DataColumn("MEMBERTYPECODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEMBERTYPECODE)
            Me.columnCURRENTSTATUS = New DataColumn("CURRENTSTATUS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCURRENTSTATUS)
            Me.columnMEMBERTYPE = New DataColumn("MEMBERTYPE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEMBERTYPE)
            Me.columnDEPENDENT = New DataColumn("DEPENDENT", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDEPENDENT)
            Me.columnDEPT_DOB = New DataColumn("DEPT_DOB", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDEPT_DOB)
            Me.columnDEPT_SEX = New DataColumn("DEPT_SEX", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDEPT_SEX)
            Me.columnRELATION = New DataColumn("RELATION", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRELATION)
            Me.columnSNO.ReadOnly = true
            Me.columnMEM_SEX.ReadOnly = true
            Me.columnMCODE.ReadOnly = true
            Me.columnMNAME.ReadOnly = true
            Me.columnSPOUSE.ReadOnly = true
            Me.columnMEMBERTYPECODE.ReadOnly = true
            Me.columnCURRENTSTATUS.ReadOnly = true
            Me.columnMEMBERTYPE.ReadOnly = true
            Me.columnDEPENDENT.ReadOnly = true
            Me.columnDEPT_DOB.ReadOnly = true
            Me.columnDEPT_SEX.ReadOnly = true
            Me.columnRELATION.ReadOnly = true
        End Sub
        
        Public Function NewVIEW_MEM_REP_DEPENDENT_ADDRESSRow() As VIEW_MEM_REP_DEPENDENT_ADDRESSRow
            Return CType(Me.NewRow,VIEW_MEM_REP_DEPENDENT_ADDRESSRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VIEW_MEM_REP_DEPENDENT_ADDRESSRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VIEW_MEM_REP_DEPENDENT_ADDRESSRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VIEW_MEM_REP_DEPENDENT_ADDRESSRowChangedEvent) Is Nothing) Then
                RaiseEvent VIEW_MEM_REP_DEPENDENT_ADDRESSRowChanged(Me, New VIEW_MEM_REP_DEPENDENT_ADDRESSRowChangeEvent(CType(e.Row,VIEW_MEM_REP_DEPENDENT_ADDRESSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VIEW_MEM_REP_DEPENDENT_ADDRESSRowChangingEvent) Is Nothing) Then
                RaiseEvent VIEW_MEM_REP_DEPENDENT_ADDRESSRowChanging(Me, New VIEW_MEM_REP_DEPENDENT_ADDRESSRowChangeEvent(CType(e.Row,VIEW_MEM_REP_DEPENDENT_ADDRESSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VIEW_MEM_REP_DEPENDENT_ADDRESSRowDeletedEvent) Is Nothing) Then
                RaiseEvent VIEW_MEM_REP_DEPENDENT_ADDRESSRowDeleted(Me, New VIEW_MEM_REP_DEPENDENT_ADDRESSRowChangeEvent(CType(e.Row,VIEW_MEM_REP_DEPENDENT_ADDRESSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VIEW_MEM_REP_DEPENDENT_ADDRESSRowDeletingEvent) Is Nothing) Then
                RaiseEvent VIEW_MEM_REP_DEPENDENT_ADDRESSRowDeleting(Me, New VIEW_MEM_REP_DEPENDENT_ADDRESSRowChangeEvent(CType(e.Row,VIEW_MEM_REP_DEPENDENT_ADDRESSRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVIEW_MEM_REP_DEPENDENT_ADDRESSRow(ByVal row As VIEW_MEM_REP_DEPENDENT_ADDRESSRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_MEM_REP_DEPENDENT_ADDRESSRow
        Inherits DataRow
        
        Private tableVIEW_MEM_REP_DEPENDENT_ADDRESS As VIEW_MEM_REP_DEPENDENT_ADDRESSDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVIEW_MEM_REP_DEPENDENT_ADDRESS = CType(Me.Table,VIEW_MEM_REP_DEPENDENT_ADDRESSDataTable)
        End Sub
        
        Public Property SNO As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_DEPENDENT_ADDRESS.SNOColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_DEPENDENT_ADDRESS.SNOColumn) = value
            End Set
        End Property
        
        Public Property MEM_SEX As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_DEPENDENT_ADDRESS.MEM_SEXColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_DEPENDENT_ADDRESS.MEM_SEXColumn) = value
            End Set
        End Property
        
        Public Property MCODE As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_DEPENDENT_ADDRESS.MCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_DEPENDENT_ADDRESS.MCODEColumn) = value
            End Set
        End Property
        
        Public Property MNAME As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_DEPENDENT_ADDRESS.MNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_DEPENDENT_ADDRESS.MNAMEColumn) = value
            End Set
        End Property
        
        Public Property SPOUSE As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_DEPENDENT_ADDRESS.SPOUSEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_DEPENDENT_ADDRESS.SPOUSEColumn) = value
            End Set
        End Property
        
        Public Property MEMBERTYPECODE As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_DEPENDENT_ADDRESS.MEMBERTYPECODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_DEPENDENT_ADDRESS.MEMBERTYPECODEColumn) = value
            End Set
        End Property
        
        Public Property CURRENTSTATUS As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_DEPENDENT_ADDRESS.CURRENTSTATUSColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_DEPENDENT_ADDRESS.CURRENTSTATUSColumn) = value
            End Set
        End Property
        
        Public Property MEMBERTYPE As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_DEPENDENT_ADDRESS.MEMBERTYPEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_DEPENDENT_ADDRESS.MEMBERTYPEColumn) = value
            End Set
        End Property
        
        Public Property DEPENDENT As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_DEPENDENT_ADDRESS.DEPENDENTColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_DEPENDENT_ADDRESS.DEPENDENTColumn) = value
            End Set
        End Property
        
        Public Property DEPT_DOB As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_DEPENDENT_ADDRESS.DEPT_DOBColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_DEPENDENT_ADDRESS.DEPT_DOBColumn) = value
            End Set
        End Property
        
        Public Property DEPT_SEX As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_DEPENDENT_ADDRESS.DEPT_SEXColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_DEPENDENT_ADDRESS.DEPT_SEXColumn) = value
            End Set
        End Property
        
        Public Property RELATION As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_DEPENDENT_ADDRESS.RELATIONColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_DEPENDENT_ADDRESS.RELATIONColumn) = value
            End Set
        End Property
        
        Public Function IsSNONull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_DEPENDENT_ADDRESS.SNOColumn)
        End Function
        
        Public Sub SetSNONull()
            Me(Me.tableVIEW_MEM_REP_DEPENDENT_ADDRESS.SNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMEM_SEXNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_DEPENDENT_ADDRESS.MEM_SEXColumn)
        End Function
        
        Public Sub SetMEM_SEXNull()
            Me(Me.tableVIEW_MEM_REP_DEPENDENT_ADDRESS.MEM_SEXColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMCODENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_DEPENDENT_ADDRESS.MCODEColumn)
        End Function
        
        Public Sub SetMCODENull()
            Me(Me.tableVIEW_MEM_REP_DEPENDENT_ADDRESS.MCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMNAMENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_DEPENDENT_ADDRESS.MNAMEColumn)
        End Function
        
        Public Sub SetMNAMENull()
            Me(Me.tableVIEW_MEM_REP_DEPENDENT_ADDRESS.MNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSPOUSENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_DEPENDENT_ADDRESS.SPOUSEColumn)
        End Function
        
        Public Sub SetSPOUSENull()
            Me(Me.tableVIEW_MEM_REP_DEPENDENT_ADDRESS.SPOUSEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMEMBERTYPECODENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_DEPENDENT_ADDRESS.MEMBERTYPECODEColumn)
        End Function
        
        Public Sub SetMEMBERTYPECODENull()
            Me(Me.tableVIEW_MEM_REP_DEPENDENT_ADDRESS.MEMBERTYPECODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCURRENTSTATUSNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_DEPENDENT_ADDRESS.CURRENTSTATUSColumn)
        End Function
        
        Public Sub SetCURRENTSTATUSNull()
            Me(Me.tableVIEW_MEM_REP_DEPENDENT_ADDRESS.CURRENTSTATUSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMEMBERTYPENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_DEPENDENT_ADDRESS.MEMBERTYPEColumn)
        End Function
        
        Public Sub SetMEMBERTYPENull()
            Me(Me.tableVIEW_MEM_REP_DEPENDENT_ADDRESS.MEMBERTYPEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDEPENDENTNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_DEPENDENT_ADDRESS.DEPENDENTColumn)
        End Function
        
        Public Sub SetDEPENDENTNull()
            Me(Me.tableVIEW_MEM_REP_DEPENDENT_ADDRESS.DEPENDENTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDEPT_DOBNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_DEPENDENT_ADDRESS.DEPT_DOBColumn)
        End Function
        
        Public Sub SetDEPT_DOBNull()
            Me(Me.tableVIEW_MEM_REP_DEPENDENT_ADDRESS.DEPT_DOBColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDEPT_SEXNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_DEPENDENT_ADDRESS.DEPT_SEXColumn)
        End Function
        
        Public Sub SetDEPT_SEXNull()
            Me(Me.tableVIEW_MEM_REP_DEPENDENT_ADDRESS.DEPT_SEXColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRELATIONNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_DEPENDENT_ADDRESS.RELATIONColumn)
        End Function
        
        Public Sub SetRELATIONNull()
            Me(Me.tableVIEW_MEM_REP_DEPENDENT_ADDRESS.RELATIONColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_MEM_REP_DEPENDENT_ADDRESSRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VIEW_MEM_REP_DEPENDENT_ADDRESSRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VIEW_MEM_REP_DEPENDENT_ADDRESSRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VIEW_MEM_REP_DEPENDENT_ADDRESSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_MEM_REP_PROPOSER_SECONDERDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSNO As DataColumn
        
        Private columnMEM_NAME As DataColumn
        
        Private columnMEM_DOB As DataColumn
        
        Private columnMEM_SEX As DataColumn
        
        Private columnMCODE As DataColumn
        
        Private columnMNAME As DataColumn
        
        Private columnSPOUSE As DataColumn
        
        Private columnMEMBERTYPECODE As DataColumn
        
        Private columnCURRENTSTATUS As DataColumn
        
        Private columnMEMBERTYPE As DataColumn
        
        Private columnEMAILID As DataColumn
        
        Private columnPHONENO As DataColumn
        
        Private columnMOBILNO As DataColumn
        
        Private columnPROPOSERCODE As DataColumn
        
        Private columnPROPOSERNAME As DataColumn
        
        Private columnSECONDERCODE As DataColumn
        
        Private columnSECONDERNAME As DataColumn
        
        Friend Sub New()
            MyBase.New("VIEW_MEM_REP_PROPOSER_SECONDER")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property SNOColumn As DataColumn
            Get
                Return Me.columnSNO
            End Get
        End Property
        
        Friend ReadOnly Property MEM_NAMEColumn As DataColumn
            Get
                Return Me.columnMEM_NAME
            End Get
        End Property
        
        Friend ReadOnly Property MEM_DOBColumn As DataColumn
            Get
                Return Me.columnMEM_DOB
            End Get
        End Property
        
        Friend ReadOnly Property MEM_SEXColumn As DataColumn
            Get
                Return Me.columnMEM_SEX
            End Get
        End Property
        
        Friend ReadOnly Property MCODEColumn As DataColumn
            Get
                Return Me.columnMCODE
            End Get
        End Property
        
        Friend ReadOnly Property MNAMEColumn As DataColumn
            Get
                Return Me.columnMNAME
            End Get
        End Property
        
        Friend ReadOnly Property SPOUSEColumn As DataColumn
            Get
                Return Me.columnSPOUSE
            End Get
        End Property
        
        Friend ReadOnly Property MEMBERTYPECODEColumn As DataColumn
            Get
                Return Me.columnMEMBERTYPECODE
            End Get
        End Property
        
        Friend ReadOnly Property CURRENTSTATUSColumn As DataColumn
            Get
                Return Me.columnCURRENTSTATUS
            End Get
        End Property
        
        Friend ReadOnly Property MEMBERTYPEColumn As DataColumn
            Get
                Return Me.columnMEMBERTYPE
            End Get
        End Property
        
        Friend ReadOnly Property EMAILIDColumn As DataColumn
            Get
                Return Me.columnEMAILID
            End Get
        End Property
        
        Friend ReadOnly Property PHONENOColumn As DataColumn
            Get
                Return Me.columnPHONENO
            End Get
        End Property
        
        Friend ReadOnly Property MOBILNOColumn As DataColumn
            Get
                Return Me.columnMOBILNO
            End Get
        End Property
        
        Friend ReadOnly Property PROPOSERCODEColumn As DataColumn
            Get
                Return Me.columnPROPOSERCODE
            End Get
        End Property
        
        Friend ReadOnly Property PROPOSERNAMEColumn As DataColumn
            Get
                Return Me.columnPROPOSERNAME
            End Get
        End Property
        
        Friend ReadOnly Property SECONDERCODEColumn As DataColumn
            Get
                Return Me.columnSECONDERCODE
            End Get
        End Property
        
        Friend ReadOnly Property SECONDERNAMEColumn As DataColumn
            Get
                Return Me.columnSECONDERNAME
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VIEW_MEM_REP_PROPOSER_SECONDERRow
            Get
                Return CType(Me.Rows(index),VIEW_MEM_REP_PROPOSER_SECONDERRow)
            End Get
        End Property
        
        Public Event VIEW_MEM_REP_PROPOSER_SECONDERRowChanged As VIEW_MEM_REP_PROPOSER_SECONDERRowChangeEventHandler
        
        Public Event VIEW_MEM_REP_PROPOSER_SECONDERRowChanging As VIEW_MEM_REP_PROPOSER_SECONDERRowChangeEventHandler
        
        Public Event VIEW_MEM_REP_PROPOSER_SECONDERRowDeleted As VIEW_MEM_REP_PROPOSER_SECONDERRowChangeEventHandler
        
        Public Event VIEW_MEM_REP_PROPOSER_SECONDERRowDeleting As VIEW_MEM_REP_PROPOSER_SECONDERRowChangeEventHandler
        
        Public Overloads Sub AddVIEW_MEM_REP_PROPOSER_SECONDERRow(ByVal row As VIEW_MEM_REP_PROPOSER_SECONDERRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVIEW_MEM_REP_PROPOSER_SECONDERRow( _
                    ByVal SNO As Integer,  _
                    ByVal MEM_NAME As String,  _
                    ByVal MEM_DOB As Date,  _
                    ByVal MEM_SEX As String,  _
                    ByVal MCODE As String,  _
                    ByVal MNAME As String,  _
                    ByVal SPOUSE As String,  _
                    ByVal MEMBERTYPECODE As String,  _
                    ByVal CURRENTSTATUS As String,  _
                    ByVal MEMBERTYPE As String,  _
                    ByVal EMAILID As String,  _
                    ByVal PHONENO As String,  _
                    ByVal MOBILNO As String,  _
                    ByVal PROPOSERCODE As String,  _
                    ByVal PROPOSERNAME As String,  _
                    ByVal SECONDERCODE As String,  _
                    ByVal SECONDERNAME As String) As VIEW_MEM_REP_PROPOSER_SECONDERRow
            Dim rowVIEW_MEM_REP_PROPOSER_SECONDERRow As VIEW_MEM_REP_PROPOSER_SECONDERRow = CType(Me.NewRow,VIEW_MEM_REP_PROPOSER_SECONDERRow)
            rowVIEW_MEM_REP_PROPOSER_SECONDERRow.ItemArray = New Object() {SNO, MEM_NAME, MEM_DOB, MEM_SEX, MCODE, MNAME, SPOUSE, MEMBERTYPECODE, CURRENTSTATUS, MEMBERTYPE, EMAILID, PHONENO, MOBILNO, PROPOSERCODE, PROPOSERNAME, SECONDERCODE, SECONDERNAME}
            Me.Rows.Add(rowVIEW_MEM_REP_PROPOSER_SECONDERRow)
            Return rowVIEW_MEM_REP_PROPOSER_SECONDERRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VIEW_MEM_REP_PROPOSER_SECONDERDataTable = CType(MyBase.Clone,VIEW_MEM_REP_PROPOSER_SECONDERDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VIEW_MEM_REP_PROPOSER_SECONDERDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnSNO = Me.Columns("SNO")
            Me.columnMEM_NAME = Me.Columns("MEM_NAME")
            Me.columnMEM_DOB = Me.Columns("MEM_DOB")
            Me.columnMEM_SEX = Me.Columns("MEM_SEX")
            Me.columnMCODE = Me.Columns("MCODE")
            Me.columnMNAME = Me.Columns("MNAME")
            Me.columnSPOUSE = Me.Columns("SPOUSE")
            Me.columnMEMBERTYPECODE = Me.Columns("MEMBERTYPECODE")
            Me.columnCURRENTSTATUS = Me.Columns("CURRENTSTATUS")
            Me.columnMEMBERTYPE = Me.Columns("MEMBERTYPE")
            Me.columnEMAILID = Me.Columns("EMAILID")
            Me.columnPHONENO = Me.Columns("PHONENO")
            Me.columnMOBILNO = Me.Columns("MOBILNO")
            Me.columnPROPOSERCODE = Me.Columns("PROPOSERCODE")
            Me.columnPROPOSERNAME = Me.Columns("PROPOSERNAME")
            Me.columnSECONDERCODE = Me.Columns("SECONDERCODE")
            Me.columnSECONDERNAME = Me.Columns("SECONDERNAME")
        End Sub
        
        Private Sub InitClass()
            Me.columnSNO = New DataColumn("SNO", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSNO)
            Me.columnMEM_NAME = New DataColumn("MEM_NAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEM_NAME)
            Me.columnMEM_DOB = New DataColumn("MEM_DOB", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEM_DOB)
            Me.columnMEM_SEX = New DataColumn("MEM_SEX", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEM_SEX)
            Me.columnMCODE = New DataColumn("MCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMCODE)
            Me.columnMNAME = New DataColumn("MNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMNAME)
            Me.columnSPOUSE = New DataColumn("SPOUSE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSPOUSE)
            Me.columnMEMBERTYPECODE = New DataColumn("MEMBERTYPECODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEMBERTYPECODE)
            Me.columnCURRENTSTATUS = New DataColumn("CURRENTSTATUS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCURRENTSTATUS)
            Me.columnMEMBERTYPE = New DataColumn("MEMBERTYPE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEMBERTYPE)
            Me.columnEMAILID = New DataColumn("EMAILID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEMAILID)
            Me.columnPHONENO = New DataColumn("PHONENO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPHONENO)
            Me.columnMOBILNO = New DataColumn("MOBILNO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMOBILNO)
            Me.columnPROPOSERCODE = New DataColumn("PROPOSERCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPROPOSERCODE)
            Me.columnPROPOSERNAME = New DataColumn("PROPOSERNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPROPOSERNAME)
            Me.columnSECONDERCODE = New DataColumn("SECONDERCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSECONDERCODE)
            Me.columnSECONDERNAME = New DataColumn("SECONDERNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSECONDERNAME)
            Me.columnSNO.ReadOnly = true
            Me.columnMEM_NAME.ReadOnly = true
            Me.columnMEM_DOB.ReadOnly = true
            Me.columnMEM_SEX.ReadOnly = true
            Me.columnMCODE.ReadOnly = true
            Me.columnMNAME.ReadOnly = true
            Me.columnSPOUSE.ReadOnly = true
            Me.columnMEMBERTYPECODE.ReadOnly = true
            Me.columnCURRENTSTATUS.ReadOnly = true
            Me.columnMEMBERTYPE.ReadOnly = true
            Me.columnEMAILID.ReadOnly = true
            Me.columnPHONENO.ReadOnly = true
            Me.columnMOBILNO.ReadOnly = true
            Me.columnPROPOSERCODE.ReadOnly = true
            Me.columnPROPOSERNAME.ReadOnly = true
            Me.columnSECONDERCODE.ReadOnly = true
            Me.columnSECONDERNAME.ReadOnly = true
        End Sub
        
        Public Function NewVIEW_MEM_REP_PROPOSER_SECONDERRow() As VIEW_MEM_REP_PROPOSER_SECONDERRow
            Return CType(Me.NewRow,VIEW_MEM_REP_PROPOSER_SECONDERRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VIEW_MEM_REP_PROPOSER_SECONDERRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VIEW_MEM_REP_PROPOSER_SECONDERRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VIEW_MEM_REP_PROPOSER_SECONDERRowChangedEvent) Is Nothing) Then
                RaiseEvent VIEW_MEM_REP_PROPOSER_SECONDERRowChanged(Me, New VIEW_MEM_REP_PROPOSER_SECONDERRowChangeEvent(CType(e.Row,VIEW_MEM_REP_PROPOSER_SECONDERRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VIEW_MEM_REP_PROPOSER_SECONDERRowChangingEvent) Is Nothing) Then
                RaiseEvent VIEW_MEM_REP_PROPOSER_SECONDERRowChanging(Me, New VIEW_MEM_REP_PROPOSER_SECONDERRowChangeEvent(CType(e.Row,VIEW_MEM_REP_PROPOSER_SECONDERRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VIEW_MEM_REP_PROPOSER_SECONDERRowDeletedEvent) Is Nothing) Then
                RaiseEvent VIEW_MEM_REP_PROPOSER_SECONDERRowDeleted(Me, New VIEW_MEM_REP_PROPOSER_SECONDERRowChangeEvent(CType(e.Row,VIEW_MEM_REP_PROPOSER_SECONDERRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VIEW_MEM_REP_PROPOSER_SECONDERRowDeletingEvent) Is Nothing) Then
                RaiseEvent VIEW_MEM_REP_PROPOSER_SECONDERRowDeleting(Me, New VIEW_MEM_REP_PROPOSER_SECONDERRowChangeEvent(CType(e.Row,VIEW_MEM_REP_PROPOSER_SECONDERRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVIEW_MEM_REP_PROPOSER_SECONDERRow(ByVal row As VIEW_MEM_REP_PROPOSER_SECONDERRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_MEM_REP_PROPOSER_SECONDERRow
        Inherits DataRow
        
        Private tableVIEW_MEM_REP_PROPOSER_SECONDER As VIEW_MEM_REP_PROPOSER_SECONDERDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVIEW_MEM_REP_PROPOSER_SECONDER = CType(Me.Table,VIEW_MEM_REP_PROPOSER_SECONDERDataTable)
        End Sub
        
        Public Property SNO As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_PROPOSER_SECONDER.SNOColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_PROPOSER_SECONDER.SNOColumn) = value
            End Set
        End Property
        
        Public Property MEM_NAME As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_PROPOSER_SECONDER.MEM_NAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_PROPOSER_SECONDER.MEM_NAMEColumn) = value
            End Set
        End Property
        
        Public Property MEM_DOB As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_PROPOSER_SECONDER.MEM_DOBColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_PROPOSER_SECONDER.MEM_DOBColumn) = value
            End Set
        End Property
        
        Public Property MEM_SEX As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_PROPOSER_SECONDER.MEM_SEXColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_PROPOSER_SECONDER.MEM_SEXColumn) = value
            End Set
        End Property
        
        Public Property MCODE As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_PROPOSER_SECONDER.MCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_PROPOSER_SECONDER.MCODEColumn) = value
            End Set
        End Property
        
        Public Property MNAME As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_PROPOSER_SECONDER.MNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_PROPOSER_SECONDER.MNAMEColumn) = value
            End Set
        End Property
        
        Public Property SPOUSE As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_PROPOSER_SECONDER.SPOUSEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_PROPOSER_SECONDER.SPOUSEColumn) = value
            End Set
        End Property
        
        Public Property MEMBERTYPECODE As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_PROPOSER_SECONDER.MEMBERTYPECODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_PROPOSER_SECONDER.MEMBERTYPECODEColumn) = value
            End Set
        End Property
        
        Public Property CURRENTSTATUS As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_PROPOSER_SECONDER.CURRENTSTATUSColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_PROPOSER_SECONDER.CURRENTSTATUSColumn) = value
            End Set
        End Property
        
        Public Property MEMBERTYPE As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_PROPOSER_SECONDER.MEMBERTYPEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_PROPOSER_SECONDER.MEMBERTYPEColumn) = value
            End Set
        End Property
        
        Public Property EMAILID As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_PROPOSER_SECONDER.EMAILIDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_PROPOSER_SECONDER.EMAILIDColumn) = value
            End Set
        End Property
        
        Public Property PHONENO As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_PROPOSER_SECONDER.PHONENOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_PROPOSER_SECONDER.PHONENOColumn) = value
            End Set
        End Property
        
        Public Property MOBILNO As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_PROPOSER_SECONDER.MOBILNOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_PROPOSER_SECONDER.MOBILNOColumn) = value
            End Set
        End Property
        
        Public Property PROPOSERCODE As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_PROPOSER_SECONDER.PROPOSERCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_PROPOSER_SECONDER.PROPOSERCODEColumn) = value
            End Set
        End Property
        
        Public Property PROPOSERNAME As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_PROPOSER_SECONDER.PROPOSERNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_PROPOSER_SECONDER.PROPOSERNAMEColumn) = value
            End Set
        End Property
        
        Public Property SECONDERCODE As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_PROPOSER_SECONDER.SECONDERCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_PROPOSER_SECONDER.SECONDERCODEColumn) = value
            End Set
        End Property
        
        Public Property SECONDERNAME As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_PROPOSER_SECONDER.SECONDERNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_PROPOSER_SECONDER.SECONDERNAMEColumn) = value
            End Set
        End Property
        
        Public Function IsSNONull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_PROPOSER_SECONDER.SNOColumn)
        End Function
        
        Public Sub SetSNONull()
            Me(Me.tableVIEW_MEM_REP_PROPOSER_SECONDER.SNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMEM_NAMENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_PROPOSER_SECONDER.MEM_NAMEColumn)
        End Function
        
        Public Sub SetMEM_NAMENull()
            Me(Me.tableVIEW_MEM_REP_PROPOSER_SECONDER.MEM_NAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMEM_DOBNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_PROPOSER_SECONDER.MEM_DOBColumn)
        End Function
        
        Public Sub SetMEM_DOBNull()
            Me(Me.tableVIEW_MEM_REP_PROPOSER_SECONDER.MEM_DOBColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMEM_SEXNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_PROPOSER_SECONDER.MEM_SEXColumn)
        End Function
        
        Public Sub SetMEM_SEXNull()
            Me(Me.tableVIEW_MEM_REP_PROPOSER_SECONDER.MEM_SEXColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMCODENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_PROPOSER_SECONDER.MCODEColumn)
        End Function
        
        Public Sub SetMCODENull()
            Me(Me.tableVIEW_MEM_REP_PROPOSER_SECONDER.MCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMNAMENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_PROPOSER_SECONDER.MNAMEColumn)
        End Function
        
        Public Sub SetMNAMENull()
            Me(Me.tableVIEW_MEM_REP_PROPOSER_SECONDER.MNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSPOUSENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_PROPOSER_SECONDER.SPOUSEColumn)
        End Function
        
        Public Sub SetSPOUSENull()
            Me(Me.tableVIEW_MEM_REP_PROPOSER_SECONDER.SPOUSEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMEMBERTYPECODENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_PROPOSER_SECONDER.MEMBERTYPECODEColumn)
        End Function
        
        Public Sub SetMEMBERTYPECODENull()
            Me(Me.tableVIEW_MEM_REP_PROPOSER_SECONDER.MEMBERTYPECODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCURRENTSTATUSNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_PROPOSER_SECONDER.CURRENTSTATUSColumn)
        End Function
        
        Public Sub SetCURRENTSTATUSNull()
            Me(Me.tableVIEW_MEM_REP_PROPOSER_SECONDER.CURRENTSTATUSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMEMBERTYPENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_PROPOSER_SECONDER.MEMBERTYPEColumn)
        End Function
        
        Public Sub SetMEMBERTYPENull()
            Me(Me.tableVIEW_MEM_REP_PROPOSER_SECONDER.MEMBERTYPEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEMAILIDNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_PROPOSER_SECONDER.EMAILIDColumn)
        End Function
        
        Public Sub SetEMAILIDNull()
            Me(Me.tableVIEW_MEM_REP_PROPOSER_SECONDER.EMAILIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPHONENONull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_PROPOSER_SECONDER.PHONENOColumn)
        End Function
        
        Public Sub SetPHONENONull()
            Me(Me.tableVIEW_MEM_REP_PROPOSER_SECONDER.PHONENOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMOBILNONull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_PROPOSER_SECONDER.MOBILNOColumn)
        End Function
        
        Public Sub SetMOBILNONull()
            Me(Me.tableVIEW_MEM_REP_PROPOSER_SECONDER.MOBILNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPROPOSERCODENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_PROPOSER_SECONDER.PROPOSERCODEColumn)
        End Function
        
        Public Sub SetPROPOSERCODENull()
            Me(Me.tableVIEW_MEM_REP_PROPOSER_SECONDER.PROPOSERCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPROPOSERNAMENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_PROPOSER_SECONDER.PROPOSERNAMEColumn)
        End Function
        
        Public Sub SetPROPOSERNAMENull()
            Me(Me.tableVIEW_MEM_REP_PROPOSER_SECONDER.PROPOSERNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSECONDERCODENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_PROPOSER_SECONDER.SECONDERCODEColumn)
        End Function
        
        Public Sub SetSECONDERCODENull()
            Me(Me.tableVIEW_MEM_REP_PROPOSER_SECONDER.SECONDERCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSECONDERNAMENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_PROPOSER_SECONDER.SECONDERNAMEColumn)
        End Function
        
        Public Sub SetSECONDERNAMENull()
            Me(Me.tableVIEW_MEM_REP_PROPOSER_SECONDER.SECONDERNAMEColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_MEM_REP_PROPOSER_SECONDERRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VIEW_MEM_REP_PROPOSER_SECONDERRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VIEW_MEM_REP_PROPOSER_SECONDERRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VIEW_MEM_REP_PROPOSER_SECONDERRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_MEM_REP_QUALIFICATIONDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSNO As DataColumn
        
        Private columnMEM_NAME As DataColumn
        
        Private columnMEM_DOB As DataColumn
        
        Private columnMEM_SEX As DataColumn
        
        Private columnMCODE As DataColumn
        
        Private columnMNAME As DataColumn
        
        Private columnSPOUSE As DataColumn
        
        Private columnMEMBERTYPECODE As DataColumn
        
        Private columnCURRENTSTATUS As DataColumn
        
        Private columnMEMBERTYPE As DataColumn
        
        Private columnEMAILID As DataColumn
        
        Private columnPHONENO As DataColumn
        
        Private columnMOBILNO As DataColumn
        
        Private columnUNIVERSITY As DataColumn
        
        Private columnQUALIFICATION As DataColumn
        
        Private columnINSTITUTE As DataColumn
        
        Private columnPASSOUT As DataColumn
        
        Friend Sub New()
            MyBase.New("VIEW_MEM_REP_QUALIFICATION")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property SNOColumn As DataColumn
            Get
                Return Me.columnSNO
            End Get
        End Property
        
        Friend ReadOnly Property MEM_NAMEColumn As DataColumn
            Get
                Return Me.columnMEM_NAME
            End Get
        End Property
        
        Friend ReadOnly Property MEM_DOBColumn As DataColumn
            Get
                Return Me.columnMEM_DOB
            End Get
        End Property
        
        Friend ReadOnly Property MEM_SEXColumn As DataColumn
            Get
                Return Me.columnMEM_SEX
            End Get
        End Property
        
        Friend ReadOnly Property MCODEColumn As DataColumn
            Get
                Return Me.columnMCODE
            End Get
        End Property
        
        Friend ReadOnly Property MNAMEColumn As DataColumn
            Get
                Return Me.columnMNAME
            End Get
        End Property
        
        Friend ReadOnly Property SPOUSEColumn As DataColumn
            Get
                Return Me.columnSPOUSE
            End Get
        End Property
        
        Friend ReadOnly Property MEMBERTYPECODEColumn As DataColumn
            Get
                Return Me.columnMEMBERTYPECODE
            End Get
        End Property
        
        Friend ReadOnly Property CURRENTSTATUSColumn As DataColumn
            Get
                Return Me.columnCURRENTSTATUS
            End Get
        End Property
        
        Friend ReadOnly Property MEMBERTYPEColumn As DataColumn
            Get
                Return Me.columnMEMBERTYPE
            End Get
        End Property
        
        Friend ReadOnly Property EMAILIDColumn As DataColumn
            Get
                Return Me.columnEMAILID
            End Get
        End Property
        
        Friend ReadOnly Property PHONENOColumn As DataColumn
            Get
                Return Me.columnPHONENO
            End Get
        End Property
        
        Friend ReadOnly Property MOBILNOColumn As DataColumn
            Get
                Return Me.columnMOBILNO
            End Get
        End Property
        
        Friend ReadOnly Property UNIVERSITYColumn As DataColumn
            Get
                Return Me.columnUNIVERSITY
            End Get
        End Property
        
        Friend ReadOnly Property QUALIFICATIONColumn As DataColumn
            Get
                Return Me.columnQUALIFICATION
            End Get
        End Property
        
        Friend ReadOnly Property INSTITUTEColumn As DataColumn
            Get
                Return Me.columnINSTITUTE
            End Get
        End Property
        
        Friend ReadOnly Property PASSOUTColumn As DataColumn
            Get
                Return Me.columnPASSOUT
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VIEW_MEM_REP_QUALIFICATIONRow
            Get
                Return CType(Me.Rows(index),VIEW_MEM_REP_QUALIFICATIONRow)
            End Get
        End Property
        
        Public Event VIEW_MEM_REP_QUALIFICATIONRowChanged As VIEW_MEM_REP_QUALIFICATIONRowChangeEventHandler
        
        Public Event VIEW_MEM_REP_QUALIFICATIONRowChanging As VIEW_MEM_REP_QUALIFICATIONRowChangeEventHandler
        
        Public Event VIEW_MEM_REP_QUALIFICATIONRowDeleted As VIEW_MEM_REP_QUALIFICATIONRowChangeEventHandler
        
        Public Event VIEW_MEM_REP_QUALIFICATIONRowDeleting As VIEW_MEM_REP_QUALIFICATIONRowChangeEventHandler
        
        Public Overloads Sub AddVIEW_MEM_REP_QUALIFICATIONRow(ByVal row As VIEW_MEM_REP_QUALIFICATIONRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVIEW_MEM_REP_QUALIFICATIONRow( _
                    ByVal SNO As Integer,  _
                    ByVal MEM_NAME As String,  _
                    ByVal MEM_DOB As Date,  _
                    ByVal MEM_SEX As String,  _
                    ByVal MCODE As String,  _
                    ByVal MNAME As String,  _
                    ByVal SPOUSE As String,  _
                    ByVal MEMBERTYPECODE As String,  _
                    ByVal CURRENTSTATUS As String,  _
                    ByVal MEMBERTYPE As String,  _
                    ByVal EMAILID As String,  _
                    ByVal PHONENO As String,  _
                    ByVal MOBILNO As String,  _
                    ByVal UNIVERSITY As String,  _
                    ByVal QUALIFICATION As String,  _
                    ByVal INSTITUTE As String,  _
                    ByVal PASSOUT As String) As VIEW_MEM_REP_QUALIFICATIONRow
            Dim rowVIEW_MEM_REP_QUALIFICATIONRow As VIEW_MEM_REP_QUALIFICATIONRow = CType(Me.NewRow,VIEW_MEM_REP_QUALIFICATIONRow)
            rowVIEW_MEM_REP_QUALIFICATIONRow.ItemArray = New Object() {SNO, MEM_NAME, MEM_DOB, MEM_SEX, MCODE, MNAME, SPOUSE, MEMBERTYPECODE, CURRENTSTATUS, MEMBERTYPE, EMAILID, PHONENO, MOBILNO, UNIVERSITY, QUALIFICATION, INSTITUTE, PASSOUT}
            Me.Rows.Add(rowVIEW_MEM_REP_QUALIFICATIONRow)
            Return rowVIEW_MEM_REP_QUALIFICATIONRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VIEW_MEM_REP_QUALIFICATIONDataTable = CType(MyBase.Clone,VIEW_MEM_REP_QUALIFICATIONDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VIEW_MEM_REP_QUALIFICATIONDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnSNO = Me.Columns("SNO")
            Me.columnMEM_NAME = Me.Columns("MEM_NAME")
            Me.columnMEM_DOB = Me.Columns("MEM_DOB")
            Me.columnMEM_SEX = Me.Columns("MEM_SEX")
            Me.columnMCODE = Me.Columns("MCODE")
            Me.columnMNAME = Me.Columns("MNAME")
            Me.columnSPOUSE = Me.Columns("SPOUSE")
            Me.columnMEMBERTYPECODE = Me.Columns("MEMBERTYPECODE")
            Me.columnCURRENTSTATUS = Me.Columns("CURRENTSTATUS")
            Me.columnMEMBERTYPE = Me.Columns("MEMBERTYPE")
            Me.columnEMAILID = Me.Columns("EMAILID")
            Me.columnPHONENO = Me.Columns("PHONENO")
            Me.columnMOBILNO = Me.Columns("MOBILNO")
            Me.columnUNIVERSITY = Me.Columns("UNIVERSITY")
            Me.columnQUALIFICATION = Me.Columns("QUALIFICATION")
            Me.columnINSTITUTE = Me.Columns("INSTITUTE")
            Me.columnPASSOUT = Me.Columns("PASSOUT")
        End Sub
        
        Private Sub InitClass()
            Me.columnSNO = New DataColumn("SNO", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSNO)
            Me.columnMEM_NAME = New DataColumn("MEM_NAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEM_NAME)
            Me.columnMEM_DOB = New DataColumn("MEM_DOB", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEM_DOB)
            Me.columnMEM_SEX = New DataColumn("MEM_SEX", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEM_SEX)
            Me.columnMCODE = New DataColumn("MCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMCODE)
            Me.columnMNAME = New DataColumn("MNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMNAME)
            Me.columnSPOUSE = New DataColumn("SPOUSE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSPOUSE)
            Me.columnMEMBERTYPECODE = New DataColumn("MEMBERTYPECODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEMBERTYPECODE)
            Me.columnCURRENTSTATUS = New DataColumn("CURRENTSTATUS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCURRENTSTATUS)
            Me.columnMEMBERTYPE = New DataColumn("MEMBERTYPE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEMBERTYPE)
            Me.columnEMAILID = New DataColumn("EMAILID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEMAILID)
            Me.columnPHONENO = New DataColumn("PHONENO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPHONENO)
            Me.columnMOBILNO = New DataColumn("MOBILNO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMOBILNO)
            Me.columnUNIVERSITY = New DataColumn("UNIVERSITY", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUNIVERSITY)
            Me.columnQUALIFICATION = New DataColumn("QUALIFICATION", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQUALIFICATION)
            Me.columnINSTITUTE = New DataColumn("INSTITUTE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnINSTITUTE)
            Me.columnPASSOUT = New DataColumn("PASSOUT", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPASSOUT)
            Me.columnSNO.ReadOnly = true
            Me.columnMEM_NAME.ReadOnly = true
            Me.columnMEM_DOB.ReadOnly = true
            Me.columnMEM_SEX.ReadOnly = true
            Me.columnMCODE.ReadOnly = true
            Me.columnMNAME.ReadOnly = true
            Me.columnSPOUSE.ReadOnly = true
            Me.columnMEMBERTYPECODE.ReadOnly = true
            Me.columnCURRENTSTATUS.ReadOnly = true
            Me.columnMEMBERTYPE.ReadOnly = true
            Me.columnEMAILID.ReadOnly = true
            Me.columnPHONENO.ReadOnly = true
            Me.columnMOBILNO.ReadOnly = true
            Me.columnUNIVERSITY.ReadOnly = true
            Me.columnQUALIFICATION.ReadOnly = true
            Me.columnINSTITUTE.ReadOnly = true
            Me.columnPASSOUT.ReadOnly = true
        End Sub
        
        Public Function NewVIEW_MEM_REP_QUALIFICATIONRow() As VIEW_MEM_REP_QUALIFICATIONRow
            Return CType(Me.NewRow,VIEW_MEM_REP_QUALIFICATIONRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VIEW_MEM_REP_QUALIFICATIONRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VIEW_MEM_REP_QUALIFICATIONRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VIEW_MEM_REP_QUALIFICATIONRowChangedEvent) Is Nothing) Then
                RaiseEvent VIEW_MEM_REP_QUALIFICATIONRowChanged(Me, New VIEW_MEM_REP_QUALIFICATIONRowChangeEvent(CType(e.Row,VIEW_MEM_REP_QUALIFICATIONRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VIEW_MEM_REP_QUALIFICATIONRowChangingEvent) Is Nothing) Then
                RaiseEvent VIEW_MEM_REP_QUALIFICATIONRowChanging(Me, New VIEW_MEM_REP_QUALIFICATIONRowChangeEvent(CType(e.Row,VIEW_MEM_REP_QUALIFICATIONRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VIEW_MEM_REP_QUALIFICATIONRowDeletedEvent) Is Nothing) Then
                RaiseEvent VIEW_MEM_REP_QUALIFICATIONRowDeleted(Me, New VIEW_MEM_REP_QUALIFICATIONRowChangeEvent(CType(e.Row,VIEW_MEM_REP_QUALIFICATIONRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VIEW_MEM_REP_QUALIFICATIONRowDeletingEvent) Is Nothing) Then
                RaiseEvent VIEW_MEM_REP_QUALIFICATIONRowDeleting(Me, New VIEW_MEM_REP_QUALIFICATIONRowChangeEvent(CType(e.Row,VIEW_MEM_REP_QUALIFICATIONRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVIEW_MEM_REP_QUALIFICATIONRow(ByVal row As VIEW_MEM_REP_QUALIFICATIONRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_MEM_REP_QUALIFICATIONRow
        Inherits DataRow
        
        Private tableVIEW_MEM_REP_QUALIFICATION As VIEW_MEM_REP_QUALIFICATIONDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVIEW_MEM_REP_QUALIFICATION = CType(Me.Table,VIEW_MEM_REP_QUALIFICATIONDataTable)
        End Sub
        
        Public Property SNO As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_QUALIFICATION.SNOColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_QUALIFICATION.SNOColumn) = value
            End Set
        End Property
        
        Public Property MEM_NAME As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_QUALIFICATION.MEM_NAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_QUALIFICATION.MEM_NAMEColumn) = value
            End Set
        End Property
        
        Public Property MEM_DOB As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_QUALIFICATION.MEM_DOBColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_QUALIFICATION.MEM_DOBColumn) = value
            End Set
        End Property
        
        Public Property MEM_SEX As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_QUALIFICATION.MEM_SEXColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_QUALIFICATION.MEM_SEXColumn) = value
            End Set
        End Property
        
        Public Property MCODE As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_QUALIFICATION.MCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_QUALIFICATION.MCODEColumn) = value
            End Set
        End Property
        
        Public Property MNAME As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_QUALIFICATION.MNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_QUALIFICATION.MNAMEColumn) = value
            End Set
        End Property
        
        Public Property SPOUSE As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_QUALIFICATION.SPOUSEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_QUALIFICATION.SPOUSEColumn) = value
            End Set
        End Property
        
        Public Property MEMBERTYPECODE As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_QUALIFICATION.MEMBERTYPECODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_QUALIFICATION.MEMBERTYPECODEColumn) = value
            End Set
        End Property
        
        Public Property CURRENTSTATUS As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_QUALIFICATION.CURRENTSTATUSColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_QUALIFICATION.CURRENTSTATUSColumn) = value
            End Set
        End Property
        
        Public Property MEMBERTYPE As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_QUALIFICATION.MEMBERTYPEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_QUALIFICATION.MEMBERTYPEColumn) = value
            End Set
        End Property
        
        Public Property EMAILID As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_QUALIFICATION.EMAILIDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_QUALIFICATION.EMAILIDColumn) = value
            End Set
        End Property
        
        Public Property PHONENO As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_QUALIFICATION.PHONENOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_QUALIFICATION.PHONENOColumn) = value
            End Set
        End Property
        
        Public Property MOBILNO As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_QUALIFICATION.MOBILNOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_QUALIFICATION.MOBILNOColumn) = value
            End Set
        End Property
        
        Public Property UNIVERSITY As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_QUALIFICATION.UNIVERSITYColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_QUALIFICATION.UNIVERSITYColumn) = value
            End Set
        End Property
        
        Public Property QUALIFICATION As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_QUALIFICATION.QUALIFICATIONColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_QUALIFICATION.QUALIFICATIONColumn) = value
            End Set
        End Property
        
        Public Property INSTITUTE As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_QUALIFICATION.INSTITUTEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_QUALIFICATION.INSTITUTEColumn) = value
            End Set
        End Property
        
        Public Property PASSOUT As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_QUALIFICATION.PASSOUTColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_QUALIFICATION.PASSOUTColumn) = value
            End Set
        End Property
        
        Public Function IsSNONull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_QUALIFICATION.SNOColumn)
        End Function
        
        Public Sub SetSNONull()
            Me(Me.tableVIEW_MEM_REP_QUALIFICATION.SNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMEM_NAMENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_QUALIFICATION.MEM_NAMEColumn)
        End Function
        
        Public Sub SetMEM_NAMENull()
            Me(Me.tableVIEW_MEM_REP_QUALIFICATION.MEM_NAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMEM_DOBNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_QUALIFICATION.MEM_DOBColumn)
        End Function
        
        Public Sub SetMEM_DOBNull()
            Me(Me.tableVIEW_MEM_REP_QUALIFICATION.MEM_DOBColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMEM_SEXNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_QUALIFICATION.MEM_SEXColumn)
        End Function
        
        Public Sub SetMEM_SEXNull()
            Me(Me.tableVIEW_MEM_REP_QUALIFICATION.MEM_SEXColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMCODENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_QUALIFICATION.MCODEColumn)
        End Function
        
        Public Sub SetMCODENull()
            Me(Me.tableVIEW_MEM_REP_QUALIFICATION.MCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMNAMENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_QUALIFICATION.MNAMEColumn)
        End Function
        
        Public Sub SetMNAMENull()
            Me(Me.tableVIEW_MEM_REP_QUALIFICATION.MNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSPOUSENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_QUALIFICATION.SPOUSEColumn)
        End Function
        
        Public Sub SetSPOUSENull()
            Me(Me.tableVIEW_MEM_REP_QUALIFICATION.SPOUSEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMEMBERTYPECODENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_QUALIFICATION.MEMBERTYPECODEColumn)
        End Function
        
        Public Sub SetMEMBERTYPECODENull()
            Me(Me.tableVIEW_MEM_REP_QUALIFICATION.MEMBERTYPECODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCURRENTSTATUSNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_QUALIFICATION.CURRENTSTATUSColumn)
        End Function
        
        Public Sub SetCURRENTSTATUSNull()
            Me(Me.tableVIEW_MEM_REP_QUALIFICATION.CURRENTSTATUSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMEMBERTYPENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_QUALIFICATION.MEMBERTYPEColumn)
        End Function
        
        Public Sub SetMEMBERTYPENull()
            Me(Me.tableVIEW_MEM_REP_QUALIFICATION.MEMBERTYPEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEMAILIDNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_QUALIFICATION.EMAILIDColumn)
        End Function
        
        Public Sub SetEMAILIDNull()
            Me(Me.tableVIEW_MEM_REP_QUALIFICATION.EMAILIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPHONENONull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_QUALIFICATION.PHONENOColumn)
        End Function
        
        Public Sub SetPHONENONull()
            Me(Me.tableVIEW_MEM_REP_QUALIFICATION.PHONENOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMOBILNONull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_QUALIFICATION.MOBILNOColumn)
        End Function
        
        Public Sub SetMOBILNONull()
            Me(Me.tableVIEW_MEM_REP_QUALIFICATION.MOBILNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUNIVERSITYNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_QUALIFICATION.UNIVERSITYColumn)
        End Function
        
        Public Sub SetUNIVERSITYNull()
            Me(Me.tableVIEW_MEM_REP_QUALIFICATION.UNIVERSITYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsQUALIFICATIONNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_QUALIFICATION.QUALIFICATIONColumn)
        End Function
        
        Public Sub SetQUALIFICATIONNull()
            Me(Me.tableVIEW_MEM_REP_QUALIFICATION.QUALIFICATIONColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsINSTITUTENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_QUALIFICATION.INSTITUTEColumn)
        End Function
        
        Public Sub SetINSTITUTENull()
            Me(Me.tableVIEW_MEM_REP_QUALIFICATION.INSTITUTEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPASSOUTNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_QUALIFICATION.PASSOUTColumn)
        End Function
        
        Public Sub SetPASSOUTNull()
            Me(Me.tableVIEW_MEM_REP_QUALIFICATION.PASSOUTColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_MEM_REP_QUALIFICATIONRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VIEW_MEM_REP_QUALIFICATIONRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VIEW_MEM_REP_QUALIFICATIONRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VIEW_MEM_REP_QUALIFICATIONRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_MEM_REP_RELATIONDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSNO As DataColumn
        
        Private columnMEM_NAME As DataColumn
        
        Private columnMEM_DOB As DataColumn
        
        Private columnMEM_SEX As DataColumn
        
        Private columnMCODE As DataColumn
        
        Private columnMNAME As DataColumn
        
        Private columnSPOUSE As DataColumn
        
        Private columnMEMBERTYPECODE As DataColumn
        
        Private columnCURRENTSTATUS As DataColumn
        
        Private columnMEMBERTYPE As DataColumn
        
        Private columnEMAILID As DataColumn
        
        Private columnPHONENO As DataColumn
        
        Private columnMOBILNO As DataColumn
        
        Private columnNAME As DataColumn
        
        Private columnRELATION As DataColumn
        
        Private columnREMARKS As DataColumn
        
        Private columnREL_SEX As DataColumn
        
        Private columnREL_DOB As DataColumn
        
        Friend Sub New()
            MyBase.New("VIEW_MEM_REP_RELATION")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property SNOColumn As DataColumn
            Get
                Return Me.columnSNO
            End Get
        End Property
        
        Friend ReadOnly Property MEM_NAMEColumn As DataColumn
            Get
                Return Me.columnMEM_NAME
            End Get
        End Property
        
        Friend ReadOnly Property MEM_DOBColumn As DataColumn
            Get
                Return Me.columnMEM_DOB
            End Get
        End Property
        
        Friend ReadOnly Property MEM_SEXColumn As DataColumn
            Get
                Return Me.columnMEM_SEX
            End Get
        End Property
        
        Friend ReadOnly Property MCODEColumn As DataColumn
            Get
                Return Me.columnMCODE
            End Get
        End Property
        
        Friend ReadOnly Property MNAMEColumn As DataColumn
            Get
                Return Me.columnMNAME
            End Get
        End Property
        
        Friend ReadOnly Property SPOUSEColumn As DataColumn
            Get
                Return Me.columnSPOUSE
            End Get
        End Property
        
        Friend ReadOnly Property MEMBERTYPECODEColumn As DataColumn
            Get
                Return Me.columnMEMBERTYPECODE
            End Get
        End Property
        
        Friend ReadOnly Property CURRENTSTATUSColumn As DataColumn
            Get
                Return Me.columnCURRENTSTATUS
            End Get
        End Property
        
        Friend ReadOnly Property MEMBERTYPEColumn As DataColumn
            Get
                Return Me.columnMEMBERTYPE
            End Get
        End Property
        
        Friend ReadOnly Property EMAILIDColumn As DataColumn
            Get
                Return Me.columnEMAILID
            End Get
        End Property
        
        Friend ReadOnly Property PHONENOColumn As DataColumn
            Get
                Return Me.columnPHONENO
            End Get
        End Property
        
        Friend ReadOnly Property MOBILNOColumn As DataColumn
            Get
                Return Me.columnMOBILNO
            End Get
        End Property
        
        Friend ReadOnly Property NAMEColumn As DataColumn
            Get
                Return Me.columnNAME
            End Get
        End Property
        
        Friend ReadOnly Property RELATIONColumn As DataColumn
            Get
                Return Me.columnRELATION
            End Get
        End Property
        
        Friend ReadOnly Property REMARKSColumn As DataColumn
            Get
                Return Me.columnREMARKS
            End Get
        End Property
        
        Friend ReadOnly Property REL_SEXColumn As DataColumn
            Get
                Return Me.columnREL_SEX
            End Get
        End Property
        
        Friend ReadOnly Property REL_DOBColumn As DataColumn
            Get
                Return Me.columnREL_DOB
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VIEW_MEM_REP_RELATIONRow
            Get
                Return CType(Me.Rows(index),VIEW_MEM_REP_RELATIONRow)
            End Get
        End Property
        
        Public Event VIEW_MEM_REP_RELATIONRowChanged As VIEW_MEM_REP_RELATIONRowChangeEventHandler
        
        Public Event VIEW_MEM_REP_RELATIONRowChanging As VIEW_MEM_REP_RELATIONRowChangeEventHandler
        
        Public Event VIEW_MEM_REP_RELATIONRowDeleted As VIEW_MEM_REP_RELATIONRowChangeEventHandler
        
        Public Event VIEW_MEM_REP_RELATIONRowDeleting As VIEW_MEM_REP_RELATIONRowChangeEventHandler
        
        Public Overloads Sub AddVIEW_MEM_REP_RELATIONRow(ByVal row As VIEW_MEM_REP_RELATIONRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVIEW_MEM_REP_RELATIONRow( _
                    ByVal SNO As Integer,  _
                    ByVal MEM_NAME As String,  _
                    ByVal MEM_DOB As Date,  _
                    ByVal MEM_SEX As String,  _
                    ByVal MCODE As String,  _
                    ByVal MNAME As String,  _
                    ByVal SPOUSE As String,  _
                    ByVal MEMBERTYPECODE As String,  _
                    ByVal CURRENTSTATUS As String,  _
                    ByVal MEMBERTYPE As String,  _
                    ByVal EMAILID As String,  _
                    ByVal PHONENO As String,  _
                    ByVal MOBILNO As String,  _
                    ByVal NAME As String,  _
                    ByVal RELATION As String,  _
                    ByVal REMARKS As String,  _
                    ByVal REL_SEX As String,  _
                    ByVal REL_DOB As Date) As VIEW_MEM_REP_RELATIONRow
            Dim rowVIEW_MEM_REP_RELATIONRow As VIEW_MEM_REP_RELATIONRow = CType(Me.NewRow,VIEW_MEM_REP_RELATIONRow)
            rowVIEW_MEM_REP_RELATIONRow.ItemArray = New Object() {SNO, MEM_NAME, MEM_DOB, MEM_SEX, MCODE, MNAME, SPOUSE, MEMBERTYPECODE, CURRENTSTATUS, MEMBERTYPE, EMAILID, PHONENO, MOBILNO, NAME, RELATION, REMARKS, REL_SEX, REL_DOB}
            Me.Rows.Add(rowVIEW_MEM_REP_RELATIONRow)
            Return rowVIEW_MEM_REP_RELATIONRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VIEW_MEM_REP_RELATIONDataTable = CType(MyBase.Clone,VIEW_MEM_REP_RELATIONDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VIEW_MEM_REP_RELATIONDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnSNO = Me.Columns("SNO")
            Me.columnMEM_NAME = Me.Columns("MEM_NAME")
            Me.columnMEM_DOB = Me.Columns("MEM_DOB")
            Me.columnMEM_SEX = Me.Columns("MEM_SEX")
            Me.columnMCODE = Me.Columns("MCODE")
            Me.columnMNAME = Me.Columns("MNAME")
            Me.columnSPOUSE = Me.Columns("SPOUSE")
            Me.columnMEMBERTYPECODE = Me.Columns("MEMBERTYPECODE")
            Me.columnCURRENTSTATUS = Me.Columns("CURRENTSTATUS")
            Me.columnMEMBERTYPE = Me.Columns("MEMBERTYPE")
            Me.columnEMAILID = Me.Columns("EMAILID")
            Me.columnPHONENO = Me.Columns("PHONENO")
            Me.columnMOBILNO = Me.Columns("MOBILNO")
            Me.columnNAME = Me.Columns("NAME")
            Me.columnRELATION = Me.Columns("RELATION")
            Me.columnREMARKS = Me.Columns("REMARKS")
            Me.columnREL_SEX = Me.Columns("REL_SEX")
            Me.columnREL_DOB = Me.Columns("REL_DOB")
        End Sub
        
        Private Sub InitClass()
            Me.columnSNO = New DataColumn("SNO", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSNO)
            Me.columnMEM_NAME = New DataColumn("MEM_NAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEM_NAME)
            Me.columnMEM_DOB = New DataColumn("MEM_DOB", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEM_DOB)
            Me.columnMEM_SEX = New DataColumn("MEM_SEX", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEM_SEX)
            Me.columnMCODE = New DataColumn("MCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMCODE)
            Me.columnMNAME = New DataColumn("MNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMNAME)
            Me.columnSPOUSE = New DataColumn("SPOUSE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSPOUSE)
            Me.columnMEMBERTYPECODE = New DataColumn("MEMBERTYPECODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEMBERTYPECODE)
            Me.columnCURRENTSTATUS = New DataColumn("CURRENTSTATUS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCURRENTSTATUS)
            Me.columnMEMBERTYPE = New DataColumn("MEMBERTYPE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEMBERTYPE)
            Me.columnEMAILID = New DataColumn("EMAILID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEMAILID)
            Me.columnPHONENO = New DataColumn("PHONENO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPHONENO)
            Me.columnMOBILNO = New DataColumn("MOBILNO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMOBILNO)
            Me.columnNAME = New DataColumn("NAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNAME)
            Me.columnRELATION = New DataColumn("RELATION", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRELATION)
            Me.columnREMARKS = New DataColumn("REMARKS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnREMARKS)
            Me.columnREL_SEX = New DataColumn("REL_SEX", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnREL_SEX)
            Me.columnREL_DOB = New DataColumn("REL_DOB", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnREL_DOB)
            Me.columnSNO.ReadOnly = true
            Me.columnMEM_NAME.ReadOnly = true
            Me.columnMEM_DOB.ReadOnly = true
            Me.columnMEM_SEX.ReadOnly = true
            Me.columnMCODE.ReadOnly = true
            Me.columnMNAME.ReadOnly = true
            Me.columnSPOUSE.ReadOnly = true
            Me.columnMEMBERTYPECODE.ReadOnly = true
            Me.columnCURRENTSTATUS.ReadOnly = true
            Me.columnMEMBERTYPE.ReadOnly = true
            Me.columnEMAILID.ReadOnly = true
            Me.columnPHONENO.ReadOnly = true
            Me.columnMOBILNO.ReadOnly = true
            Me.columnNAME.ReadOnly = true
            Me.columnRELATION.ReadOnly = true
            Me.columnREMARKS.ReadOnly = true
            Me.columnREL_SEX.ReadOnly = true
            Me.columnREL_DOB.ReadOnly = true
        End Sub
        
        Public Function NewVIEW_MEM_REP_RELATIONRow() As VIEW_MEM_REP_RELATIONRow
            Return CType(Me.NewRow,VIEW_MEM_REP_RELATIONRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VIEW_MEM_REP_RELATIONRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VIEW_MEM_REP_RELATIONRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VIEW_MEM_REP_RELATIONRowChangedEvent) Is Nothing) Then
                RaiseEvent VIEW_MEM_REP_RELATIONRowChanged(Me, New VIEW_MEM_REP_RELATIONRowChangeEvent(CType(e.Row,VIEW_MEM_REP_RELATIONRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VIEW_MEM_REP_RELATIONRowChangingEvent) Is Nothing) Then
                RaiseEvent VIEW_MEM_REP_RELATIONRowChanging(Me, New VIEW_MEM_REP_RELATIONRowChangeEvent(CType(e.Row,VIEW_MEM_REP_RELATIONRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VIEW_MEM_REP_RELATIONRowDeletedEvent) Is Nothing) Then
                RaiseEvent VIEW_MEM_REP_RELATIONRowDeleted(Me, New VIEW_MEM_REP_RELATIONRowChangeEvent(CType(e.Row,VIEW_MEM_REP_RELATIONRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VIEW_MEM_REP_RELATIONRowDeletingEvent) Is Nothing) Then
                RaiseEvent VIEW_MEM_REP_RELATIONRowDeleting(Me, New VIEW_MEM_REP_RELATIONRowChangeEvent(CType(e.Row,VIEW_MEM_REP_RELATIONRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVIEW_MEM_REP_RELATIONRow(ByVal row As VIEW_MEM_REP_RELATIONRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_MEM_REP_RELATIONRow
        Inherits DataRow
        
        Private tableVIEW_MEM_REP_RELATION As VIEW_MEM_REP_RELATIONDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVIEW_MEM_REP_RELATION = CType(Me.Table,VIEW_MEM_REP_RELATIONDataTable)
        End Sub
        
        Public Property SNO As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_RELATION.SNOColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_RELATION.SNOColumn) = value
            End Set
        End Property
        
        Public Property MEM_NAME As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_RELATION.MEM_NAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_RELATION.MEM_NAMEColumn) = value
            End Set
        End Property
        
        Public Property MEM_DOB As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_RELATION.MEM_DOBColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_RELATION.MEM_DOBColumn) = value
            End Set
        End Property
        
        Public Property MEM_SEX As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_RELATION.MEM_SEXColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_RELATION.MEM_SEXColumn) = value
            End Set
        End Property
        
        Public Property MCODE As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_RELATION.MCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_RELATION.MCODEColumn) = value
            End Set
        End Property
        
        Public Property MNAME As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_RELATION.MNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_RELATION.MNAMEColumn) = value
            End Set
        End Property
        
        Public Property SPOUSE As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_RELATION.SPOUSEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_RELATION.SPOUSEColumn) = value
            End Set
        End Property
        
        Public Property MEMBERTYPECODE As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_RELATION.MEMBERTYPECODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_RELATION.MEMBERTYPECODEColumn) = value
            End Set
        End Property
        
        Public Property CURRENTSTATUS As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_RELATION.CURRENTSTATUSColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_RELATION.CURRENTSTATUSColumn) = value
            End Set
        End Property
        
        Public Property MEMBERTYPE As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_RELATION.MEMBERTYPEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_RELATION.MEMBERTYPEColumn) = value
            End Set
        End Property
        
        Public Property EMAILID As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_RELATION.EMAILIDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_RELATION.EMAILIDColumn) = value
            End Set
        End Property
        
        Public Property PHONENO As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_RELATION.PHONENOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_RELATION.PHONENOColumn) = value
            End Set
        End Property
        
        Public Property MOBILNO As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_RELATION.MOBILNOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_RELATION.MOBILNOColumn) = value
            End Set
        End Property
        
        Public Property NAME As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_RELATION.NAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_RELATION.NAMEColumn) = value
            End Set
        End Property
        
        Public Property RELATION As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_RELATION.RELATIONColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_RELATION.RELATIONColumn) = value
            End Set
        End Property
        
        Public Property REMARKS As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_RELATION.REMARKSColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_RELATION.REMARKSColumn) = value
            End Set
        End Property
        
        Public Property REL_SEX As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_RELATION.REL_SEXColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_RELATION.REL_SEXColumn) = value
            End Set
        End Property
        
        Public Property REL_DOB As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_RELATION.REL_DOBColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_RELATION.REL_DOBColumn) = value
            End Set
        End Property
        
        Public Function IsSNONull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_RELATION.SNOColumn)
        End Function
        
        Public Sub SetSNONull()
            Me(Me.tableVIEW_MEM_REP_RELATION.SNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMEM_NAMENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_RELATION.MEM_NAMEColumn)
        End Function
        
        Public Sub SetMEM_NAMENull()
            Me(Me.tableVIEW_MEM_REP_RELATION.MEM_NAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMEM_DOBNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_RELATION.MEM_DOBColumn)
        End Function
        
        Public Sub SetMEM_DOBNull()
            Me(Me.tableVIEW_MEM_REP_RELATION.MEM_DOBColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMEM_SEXNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_RELATION.MEM_SEXColumn)
        End Function
        
        Public Sub SetMEM_SEXNull()
            Me(Me.tableVIEW_MEM_REP_RELATION.MEM_SEXColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMCODENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_RELATION.MCODEColumn)
        End Function
        
        Public Sub SetMCODENull()
            Me(Me.tableVIEW_MEM_REP_RELATION.MCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMNAMENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_RELATION.MNAMEColumn)
        End Function
        
        Public Sub SetMNAMENull()
            Me(Me.tableVIEW_MEM_REP_RELATION.MNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSPOUSENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_RELATION.SPOUSEColumn)
        End Function
        
        Public Sub SetSPOUSENull()
            Me(Me.tableVIEW_MEM_REP_RELATION.SPOUSEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMEMBERTYPECODENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_RELATION.MEMBERTYPECODEColumn)
        End Function
        
        Public Sub SetMEMBERTYPECODENull()
            Me(Me.tableVIEW_MEM_REP_RELATION.MEMBERTYPECODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCURRENTSTATUSNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_RELATION.CURRENTSTATUSColumn)
        End Function
        
        Public Sub SetCURRENTSTATUSNull()
            Me(Me.tableVIEW_MEM_REP_RELATION.CURRENTSTATUSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMEMBERTYPENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_RELATION.MEMBERTYPEColumn)
        End Function
        
        Public Sub SetMEMBERTYPENull()
            Me(Me.tableVIEW_MEM_REP_RELATION.MEMBERTYPEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEMAILIDNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_RELATION.EMAILIDColumn)
        End Function
        
        Public Sub SetEMAILIDNull()
            Me(Me.tableVIEW_MEM_REP_RELATION.EMAILIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPHONENONull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_RELATION.PHONENOColumn)
        End Function
        
        Public Sub SetPHONENONull()
            Me(Me.tableVIEW_MEM_REP_RELATION.PHONENOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMOBILNONull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_RELATION.MOBILNOColumn)
        End Function
        
        Public Sub SetMOBILNONull()
            Me(Me.tableVIEW_MEM_REP_RELATION.MOBILNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNAMENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_RELATION.NAMEColumn)
        End Function
        
        Public Sub SetNAMENull()
            Me(Me.tableVIEW_MEM_REP_RELATION.NAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRELATIONNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_RELATION.RELATIONColumn)
        End Function
        
        Public Sub SetRELATIONNull()
            Me(Me.tableVIEW_MEM_REP_RELATION.RELATIONColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsREMARKSNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_RELATION.REMARKSColumn)
        End Function
        
        Public Sub SetREMARKSNull()
            Me(Me.tableVIEW_MEM_REP_RELATION.REMARKSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsREL_SEXNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_RELATION.REL_SEXColumn)
        End Function
        
        Public Sub SetREL_SEXNull()
            Me(Me.tableVIEW_MEM_REP_RELATION.REL_SEXColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsREL_DOBNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_RELATION.REL_DOBColumn)
        End Function
        
        Public Sub SetREL_DOBNull()
            Me(Me.tableVIEW_MEM_REP_RELATION.REL_DOBColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_MEM_REP_RELATIONRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VIEW_MEM_REP_RELATIONRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VIEW_MEM_REP_RELATIONRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VIEW_MEM_REP_RELATIONRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_MEM_REP_STATUSDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSNO As DataColumn
        
        Private columnMEM_NAME As DataColumn
        
        Private columnSUBSTYPE As DataColumn
        
        Private columnCOMPANYNAME As DataColumn
        
        Private columnDESIGNATION As DataColumn
        
        Private columnAPPLNO As DataColumn
        
        Private columnAPPDATE As DataColumn
        
        Private columnDOB As DataColumn
        
        Private columnMEM_SEX As DataColumn
        
        Private columnWED_DATE As DataColumn
        
        Private columnSTARTINGDATE As DataColumn
        
        Private columnENDINGDATE As DataColumn
        
        Private columnMCODE As DataColumn
        
        Private columnMNAME As DataColumn
        
        Private columnMEMBERTYPECODE As DataColumn
        
        Private columnCURRENTSTATUS As DataColumn
        
        Private columnEMAILID As DataColumn
        
        Private columnPHONENO As DataColumn
        
        Private columnMOBILNO As DataColumn
        
        Private columnMEMBERTYPE As DataColumn
        
        Friend Sub New()
            MyBase.New("VIEW_MEM_REP_STATUS")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property SNOColumn As DataColumn
            Get
                Return Me.columnSNO
            End Get
        End Property
        
        Friend ReadOnly Property MEM_NAMEColumn As DataColumn
            Get
                Return Me.columnMEM_NAME
            End Get
        End Property
        
        Friend ReadOnly Property SUBSTYPEColumn As DataColumn
            Get
                Return Me.columnSUBSTYPE
            End Get
        End Property
        
        Friend ReadOnly Property COMPANYNAMEColumn As DataColumn
            Get
                Return Me.columnCOMPANYNAME
            End Get
        End Property
        
        Friend ReadOnly Property DESIGNATIONColumn As DataColumn
            Get
                Return Me.columnDESIGNATION
            End Get
        End Property
        
        Friend ReadOnly Property APPLNOColumn As DataColumn
            Get
                Return Me.columnAPPLNO
            End Get
        End Property
        
        Friend ReadOnly Property APPDATEColumn As DataColumn
            Get
                Return Me.columnAPPDATE
            End Get
        End Property
        
        Friend ReadOnly Property DOBColumn As DataColumn
            Get
                Return Me.columnDOB
            End Get
        End Property
        
        Friend ReadOnly Property MEM_SEXColumn As DataColumn
            Get
                Return Me.columnMEM_SEX
            End Get
        End Property
        
        Friend ReadOnly Property WED_DATEColumn As DataColumn
            Get
                Return Me.columnWED_DATE
            End Get
        End Property
        
        Friend ReadOnly Property STARTINGDATEColumn As DataColumn
            Get
                Return Me.columnSTARTINGDATE
            End Get
        End Property
        
        Friend ReadOnly Property ENDINGDATEColumn As DataColumn
            Get
                Return Me.columnENDINGDATE
            End Get
        End Property
        
        Friend ReadOnly Property MCODEColumn As DataColumn
            Get
                Return Me.columnMCODE
            End Get
        End Property
        
        Friend ReadOnly Property MNAMEColumn As DataColumn
            Get
                Return Me.columnMNAME
            End Get
        End Property
        
        Friend ReadOnly Property MEMBERTYPECODEColumn As DataColumn
            Get
                Return Me.columnMEMBERTYPECODE
            End Get
        End Property
        
        Friend ReadOnly Property CURRENTSTATUSColumn As DataColumn
            Get
                Return Me.columnCURRENTSTATUS
            End Get
        End Property
        
        Friend ReadOnly Property EMAILIDColumn As DataColumn
            Get
                Return Me.columnEMAILID
            End Get
        End Property
        
        Friend ReadOnly Property PHONENOColumn As DataColumn
            Get
                Return Me.columnPHONENO
            End Get
        End Property
        
        Friend ReadOnly Property MOBILNOColumn As DataColumn
            Get
                Return Me.columnMOBILNO
            End Get
        End Property
        
        Friend ReadOnly Property MEMBERTYPEColumn As DataColumn
            Get
                Return Me.columnMEMBERTYPE
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VIEW_MEM_REP_STATUSRow
            Get
                Return CType(Me.Rows(index),VIEW_MEM_REP_STATUSRow)
            End Get
        End Property
        
        Public Event VIEW_MEM_REP_STATUSRowChanged As VIEW_MEM_REP_STATUSRowChangeEventHandler
        
        Public Event VIEW_MEM_REP_STATUSRowChanging As VIEW_MEM_REP_STATUSRowChangeEventHandler
        
        Public Event VIEW_MEM_REP_STATUSRowDeleted As VIEW_MEM_REP_STATUSRowChangeEventHandler
        
        Public Event VIEW_MEM_REP_STATUSRowDeleting As VIEW_MEM_REP_STATUSRowChangeEventHandler
        
        Public Overloads Sub AddVIEW_MEM_REP_STATUSRow(ByVal row As VIEW_MEM_REP_STATUSRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVIEW_MEM_REP_STATUSRow( _
                    ByVal SNO As Integer,  _
                    ByVal MEM_NAME As String,  _
                    ByVal SUBSTYPE As String,  _
                    ByVal COMPANYNAME As String,  _
                    ByVal DESIGNATION As String,  _
                    ByVal APPLNO As String,  _
                    ByVal APPDATE As Date,  _
                    ByVal DOB As Date,  _
                    ByVal MEM_SEX As String,  _
                    ByVal WED_DATE As Date,  _
                    ByVal STARTINGDATE As Date,  _
                    ByVal ENDINGDATE As Date,  _
                    ByVal MCODE As String,  _
                    ByVal MNAME As String,  _
                    ByVal MEMBERTYPECODE As String,  _
                    ByVal CURRENTSTATUS As String,  _
                    ByVal EMAILID As String,  _
                    ByVal PHONENO As String,  _
                    ByVal MOBILNO As String,  _
                    ByVal MEMBERTYPE As String) As VIEW_MEM_REP_STATUSRow
            Dim rowVIEW_MEM_REP_STATUSRow As VIEW_MEM_REP_STATUSRow = CType(Me.NewRow,VIEW_MEM_REP_STATUSRow)
            rowVIEW_MEM_REP_STATUSRow.ItemArray = New Object() {SNO, MEM_NAME, SUBSTYPE, COMPANYNAME, DESIGNATION, APPLNO, APPDATE, DOB, MEM_SEX, WED_DATE, STARTINGDATE, ENDINGDATE, MCODE, MNAME, MEMBERTYPECODE, CURRENTSTATUS, EMAILID, PHONENO, MOBILNO, MEMBERTYPE}
            Me.Rows.Add(rowVIEW_MEM_REP_STATUSRow)
            Return rowVIEW_MEM_REP_STATUSRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VIEW_MEM_REP_STATUSDataTable = CType(MyBase.Clone,VIEW_MEM_REP_STATUSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VIEW_MEM_REP_STATUSDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnSNO = Me.Columns("SNO")
            Me.columnMEM_NAME = Me.Columns("MEM_NAME")
            Me.columnSUBSTYPE = Me.Columns("SUBSTYPE")
            Me.columnCOMPANYNAME = Me.Columns("COMPANYNAME")
            Me.columnDESIGNATION = Me.Columns("DESIGNATION")
            Me.columnAPPLNO = Me.Columns("APPLNO")
            Me.columnAPPDATE = Me.Columns("APPDATE")
            Me.columnDOB = Me.Columns("DOB")
            Me.columnMEM_SEX = Me.Columns("MEM_SEX")
            Me.columnWED_DATE = Me.Columns("WED_DATE")
            Me.columnSTARTINGDATE = Me.Columns("STARTINGDATE")
            Me.columnENDINGDATE = Me.Columns("ENDINGDATE")
            Me.columnMCODE = Me.Columns("MCODE")
            Me.columnMNAME = Me.Columns("MNAME")
            Me.columnMEMBERTYPECODE = Me.Columns("MEMBERTYPECODE")
            Me.columnCURRENTSTATUS = Me.Columns("CURRENTSTATUS")
            Me.columnEMAILID = Me.Columns("EMAILID")
            Me.columnPHONENO = Me.Columns("PHONENO")
            Me.columnMOBILNO = Me.Columns("MOBILNO")
            Me.columnMEMBERTYPE = Me.Columns("MEMBERTYPE")
        End Sub
        
        Private Sub InitClass()
            Me.columnSNO = New DataColumn("SNO", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSNO)
            Me.columnMEM_NAME = New DataColumn("MEM_NAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEM_NAME)
            Me.columnSUBSTYPE = New DataColumn("SUBSTYPE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSUBSTYPE)
            Me.columnCOMPANYNAME = New DataColumn("COMPANYNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCOMPANYNAME)
            Me.columnDESIGNATION = New DataColumn("DESIGNATION", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDESIGNATION)
            Me.columnAPPLNO = New DataColumn("APPLNO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAPPLNO)
            Me.columnAPPDATE = New DataColumn("APPDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAPPDATE)
            Me.columnDOB = New DataColumn("DOB", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDOB)
            Me.columnMEM_SEX = New DataColumn("MEM_SEX", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEM_SEX)
            Me.columnWED_DATE = New DataColumn("WED_DATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnWED_DATE)
            Me.columnSTARTINGDATE = New DataColumn("STARTINGDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSTARTINGDATE)
            Me.columnENDINGDATE = New DataColumn("ENDINGDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnENDINGDATE)
            Me.columnMCODE = New DataColumn("MCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMCODE)
            Me.columnMNAME = New DataColumn("MNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMNAME)
            Me.columnMEMBERTYPECODE = New DataColumn("MEMBERTYPECODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEMBERTYPECODE)
            Me.columnCURRENTSTATUS = New DataColumn("CURRENTSTATUS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCURRENTSTATUS)
            Me.columnEMAILID = New DataColumn("EMAILID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEMAILID)
            Me.columnPHONENO = New DataColumn("PHONENO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPHONENO)
            Me.columnMOBILNO = New DataColumn("MOBILNO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMOBILNO)
            Me.columnMEMBERTYPE = New DataColumn("MEMBERTYPE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEMBERTYPE)
            Me.columnSNO.ReadOnly = true
            Me.columnMEM_NAME.ReadOnly = true
            Me.columnSUBSTYPE.ReadOnly = true
            Me.columnCOMPANYNAME.ReadOnly = true
            Me.columnDESIGNATION.ReadOnly = true
            Me.columnAPPLNO.ReadOnly = true
            Me.columnAPPDATE.ReadOnly = true
            Me.columnDOB.ReadOnly = true
            Me.columnMEM_SEX.ReadOnly = true
            Me.columnWED_DATE.ReadOnly = true
            Me.columnSTARTINGDATE.ReadOnly = true
            Me.columnENDINGDATE.ReadOnly = true
            Me.columnMCODE.ReadOnly = true
            Me.columnMNAME.ReadOnly = true
            Me.columnMEMBERTYPECODE.ReadOnly = true
            Me.columnCURRENTSTATUS.ReadOnly = true
            Me.columnEMAILID.ReadOnly = true
            Me.columnPHONENO.ReadOnly = true
            Me.columnMOBILNO.ReadOnly = true
            Me.columnMEMBERTYPE.ReadOnly = true
        End Sub
        
        Public Function NewVIEW_MEM_REP_STATUSRow() As VIEW_MEM_REP_STATUSRow
            Return CType(Me.NewRow,VIEW_MEM_REP_STATUSRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VIEW_MEM_REP_STATUSRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VIEW_MEM_REP_STATUSRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VIEW_MEM_REP_STATUSRowChangedEvent) Is Nothing) Then
                RaiseEvent VIEW_MEM_REP_STATUSRowChanged(Me, New VIEW_MEM_REP_STATUSRowChangeEvent(CType(e.Row,VIEW_MEM_REP_STATUSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VIEW_MEM_REP_STATUSRowChangingEvent) Is Nothing) Then
                RaiseEvent VIEW_MEM_REP_STATUSRowChanging(Me, New VIEW_MEM_REP_STATUSRowChangeEvent(CType(e.Row,VIEW_MEM_REP_STATUSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VIEW_MEM_REP_STATUSRowDeletedEvent) Is Nothing) Then
                RaiseEvent VIEW_MEM_REP_STATUSRowDeleted(Me, New VIEW_MEM_REP_STATUSRowChangeEvent(CType(e.Row,VIEW_MEM_REP_STATUSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VIEW_MEM_REP_STATUSRowDeletingEvent) Is Nothing) Then
                RaiseEvent VIEW_MEM_REP_STATUSRowDeleting(Me, New VIEW_MEM_REP_STATUSRowChangeEvent(CType(e.Row,VIEW_MEM_REP_STATUSRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVIEW_MEM_REP_STATUSRow(ByVal row As VIEW_MEM_REP_STATUSRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_MEM_REP_STATUSRow
        Inherits DataRow
        
        Private tableVIEW_MEM_REP_STATUS As VIEW_MEM_REP_STATUSDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVIEW_MEM_REP_STATUS = CType(Me.Table,VIEW_MEM_REP_STATUSDataTable)
        End Sub
        
        Public Property SNO As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_STATUS.SNOColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_STATUS.SNOColumn) = value
            End Set
        End Property
        
        Public Property MEM_NAME As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_STATUS.MEM_NAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_STATUS.MEM_NAMEColumn) = value
            End Set
        End Property
        
        Public Property SUBSTYPE As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_STATUS.SUBSTYPEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_STATUS.SUBSTYPEColumn) = value
            End Set
        End Property
        
        Public Property COMPANYNAME As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_STATUS.COMPANYNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_STATUS.COMPANYNAMEColumn) = value
            End Set
        End Property
        
        Public Property DESIGNATION As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_STATUS.DESIGNATIONColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_STATUS.DESIGNATIONColumn) = value
            End Set
        End Property
        
        Public Property APPLNO As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_STATUS.APPLNOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_STATUS.APPLNOColumn) = value
            End Set
        End Property
        
        Public Property APPDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_STATUS.APPDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_STATUS.APPDATEColumn) = value
            End Set
        End Property
        
        Public Property DOB As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_STATUS.DOBColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_STATUS.DOBColumn) = value
            End Set
        End Property
        
        Public Property MEM_SEX As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_STATUS.MEM_SEXColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_STATUS.MEM_SEXColumn) = value
            End Set
        End Property
        
        Public Property WED_DATE As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_STATUS.WED_DATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_STATUS.WED_DATEColumn) = value
            End Set
        End Property
        
        Public Property STARTINGDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_STATUS.STARTINGDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_STATUS.STARTINGDATEColumn) = value
            End Set
        End Property
        
        Public Property ENDINGDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_STATUS.ENDINGDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_STATUS.ENDINGDATEColumn) = value
            End Set
        End Property
        
        Public Property MCODE As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_STATUS.MCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_STATUS.MCODEColumn) = value
            End Set
        End Property
        
        Public Property MNAME As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_STATUS.MNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_STATUS.MNAMEColumn) = value
            End Set
        End Property
        
        Public Property MEMBERTYPECODE As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_STATUS.MEMBERTYPECODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_STATUS.MEMBERTYPECODEColumn) = value
            End Set
        End Property
        
        Public Property CURRENTSTATUS As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_STATUS.CURRENTSTATUSColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_STATUS.CURRENTSTATUSColumn) = value
            End Set
        End Property
        
        Public Property EMAILID As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_STATUS.EMAILIDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_STATUS.EMAILIDColumn) = value
            End Set
        End Property
        
        Public Property PHONENO As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_STATUS.PHONENOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_STATUS.PHONENOColumn) = value
            End Set
        End Property
        
        Public Property MOBILNO As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_STATUS.MOBILNOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_STATUS.MOBILNOColumn) = value
            End Set
        End Property
        
        Public Property MEMBERTYPE As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_STATUS.MEMBERTYPEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_STATUS.MEMBERTYPEColumn) = value
            End Set
        End Property
        
        Public Function IsSNONull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_STATUS.SNOColumn)
        End Function
        
        Public Sub SetSNONull()
            Me(Me.tableVIEW_MEM_REP_STATUS.SNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMEM_NAMENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_STATUS.MEM_NAMEColumn)
        End Function
        
        Public Sub SetMEM_NAMENull()
            Me(Me.tableVIEW_MEM_REP_STATUS.MEM_NAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSUBSTYPENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_STATUS.SUBSTYPEColumn)
        End Function
        
        Public Sub SetSUBSTYPENull()
            Me(Me.tableVIEW_MEM_REP_STATUS.SUBSTYPEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCOMPANYNAMENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_STATUS.COMPANYNAMEColumn)
        End Function
        
        Public Sub SetCOMPANYNAMENull()
            Me(Me.tableVIEW_MEM_REP_STATUS.COMPANYNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDESIGNATIONNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_STATUS.DESIGNATIONColumn)
        End Function
        
        Public Sub SetDESIGNATIONNull()
            Me(Me.tableVIEW_MEM_REP_STATUS.DESIGNATIONColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAPPLNONull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_STATUS.APPLNOColumn)
        End Function
        
        Public Sub SetAPPLNONull()
            Me(Me.tableVIEW_MEM_REP_STATUS.APPLNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAPPDATENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_STATUS.APPDATEColumn)
        End Function
        
        Public Sub SetAPPDATENull()
            Me(Me.tableVIEW_MEM_REP_STATUS.APPDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDOBNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_STATUS.DOBColumn)
        End Function
        
        Public Sub SetDOBNull()
            Me(Me.tableVIEW_MEM_REP_STATUS.DOBColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMEM_SEXNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_STATUS.MEM_SEXColumn)
        End Function
        
        Public Sub SetMEM_SEXNull()
            Me(Me.tableVIEW_MEM_REP_STATUS.MEM_SEXColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsWED_DATENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_STATUS.WED_DATEColumn)
        End Function
        
        Public Sub SetWED_DATENull()
            Me(Me.tableVIEW_MEM_REP_STATUS.WED_DATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSTARTINGDATENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_STATUS.STARTINGDATEColumn)
        End Function
        
        Public Sub SetSTARTINGDATENull()
            Me(Me.tableVIEW_MEM_REP_STATUS.STARTINGDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsENDINGDATENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_STATUS.ENDINGDATEColumn)
        End Function
        
        Public Sub SetENDINGDATENull()
            Me(Me.tableVIEW_MEM_REP_STATUS.ENDINGDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMCODENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_STATUS.MCODEColumn)
        End Function
        
        Public Sub SetMCODENull()
            Me(Me.tableVIEW_MEM_REP_STATUS.MCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMNAMENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_STATUS.MNAMEColumn)
        End Function
        
        Public Sub SetMNAMENull()
            Me(Me.tableVIEW_MEM_REP_STATUS.MNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMEMBERTYPECODENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_STATUS.MEMBERTYPECODEColumn)
        End Function
        
        Public Sub SetMEMBERTYPECODENull()
            Me(Me.tableVIEW_MEM_REP_STATUS.MEMBERTYPECODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCURRENTSTATUSNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_STATUS.CURRENTSTATUSColumn)
        End Function
        
        Public Sub SetCURRENTSTATUSNull()
            Me(Me.tableVIEW_MEM_REP_STATUS.CURRENTSTATUSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEMAILIDNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_STATUS.EMAILIDColumn)
        End Function
        
        Public Sub SetEMAILIDNull()
            Me(Me.tableVIEW_MEM_REP_STATUS.EMAILIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPHONENONull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_STATUS.PHONENOColumn)
        End Function
        
        Public Sub SetPHONENONull()
            Me(Me.tableVIEW_MEM_REP_STATUS.PHONENOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMOBILNONull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_STATUS.MOBILNOColumn)
        End Function
        
        Public Sub SetMOBILNONull()
            Me(Me.tableVIEW_MEM_REP_STATUS.MOBILNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMEMBERTYPENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_STATUS.MEMBERTYPEColumn)
        End Function
        
        Public Sub SetMEMBERTYPENull()
            Me(Me.tableVIEW_MEM_REP_STATUS.MEMBERTYPEColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_MEM_REP_STATUSRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VIEW_MEM_REP_STATUSRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VIEW_MEM_REP_STATUSRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VIEW_MEM_REP_STATUSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_MEM_REP_STICKERDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnMEM_NAME As DataColumn
        
        Private columnCURRENTSTATUS As DataColumn
        
        Private columnMEMBERTYPECOCE As DataColumn
        
        Private columnMCODE As DataColumn
        
        Private columnMNAME As DataColumn
        
        Private columnADD1 As DataColumn
        
        Private columnADD2 As DataColumn
        
        Private columnADD3 As DataColumn
        
        Private columnCITY As DataColumn
        
        Private columnPINCODE As DataColumn
        
        Private columnSTATE As DataColumn
        
        Private columnEMAILID As DataColumn
        
        Private columnPHONENO As DataColumn
        
        Private columnMOBILNO As DataColumn
        
        Friend Sub New()
            MyBase.New("VIEW_MEM_REP_STICKER")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property MEM_NAMEColumn As DataColumn
            Get
                Return Me.columnMEM_NAME
            End Get
        End Property
        
        Friend ReadOnly Property CURRENTSTATUSColumn As DataColumn
            Get
                Return Me.columnCURRENTSTATUS
            End Get
        End Property
        
        Friend ReadOnly Property MEMBERTYPECOCEColumn As DataColumn
            Get
                Return Me.columnMEMBERTYPECOCE
            End Get
        End Property
        
        Friend ReadOnly Property MCODEColumn As DataColumn
            Get
                Return Me.columnMCODE
            End Get
        End Property
        
        Friend ReadOnly Property MNAMEColumn As DataColumn
            Get
                Return Me.columnMNAME
            End Get
        End Property
        
        Friend ReadOnly Property ADD1Column As DataColumn
            Get
                Return Me.columnADD1
            End Get
        End Property
        
        Friend ReadOnly Property ADD2Column As DataColumn
            Get
                Return Me.columnADD2
            End Get
        End Property
        
        Friend ReadOnly Property ADD3Column As DataColumn
            Get
                Return Me.columnADD3
            End Get
        End Property
        
        Friend ReadOnly Property CITYColumn As DataColumn
            Get
                Return Me.columnCITY
            End Get
        End Property
        
        Friend ReadOnly Property PINCODEColumn As DataColumn
            Get
                Return Me.columnPINCODE
            End Get
        End Property
        
        Friend ReadOnly Property STATEColumn As DataColumn
            Get
                Return Me.columnSTATE
            End Get
        End Property
        
        Friend ReadOnly Property EMAILIDColumn As DataColumn
            Get
                Return Me.columnEMAILID
            End Get
        End Property
        
        Friend ReadOnly Property PHONENOColumn As DataColumn
            Get
                Return Me.columnPHONENO
            End Get
        End Property
        
        Friend ReadOnly Property MOBILNOColumn As DataColumn
            Get
                Return Me.columnMOBILNO
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VIEW_MEM_REP_STICKERRow
            Get
                Return CType(Me.Rows(index),VIEW_MEM_REP_STICKERRow)
            End Get
        End Property
        
        Public Event VIEW_MEM_REP_STICKERRowChanged As VIEW_MEM_REP_STICKERRowChangeEventHandler
        
        Public Event VIEW_MEM_REP_STICKERRowChanging As VIEW_MEM_REP_STICKERRowChangeEventHandler
        
        Public Event VIEW_MEM_REP_STICKERRowDeleted As VIEW_MEM_REP_STICKERRowChangeEventHandler
        
        Public Event VIEW_MEM_REP_STICKERRowDeleting As VIEW_MEM_REP_STICKERRowChangeEventHandler
        
        Public Overloads Sub AddVIEW_MEM_REP_STICKERRow(ByVal row As VIEW_MEM_REP_STICKERRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVIEW_MEM_REP_STICKERRow(ByVal MEM_NAME As String, ByVal CURRENTSTATUS As String, ByVal MEMBERTYPECOCE As String, ByVal MCODE As String, ByVal MNAME As String, ByVal ADD1 As String, ByVal ADD2 As String, ByVal ADD3 As String, ByVal CITY As String, ByVal PINCODE As String, ByVal STATE As String, ByVal EMAILID As String, ByVal PHONENO As String, ByVal MOBILNO As String) As VIEW_MEM_REP_STICKERRow
            Dim rowVIEW_MEM_REP_STICKERRow As VIEW_MEM_REP_STICKERRow = CType(Me.NewRow,VIEW_MEM_REP_STICKERRow)
            rowVIEW_MEM_REP_STICKERRow.ItemArray = New Object() {MEM_NAME, CURRENTSTATUS, MEMBERTYPECOCE, MCODE, MNAME, ADD1, ADD2, ADD3, CITY, PINCODE, STATE, EMAILID, PHONENO, MOBILNO}
            Me.Rows.Add(rowVIEW_MEM_REP_STICKERRow)
            Return rowVIEW_MEM_REP_STICKERRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VIEW_MEM_REP_STICKERDataTable = CType(MyBase.Clone,VIEW_MEM_REP_STICKERDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VIEW_MEM_REP_STICKERDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnMEM_NAME = Me.Columns("MEM_NAME")
            Me.columnCURRENTSTATUS = Me.Columns("CURRENTSTATUS")
            Me.columnMEMBERTYPECOCE = Me.Columns("MEMBERTYPECOCE")
            Me.columnMCODE = Me.Columns("MCODE")
            Me.columnMNAME = Me.Columns("MNAME")
            Me.columnADD1 = Me.Columns("ADD1")
            Me.columnADD2 = Me.Columns("ADD2")
            Me.columnADD3 = Me.Columns("ADD3")
            Me.columnCITY = Me.Columns("CITY")
            Me.columnPINCODE = Me.Columns("PINCODE")
            Me.columnSTATE = Me.Columns("STATE")
            Me.columnEMAILID = Me.Columns("EMAILID")
            Me.columnPHONENO = Me.Columns("PHONENO")
            Me.columnMOBILNO = Me.Columns("MOBILNO")
        End Sub
        
        Private Sub InitClass()
            Me.columnMEM_NAME = New DataColumn("MEM_NAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEM_NAME)
            Me.columnCURRENTSTATUS = New DataColumn("CURRENTSTATUS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCURRENTSTATUS)
            Me.columnMEMBERTYPECOCE = New DataColumn("MEMBERTYPECOCE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEMBERTYPECOCE)
            Me.columnMCODE = New DataColumn("MCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMCODE)
            Me.columnMNAME = New DataColumn("MNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMNAME)
            Me.columnADD1 = New DataColumn("ADD1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnADD1)
            Me.columnADD2 = New DataColumn("ADD2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnADD2)
            Me.columnADD3 = New DataColumn("ADD3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnADD3)
            Me.columnCITY = New DataColumn("CITY", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCITY)
            Me.columnPINCODE = New DataColumn("PINCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPINCODE)
            Me.columnSTATE = New DataColumn("STATE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSTATE)
            Me.columnEMAILID = New DataColumn("EMAILID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEMAILID)
            Me.columnPHONENO = New DataColumn("PHONENO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPHONENO)
            Me.columnMOBILNO = New DataColumn("MOBILNO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMOBILNO)
            Me.columnMEM_NAME.AllowDBNull = false
            Me.columnCURRENTSTATUS.AllowDBNull = false
            Me.columnMEMBERTYPECOCE.AllowDBNull = false
            Me.columnMCODE.AllowDBNull = false
            Me.columnMNAME.AllowDBNull = false
            Me.columnADD1.AllowDBNull = false
            Me.columnADD2.AllowDBNull = false
            Me.columnADD3.AllowDBNull = false
            Me.columnPINCODE.AllowDBNull = false
            Me.columnEMAILID.AllowDBNull = false
            Me.columnMOBILNO.AllowDBNull = false
        End Sub
        
        Public Function NewVIEW_MEM_REP_STICKERRow() As VIEW_MEM_REP_STICKERRow
            Return CType(Me.NewRow,VIEW_MEM_REP_STICKERRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VIEW_MEM_REP_STICKERRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VIEW_MEM_REP_STICKERRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VIEW_MEM_REP_STICKERRowChangedEvent) Is Nothing) Then
                RaiseEvent VIEW_MEM_REP_STICKERRowChanged(Me, New VIEW_MEM_REP_STICKERRowChangeEvent(CType(e.Row,VIEW_MEM_REP_STICKERRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VIEW_MEM_REP_STICKERRowChangingEvent) Is Nothing) Then
                RaiseEvent VIEW_MEM_REP_STICKERRowChanging(Me, New VIEW_MEM_REP_STICKERRowChangeEvent(CType(e.Row,VIEW_MEM_REP_STICKERRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VIEW_MEM_REP_STICKERRowDeletedEvent) Is Nothing) Then
                RaiseEvent VIEW_MEM_REP_STICKERRowDeleted(Me, New VIEW_MEM_REP_STICKERRowChangeEvent(CType(e.Row,VIEW_MEM_REP_STICKERRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VIEW_MEM_REP_STICKERRowDeletingEvent) Is Nothing) Then
                RaiseEvent VIEW_MEM_REP_STICKERRowDeleting(Me, New VIEW_MEM_REP_STICKERRowChangeEvent(CType(e.Row,VIEW_MEM_REP_STICKERRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVIEW_MEM_REP_STICKERRow(ByVal row As VIEW_MEM_REP_STICKERRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_MEM_REP_STICKERRow
        Inherits DataRow
        
        Private tableVIEW_MEM_REP_STICKER As VIEW_MEM_REP_STICKERDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVIEW_MEM_REP_STICKER = CType(Me.Table,VIEW_MEM_REP_STICKERDataTable)
        End Sub
        
        Public Property MEM_NAME As String
            Get
                Return CType(Me(Me.tableVIEW_MEM_REP_STICKER.MEM_NAMEColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_STICKER.MEM_NAMEColumn) = value
            End Set
        End Property
        
        Public Property CURRENTSTATUS As String
            Get
                Return CType(Me(Me.tableVIEW_MEM_REP_STICKER.CURRENTSTATUSColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_STICKER.CURRENTSTATUSColumn) = value
            End Set
        End Property
        
        Public Property MEMBERTYPECOCE As String
            Get
                Return CType(Me(Me.tableVIEW_MEM_REP_STICKER.MEMBERTYPECOCEColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_STICKER.MEMBERTYPECOCEColumn) = value
            End Set
        End Property
        
        Public Property MCODE As String
            Get
                Return CType(Me(Me.tableVIEW_MEM_REP_STICKER.MCODEColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_STICKER.MCODEColumn) = value
            End Set
        End Property
        
        Public Property MNAME As String
            Get
                Return CType(Me(Me.tableVIEW_MEM_REP_STICKER.MNAMEColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_STICKER.MNAMEColumn) = value
            End Set
        End Property
        
        Public Property ADD1 As String
            Get
                Return CType(Me(Me.tableVIEW_MEM_REP_STICKER.ADD1Column),String)
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_STICKER.ADD1Column) = value
            End Set
        End Property
        
        Public Property ADD2 As String
            Get
                Return CType(Me(Me.tableVIEW_MEM_REP_STICKER.ADD2Column),String)
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_STICKER.ADD2Column) = value
            End Set
        End Property
        
        Public Property ADD3 As String
            Get
                Return CType(Me(Me.tableVIEW_MEM_REP_STICKER.ADD3Column),String)
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_STICKER.ADD3Column) = value
            End Set
        End Property
        
        Public Property CITY As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_STICKER.CITYColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_STICKER.CITYColumn) = value
            End Set
        End Property
        
        Public Property PINCODE As String
            Get
                Return CType(Me(Me.tableVIEW_MEM_REP_STICKER.PINCODEColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_STICKER.PINCODEColumn) = value
            End Set
        End Property
        
        Public Property STATE As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_STICKER.STATEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_STICKER.STATEColumn) = value
            End Set
        End Property
        
        Public Property EMAILID As String
            Get
                Return CType(Me(Me.tableVIEW_MEM_REP_STICKER.EMAILIDColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_STICKER.EMAILIDColumn) = value
            End Set
        End Property
        
        Public Property PHONENO As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_STICKER.PHONENOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_STICKER.PHONENOColumn) = value
            End Set
        End Property
        
        Public Property MOBILNO As String
            Get
                Return CType(Me(Me.tableVIEW_MEM_REP_STICKER.MOBILNOColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_STICKER.MOBILNOColumn) = value
            End Set
        End Property
        
        Public Function IsCITYNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_STICKER.CITYColumn)
        End Function
        
        Public Sub SetCITYNull()
            Me(Me.tableVIEW_MEM_REP_STICKER.CITYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSTATENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_STICKER.STATEColumn)
        End Function
        
        Public Sub SetSTATENull()
            Me(Me.tableVIEW_MEM_REP_STICKER.STATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPHONENONull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_STICKER.PHONENOColumn)
        End Function
        
        Public Sub SetPHONENONull()
            Me(Me.tableVIEW_MEM_REP_STICKER.PHONENOColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_MEM_REP_STICKERRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VIEW_MEM_REP_STICKERRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VIEW_MEM_REP_STICKERRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VIEW_MEM_REP_STICKERRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_MEM_RPRDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnMCODE As DataColumn
        
        Private columnMNAME As DataColumn
        
        Private columnDOB As DataColumn
        
        Private columnDOJ As DataColumn
        
        Private columnCurentStatus As DataColumn
        
        Private columnMEMBERTYPECODE As DataColumn
        
        Private columnCONTCELL As DataColumn
        
        Private columnmem_code As DataColumn
        
        Private columnname As DataColumn
        
        Private columnrelation As DataColumn
        
        Private columntype1 As DataColumn
        
        Friend Sub New()
            MyBase.New("VIEW_MEM_RPR")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property MCODEColumn As DataColumn
            Get
                Return Me.columnMCODE
            End Get
        End Property
        
        Friend ReadOnly Property MNAMEColumn As DataColumn
            Get
                Return Me.columnMNAME
            End Get
        End Property
        
        Friend ReadOnly Property DOBColumn As DataColumn
            Get
                Return Me.columnDOB
            End Get
        End Property
        
        Friend ReadOnly Property DOJColumn As DataColumn
            Get
                Return Me.columnDOJ
            End Get
        End Property
        
        Friend ReadOnly Property CurentStatusColumn As DataColumn
            Get
                Return Me.columnCurentStatus
            End Get
        End Property
        
        Friend ReadOnly Property MEMBERTYPECODEColumn As DataColumn
            Get
                Return Me.columnMEMBERTYPECODE
            End Get
        End Property
        
        Friend ReadOnly Property CONTCELLColumn As DataColumn
            Get
                Return Me.columnCONTCELL
            End Get
        End Property
        
        Friend ReadOnly Property mem_codeColumn As DataColumn
            Get
                Return Me.columnmem_code
            End Get
        End Property
        
        Friend ReadOnly Property nameColumn As DataColumn
            Get
                Return Me.columnname
            End Get
        End Property
        
        Friend ReadOnly Property relationColumn As DataColumn
            Get
                Return Me.columnrelation
            End Get
        End Property
        
        Friend ReadOnly Property type1Column As DataColumn
            Get
                Return Me.columntype1
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VIEW_MEM_RPRRow
            Get
                Return CType(Me.Rows(index),VIEW_MEM_RPRRow)
            End Get
        End Property
        
        Public Event VIEW_MEM_RPRRowChanged As VIEW_MEM_RPRRowChangeEventHandler
        
        Public Event VIEW_MEM_RPRRowChanging As VIEW_MEM_RPRRowChangeEventHandler
        
        Public Event VIEW_MEM_RPRRowDeleted As VIEW_MEM_RPRRowChangeEventHandler
        
        Public Event VIEW_MEM_RPRRowDeleting As VIEW_MEM_RPRRowChangeEventHandler
        
        Public Overloads Sub AddVIEW_MEM_RPRRow(ByVal row As VIEW_MEM_RPRRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVIEW_MEM_RPRRow(ByVal MCODE As String, ByVal MNAME As String, ByVal DOB As Date, ByVal DOJ As Date, ByVal CurentStatus As String, ByVal MEMBERTYPECODE As String, ByVal CONTCELL As String, ByVal mem_code As String, ByVal name As String, ByVal relation As String, ByVal type1 As String) As VIEW_MEM_RPRRow
            Dim rowVIEW_MEM_RPRRow As VIEW_MEM_RPRRow = CType(Me.NewRow,VIEW_MEM_RPRRow)
            rowVIEW_MEM_RPRRow.ItemArray = New Object() {MCODE, MNAME, DOB, DOJ, CurentStatus, MEMBERTYPECODE, CONTCELL, mem_code, name, relation, type1}
            Me.Rows.Add(rowVIEW_MEM_RPRRow)
            Return rowVIEW_MEM_RPRRow
        End Function
        
        Public Function FindByMCODE(ByVal MCODE As String) As VIEW_MEM_RPRRow
            Return CType(Me.Rows.Find(New Object() {MCODE}),VIEW_MEM_RPRRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VIEW_MEM_RPRDataTable = CType(MyBase.Clone,VIEW_MEM_RPRDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VIEW_MEM_RPRDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnMCODE = Me.Columns("MCODE")
            Me.columnMNAME = Me.Columns("MNAME")
            Me.columnDOB = Me.Columns("DOB")
            Me.columnDOJ = Me.Columns("DOJ")
            Me.columnCurentStatus = Me.Columns("CurentStatus")
            Me.columnMEMBERTYPECODE = Me.Columns("MEMBERTYPECODE")
            Me.columnCONTCELL = Me.Columns("CONTCELL")
            Me.columnmem_code = Me.Columns("mem_code")
            Me.columnname = Me.Columns("name")
            Me.columnrelation = Me.Columns("relation")
            Me.columntype1 = Me.Columns("type1")
        End Sub
        
        Private Sub InitClass()
            Me.columnMCODE = New DataColumn("MCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMCODE)
            Me.columnMNAME = New DataColumn("MNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMNAME)
            Me.columnDOB = New DataColumn("DOB", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDOB)
            Me.columnDOJ = New DataColumn("DOJ", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDOJ)
            Me.columnCurentStatus = New DataColumn("CurentStatus", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCurentStatus)
            Me.columnMEMBERTYPECODE = New DataColumn("MEMBERTYPECODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEMBERTYPECODE)
            Me.columnCONTCELL = New DataColumn("CONTCELL", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCONTCELL)
            Me.columnmem_code = New DataColumn("mem_code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmem_code)
            Me.columnname = New DataColumn("name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnname)
            Me.columnrelation = New DataColumn("relation", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrelation)
            Me.columntype1 = New DataColumn("type1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntype1)
            Me.Constraints.Add(New UniqueConstraint("Dataset1Key2", New DataColumn() {Me.columnMCODE}, true))
            Me.columnMCODE.AllowDBNull = false
            Me.columnMCODE.Unique = true
        End Sub
        
        Public Function NewVIEW_MEM_RPRRow() As VIEW_MEM_RPRRow
            Return CType(Me.NewRow,VIEW_MEM_RPRRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VIEW_MEM_RPRRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VIEW_MEM_RPRRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VIEW_MEM_RPRRowChangedEvent) Is Nothing) Then
                RaiseEvent VIEW_MEM_RPRRowChanged(Me, New VIEW_MEM_RPRRowChangeEvent(CType(e.Row,VIEW_MEM_RPRRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VIEW_MEM_RPRRowChangingEvent) Is Nothing) Then
                RaiseEvent VIEW_MEM_RPRRowChanging(Me, New VIEW_MEM_RPRRowChangeEvent(CType(e.Row,VIEW_MEM_RPRRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VIEW_MEM_RPRRowDeletedEvent) Is Nothing) Then
                RaiseEvent VIEW_MEM_RPRRowDeleted(Me, New VIEW_MEM_RPRRowChangeEvent(CType(e.Row,VIEW_MEM_RPRRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VIEW_MEM_RPRRowDeletingEvent) Is Nothing) Then
                RaiseEvent VIEW_MEM_RPRRowDeleting(Me, New VIEW_MEM_RPRRowChangeEvent(CType(e.Row,VIEW_MEM_RPRRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVIEW_MEM_RPRRow(ByVal row As VIEW_MEM_RPRRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_MEM_RPRRow
        Inherits DataRow
        
        Private tableVIEW_MEM_RPR As VIEW_MEM_RPRDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVIEW_MEM_RPR = CType(Me.Table,VIEW_MEM_RPRDataTable)
        End Sub
        
        Public Property MCODE As String
            Get
                Return CType(Me(Me.tableVIEW_MEM_RPR.MCODEColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_MEM_RPR.MCODEColumn) = value
            End Set
        End Property
        
        Public Property MNAME As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_RPR.MNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_RPR.MNAMEColumn) = value
            End Set
        End Property
        
        Public Property DOB As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_RPR.DOBColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_RPR.DOBColumn) = value
            End Set
        End Property
        
        Public Property DOJ As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_RPR.DOJColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_RPR.DOJColumn) = value
            End Set
        End Property
        
        Public Property CurentStatus As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_RPR.CurentStatusColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_RPR.CurentStatusColumn) = value
            End Set
        End Property
        
        Public Property MEMBERTYPECODE As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_RPR.MEMBERTYPECODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_RPR.MEMBERTYPECODEColumn) = value
            End Set
        End Property
        
        Public Property CONTCELL As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_RPR.CONTCELLColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_RPR.CONTCELLColumn) = value
            End Set
        End Property
        
        Public Property mem_code As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_RPR.mem_codeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_RPR.mem_codeColumn) = value
            End Set
        End Property
        
        Public Property name As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_RPR.nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_RPR.nameColumn) = value
            End Set
        End Property
        
        Public Property relation As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_RPR.relationColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_RPR.relationColumn) = value
            End Set
        End Property
        
        Public Property type1 As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_RPR.type1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_RPR.type1Column) = value
            End Set
        End Property
        
        Public Function IsMNAMENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_RPR.MNAMEColumn)
        End Function
        
        Public Sub SetMNAMENull()
            Me(Me.tableVIEW_MEM_RPR.MNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDOBNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_RPR.DOBColumn)
        End Function
        
        Public Sub SetDOBNull()
            Me(Me.tableVIEW_MEM_RPR.DOBColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDOJNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_RPR.DOJColumn)
        End Function
        
        Public Sub SetDOJNull()
            Me(Me.tableVIEW_MEM_RPR.DOJColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCurentStatusNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_RPR.CurentStatusColumn)
        End Function
        
        Public Sub SetCurentStatusNull()
            Me(Me.tableVIEW_MEM_RPR.CurentStatusColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMEMBERTYPECODENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_RPR.MEMBERTYPECODEColumn)
        End Function
        
        Public Sub SetMEMBERTYPECODENull()
            Me(Me.tableVIEW_MEM_RPR.MEMBERTYPECODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCONTCELLNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_RPR.CONTCELLColumn)
        End Function
        
        Public Sub SetCONTCELLNull()
            Me(Me.tableVIEW_MEM_RPR.CONTCELLColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ismem_codeNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_RPR.mem_codeColumn)
        End Function
        
        Public Sub Setmem_codeNull()
            Me(Me.tableVIEW_MEM_RPR.mem_codeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnameNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_RPR.nameColumn)
        End Function
        
        Public Sub SetnameNull()
            Me(Me.tableVIEW_MEM_RPR.nameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsrelationNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_RPR.relationColumn)
        End Function
        
        Public Sub SetrelationNull()
            Me(Me.tableVIEW_MEM_RPR.relationColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Istype1Null() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_RPR.type1Column)
        End Function
        
        Public Sub Settype1Null()
            Me(Me.tableVIEW_MEM_RPR.type1Column) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_MEM_RPRRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VIEW_MEM_RPRRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VIEW_MEM_RPRRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VIEW_MEM_RPRRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_MEM_REP_SPORTSDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSNO As DataColumn
        
        Private columnMEM_NAME As DataColumn
        
        Private columnMEM_DOB As DataColumn
        
        Private columnMEM_SEX As DataColumn
        
        Private columnMCODE As DataColumn
        
        Private columnMNAME As DataColumn
        
        Private columnSPOUSE As DataColumn
        
        Private columnMEMBERTYPECODE As DataColumn
        
        Private columnCURRENTSTATUS As DataColumn
        
        Private columnMEMBERTYPE As DataColumn
        
        Private columnEMAILID As DataColumn
        
        Private columnPHONENO As DataColumn
        
        Private columnMOBILNO As DataColumn
        
        Private columnSPORTSNAME As DataColumn
        
        Private columnRELATION As DataColumn
        
        Private columnREMARKS As DataColumn
        
        Private columnREL_SEX As DataColumn
        
        Private columnREL_DOB As DataColumn
        
        Friend Sub New()
            MyBase.New("VIEW_MEM_REP_SPORTS")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property SNOColumn As DataColumn
            Get
                Return Me.columnSNO
            End Get
        End Property
        
        Friend ReadOnly Property MEM_NAMEColumn As DataColumn
            Get
                Return Me.columnMEM_NAME
            End Get
        End Property
        
        Friend ReadOnly Property MEM_DOBColumn As DataColumn
            Get
                Return Me.columnMEM_DOB
            End Get
        End Property
        
        Friend ReadOnly Property MEM_SEXColumn As DataColumn
            Get
                Return Me.columnMEM_SEX
            End Get
        End Property
        
        Friend ReadOnly Property MCODEColumn As DataColumn
            Get
                Return Me.columnMCODE
            End Get
        End Property
        
        Friend ReadOnly Property MNAMEColumn As DataColumn
            Get
                Return Me.columnMNAME
            End Get
        End Property
        
        Friend ReadOnly Property SPOUSEColumn As DataColumn
            Get
                Return Me.columnSPOUSE
            End Get
        End Property
        
        Friend ReadOnly Property MEMBERTYPECODEColumn As DataColumn
            Get
                Return Me.columnMEMBERTYPECODE
            End Get
        End Property
        
        Friend ReadOnly Property CURRENTSTATUSColumn As DataColumn
            Get
                Return Me.columnCURRENTSTATUS
            End Get
        End Property
        
        Friend ReadOnly Property MEMBERTYPEColumn As DataColumn
            Get
                Return Me.columnMEMBERTYPE
            End Get
        End Property
        
        Friend ReadOnly Property EMAILIDColumn As DataColumn
            Get
                Return Me.columnEMAILID
            End Get
        End Property
        
        Friend ReadOnly Property PHONENOColumn As DataColumn
            Get
                Return Me.columnPHONENO
            End Get
        End Property
        
        Friend ReadOnly Property MOBILNOColumn As DataColumn
            Get
                Return Me.columnMOBILNO
            End Get
        End Property
        
        Friend ReadOnly Property SPORTSNAMEColumn As DataColumn
            Get
                Return Me.columnSPORTSNAME
            End Get
        End Property
        
        Friend ReadOnly Property RELATIONColumn As DataColumn
            Get
                Return Me.columnRELATION
            End Get
        End Property
        
        Friend ReadOnly Property REMARKSColumn As DataColumn
            Get
                Return Me.columnREMARKS
            End Get
        End Property
        
        Friend ReadOnly Property REL_SEXColumn As DataColumn
            Get
                Return Me.columnREL_SEX
            End Get
        End Property
        
        Friend ReadOnly Property REL_DOBColumn As DataColumn
            Get
                Return Me.columnREL_DOB
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VIEW_MEM_REP_SPORTSRow
            Get
                Return CType(Me.Rows(index),VIEW_MEM_REP_SPORTSRow)
            End Get
        End Property
        
        Public Event VIEW_MEM_REP_SPORTSRowChanged As VIEW_MEM_REP_SPORTSRowChangeEventHandler
        
        Public Event VIEW_MEM_REP_SPORTSRowChanging As VIEW_MEM_REP_SPORTSRowChangeEventHandler
        
        Public Event VIEW_MEM_REP_SPORTSRowDeleted As VIEW_MEM_REP_SPORTSRowChangeEventHandler
        
        Public Event VIEW_MEM_REP_SPORTSRowDeleting As VIEW_MEM_REP_SPORTSRowChangeEventHandler
        
        Public Overloads Sub AddVIEW_MEM_REP_SPORTSRow(ByVal row As VIEW_MEM_REP_SPORTSRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVIEW_MEM_REP_SPORTSRow( _
                    ByVal SNO As Integer,  _
                    ByVal MEM_NAME As String,  _
                    ByVal MEM_DOB As Date,  _
                    ByVal MEM_SEX As String,  _
                    ByVal MCODE As String,  _
                    ByVal MNAME As String,  _
                    ByVal SPOUSE As String,  _
                    ByVal MEMBERTYPECODE As String,  _
                    ByVal CURRENTSTATUS As String,  _
                    ByVal MEMBERTYPE As String,  _
                    ByVal EMAILID As String,  _
                    ByVal PHONENO As String,  _
                    ByVal MOBILNO As String,  _
                    ByVal SPORTSNAME As String,  _
                    ByVal RELATION As String,  _
                    ByVal REMARKS As String,  _
                    ByVal REL_SEX As String,  _
                    ByVal REL_DOB As Date) As VIEW_MEM_REP_SPORTSRow
            Dim rowVIEW_MEM_REP_SPORTSRow As VIEW_MEM_REP_SPORTSRow = CType(Me.NewRow,VIEW_MEM_REP_SPORTSRow)
            rowVIEW_MEM_REP_SPORTSRow.ItemArray = New Object() {SNO, MEM_NAME, MEM_DOB, MEM_SEX, MCODE, MNAME, SPOUSE, MEMBERTYPECODE, CURRENTSTATUS, MEMBERTYPE, EMAILID, PHONENO, MOBILNO, SPORTSNAME, RELATION, REMARKS, REL_SEX, REL_DOB}
            Me.Rows.Add(rowVIEW_MEM_REP_SPORTSRow)
            Return rowVIEW_MEM_REP_SPORTSRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VIEW_MEM_REP_SPORTSDataTable = CType(MyBase.Clone,VIEW_MEM_REP_SPORTSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VIEW_MEM_REP_SPORTSDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnSNO = Me.Columns("SNO")
            Me.columnMEM_NAME = Me.Columns("MEM_NAME")
            Me.columnMEM_DOB = Me.Columns("MEM_DOB")
            Me.columnMEM_SEX = Me.Columns("MEM_SEX")
            Me.columnMCODE = Me.Columns("MCODE")
            Me.columnMNAME = Me.Columns("MNAME")
            Me.columnSPOUSE = Me.Columns("SPOUSE")
            Me.columnMEMBERTYPECODE = Me.Columns("MEMBERTYPECODE")
            Me.columnCURRENTSTATUS = Me.Columns("CURRENTSTATUS")
            Me.columnMEMBERTYPE = Me.Columns("MEMBERTYPE")
            Me.columnEMAILID = Me.Columns("EMAILID")
            Me.columnPHONENO = Me.Columns("PHONENO")
            Me.columnMOBILNO = Me.Columns("MOBILNO")
            Me.columnSPORTSNAME = Me.Columns("SPORTSNAME")
            Me.columnRELATION = Me.Columns("RELATION")
            Me.columnREMARKS = Me.Columns("REMARKS")
            Me.columnREL_SEX = Me.Columns("REL_SEX")
            Me.columnREL_DOB = Me.Columns("REL_DOB")
        End Sub
        
        Private Sub InitClass()
            Me.columnSNO = New DataColumn("SNO", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSNO)
            Me.columnMEM_NAME = New DataColumn("MEM_NAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEM_NAME)
            Me.columnMEM_DOB = New DataColumn("MEM_DOB", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEM_DOB)
            Me.columnMEM_SEX = New DataColumn("MEM_SEX", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEM_SEX)
            Me.columnMCODE = New DataColumn("MCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMCODE)
            Me.columnMNAME = New DataColumn("MNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMNAME)
            Me.columnSPOUSE = New DataColumn("SPOUSE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSPOUSE)
            Me.columnMEMBERTYPECODE = New DataColumn("MEMBERTYPECODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEMBERTYPECODE)
            Me.columnCURRENTSTATUS = New DataColumn("CURRENTSTATUS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCURRENTSTATUS)
            Me.columnMEMBERTYPE = New DataColumn("MEMBERTYPE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEMBERTYPE)
            Me.columnEMAILID = New DataColumn("EMAILID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEMAILID)
            Me.columnPHONENO = New DataColumn("PHONENO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPHONENO)
            Me.columnMOBILNO = New DataColumn("MOBILNO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMOBILNO)
            Me.columnSPORTSNAME = New DataColumn("SPORTSNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSPORTSNAME)
            Me.columnRELATION = New DataColumn("RELATION", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRELATION)
            Me.columnREMARKS = New DataColumn("REMARKS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnREMARKS)
            Me.columnREL_SEX = New DataColumn("REL_SEX", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnREL_SEX)
            Me.columnREL_DOB = New DataColumn("REL_DOB", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnREL_DOB)
            Me.columnSNO.ReadOnly = true
            Me.columnMEM_NAME.ReadOnly = true
            Me.columnMEM_DOB.ReadOnly = true
            Me.columnMEM_SEX.ReadOnly = true
            Me.columnMCODE.ReadOnly = true
            Me.columnMNAME.ReadOnly = true
            Me.columnSPOUSE.ReadOnly = true
            Me.columnMEMBERTYPECODE.ReadOnly = true
            Me.columnCURRENTSTATUS.ReadOnly = true
            Me.columnMEMBERTYPE.ReadOnly = true
            Me.columnEMAILID.ReadOnly = true
            Me.columnPHONENO.ReadOnly = true
            Me.columnMOBILNO.ReadOnly = true
            Me.columnSPORTSNAME.ReadOnly = true
            Me.columnRELATION.ReadOnly = true
            Me.columnREMARKS.ReadOnly = true
            Me.columnREL_SEX.ReadOnly = true
            Me.columnREL_DOB.ReadOnly = true
        End Sub
        
        Public Function NewVIEW_MEM_REP_SPORTSRow() As VIEW_MEM_REP_SPORTSRow
            Return CType(Me.NewRow,VIEW_MEM_REP_SPORTSRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VIEW_MEM_REP_SPORTSRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VIEW_MEM_REP_SPORTSRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VIEW_MEM_REP_SPORTSRowChangedEvent) Is Nothing) Then
                RaiseEvent VIEW_MEM_REP_SPORTSRowChanged(Me, New VIEW_MEM_REP_SPORTSRowChangeEvent(CType(e.Row,VIEW_MEM_REP_SPORTSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VIEW_MEM_REP_SPORTSRowChangingEvent) Is Nothing) Then
                RaiseEvent VIEW_MEM_REP_SPORTSRowChanging(Me, New VIEW_MEM_REP_SPORTSRowChangeEvent(CType(e.Row,VIEW_MEM_REP_SPORTSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VIEW_MEM_REP_SPORTSRowDeletedEvent) Is Nothing) Then
                RaiseEvent VIEW_MEM_REP_SPORTSRowDeleted(Me, New VIEW_MEM_REP_SPORTSRowChangeEvent(CType(e.Row,VIEW_MEM_REP_SPORTSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VIEW_MEM_REP_SPORTSRowDeletingEvent) Is Nothing) Then
                RaiseEvent VIEW_MEM_REP_SPORTSRowDeleting(Me, New VIEW_MEM_REP_SPORTSRowChangeEvent(CType(e.Row,VIEW_MEM_REP_SPORTSRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVIEW_MEM_REP_SPORTSRow(ByVal row As VIEW_MEM_REP_SPORTSRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_MEM_REP_SPORTSRow
        Inherits DataRow
        
        Private tableVIEW_MEM_REP_SPORTS As VIEW_MEM_REP_SPORTSDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVIEW_MEM_REP_SPORTS = CType(Me.Table,VIEW_MEM_REP_SPORTSDataTable)
        End Sub
        
        Public Property SNO As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_SPORTS.SNOColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_SPORTS.SNOColumn) = value
            End Set
        End Property
        
        Public Property MEM_NAME As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_SPORTS.MEM_NAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_SPORTS.MEM_NAMEColumn) = value
            End Set
        End Property
        
        Public Property MEM_DOB As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_SPORTS.MEM_DOBColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_SPORTS.MEM_DOBColumn) = value
            End Set
        End Property
        
        Public Property MEM_SEX As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_SPORTS.MEM_SEXColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_SPORTS.MEM_SEXColumn) = value
            End Set
        End Property
        
        Public Property MCODE As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_SPORTS.MCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_SPORTS.MCODEColumn) = value
            End Set
        End Property
        
        Public Property MNAME As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_SPORTS.MNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_SPORTS.MNAMEColumn) = value
            End Set
        End Property
        
        Public Property SPOUSE As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_SPORTS.SPOUSEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_SPORTS.SPOUSEColumn) = value
            End Set
        End Property
        
        Public Property MEMBERTYPECODE As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_SPORTS.MEMBERTYPECODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_SPORTS.MEMBERTYPECODEColumn) = value
            End Set
        End Property
        
        Public Property CURRENTSTATUS As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_SPORTS.CURRENTSTATUSColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_SPORTS.CURRENTSTATUSColumn) = value
            End Set
        End Property
        
        Public Property MEMBERTYPE As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_SPORTS.MEMBERTYPEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_SPORTS.MEMBERTYPEColumn) = value
            End Set
        End Property
        
        Public Property EMAILID As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_SPORTS.EMAILIDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_SPORTS.EMAILIDColumn) = value
            End Set
        End Property
        
        Public Property PHONENO As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_SPORTS.PHONENOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_SPORTS.PHONENOColumn) = value
            End Set
        End Property
        
        Public Property MOBILNO As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_SPORTS.MOBILNOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_SPORTS.MOBILNOColumn) = value
            End Set
        End Property
        
        Public Property SPORTSNAME As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_SPORTS.SPORTSNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_SPORTS.SPORTSNAMEColumn) = value
            End Set
        End Property
        
        Public Property RELATION As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_SPORTS.RELATIONColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_SPORTS.RELATIONColumn) = value
            End Set
        End Property
        
        Public Property REMARKS As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_SPORTS.REMARKSColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_SPORTS.REMARKSColumn) = value
            End Set
        End Property
        
        Public Property REL_SEX As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_SPORTS.REL_SEXColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_SPORTS.REL_SEXColumn) = value
            End Set
        End Property
        
        Public Property REL_DOB As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_SPORTS.REL_DOBColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_SPORTS.REL_DOBColumn) = value
            End Set
        End Property
        
        Public Function IsSNONull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_SPORTS.SNOColumn)
        End Function
        
        Public Sub SetSNONull()
            Me(Me.tableVIEW_MEM_REP_SPORTS.SNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMEM_NAMENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_SPORTS.MEM_NAMEColumn)
        End Function
        
        Public Sub SetMEM_NAMENull()
            Me(Me.tableVIEW_MEM_REP_SPORTS.MEM_NAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMEM_DOBNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_SPORTS.MEM_DOBColumn)
        End Function
        
        Public Sub SetMEM_DOBNull()
            Me(Me.tableVIEW_MEM_REP_SPORTS.MEM_DOBColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMEM_SEXNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_SPORTS.MEM_SEXColumn)
        End Function
        
        Public Sub SetMEM_SEXNull()
            Me(Me.tableVIEW_MEM_REP_SPORTS.MEM_SEXColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMCODENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_SPORTS.MCODEColumn)
        End Function
        
        Public Sub SetMCODENull()
            Me(Me.tableVIEW_MEM_REP_SPORTS.MCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMNAMENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_SPORTS.MNAMEColumn)
        End Function
        
        Public Sub SetMNAMENull()
            Me(Me.tableVIEW_MEM_REP_SPORTS.MNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSPOUSENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_SPORTS.SPOUSEColumn)
        End Function
        
        Public Sub SetSPOUSENull()
            Me(Me.tableVIEW_MEM_REP_SPORTS.SPOUSEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMEMBERTYPECODENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_SPORTS.MEMBERTYPECODEColumn)
        End Function
        
        Public Sub SetMEMBERTYPECODENull()
            Me(Me.tableVIEW_MEM_REP_SPORTS.MEMBERTYPECODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCURRENTSTATUSNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_SPORTS.CURRENTSTATUSColumn)
        End Function
        
        Public Sub SetCURRENTSTATUSNull()
            Me(Me.tableVIEW_MEM_REP_SPORTS.CURRENTSTATUSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMEMBERTYPENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_SPORTS.MEMBERTYPEColumn)
        End Function
        
        Public Sub SetMEMBERTYPENull()
            Me(Me.tableVIEW_MEM_REP_SPORTS.MEMBERTYPEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEMAILIDNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_SPORTS.EMAILIDColumn)
        End Function
        
        Public Sub SetEMAILIDNull()
            Me(Me.tableVIEW_MEM_REP_SPORTS.EMAILIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPHONENONull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_SPORTS.PHONENOColumn)
        End Function
        
        Public Sub SetPHONENONull()
            Me(Me.tableVIEW_MEM_REP_SPORTS.PHONENOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMOBILNONull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_SPORTS.MOBILNOColumn)
        End Function
        
        Public Sub SetMOBILNONull()
            Me(Me.tableVIEW_MEM_REP_SPORTS.MOBILNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSPORTSNAMENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_SPORTS.SPORTSNAMEColumn)
        End Function
        
        Public Sub SetSPORTSNAMENull()
            Me(Me.tableVIEW_MEM_REP_SPORTS.SPORTSNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRELATIONNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_SPORTS.RELATIONColumn)
        End Function
        
        Public Sub SetRELATIONNull()
            Me(Me.tableVIEW_MEM_REP_SPORTS.RELATIONColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsREMARKSNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_SPORTS.REMARKSColumn)
        End Function
        
        Public Sub SetREMARKSNull()
            Me(Me.tableVIEW_MEM_REP_SPORTS.REMARKSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsREL_SEXNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_SPORTS.REL_SEXColumn)
        End Function
        
        Public Sub SetREL_SEXNull()
            Me(Me.tableVIEW_MEM_REP_SPORTS.REL_SEXColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsREL_DOBNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_SPORTS.REL_DOBColumn)
        End Function
        
        Public Sub SetREL_DOBNull()
            Me(Me.tableVIEW_MEM_REP_SPORTS.REL_DOBColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_MEM_REP_SPORTSRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VIEW_MEM_REP_SPORTSRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VIEW_MEM_REP_SPORTSRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VIEW_MEM_REP_SPORTSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_MEM_REP_ACTIVE_LISTDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSNO As DataColumn
        
        Private columnACTIVENO As DataColumn
        
        Private columnINACTIVENO As DataColumn
        
        Private columnTOTALNO As DataColumn
        
        Private columnMEMBERTYPECODE As DataColumn
        
        Private columnMEMBERTYPE As DataColumn
        
        Friend Sub New()
            MyBase.New("VIEW_MEM_REP_ACTIVE_LIST")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property SNOColumn As DataColumn
            Get
                Return Me.columnSNO
            End Get
        End Property
        
        Friend ReadOnly Property ACTIVENOColumn As DataColumn
            Get
                Return Me.columnACTIVENO
            End Get
        End Property
        
        Friend ReadOnly Property INACTIVENOColumn As DataColumn
            Get
                Return Me.columnINACTIVENO
            End Get
        End Property
        
        Friend ReadOnly Property TOTALNOColumn As DataColumn
            Get
                Return Me.columnTOTALNO
            End Get
        End Property
        
        Friend ReadOnly Property MEMBERTYPECODEColumn As DataColumn
            Get
                Return Me.columnMEMBERTYPECODE
            End Get
        End Property
        
        Friend ReadOnly Property MEMBERTYPEColumn As DataColumn
            Get
                Return Me.columnMEMBERTYPE
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VIEW_MEM_REP_ACTIVE_LISTRow
            Get
                Return CType(Me.Rows(index),VIEW_MEM_REP_ACTIVE_LISTRow)
            End Get
        End Property
        
        Public Event VIEW_MEM_REP_ACTIVE_LISTRowChanged As VIEW_MEM_REP_ACTIVE_LISTRowChangeEventHandler
        
        Public Event VIEW_MEM_REP_ACTIVE_LISTRowChanging As VIEW_MEM_REP_ACTIVE_LISTRowChangeEventHandler
        
        Public Event VIEW_MEM_REP_ACTIVE_LISTRowDeleted As VIEW_MEM_REP_ACTIVE_LISTRowChangeEventHandler
        
        Public Event VIEW_MEM_REP_ACTIVE_LISTRowDeleting As VIEW_MEM_REP_ACTIVE_LISTRowChangeEventHandler
        
        Public Overloads Sub AddVIEW_MEM_REP_ACTIVE_LISTRow(ByVal row As VIEW_MEM_REP_ACTIVE_LISTRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVIEW_MEM_REP_ACTIVE_LISTRow(ByVal SNO As Integer, ByVal ACTIVENO As Integer, ByVal INACTIVENO As Integer, ByVal TOTALNO As Integer, ByVal MEMBERTYPECODE As String, ByVal MEMBERTYPE As String) As VIEW_MEM_REP_ACTIVE_LISTRow
            Dim rowVIEW_MEM_REP_ACTIVE_LISTRow As VIEW_MEM_REP_ACTIVE_LISTRow = CType(Me.NewRow,VIEW_MEM_REP_ACTIVE_LISTRow)
            rowVIEW_MEM_REP_ACTIVE_LISTRow.ItemArray = New Object() {SNO, ACTIVENO, INACTIVENO, TOTALNO, MEMBERTYPECODE, MEMBERTYPE}
            Me.Rows.Add(rowVIEW_MEM_REP_ACTIVE_LISTRow)
            Return rowVIEW_MEM_REP_ACTIVE_LISTRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VIEW_MEM_REP_ACTIVE_LISTDataTable = CType(MyBase.Clone,VIEW_MEM_REP_ACTIVE_LISTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VIEW_MEM_REP_ACTIVE_LISTDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnSNO = Me.Columns("SNO")
            Me.columnACTIVENO = Me.Columns("ACTIVENO")
            Me.columnINACTIVENO = Me.Columns("INACTIVENO")
            Me.columnTOTALNO = Me.Columns("TOTALNO")
            Me.columnMEMBERTYPECODE = Me.Columns("MEMBERTYPECODE")
            Me.columnMEMBERTYPE = Me.Columns("MEMBERTYPE")
        End Sub
        
        Private Sub InitClass()
            Me.columnSNO = New DataColumn("SNO", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSNO)
            Me.columnACTIVENO = New DataColumn("ACTIVENO", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnACTIVENO)
            Me.columnINACTIVENO = New DataColumn("INACTIVENO", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnINACTIVENO)
            Me.columnTOTALNO = New DataColumn("TOTALNO", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTOTALNO)
            Me.columnMEMBERTYPECODE = New DataColumn("MEMBERTYPECODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEMBERTYPECODE)
            Me.columnMEMBERTYPE = New DataColumn("MEMBERTYPE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEMBERTYPE)
            Me.columnSNO.AllowDBNull = false
            Me.columnMEMBERTYPECODE.AllowDBNull = false
            Me.columnMEMBERTYPE.AllowDBNull = false
        End Sub
        
        Public Function NewVIEW_MEM_REP_ACTIVE_LISTRow() As VIEW_MEM_REP_ACTIVE_LISTRow
            Return CType(Me.NewRow,VIEW_MEM_REP_ACTIVE_LISTRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VIEW_MEM_REP_ACTIVE_LISTRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VIEW_MEM_REP_ACTIVE_LISTRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VIEW_MEM_REP_ACTIVE_LISTRowChangedEvent) Is Nothing) Then
                RaiseEvent VIEW_MEM_REP_ACTIVE_LISTRowChanged(Me, New VIEW_MEM_REP_ACTIVE_LISTRowChangeEvent(CType(e.Row,VIEW_MEM_REP_ACTIVE_LISTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VIEW_MEM_REP_ACTIVE_LISTRowChangingEvent) Is Nothing) Then
                RaiseEvent VIEW_MEM_REP_ACTIVE_LISTRowChanging(Me, New VIEW_MEM_REP_ACTIVE_LISTRowChangeEvent(CType(e.Row,VIEW_MEM_REP_ACTIVE_LISTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VIEW_MEM_REP_ACTIVE_LISTRowDeletedEvent) Is Nothing) Then
                RaiseEvent VIEW_MEM_REP_ACTIVE_LISTRowDeleted(Me, New VIEW_MEM_REP_ACTIVE_LISTRowChangeEvent(CType(e.Row,VIEW_MEM_REP_ACTIVE_LISTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VIEW_MEM_REP_ACTIVE_LISTRowDeletingEvent) Is Nothing) Then
                RaiseEvent VIEW_MEM_REP_ACTIVE_LISTRowDeleting(Me, New VIEW_MEM_REP_ACTIVE_LISTRowChangeEvent(CType(e.Row,VIEW_MEM_REP_ACTIVE_LISTRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVIEW_MEM_REP_ACTIVE_LISTRow(ByVal row As VIEW_MEM_REP_ACTIVE_LISTRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_MEM_REP_ACTIVE_LISTRow
        Inherits DataRow
        
        Private tableVIEW_MEM_REP_ACTIVE_LIST As VIEW_MEM_REP_ACTIVE_LISTDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVIEW_MEM_REP_ACTIVE_LIST = CType(Me.Table,VIEW_MEM_REP_ACTIVE_LISTDataTable)
        End Sub
        
        Public Property SNO As Integer
            Get
                Return CType(Me(Me.tableVIEW_MEM_REP_ACTIVE_LIST.SNOColumn),Integer)
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_ACTIVE_LIST.SNOColumn) = value
            End Set
        End Property
        
        Public Property ACTIVENO As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_ACTIVE_LIST.ACTIVENOColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_ACTIVE_LIST.ACTIVENOColumn) = value
            End Set
        End Property
        
        Public Property INACTIVENO As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_ACTIVE_LIST.INACTIVENOColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_ACTIVE_LIST.INACTIVENOColumn) = value
            End Set
        End Property
        
        Public Property TOTALNO As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_ACTIVE_LIST.TOTALNOColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_ACTIVE_LIST.TOTALNOColumn) = value
            End Set
        End Property
        
        Public Property MEMBERTYPECODE As String
            Get
                Return CType(Me(Me.tableVIEW_MEM_REP_ACTIVE_LIST.MEMBERTYPECODEColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_ACTIVE_LIST.MEMBERTYPECODEColumn) = value
            End Set
        End Property
        
        Public Property MEMBERTYPE As String
            Get
                Return CType(Me(Me.tableVIEW_MEM_REP_ACTIVE_LIST.MEMBERTYPEColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_ACTIVE_LIST.MEMBERTYPEColumn) = value
            End Set
        End Property
        
        Public Function IsACTIVENONull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_ACTIVE_LIST.ACTIVENOColumn)
        End Function
        
        Public Sub SetACTIVENONull()
            Me(Me.tableVIEW_MEM_REP_ACTIVE_LIST.ACTIVENOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsINACTIVENONull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_ACTIVE_LIST.INACTIVENOColumn)
        End Function
        
        Public Sub SetINACTIVENONull()
            Me(Me.tableVIEW_MEM_REP_ACTIVE_LIST.INACTIVENOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTOTALNONull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_ACTIVE_LIST.TOTALNOColumn)
        End Function
        
        Public Sub SetTOTALNONull()
            Me(Me.tableVIEW_MEM_REP_ACTIVE_LIST.TOTALNOColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_MEM_REP_ACTIVE_LISTRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VIEW_MEM_REP_ACTIVE_LISTRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VIEW_MEM_REP_ACTIVE_LISTRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VIEW_MEM_REP_ACTIVE_LISTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_MEM_REP_DEPENDENTDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSNO As DataColumn
        
        Private columnMEM_NAME As DataColumn
        
        Private columnMEM_DOB As DataColumn
        
        Private columnMEM_SEX As DataColumn
        
        Private columnMCODE As DataColumn
        
        Private columnMNAME As DataColumn
        
        Private columnSPOUSE As DataColumn
        
        Private columnMEMBERTYPECODE As DataColumn
        
        Private columnCURRENTSTATUS As DataColumn
        
        Private columnMEMBERTYPE As DataColumn
        
        Private columnDEPENDENT As DataColumn
        
        Private columnDEPT_DOB As DataColumn
        
        Private columnDEPT_SEX As DataColumn
        
        Private columnEMAILID As DataColumn
        
        Private columnPHONENO As DataColumn
        
        Private columnMOBILNO As DataColumn
        
        Private columnAGEDIFF As DataColumn
        
        Private columnRELATION As DataColumn
        
        Friend Sub New()
            MyBase.New("VIEW_MEM_REP_DEPENDENT")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property SNOColumn As DataColumn
            Get
                Return Me.columnSNO
            End Get
        End Property
        
        Friend ReadOnly Property MEM_NAMEColumn As DataColumn
            Get
                Return Me.columnMEM_NAME
            End Get
        End Property
        
        Friend ReadOnly Property MEM_DOBColumn As DataColumn
            Get
                Return Me.columnMEM_DOB
            End Get
        End Property
        
        Friend ReadOnly Property MEM_SEXColumn As DataColumn
            Get
                Return Me.columnMEM_SEX
            End Get
        End Property
        
        Friend ReadOnly Property MCODEColumn As DataColumn
            Get
                Return Me.columnMCODE
            End Get
        End Property
        
        Friend ReadOnly Property MNAMEColumn As DataColumn
            Get
                Return Me.columnMNAME
            End Get
        End Property
        
        Friend ReadOnly Property SPOUSEColumn As DataColumn
            Get
                Return Me.columnSPOUSE
            End Get
        End Property
        
        Friend ReadOnly Property MEMBERTYPECODEColumn As DataColumn
            Get
                Return Me.columnMEMBERTYPECODE
            End Get
        End Property
        
        Friend ReadOnly Property CURRENTSTATUSColumn As DataColumn
            Get
                Return Me.columnCURRENTSTATUS
            End Get
        End Property
        
        Friend ReadOnly Property MEMBERTYPEColumn As DataColumn
            Get
                Return Me.columnMEMBERTYPE
            End Get
        End Property
        
        Friend ReadOnly Property DEPENDENTColumn As DataColumn
            Get
                Return Me.columnDEPENDENT
            End Get
        End Property
        
        Friend ReadOnly Property DEPT_DOBColumn As DataColumn
            Get
                Return Me.columnDEPT_DOB
            End Get
        End Property
        
        Friend ReadOnly Property DEPT_SEXColumn As DataColumn
            Get
                Return Me.columnDEPT_SEX
            End Get
        End Property
        
        Friend ReadOnly Property EMAILIDColumn As DataColumn
            Get
                Return Me.columnEMAILID
            End Get
        End Property
        
        Friend ReadOnly Property PHONENOColumn As DataColumn
            Get
                Return Me.columnPHONENO
            End Get
        End Property
        
        Friend ReadOnly Property MOBILNOColumn As DataColumn
            Get
                Return Me.columnMOBILNO
            End Get
        End Property
        
        Friend ReadOnly Property AGEDIFFColumn As DataColumn
            Get
                Return Me.columnAGEDIFF
            End Get
        End Property
        
        Friend ReadOnly Property RELATIONColumn As DataColumn
            Get
                Return Me.columnRELATION
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VIEW_MEM_REP_DEPENDENTRow
            Get
                Return CType(Me.Rows(index),VIEW_MEM_REP_DEPENDENTRow)
            End Get
        End Property
        
        Public Event VIEW_MEM_REP_DEPENDENTRowChanged As VIEW_MEM_REP_DEPENDENTRowChangeEventHandler
        
        Public Event VIEW_MEM_REP_DEPENDENTRowChanging As VIEW_MEM_REP_DEPENDENTRowChangeEventHandler
        
        Public Event VIEW_MEM_REP_DEPENDENTRowDeleted As VIEW_MEM_REP_DEPENDENTRowChangeEventHandler
        
        Public Event VIEW_MEM_REP_DEPENDENTRowDeleting As VIEW_MEM_REP_DEPENDENTRowChangeEventHandler
        
        Public Overloads Sub AddVIEW_MEM_REP_DEPENDENTRow(ByVal row As VIEW_MEM_REP_DEPENDENTRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVIEW_MEM_REP_DEPENDENTRow( _
                    ByVal SNO As Integer,  _
                    ByVal MEM_NAME As String,  _
                    ByVal MEM_DOB As Date,  _
                    ByVal MEM_SEX As String,  _
                    ByVal MCODE As String,  _
                    ByVal MNAME As String,  _
                    ByVal SPOUSE As String,  _
                    ByVal MEMBERTYPECODE As String,  _
                    ByVal CURRENTSTATUS As String,  _
                    ByVal MEMBERTYPE As String,  _
                    ByVal DEPENDENT As String,  _
                    ByVal DEPT_DOB As Date,  _
                    ByVal DEPT_SEX As String,  _
                    ByVal EMAILID As String,  _
                    ByVal PHONENO As String,  _
                    ByVal MOBILNO As String,  _
                    ByVal AGEDIFF As Integer,  _
                    ByVal RELATION As String) As VIEW_MEM_REP_DEPENDENTRow
            Dim rowVIEW_MEM_REP_DEPENDENTRow As VIEW_MEM_REP_DEPENDENTRow = CType(Me.NewRow,VIEW_MEM_REP_DEPENDENTRow)
            rowVIEW_MEM_REP_DEPENDENTRow.ItemArray = New Object() {SNO, MEM_NAME, MEM_DOB, MEM_SEX, MCODE, MNAME, SPOUSE, MEMBERTYPECODE, CURRENTSTATUS, MEMBERTYPE, DEPENDENT, DEPT_DOB, DEPT_SEX, EMAILID, PHONENO, MOBILNO, AGEDIFF, RELATION}
            Me.Rows.Add(rowVIEW_MEM_REP_DEPENDENTRow)
            Return rowVIEW_MEM_REP_DEPENDENTRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VIEW_MEM_REP_DEPENDENTDataTable = CType(MyBase.Clone,VIEW_MEM_REP_DEPENDENTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VIEW_MEM_REP_DEPENDENTDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnSNO = Me.Columns("SNO")
            Me.columnMEM_NAME = Me.Columns("MEM_NAME")
            Me.columnMEM_DOB = Me.Columns("MEM_DOB")
            Me.columnMEM_SEX = Me.Columns("MEM_SEX")
            Me.columnMCODE = Me.Columns("MCODE")
            Me.columnMNAME = Me.Columns("MNAME")
            Me.columnSPOUSE = Me.Columns("SPOUSE")
            Me.columnMEMBERTYPECODE = Me.Columns("MEMBERTYPECODE")
            Me.columnCURRENTSTATUS = Me.Columns("CURRENTSTATUS")
            Me.columnMEMBERTYPE = Me.Columns("MEMBERTYPE")
            Me.columnDEPENDENT = Me.Columns("DEPENDENT")
            Me.columnDEPT_DOB = Me.Columns("DEPT_DOB")
            Me.columnDEPT_SEX = Me.Columns("DEPT_SEX")
            Me.columnEMAILID = Me.Columns("EMAILID")
            Me.columnPHONENO = Me.Columns("PHONENO")
            Me.columnMOBILNO = Me.Columns("MOBILNO")
            Me.columnAGEDIFF = Me.Columns("AGEDIFF")
            Me.columnRELATION = Me.Columns("RELATION")
        End Sub
        
        Private Sub InitClass()
            Me.columnSNO = New DataColumn("SNO", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSNO)
            Me.columnMEM_NAME = New DataColumn("MEM_NAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEM_NAME)
            Me.columnMEM_DOB = New DataColumn("MEM_DOB", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEM_DOB)
            Me.columnMEM_SEX = New DataColumn("MEM_SEX", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEM_SEX)
            Me.columnMCODE = New DataColumn("MCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMCODE)
            Me.columnMNAME = New DataColumn("MNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMNAME)
            Me.columnSPOUSE = New DataColumn("SPOUSE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSPOUSE)
            Me.columnMEMBERTYPECODE = New DataColumn("MEMBERTYPECODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEMBERTYPECODE)
            Me.columnCURRENTSTATUS = New DataColumn("CURRENTSTATUS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCURRENTSTATUS)
            Me.columnMEMBERTYPE = New DataColumn("MEMBERTYPE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEMBERTYPE)
            Me.columnDEPENDENT = New DataColumn("DEPENDENT", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDEPENDENT)
            Me.columnDEPT_DOB = New DataColumn("DEPT_DOB", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDEPT_DOB)
            Me.columnDEPT_SEX = New DataColumn("DEPT_SEX", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDEPT_SEX)
            Me.columnEMAILID = New DataColumn("EMAILID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEMAILID)
            Me.columnPHONENO = New DataColumn("PHONENO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPHONENO)
            Me.columnMOBILNO = New DataColumn("MOBILNO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMOBILNO)
            Me.columnAGEDIFF = New DataColumn("AGEDIFF", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAGEDIFF)
            Me.columnRELATION = New DataColumn("RELATION", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRELATION)
            Me.columnSNO.ReadOnly = true
            Me.columnMEM_NAME.ReadOnly = true
            Me.columnMEM_DOB.ReadOnly = true
            Me.columnMEM_SEX.ReadOnly = true
            Me.columnMCODE.ReadOnly = true
            Me.columnMNAME.ReadOnly = true
            Me.columnSPOUSE.ReadOnly = true
            Me.columnMEMBERTYPECODE.ReadOnly = true
            Me.columnCURRENTSTATUS.ReadOnly = true
            Me.columnMEMBERTYPE.ReadOnly = true
            Me.columnDEPENDENT.ReadOnly = true
            Me.columnDEPT_DOB.ReadOnly = true
            Me.columnDEPT_SEX.ReadOnly = true
            Me.columnEMAILID.ReadOnly = true
            Me.columnPHONENO.ReadOnly = true
            Me.columnMOBILNO.ReadOnly = true
            Me.columnAGEDIFF.ReadOnly = true
            Me.columnRELATION.ReadOnly = true
        End Sub
        
        Public Function NewVIEW_MEM_REP_DEPENDENTRow() As VIEW_MEM_REP_DEPENDENTRow
            Return CType(Me.NewRow,VIEW_MEM_REP_DEPENDENTRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VIEW_MEM_REP_DEPENDENTRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VIEW_MEM_REP_DEPENDENTRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VIEW_MEM_REP_DEPENDENTRowChangedEvent) Is Nothing) Then
                RaiseEvent VIEW_MEM_REP_DEPENDENTRowChanged(Me, New VIEW_MEM_REP_DEPENDENTRowChangeEvent(CType(e.Row,VIEW_MEM_REP_DEPENDENTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VIEW_MEM_REP_DEPENDENTRowChangingEvent) Is Nothing) Then
                RaiseEvent VIEW_MEM_REP_DEPENDENTRowChanging(Me, New VIEW_MEM_REP_DEPENDENTRowChangeEvent(CType(e.Row,VIEW_MEM_REP_DEPENDENTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VIEW_MEM_REP_DEPENDENTRowDeletedEvent) Is Nothing) Then
                RaiseEvent VIEW_MEM_REP_DEPENDENTRowDeleted(Me, New VIEW_MEM_REP_DEPENDENTRowChangeEvent(CType(e.Row,VIEW_MEM_REP_DEPENDENTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VIEW_MEM_REP_DEPENDENTRowDeletingEvent) Is Nothing) Then
                RaiseEvent VIEW_MEM_REP_DEPENDENTRowDeleting(Me, New VIEW_MEM_REP_DEPENDENTRowChangeEvent(CType(e.Row,VIEW_MEM_REP_DEPENDENTRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVIEW_MEM_REP_DEPENDENTRow(ByVal row As VIEW_MEM_REP_DEPENDENTRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_MEM_REP_DEPENDENTRow
        Inherits DataRow
        
        Private tableVIEW_MEM_REP_DEPENDENT As VIEW_MEM_REP_DEPENDENTDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVIEW_MEM_REP_DEPENDENT = CType(Me.Table,VIEW_MEM_REP_DEPENDENTDataTable)
        End Sub
        
        Public Property SNO As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_DEPENDENT.SNOColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_DEPENDENT.SNOColumn) = value
            End Set
        End Property
        
        Public Property MEM_NAME As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_DEPENDENT.MEM_NAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_DEPENDENT.MEM_NAMEColumn) = value
            End Set
        End Property
        
        Public Property MEM_DOB As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_DEPENDENT.MEM_DOBColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_DEPENDENT.MEM_DOBColumn) = value
            End Set
        End Property
        
        Public Property MEM_SEX As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_DEPENDENT.MEM_SEXColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_DEPENDENT.MEM_SEXColumn) = value
            End Set
        End Property
        
        Public Property MCODE As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_DEPENDENT.MCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_DEPENDENT.MCODEColumn) = value
            End Set
        End Property
        
        Public Property MNAME As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_DEPENDENT.MNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_DEPENDENT.MNAMEColumn) = value
            End Set
        End Property
        
        Public Property SPOUSE As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_DEPENDENT.SPOUSEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_DEPENDENT.SPOUSEColumn) = value
            End Set
        End Property
        
        Public Property MEMBERTYPECODE As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_DEPENDENT.MEMBERTYPECODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_DEPENDENT.MEMBERTYPECODEColumn) = value
            End Set
        End Property
        
        Public Property CURRENTSTATUS As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_DEPENDENT.CURRENTSTATUSColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_DEPENDENT.CURRENTSTATUSColumn) = value
            End Set
        End Property
        
        Public Property MEMBERTYPE As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_DEPENDENT.MEMBERTYPEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_DEPENDENT.MEMBERTYPEColumn) = value
            End Set
        End Property
        
        Public Property DEPENDENT As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_DEPENDENT.DEPENDENTColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_DEPENDENT.DEPENDENTColumn) = value
            End Set
        End Property
        
        Public Property DEPT_DOB As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_DEPENDENT.DEPT_DOBColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_DEPENDENT.DEPT_DOBColumn) = value
            End Set
        End Property
        
        Public Property DEPT_SEX As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_DEPENDENT.DEPT_SEXColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_DEPENDENT.DEPT_SEXColumn) = value
            End Set
        End Property
        
        Public Property EMAILID As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_DEPENDENT.EMAILIDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_DEPENDENT.EMAILIDColumn) = value
            End Set
        End Property
        
        Public Property PHONENO As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_DEPENDENT.PHONENOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_DEPENDENT.PHONENOColumn) = value
            End Set
        End Property
        
        Public Property MOBILNO As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_DEPENDENT.MOBILNOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_DEPENDENT.MOBILNOColumn) = value
            End Set
        End Property
        
        Public Property AGEDIFF As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_DEPENDENT.AGEDIFFColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_DEPENDENT.AGEDIFFColumn) = value
            End Set
        End Property
        
        Public Property RELATION As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_REP_DEPENDENT.RELATIONColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_DEPENDENT.RELATIONColumn) = value
            End Set
        End Property
        
        Public Function IsSNONull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_DEPENDENT.SNOColumn)
        End Function
        
        Public Sub SetSNONull()
            Me(Me.tableVIEW_MEM_REP_DEPENDENT.SNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMEM_NAMENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_DEPENDENT.MEM_NAMEColumn)
        End Function
        
        Public Sub SetMEM_NAMENull()
            Me(Me.tableVIEW_MEM_REP_DEPENDENT.MEM_NAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMEM_DOBNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_DEPENDENT.MEM_DOBColumn)
        End Function
        
        Public Sub SetMEM_DOBNull()
            Me(Me.tableVIEW_MEM_REP_DEPENDENT.MEM_DOBColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMEM_SEXNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_DEPENDENT.MEM_SEXColumn)
        End Function
        
        Public Sub SetMEM_SEXNull()
            Me(Me.tableVIEW_MEM_REP_DEPENDENT.MEM_SEXColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMCODENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_DEPENDENT.MCODEColumn)
        End Function
        
        Public Sub SetMCODENull()
            Me(Me.tableVIEW_MEM_REP_DEPENDENT.MCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMNAMENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_DEPENDENT.MNAMEColumn)
        End Function
        
        Public Sub SetMNAMENull()
            Me(Me.tableVIEW_MEM_REP_DEPENDENT.MNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSPOUSENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_DEPENDENT.SPOUSEColumn)
        End Function
        
        Public Sub SetSPOUSENull()
            Me(Me.tableVIEW_MEM_REP_DEPENDENT.SPOUSEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMEMBERTYPECODENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_DEPENDENT.MEMBERTYPECODEColumn)
        End Function
        
        Public Sub SetMEMBERTYPECODENull()
            Me(Me.tableVIEW_MEM_REP_DEPENDENT.MEMBERTYPECODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCURRENTSTATUSNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_DEPENDENT.CURRENTSTATUSColumn)
        End Function
        
        Public Sub SetCURRENTSTATUSNull()
            Me(Me.tableVIEW_MEM_REP_DEPENDENT.CURRENTSTATUSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMEMBERTYPENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_DEPENDENT.MEMBERTYPEColumn)
        End Function
        
        Public Sub SetMEMBERTYPENull()
            Me(Me.tableVIEW_MEM_REP_DEPENDENT.MEMBERTYPEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDEPENDENTNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_DEPENDENT.DEPENDENTColumn)
        End Function
        
        Public Sub SetDEPENDENTNull()
            Me(Me.tableVIEW_MEM_REP_DEPENDENT.DEPENDENTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDEPT_DOBNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_DEPENDENT.DEPT_DOBColumn)
        End Function
        
        Public Sub SetDEPT_DOBNull()
            Me(Me.tableVIEW_MEM_REP_DEPENDENT.DEPT_DOBColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDEPT_SEXNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_DEPENDENT.DEPT_SEXColumn)
        End Function
        
        Public Sub SetDEPT_SEXNull()
            Me(Me.tableVIEW_MEM_REP_DEPENDENT.DEPT_SEXColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEMAILIDNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_DEPENDENT.EMAILIDColumn)
        End Function
        
        Public Sub SetEMAILIDNull()
            Me(Me.tableVIEW_MEM_REP_DEPENDENT.EMAILIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPHONENONull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_DEPENDENT.PHONENOColumn)
        End Function
        
        Public Sub SetPHONENONull()
            Me(Me.tableVIEW_MEM_REP_DEPENDENT.PHONENOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMOBILNONull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_DEPENDENT.MOBILNOColumn)
        End Function
        
        Public Sub SetMOBILNONull()
            Me(Me.tableVIEW_MEM_REP_DEPENDENT.MOBILNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAGEDIFFNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_DEPENDENT.AGEDIFFColumn)
        End Function
        
        Public Sub SetAGEDIFFNull()
            Me(Me.tableVIEW_MEM_REP_DEPENDENT.AGEDIFFColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRELATIONNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_REP_DEPENDENT.RELATIONColumn)
        End Function
        
        Public Sub SetRELATIONNull()
            Me(Me.tableVIEW_MEM_REP_DEPENDENT.RELATIONColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_MEM_REP_DEPENDENTRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VIEW_MEM_REP_DEPENDENTRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VIEW_MEM_REP_DEPENDENTRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VIEW_MEM_REP_DEPENDENTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_SUBS_SUMMARYDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSNO As DataColumn
        
        Private columnMEM_NAME As DataColumn
        
        Private columnMCODE As DataColumn
        
        Private columnMNAME As DataColumn
        
        Private columnMEMBERTYPECODE As DataColumn
        
        Private columnCURRENTSTATUS As DataColumn
        
        Private columnMEMBERTYPE As DataColumn
        
        Private columnSUBSCODE As DataColumn
        
        Private columnSUBSDESC As DataColumn
        
        Private columnSUBAMOUNT As DataColumn
        
        Private columnTAXAMOUNT As DataColumn
        
        Private columnBILLDATE As DataColumn
        
        Private columnSUBSFLG As DataColumn
        
        Friend Sub New()
            MyBase.New("VIEW_SUBS_SUMMARY")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property SNOColumn As DataColumn
            Get
                Return Me.columnSNO
            End Get
        End Property
        
        Friend ReadOnly Property MEM_NAMEColumn As DataColumn
            Get
                Return Me.columnMEM_NAME
            End Get
        End Property
        
        Friend ReadOnly Property MCODEColumn As DataColumn
            Get
                Return Me.columnMCODE
            End Get
        End Property
        
        Friend ReadOnly Property MNAMEColumn As DataColumn
            Get
                Return Me.columnMNAME
            End Get
        End Property
        
        Friend ReadOnly Property MEMBERTYPECODEColumn As DataColumn
            Get
                Return Me.columnMEMBERTYPECODE
            End Get
        End Property
        
        Friend ReadOnly Property CURRENTSTATUSColumn As DataColumn
            Get
                Return Me.columnCURRENTSTATUS
            End Get
        End Property
        
        Friend ReadOnly Property MEMBERTYPEColumn As DataColumn
            Get
                Return Me.columnMEMBERTYPE
            End Get
        End Property
        
        Friend ReadOnly Property SUBSCODEColumn As DataColumn
            Get
                Return Me.columnSUBSCODE
            End Get
        End Property
        
        Friend ReadOnly Property SUBSDESCColumn As DataColumn
            Get
                Return Me.columnSUBSDESC
            End Get
        End Property
        
        Friend ReadOnly Property SUBAMOUNTColumn As DataColumn
            Get
                Return Me.columnSUBAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property TAXAMOUNTColumn As DataColumn
            Get
                Return Me.columnTAXAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property BILLDATEColumn As DataColumn
            Get
                Return Me.columnBILLDATE
            End Get
        End Property
        
        Friend ReadOnly Property SUBSFLGColumn As DataColumn
            Get
                Return Me.columnSUBSFLG
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VIEW_SUBS_SUMMARYRow
            Get
                Return CType(Me.Rows(index),VIEW_SUBS_SUMMARYRow)
            End Get
        End Property
        
        Public Event VIEW_SUBS_SUMMARYRowChanged As VIEW_SUBS_SUMMARYRowChangeEventHandler
        
        Public Event VIEW_SUBS_SUMMARYRowChanging As VIEW_SUBS_SUMMARYRowChangeEventHandler
        
        Public Event VIEW_SUBS_SUMMARYRowDeleted As VIEW_SUBS_SUMMARYRowChangeEventHandler
        
        Public Event VIEW_SUBS_SUMMARYRowDeleting As VIEW_SUBS_SUMMARYRowChangeEventHandler
        
        Public Overloads Sub AddVIEW_SUBS_SUMMARYRow(ByVal row As VIEW_SUBS_SUMMARYRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVIEW_SUBS_SUMMARYRow(ByVal SNO As Integer, ByVal MEM_NAME As String, ByVal MCODE As String, ByVal MNAME As String, ByVal MEMBERTYPECODE As String, ByVal CURRENTSTATUS As String, ByVal MEMBERTYPE As String, ByVal SUBSCODE As String, ByVal SUBSDESC As String, ByVal SUBAMOUNT As Decimal, ByVal TAXAMOUNT As Decimal, ByVal BILLDATE As Date, ByVal SUBSFLG As String) As VIEW_SUBS_SUMMARYRow
            Dim rowVIEW_SUBS_SUMMARYRow As VIEW_SUBS_SUMMARYRow = CType(Me.NewRow,VIEW_SUBS_SUMMARYRow)
            rowVIEW_SUBS_SUMMARYRow.ItemArray = New Object() {SNO, MEM_NAME, MCODE, MNAME, MEMBERTYPECODE, CURRENTSTATUS, MEMBERTYPE, SUBSCODE, SUBSDESC, SUBAMOUNT, TAXAMOUNT, BILLDATE, SUBSFLG}
            Me.Rows.Add(rowVIEW_SUBS_SUMMARYRow)
            Return rowVIEW_SUBS_SUMMARYRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VIEW_SUBS_SUMMARYDataTable = CType(MyBase.Clone,VIEW_SUBS_SUMMARYDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VIEW_SUBS_SUMMARYDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnSNO = Me.Columns("SNO")
            Me.columnMEM_NAME = Me.Columns("MEM_NAME")
            Me.columnMCODE = Me.Columns("MCODE")
            Me.columnMNAME = Me.Columns("MNAME")
            Me.columnMEMBERTYPECODE = Me.Columns("MEMBERTYPECODE")
            Me.columnCURRENTSTATUS = Me.Columns("CURRENTSTATUS")
            Me.columnMEMBERTYPE = Me.Columns("MEMBERTYPE")
            Me.columnSUBSCODE = Me.Columns("SUBSCODE")
            Me.columnSUBSDESC = Me.Columns("SUBSDESC")
            Me.columnSUBAMOUNT = Me.Columns("SUBAMOUNT")
            Me.columnTAXAMOUNT = Me.Columns("TAXAMOUNT")
            Me.columnBILLDATE = Me.Columns("BILLDATE")
            Me.columnSUBSFLG = Me.Columns("SUBSFLG")
        End Sub
        
        Private Sub InitClass()
            Me.columnSNO = New DataColumn("SNO", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSNO)
            Me.columnMEM_NAME = New DataColumn("MEM_NAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEM_NAME)
            Me.columnMCODE = New DataColumn("MCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMCODE)
            Me.columnMNAME = New DataColumn("MNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMNAME)
            Me.columnMEMBERTYPECODE = New DataColumn("MEMBERTYPECODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEMBERTYPECODE)
            Me.columnCURRENTSTATUS = New DataColumn("CURRENTSTATUS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCURRENTSTATUS)
            Me.columnMEMBERTYPE = New DataColumn("MEMBERTYPE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEMBERTYPE)
            Me.columnSUBSCODE = New DataColumn("SUBSCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSUBSCODE)
            Me.columnSUBSDESC = New DataColumn("SUBSDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSUBSDESC)
            Me.columnSUBAMOUNT = New DataColumn("SUBAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSUBAMOUNT)
            Me.columnTAXAMOUNT = New DataColumn("TAXAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTAXAMOUNT)
            Me.columnBILLDATE = New DataColumn("BILLDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBILLDATE)
            Me.columnSUBSFLG = New DataColumn("SUBSFLG", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSUBSFLG)
            Me.columnSNO.ReadOnly = true
            Me.columnMEM_NAME.ReadOnly = true
            Me.columnMCODE.ReadOnly = true
            Me.columnMNAME.ReadOnly = true
            Me.columnMEMBERTYPECODE.ReadOnly = true
            Me.columnCURRENTSTATUS.ReadOnly = true
            Me.columnMEMBERTYPE.ReadOnly = true
            Me.columnSUBSCODE.ReadOnly = true
            Me.columnSUBSDESC.ReadOnly = true
            Me.columnSUBAMOUNT.ReadOnly = true
            Me.columnTAXAMOUNT.ReadOnly = true
            Me.columnBILLDATE.ReadOnly = true
            Me.columnSUBSFLG.ReadOnly = true
        End Sub
        
        Public Function NewVIEW_SUBS_SUMMARYRow() As VIEW_SUBS_SUMMARYRow
            Return CType(Me.NewRow,VIEW_SUBS_SUMMARYRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VIEW_SUBS_SUMMARYRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VIEW_SUBS_SUMMARYRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VIEW_SUBS_SUMMARYRowChangedEvent) Is Nothing) Then
                RaiseEvent VIEW_SUBS_SUMMARYRowChanged(Me, New VIEW_SUBS_SUMMARYRowChangeEvent(CType(e.Row,VIEW_SUBS_SUMMARYRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VIEW_SUBS_SUMMARYRowChangingEvent) Is Nothing) Then
                RaiseEvent VIEW_SUBS_SUMMARYRowChanging(Me, New VIEW_SUBS_SUMMARYRowChangeEvent(CType(e.Row,VIEW_SUBS_SUMMARYRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VIEW_SUBS_SUMMARYRowDeletedEvent) Is Nothing) Then
                RaiseEvent VIEW_SUBS_SUMMARYRowDeleted(Me, New VIEW_SUBS_SUMMARYRowChangeEvent(CType(e.Row,VIEW_SUBS_SUMMARYRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VIEW_SUBS_SUMMARYRowDeletingEvent) Is Nothing) Then
                RaiseEvent VIEW_SUBS_SUMMARYRowDeleting(Me, New VIEW_SUBS_SUMMARYRowChangeEvent(CType(e.Row,VIEW_SUBS_SUMMARYRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVIEW_SUBS_SUMMARYRow(ByVal row As VIEW_SUBS_SUMMARYRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_SUBS_SUMMARYRow
        Inherits DataRow
        
        Private tableVIEW_SUBS_SUMMARY As VIEW_SUBS_SUMMARYDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVIEW_SUBS_SUMMARY = CType(Me.Table,VIEW_SUBS_SUMMARYDataTable)
        End Sub
        
        Public Property SNO As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_SUBS_SUMMARY.SNOColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_SUBS_SUMMARY.SNOColumn) = value
            End Set
        End Property
        
        Public Property MEM_NAME As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_SUBS_SUMMARY.MEM_NAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_SUBS_SUMMARY.MEM_NAMEColumn) = value
            End Set
        End Property
        
        Public Property MCODE As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_SUBS_SUMMARY.MCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_SUBS_SUMMARY.MCODEColumn) = value
            End Set
        End Property
        
        Public Property MNAME As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_SUBS_SUMMARY.MNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_SUBS_SUMMARY.MNAMEColumn) = value
            End Set
        End Property
        
        Public Property MEMBERTYPECODE As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_SUBS_SUMMARY.MEMBERTYPECODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_SUBS_SUMMARY.MEMBERTYPECODEColumn) = value
            End Set
        End Property
        
        Public Property CURRENTSTATUS As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_SUBS_SUMMARY.CURRENTSTATUSColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_SUBS_SUMMARY.CURRENTSTATUSColumn) = value
            End Set
        End Property
        
        Public Property MEMBERTYPE As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_SUBS_SUMMARY.MEMBERTYPEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_SUBS_SUMMARY.MEMBERTYPEColumn) = value
            End Set
        End Property
        
        Public Property SUBSCODE As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_SUBS_SUMMARY.SUBSCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_SUBS_SUMMARY.SUBSCODEColumn) = value
            End Set
        End Property
        
        Public Property SUBSDESC As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_SUBS_SUMMARY.SUBSDESCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_SUBS_SUMMARY.SUBSDESCColumn) = value
            End Set
        End Property
        
        Public Property SUBAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_SUBS_SUMMARY.SUBAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_SUBS_SUMMARY.SUBAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property TAXAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_SUBS_SUMMARY.TAXAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_SUBS_SUMMARY.TAXAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property BILLDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_SUBS_SUMMARY.BILLDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_SUBS_SUMMARY.BILLDATEColumn) = value
            End Set
        End Property
        
        Public Property SUBSFLG As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_SUBS_SUMMARY.SUBSFLGColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_SUBS_SUMMARY.SUBSFLGColumn) = value
            End Set
        End Property
        
        Public Function IsSNONull() As Boolean
            Return Me.IsNull(Me.tableVIEW_SUBS_SUMMARY.SNOColumn)
        End Function
        
        Public Sub SetSNONull()
            Me(Me.tableVIEW_SUBS_SUMMARY.SNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMEM_NAMENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_SUBS_SUMMARY.MEM_NAMEColumn)
        End Function
        
        Public Sub SetMEM_NAMENull()
            Me(Me.tableVIEW_SUBS_SUMMARY.MEM_NAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMCODENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_SUBS_SUMMARY.MCODEColumn)
        End Function
        
        Public Sub SetMCODENull()
            Me(Me.tableVIEW_SUBS_SUMMARY.MCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMNAMENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_SUBS_SUMMARY.MNAMEColumn)
        End Function
        
        Public Sub SetMNAMENull()
            Me(Me.tableVIEW_SUBS_SUMMARY.MNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMEMBERTYPECODENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_SUBS_SUMMARY.MEMBERTYPECODEColumn)
        End Function
        
        Public Sub SetMEMBERTYPECODENull()
            Me(Me.tableVIEW_SUBS_SUMMARY.MEMBERTYPECODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCURRENTSTATUSNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_SUBS_SUMMARY.CURRENTSTATUSColumn)
        End Function
        
        Public Sub SetCURRENTSTATUSNull()
            Me(Me.tableVIEW_SUBS_SUMMARY.CURRENTSTATUSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMEMBERTYPENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_SUBS_SUMMARY.MEMBERTYPEColumn)
        End Function
        
        Public Sub SetMEMBERTYPENull()
            Me(Me.tableVIEW_SUBS_SUMMARY.MEMBERTYPEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSUBSCODENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_SUBS_SUMMARY.SUBSCODEColumn)
        End Function
        
        Public Sub SetSUBSCODENull()
            Me(Me.tableVIEW_SUBS_SUMMARY.SUBSCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSUBSDESCNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_SUBS_SUMMARY.SUBSDESCColumn)
        End Function
        
        Public Sub SetSUBSDESCNull()
            Me(Me.tableVIEW_SUBS_SUMMARY.SUBSDESCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSUBAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_SUBS_SUMMARY.SUBAMOUNTColumn)
        End Function
        
        Public Sub SetSUBAMOUNTNull()
            Me(Me.tableVIEW_SUBS_SUMMARY.SUBAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTAXAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_SUBS_SUMMARY.TAXAMOUNTColumn)
        End Function
        
        Public Sub SetTAXAMOUNTNull()
            Me(Me.tableVIEW_SUBS_SUMMARY.TAXAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBILLDATENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_SUBS_SUMMARY.BILLDATEColumn)
        End Function
        
        Public Sub SetBILLDATENull()
            Me(Me.tableVIEW_SUBS_SUMMARY.BILLDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSUBSFLGNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_SUBS_SUMMARY.SUBSFLGColumn)
        End Function
        
        Public Sub SetSUBSFLGNull()
            Me(Me.tableVIEW_SUBS_SUMMARY.SUBSFLGColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_SUBS_SUMMARYRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VIEW_SUBS_SUMMARYRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VIEW_SUBS_SUMMARYRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VIEW_SUBS_SUMMARYRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_MEM_REP_SUBS_FLT_MUMDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSNO As DataColumn
        
        Private columnMEM_NAME As DataColumn
        
        Private columnMCODE As DataColumn
        
        Private columnMNAME As DataColumn
        
        Private columnMEMBERTYPECODE As DataColumn
        
        Private columnCURRENTSTATUS As DataColumn
        
        Private columnMEMBERTYPE As DataColumn
        
        Private columnSUBSCODE As DataColumn
        
        Private columnSUBSDESC As DataColumn
        
        Private columnSUBAMOUNT As DataColumn
        
        Private columnFLTAMOUNT As DataColumn
        
        Private columnMINAMOUNT As DataColumn
        
        Private columnTAXAMOUNT As DataColumn
        
        Private columnBILLDATE As DataColumn
        
        Friend Sub New()
            MyBase.New("VIEW_MEM_REP_SUBS_FLT_MUM")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property SNOColumn As DataColumn
            Get
                Return Me.columnSNO
            End Get
        End Property
        
        Friend ReadOnly Property MEM_NAMEColumn As DataColumn
            Get
                Return Me.columnMEM_NAME
            End Get
        End Property
        
        Friend ReadOnly Property MCODEColumn As DataColumn
            Get
                Return Me.columnMCODE
            End Get
        End Property
        
        Friend ReadOnly Property MNAMEColumn As DataColumn
            Get
                Return Me.columnMNAME
            End Get
        End Property
        
        Friend ReadOnly Property MEMBERTYPECODEColumn As DataColumn
            Get
                Return Me.columnMEMBERTYPECODE
            End Get
        End Property
        
        Friend ReadOnly Property CURRENTSTATUSColumn As DataColumn
            Get
                Return Me.columnCURRENTSTATUS
            End Get
        End Property
        
        Friend ReadOnly Property MEMBERTYPEColumn As DataColumn
            Get
                Return Me.columnMEMBERTYPE
            End Get
        End Property
        
        Friend ReadOnly Property SUBSCODEColumn As DataColumn
            Get
                Return Me.columnSUBSCODE
            End Get
        End Property
        
        Friend ReadOnly Property SUBSDESCColumn As DataColumn
            Get
                Return Me.columnSUBSDESC
            End Get
        End Property
        
        Friend ReadOnly Property SUBAMOUNTColumn As DataColumn
            Get
                Return Me.columnSUBAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property FLTAMOUNTColumn As DataColumn
            Get
                Return Me.columnFLTAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property MINAMOUNTColumn As DataColumn
            Get
                Return Me.columnMINAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property TAXAMOUNTColumn As DataColumn
            Get
                Return Me.columnTAXAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property BILLDATEColumn As DataColumn
            Get
                Return Me.columnBILLDATE
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VIEW_MEM_REP_SUBS_FLT_MUMRow
            Get
                Return CType(Me.Rows(index),VIEW_MEM_REP_SUBS_FLT_MUMRow)
            End Get
        End Property
        
        Public Event VIEW_MEM_REP_SUBS_FLT_MUMRowChanged As VIEW_MEM_REP_SUBS_FLT_MUMRowChangeEventHandler
        
        Public Event VIEW_MEM_REP_SUBS_FLT_MUMRowChanging As VIEW_MEM_REP_SUBS_FLT_MUMRowChangeEventHandler
        
        Public Event VIEW_MEM_REP_SUBS_FLT_MUMRowDeleted As VIEW_MEM_REP_SUBS_FLT_MUMRowChangeEventHandler
        
        Public Event VIEW_MEM_REP_SUBS_FLT_MUMRowDeleting As VIEW_MEM_REP_SUBS_FLT_MUMRowChangeEventHandler
        
        Public Overloads Sub AddVIEW_MEM_REP_SUBS_FLT_MUMRow(ByVal row As VIEW_MEM_REP_SUBS_FLT_MUMRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVIEW_MEM_REP_SUBS_FLT_MUMRow(ByVal SNO As Integer, ByVal MEM_NAME As String, ByVal MCODE As String, ByVal MNAME As String, ByVal MEMBERTYPECODE As String, ByVal CURRENTSTATUS As String, ByVal MEMBERTYPE As String, ByVal SUBSCODE As String, ByVal SUBSDESC As String, ByVal SUBAMOUNT As Decimal, ByVal FLTAMOUNT As Decimal, ByVal MINAMOUNT As Decimal, ByVal TAXAMOUNT As Decimal, ByVal BILLDATE As Date) As VIEW_MEM_REP_SUBS_FLT_MUMRow
            Dim rowVIEW_MEM_REP_SUBS_FLT_MUMRow As VIEW_MEM_REP_SUBS_FLT_MUMRow = CType(Me.NewRow,VIEW_MEM_REP_SUBS_FLT_MUMRow)
            rowVIEW_MEM_REP_SUBS_FLT_MUMRow.ItemArray = New Object() {SNO, MEM_NAME, MCODE, MNAME, MEMBERTYPECODE, CURRENTSTATUS, MEMBERTYPE, SUBSCODE, SUBSDESC, SUBAMOUNT, FLTAMOUNT, MINAMOUNT, TAXAMOUNT, BILLDATE}
            Me.Rows.Add(rowVIEW_MEM_REP_SUBS_FLT_MUMRow)
            Return rowVIEW_MEM_REP_SUBS_FLT_MUMRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VIEW_MEM_REP_SUBS_FLT_MUMDataTable = CType(MyBase.Clone,VIEW_MEM_REP_SUBS_FLT_MUMDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VIEW_MEM_REP_SUBS_FLT_MUMDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnSNO = Me.Columns("SNO")
            Me.columnMEM_NAME = Me.Columns("MEM_NAME")
            Me.columnMCODE = Me.Columns("MCODE")
            Me.columnMNAME = Me.Columns("MNAME")
            Me.columnMEMBERTYPECODE = Me.Columns("MEMBERTYPECODE")
            Me.columnCURRENTSTATUS = Me.Columns("CURRENTSTATUS")
            Me.columnMEMBERTYPE = Me.Columns("MEMBERTYPE")
            Me.columnSUBSCODE = Me.Columns("SUBSCODE")
            Me.columnSUBSDESC = Me.Columns("SUBSDESC")
            Me.columnSUBAMOUNT = Me.Columns("SUBAMOUNT")
            Me.columnFLTAMOUNT = Me.Columns("FLTAMOUNT")
            Me.columnMINAMOUNT = Me.Columns("MINAMOUNT")
            Me.columnTAXAMOUNT = Me.Columns("TAXAMOUNT")
            Me.columnBILLDATE = Me.Columns("BILLDATE")
        End Sub
        
        Private Sub InitClass()
            Me.columnSNO = New DataColumn("SNO", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSNO)
            Me.columnMEM_NAME = New DataColumn("MEM_NAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEM_NAME)
            Me.columnMCODE = New DataColumn("MCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMCODE)
            Me.columnMNAME = New DataColumn("MNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMNAME)
            Me.columnMEMBERTYPECODE = New DataColumn("MEMBERTYPECODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEMBERTYPECODE)
            Me.columnCURRENTSTATUS = New DataColumn("CURRENTSTATUS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCURRENTSTATUS)
            Me.columnMEMBERTYPE = New DataColumn("MEMBERTYPE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEMBERTYPE)
            Me.columnSUBSCODE = New DataColumn("SUBSCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSUBSCODE)
            Me.columnSUBSDESC = New DataColumn("SUBSDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSUBSDESC)
            Me.columnSUBAMOUNT = New DataColumn("SUBAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSUBAMOUNT)
            Me.columnFLTAMOUNT = New DataColumn("FLTAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFLTAMOUNT)
            Me.columnMINAMOUNT = New DataColumn("MINAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMINAMOUNT)
            Me.columnTAXAMOUNT = New DataColumn("TAXAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTAXAMOUNT)
            Me.columnBILLDATE = New DataColumn("BILLDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBILLDATE)
            Me.columnSNO.AllowDBNull = false
            Me.columnMEM_NAME.AllowDBNull = false
            Me.columnMCODE.AllowDBNull = false
            Me.columnMNAME.AllowDBNull = false
            Me.columnMEMBERTYPECODE.AllowDBNull = false
            Me.columnCURRENTSTATUS.AllowDBNull = false
            Me.columnMEMBERTYPE.AllowDBNull = false
            Me.columnSUBSCODE.AllowDBNull = false
            Me.columnSUBSDESC.AllowDBNull = false
            Me.columnSUBAMOUNT.AllowDBNull = false
            Me.columnFLTAMOUNT.AllowDBNull = false
            Me.columnMINAMOUNT.AllowDBNull = false
            Me.columnTAXAMOUNT.AllowDBNull = false
            Me.columnBILLDATE.AllowDBNull = false
        End Sub
        
        Public Function NewVIEW_MEM_REP_SUBS_FLT_MUMRow() As VIEW_MEM_REP_SUBS_FLT_MUMRow
            Return CType(Me.NewRow,VIEW_MEM_REP_SUBS_FLT_MUMRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VIEW_MEM_REP_SUBS_FLT_MUMRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VIEW_MEM_REP_SUBS_FLT_MUMRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VIEW_MEM_REP_SUBS_FLT_MUMRowChangedEvent) Is Nothing) Then
                RaiseEvent VIEW_MEM_REP_SUBS_FLT_MUMRowChanged(Me, New VIEW_MEM_REP_SUBS_FLT_MUMRowChangeEvent(CType(e.Row,VIEW_MEM_REP_SUBS_FLT_MUMRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VIEW_MEM_REP_SUBS_FLT_MUMRowChangingEvent) Is Nothing) Then
                RaiseEvent VIEW_MEM_REP_SUBS_FLT_MUMRowChanging(Me, New VIEW_MEM_REP_SUBS_FLT_MUMRowChangeEvent(CType(e.Row,VIEW_MEM_REP_SUBS_FLT_MUMRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VIEW_MEM_REP_SUBS_FLT_MUMRowDeletedEvent) Is Nothing) Then
                RaiseEvent VIEW_MEM_REP_SUBS_FLT_MUMRowDeleted(Me, New VIEW_MEM_REP_SUBS_FLT_MUMRowChangeEvent(CType(e.Row,VIEW_MEM_REP_SUBS_FLT_MUMRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VIEW_MEM_REP_SUBS_FLT_MUMRowDeletingEvent) Is Nothing) Then
                RaiseEvent VIEW_MEM_REP_SUBS_FLT_MUMRowDeleting(Me, New VIEW_MEM_REP_SUBS_FLT_MUMRowChangeEvent(CType(e.Row,VIEW_MEM_REP_SUBS_FLT_MUMRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVIEW_MEM_REP_SUBS_FLT_MUMRow(ByVal row As VIEW_MEM_REP_SUBS_FLT_MUMRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_MEM_REP_SUBS_FLT_MUMRow
        Inherits DataRow
        
        Private tableVIEW_MEM_REP_SUBS_FLT_MUM As VIEW_MEM_REP_SUBS_FLT_MUMDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVIEW_MEM_REP_SUBS_FLT_MUM = CType(Me.Table,VIEW_MEM_REP_SUBS_FLT_MUMDataTable)
        End Sub
        
        Public Property SNO As Integer
            Get
                Return CType(Me(Me.tableVIEW_MEM_REP_SUBS_FLT_MUM.SNOColumn),Integer)
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_SUBS_FLT_MUM.SNOColumn) = value
            End Set
        End Property
        
        Public Property MEM_NAME As String
            Get
                Return CType(Me(Me.tableVIEW_MEM_REP_SUBS_FLT_MUM.MEM_NAMEColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_SUBS_FLT_MUM.MEM_NAMEColumn) = value
            End Set
        End Property
        
        Public Property MCODE As String
            Get
                Return CType(Me(Me.tableVIEW_MEM_REP_SUBS_FLT_MUM.MCODEColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_SUBS_FLT_MUM.MCODEColumn) = value
            End Set
        End Property
        
        Public Property MNAME As String
            Get
                Return CType(Me(Me.tableVIEW_MEM_REP_SUBS_FLT_MUM.MNAMEColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_SUBS_FLT_MUM.MNAMEColumn) = value
            End Set
        End Property
        
        Public Property MEMBERTYPECODE As String
            Get
                Return CType(Me(Me.tableVIEW_MEM_REP_SUBS_FLT_MUM.MEMBERTYPECODEColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_SUBS_FLT_MUM.MEMBERTYPECODEColumn) = value
            End Set
        End Property
        
        Public Property CURRENTSTATUS As String
            Get
                Return CType(Me(Me.tableVIEW_MEM_REP_SUBS_FLT_MUM.CURRENTSTATUSColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_SUBS_FLT_MUM.CURRENTSTATUSColumn) = value
            End Set
        End Property
        
        Public Property MEMBERTYPE As String
            Get
                Return CType(Me(Me.tableVIEW_MEM_REP_SUBS_FLT_MUM.MEMBERTYPEColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_SUBS_FLT_MUM.MEMBERTYPEColumn) = value
            End Set
        End Property
        
        Public Property SUBSCODE As String
            Get
                Return CType(Me(Me.tableVIEW_MEM_REP_SUBS_FLT_MUM.SUBSCODEColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_SUBS_FLT_MUM.SUBSCODEColumn) = value
            End Set
        End Property
        
        Public Property SUBSDESC As String
            Get
                Return CType(Me(Me.tableVIEW_MEM_REP_SUBS_FLT_MUM.SUBSDESCColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_SUBS_FLT_MUM.SUBSDESCColumn) = value
            End Set
        End Property
        
        Public Property SUBAMOUNT As Decimal
            Get
                Return CType(Me(Me.tableVIEW_MEM_REP_SUBS_FLT_MUM.SUBAMOUNTColumn),Decimal)
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_SUBS_FLT_MUM.SUBAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property FLTAMOUNT As Decimal
            Get
                Return CType(Me(Me.tableVIEW_MEM_REP_SUBS_FLT_MUM.FLTAMOUNTColumn),Decimal)
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_SUBS_FLT_MUM.FLTAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property MINAMOUNT As Decimal
            Get
                Return CType(Me(Me.tableVIEW_MEM_REP_SUBS_FLT_MUM.MINAMOUNTColumn),Decimal)
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_SUBS_FLT_MUM.MINAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property TAXAMOUNT As Decimal
            Get
                Return CType(Me(Me.tableVIEW_MEM_REP_SUBS_FLT_MUM.TAXAMOUNTColumn),Decimal)
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_SUBS_FLT_MUM.TAXAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property BILLDATE As Date
            Get
                Return CType(Me(Me.tableVIEW_MEM_REP_SUBS_FLT_MUM.BILLDATEColumn),Date)
            End Get
            Set
                Me(Me.tableVIEW_MEM_REP_SUBS_FLT_MUM.BILLDATEColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_MEM_REP_SUBS_FLT_MUMRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VIEW_MEM_REP_SUBS_FLT_MUMRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VIEW_MEM_REP_SUBS_FLT_MUMRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VIEW_MEM_REP_SUBS_FLT_MUMRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_FACILITY_LISTDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSNO As DataColumn
        
        Private columnMEM_NAME As DataColumn
        
        Private columnMCODE As DataColumn
        
        Private columnMNAME As DataColumn
        
        Private columnMEMBERTYPECODE As DataColumn
        
        Private columnCURRENTSTATUS As DataColumn
        
        Private columnMEMBERTYPE As DataColumn
        
        Private columnSUBSCODE As DataColumn
        
        Private columnDNAME As DataColumn
        
        Private columnSUBSDESC As DataColumn
        
        Private columnBILLDATE As DataColumn
        
        Private columnSUBSFLG As DataColumn
        
        Friend Sub New()
            MyBase.New("VIEW_FACILITY_LIST")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property SNOColumn As DataColumn
            Get
                Return Me.columnSNO
            End Get
        End Property
        
        Friend ReadOnly Property MEM_NAMEColumn As DataColumn
            Get
                Return Me.columnMEM_NAME
            End Get
        End Property
        
        Friend ReadOnly Property MCODEColumn As DataColumn
            Get
                Return Me.columnMCODE
            End Get
        End Property
        
        Friend ReadOnly Property MNAMEColumn As DataColumn
            Get
                Return Me.columnMNAME
            End Get
        End Property
        
        Friend ReadOnly Property MEMBERTYPECODEColumn As DataColumn
            Get
                Return Me.columnMEMBERTYPECODE
            End Get
        End Property
        
        Friend ReadOnly Property CURRENTSTATUSColumn As DataColumn
            Get
                Return Me.columnCURRENTSTATUS
            End Get
        End Property
        
        Friend ReadOnly Property MEMBERTYPEColumn As DataColumn
            Get
                Return Me.columnMEMBERTYPE
            End Get
        End Property
        
        Friend ReadOnly Property SUBSCODEColumn As DataColumn
            Get
                Return Me.columnSUBSCODE
            End Get
        End Property
        
        Friend ReadOnly Property DNAMEColumn As DataColumn
            Get
                Return Me.columnDNAME
            End Get
        End Property
        
        Friend ReadOnly Property SUBSDESCColumn As DataColumn
            Get
                Return Me.columnSUBSDESC
            End Get
        End Property
        
        Friend ReadOnly Property BILLDATEColumn As DataColumn
            Get
                Return Me.columnBILLDATE
            End Get
        End Property
        
        Friend ReadOnly Property SUBSFLGColumn As DataColumn
            Get
                Return Me.columnSUBSFLG
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VIEW_FACILITY_LISTRow
            Get
                Return CType(Me.Rows(index),VIEW_FACILITY_LISTRow)
            End Get
        End Property
        
        Public Event VIEW_FACILITY_LISTRowChanged As VIEW_FACILITY_LISTRowChangeEventHandler
        
        Public Event VIEW_FACILITY_LISTRowChanging As VIEW_FACILITY_LISTRowChangeEventHandler
        
        Public Event VIEW_FACILITY_LISTRowDeleted As VIEW_FACILITY_LISTRowChangeEventHandler
        
        Public Event VIEW_FACILITY_LISTRowDeleting As VIEW_FACILITY_LISTRowChangeEventHandler
        
        Public Overloads Sub AddVIEW_FACILITY_LISTRow(ByVal row As VIEW_FACILITY_LISTRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVIEW_FACILITY_LISTRow(ByVal SNO As Integer, ByVal MEM_NAME As String, ByVal MCODE As String, ByVal MNAME As String, ByVal MEMBERTYPECODE As String, ByVal CURRENTSTATUS As String, ByVal MEMBERTYPE As String, ByVal SUBSCODE As String, ByVal DNAME As String, ByVal SUBSDESC As String, ByVal BILLDATE As Date, ByVal SUBSFLG As String) As VIEW_FACILITY_LISTRow
            Dim rowVIEW_FACILITY_LISTRow As VIEW_FACILITY_LISTRow = CType(Me.NewRow,VIEW_FACILITY_LISTRow)
            rowVIEW_FACILITY_LISTRow.ItemArray = New Object() {SNO, MEM_NAME, MCODE, MNAME, MEMBERTYPECODE, CURRENTSTATUS, MEMBERTYPE, SUBSCODE, DNAME, SUBSDESC, BILLDATE, SUBSFLG}
            Me.Rows.Add(rowVIEW_FACILITY_LISTRow)
            Return rowVIEW_FACILITY_LISTRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VIEW_FACILITY_LISTDataTable = CType(MyBase.Clone,VIEW_FACILITY_LISTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VIEW_FACILITY_LISTDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnSNO = Me.Columns("SNO")
            Me.columnMEM_NAME = Me.Columns("MEM_NAME")
            Me.columnMCODE = Me.Columns("MCODE")
            Me.columnMNAME = Me.Columns("MNAME")
            Me.columnMEMBERTYPECODE = Me.Columns("MEMBERTYPECODE")
            Me.columnCURRENTSTATUS = Me.Columns("CURRENTSTATUS")
            Me.columnMEMBERTYPE = Me.Columns("MEMBERTYPE")
            Me.columnSUBSCODE = Me.Columns("SUBSCODE")
            Me.columnDNAME = Me.Columns("DNAME")
            Me.columnSUBSDESC = Me.Columns("SUBSDESC")
            Me.columnBILLDATE = Me.Columns("BILLDATE")
            Me.columnSUBSFLG = Me.Columns("SUBSFLG")
        End Sub
        
        Private Sub InitClass()
            Me.columnSNO = New DataColumn("SNO", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSNO)
            Me.columnMEM_NAME = New DataColumn("MEM_NAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEM_NAME)
            Me.columnMCODE = New DataColumn("MCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMCODE)
            Me.columnMNAME = New DataColumn("MNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMNAME)
            Me.columnMEMBERTYPECODE = New DataColumn("MEMBERTYPECODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEMBERTYPECODE)
            Me.columnCURRENTSTATUS = New DataColumn("CURRENTSTATUS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCURRENTSTATUS)
            Me.columnMEMBERTYPE = New DataColumn("MEMBERTYPE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEMBERTYPE)
            Me.columnSUBSCODE = New DataColumn("SUBSCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSUBSCODE)
            Me.columnDNAME = New DataColumn("DNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDNAME)
            Me.columnSUBSDESC = New DataColumn("SUBSDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSUBSDESC)
            Me.columnBILLDATE = New DataColumn("BILLDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBILLDATE)
            Me.columnSUBSFLG = New DataColumn("SUBSFLG", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSUBSFLG)
            Me.columnSNO.AllowDBNull = false
            Me.columnMEM_NAME.AllowDBNull = false
            Me.columnMCODE.AllowDBNull = false
            Me.columnMNAME.AllowDBNull = false
            Me.columnMEMBERTYPECODE.AllowDBNull = false
            Me.columnCURRENTSTATUS.AllowDBNull = false
            Me.columnMEMBERTYPE.AllowDBNull = false
            Me.columnSUBSCODE.AllowDBNull = false
            Me.columnDNAME.AllowDBNull = false
            Me.columnSUBSDESC.AllowDBNull = false
            Me.columnBILLDATE.AllowDBNull = false
            Me.columnSUBSFLG.AllowDBNull = false
        End Sub
        
        Public Function NewVIEW_FACILITY_LISTRow() As VIEW_FACILITY_LISTRow
            Return CType(Me.NewRow,VIEW_FACILITY_LISTRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VIEW_FACILITY_LISTRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VIEW_FACILITY_LISTRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VIEW_FACILITY_LISTRowChangedEvent) Is Nothing) Then
                RaiseEvent VIEW_FACILITY_LISTRowChanged(Me, New VIEW_FACILITY_LISTRowChangeEvent(CType(e.Row,VIEW_FACILITY_LISTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VIEW_FACILITY_LISTRowChangingEvent) Is Nothing) Then
                RaiseEvent VIEW_FACILITY_LISTRowChanging(Me, New VIEW_FACILITY_LISTRowChangeEvent(CType(e.Row,VIEW_FACILITY_LISTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VIEW_FACILITY_LISTRowDeletedEvent) Is Nothing) Then
                RaiseEvent VIEW_FACILITY_LISTRowDeleted(Me, New VIEW_FACILITY_LISTRowChangeEvent(CType(e.Row,VIEW_FACILITY_LISTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VIEW_FACILITY_LISTRowDeletingEvent) Is Nothing) Then
                RaiseEvent VIEW_FACILITY_LISTRowDeleting(Me, New VIEW_FACILITY_LISTRowChangeEvent(CType(e.Row,VIEW_FACILITY_LISTRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVIEW_FACILITY_LISTRow(ByVal row As VIEW_FACILITY_LISTRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_FACILITY_LISTRow
        Inherits DataRow
        
        Private tableVIEW_FACILITY_LIST As VIEW_FACILITY_LISTDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVIEW_FACILITY_LIST = CType(Me.Table,VIEW_FACILITY_LISTDataTable)
        End Sub
        
        Public Property SNO As Integer
            Get
                Return CType(Me(Me.tableVIEW_FACILITY_LIST.SNOColumn),Integer)
            End Get
            Set
                Me(Me.tableVIEW_FACILITY_LIST.SNOColumn) = value
            End Set
        End Property
        
        Public Property MEM_NAME As String
            Get
                Return CType(Me(Me.tableVIEW_FACILITY_LIST.MEM_NAMEColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_FACILITY_LIST.MEM_NAMEColumn) = value
            End Set
        End Property
        
        Public Property MCODE As String
            Get
                Return CType(Me(Me.tableVIEW_FACILITY_LIST.MCODEColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_FACILITY_LIST.MCODEColumn) = value
            End Set
        End Property
        
        Public Property MNAME As String
            Get
                Return CType(Me(Me.tableVIEW_FACILITY_LIST.MNAMEColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_FACILITY_LIST.MNAMEColumn) = value
            End Set
        End Property
        
        Public Property MEMBERTYPECODE As String
            Get
                Return CType(Me(Me.tableVIEW_FACILITY_LIST.MEMBERTYPECODEColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_FACILITY_LIST.MEMBERTYPECODEColumn) = value
            End Set
        End Property
        
        Public Property CURRENTSTATUS As String
            Get
                Return CType(Me(Me.tableVIEW_FACILITY_LIST.CURRENTSTATUSColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_FACILITY_LIST.CURRENTSTATUSColumn) = value
            End Set
        End Property
        
        Public Property MEMBERTYPE As String
            Get
                Return CType(Me(Me.tableVIEW_FACILITY_LIST.MEMBERTYPEColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_FACILITY_LIST.MEMBERTYPEColumn) = value
            End Set
        End Property
        
        Public Property SUBSCODE As String
            Get
                Return CType(Me(Me.tableVIEW_FACILITY_LIST.SUBSCODEColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_FACILITY_LIST.SUBSCODEColumn) = value
            End Set
        End Property
        
        Public Property DNAME As String
            Get
                Return CType(Me(Me.tableVIEW_FACILITY_LIST.DNAMEColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_FACILITY_LIST.DNAMEColumn) = value
            End Set
        End Property
        
        Public Property SUBSDESC As String
            Get
                Return CType(Me(Me.tableVIEW_FACILITY_LIST.SUBSDESCColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_FACILITY_LIST.SUBSDESCColumn) = value
            End Set
        End Property
        
        Public Property BILLDATE As Date
            Get
                Return CType(Me(Me.tableVIEW_FACILITY_LIST.BILLDATEColumn),Date)
            End Get
            Set
                Me(Me.tableVIEW_FACILITY_LIST.BILLDATEColumn) = value
            End Set
        End Property
        
        Public Property SUBSFLG As String
            Get
                Return CType(Me(Me.tableVIEW_FACILITY_LIST.SUBSFLGColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_FACILITY_LIST.SUBSFLGColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_FACILITY_LISTRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VIEW_FACILITY_LISTRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VIEW_FACILITY_LISTRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VIEW_FACILITY_LISTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_ALU_BILLDETAILSDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSNO As DataColumn
        
        Private columnMCODE As DataColumn
        
        Private columnMNAME As DataColumn
        
        Private columnBILLNO As DataColumn
        
        Private columnKOTDATE As DataColumn
        
        Private columnAMOUNT As DataColumn
        
        Private columnVATAMT As DataColumn
        
        Private columnSERAMT As DataColumn
        
        Private columnACCHG As DataColumn
        
        Private columnTOTAMT As DataColumn
        
        Private columnPOSCODE As DataColumn
        
        Private columnPOSDESC As DataColumn
        
        Private columnDESCRIPTION As DataColumn
        
        Friend Sub New()
            MyBase.New("VIEW_ALU_BILLDETAILS")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property SNOColumn As DataColumn
            Get
                Return Me.columnSNO
            End Get
        End Property
        
        Friend ReadOnly Property MCODEColumn As DataColumn
            Get
                Return Me.columnMCODE
            End Get
        End Property
        
        Friend ReadOnly Property MNAMEColumn As DataColumn
            Get
                Return Me.columnMNAME
            End Get
        End Property
        
        Friend ReadOnly Property BILLNOColumn As DataColumn
            Get
                Return Me.columnBILLNO
            End Get
        End Property
        
        Friend ReadOnly Property KOTDATEColumn As DataColumn
            Get
                Return Me.columnKOTDATE
            End Get
        End Property
        
        Friend ReadOnly Property AMOUNTColumn As DataColumn
            Get
                Return Me.columnAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property VATAMTColumn As DataColumn
            Get
                Return Me.columnVATAMT
            End Get
        End Property
        
        Friend ReadOnly Property SERAMTColumn As DataColumn
            Get
                Return Me.columnSERAMT
            End Get
        End Property
        
        Friend ReadOnly Property ACCHGColumn As DataColumn
            Get
                Return Me.columnACCHG
            End Get
        End Property
        
        Friend ReadOnly Property TOTAMTColumn As DataColumn
            Get
                Return Me.columnTOTAMT
            End Get
        End Property
        
        Friend ReadOnly Property POSCODEColumn As DataColumn
            Get
                Return Me.columnPOSCODE
            End Get
        End Property
        
        Friend ReadOnly Property POSDESCColumn As DataColumn
            Get
                Return Me.columnPOSDESC
            End Get
        End Property
        
        Friend ReadOnly Property DESCRIPTIONColumn As DataColumn
            Get
                Return Me.columnDESCRIPTION
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VIEW_ALU_BILLDETAILSRow
            Get
                Return CType(Me.Rows(index),VIEW_ALU_BILLDETAILSRow)
            End Get
        End Property
        
        Public Event VIEW_ALU_BILLDETAILSRowChanged As VIEW_ALU_BILLDETAILSRowChangeEventHandler
        
        Public Event VIEW_ALU_BILLDETAILSRowChanging As VIEW_ALU_BILLDETAILSRowChangeEventHandler
        
        Public Event VIEW_ALU_BILLDETAILSRowDeleted As VIEW_ALU_BILLDETAILSRowChangeEventHandler
        
        Public Event VIEW_ALU_BILLDETAILSRowDeleting As VIEW_ALU_BILLDETAILSRowChangeEventHandler
        
        Public Overloads Sub AddVIEW_ALU_BILLDETAILSRow(ByVal row As VIEW_ALU_BILLDETAILSRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVIEW_ALU_BILLDETAILSRow(ByVal SNO As Integer, ByVal MCODE As String, ByVal MNAME As String, ByVal BILLNO As String, ByVal KOTDATE As Date, ByVal AMOUNT As Decimal, ByVal VATAMT As Decimal, ByVal SERAMT As Decimal, ByVal ACCHG As Decimal, ByVal TOTAMT As Decimal, ByVal POSCODE As String, ByVal POSDESC As String, ByVal DESCRIPTION As String) As VIEW_ALU_BILLDETAILSRow
            Dim rowVIEW_ALU_BILLDETAILSRow As VIEW_ALU_BILLDETAILSRow = CType(Me.NewRow,VIEW_ALU_BILLDETAILSRow)
            rowVIEW_ALU_BILLDETAILSRow.ItemArray = New Object() {SNO, MCODE, MNAME, BILLNO, KOTDATE, AMOUNT, VATAMT, SERAMT, ACCHG, TOTAMT, POSCODE, POSDESC, DESCRIPTION}
            Me.Rows.Add(rowVIEW_ALU_BILLDETAILSRow)
            Return rowVIEW_ALU_BILLDETAILSRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VIEW_ALU_BILLDETAILSDataTable = CType(MyBase.Clone,VIEW_ALU_BILLDETAILSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VIEW_ALU_BILLDETAILSDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnSNO = Me.Columns("SNO")
            Me.columnMCODE = Me.Columns("MCODE")
            Me.columnMNAME = Me.Columns("MNAME")
            Me.columnBILLNO = Me.Columns("BILLNO")
            Me.columnKOTDATE = Me.Columns("KOTDATE")
            Me.columnAMOUNT = Me.Columns("AMOUNT")
            Me.columnVATAMT = Me.Columns("VATAMT")
            Me.columnSERAMT = Me.Columns("SERAMT")
            Me.columnACCHG = Me.Columns("ACCHG")
            Me.columnTOTAMT = Me.Columns("TOTAMT")
            Me.columnPOSCODE = Me.Columns("POSCODE")
            Me.columnPOSDESC = Me.Columns("POSDESC")
            Me.columnDESCRIPTION = Me.Columns("DESCRIPTION")
        End Sub
        
        Private Sub InitClass()
            Me.columnSNO = New DataColumn("SNO", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSNO)
            Me.columnMCODE = New DataColumn("MCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMCODE)
            Me.columnMNAME = New DataColumn("MNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMNAME)
            Me.columnBILLNO = New DataColumn("BILLNO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBILLNO)
            Me.columnKOTDATE = New DataColumn("KOTDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnKOTDATE)
            Me.columnAMOUNT = New DataColumn("AMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAMOUNT)
            Me.columnVATAMT = New DataColumn("VATAMT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVATAMT)
            Me.columnSERAMT = New DataColumn("SERAMT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSERAMT)
            Me.columnACCHG = New DataColumn("ACCHG", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnACCHG)
            Me.columnTOTAMT = New DataColumn("TOTAMT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTOTAMT)
            Me.columnPOSCODE = New DataColumn("POSCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPOSCODE)
            Me.columnPOSDESC = New DataColumn("POSDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPOSDESC)
            Me.columnDESCRIPTION = New DataColumn("DESCRIPTION", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDESCRIPTION)
            Me.columnSNO.AllowDBNull = false
            Me.columnMCODE.AllowDBNull = false
            Me.columnMNAME.AllowDBNull = false
            Me.columnBILLNO.AllowDBNull = false
            Me.columnKOTDATE.AllowDBNull = false
            Me.columnPOSCODE.AllowDBNull = false
            Me.columnPOSDESC.AllowDBNull = false
            Me.columnDESCRIPTION.AllowDBNull = false
        End Sub
        
        Public Function NewVIEW_ALU_BILLDETAILSRow() As VIEW_ALU_BILLDETAILSRow
            Return CType(Me.NewRow,VIEW_ALU_BILLDETAILSRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VIEW_ALU_BILLDETAILSRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VIEW_ALU_BILLDETAILSRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VIEW_ALU_BILLDETAILSRowChangedEvent) Is Nothing) Then
                RaiseEvent VIEW_ALU_BILLDETAILSRowChanged(Me, New VIEW_ALU_BILLDETAILSRowChangeEvent(CType(e.Row,VIEW_ALU_BILLDETAILSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VIEW_ALU_BILLDETAILSRowChangingEvent) Is Nothing) Then
                RaiseEvent VIEW_ALU_BILLDETAILSRowChanging(Me, New VIEW_ALU_BILLDETAILSRowChangeEvent(CType(e.Row,VIEW_ALU_BILLDETAILSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VIEW_ALU_BILLDETAILSRowDeletedEvent) Is Nothing) Then
                RaiseEvent VIEW_ALU_BILLDETAILSRowDeleted(Me, New VIEW_ALU_BILLDETAILSRowChangeEvent(CType(e.Row,VIEW_ALU_BILLDETAILSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VIEW_ALU_BILLDETAILSRowDeletingEvent) Is Nothing) Then
                RaiseEvent VIEW_ALU_BILLDETAILSRowDeleting(Me, New VIEW_ALU_BILLDETAILSRowChangeEvent(CType(e.Row,VIEW_ALU_BILLDETAILSRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVIEW_ALU_BILLDETAILSRow(ByVal row As VIEW_ALU_BILLDETAILSRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_ALU_BILLDETAILSRow
        Inherits DataRow
        
        Private tableVIEW_ALU_BILLDETAILS As VIEW_ALU_BILLDETAILSDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVIEW_ALU_BILLDETAILS = CType(Me.Table,VIEW_ALU_BILLDETAILSDataTable)
        End Sub
        
        Public Property SNO As Integer
            Get
                Return CType(Me(Me.tableVIEW_ALU_BILLDETAILS.SNOColumn),Integer)
            End Get
            Set
                Me(Me.tableVIEW_ALU_BILLDETAILS.SNOColumn) = value
            End Set
        End Property
        
        Public Property MCODE As String
            Get
                Return CType(Me(Me.tableVIEW_ALU_BILLDETAILS.MCODEColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_ALU_BILLDETAILS.MCODEColumn) = value
            End Set
        End Property
        
        Public Property MNAME As String
            Get
                Return CType(Me(Me.tableVIEW_ALU_BILLDETAILS.MNAMEColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_ALU_BILLDETAILS.MNAMEColumn) = value
            End Set
        End Property
        
        Public Property BILLNO As String
            Get
                Return CType(Me(Me.tableVIEW_ALU_BILLDETAILS.BILLNOColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_ALU_BILLDETAILS.BILLNOColumn) = value
            End Set
        End Property
        
        Public Property KOTDATE As Date
            Get
                Return CType(Me(Me.tableVIEW_ALU_BILLDETAILS.KOTDATEColumn),Date)
            End Get
            Set
                Me(Me.tableVIEW_ALU_BILLDETAILS.KOTDATEColumn) = value
            End Set
        End Property
        
        Public Property AMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_ALU_BILLDETAILS.AMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_ALU_BILLDETAILS.AMOUNTColumn) = value
            End Set
        End Property
        
        Public Property VATAMT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_ALU_BILLDETAILS.VATAMTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_ALU_BILLDETAILS.VATAMTColumn) = value
            End Set
        End Property
        
        Public Property SERAMT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_ALU_BILLDETAILS.SERAMTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_ALU_BILLDETAILS.SERAMTColumn) = value
            End Set
        End Property
        
        Public Property ACCHG As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_ALU_BILLDETAILS.ACCHGColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_ALU_BILLDETAILS.ACCHGColumn) = value
            End Set
        End Property
        
        Public Property TOTAMT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_ALU_BILLDETAILS.TOTAMTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_ALU_BILLDETAILS.TOTAMTColumn) = value
            End Set
        End Property
        
        Public Property POSCODE As String
            Get
                Return CType(Me(Me.tableVIEW_ALU_BILLDETAILS.POSCODEColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_ALU_BILLDETAILS.POSCODEColumn) = value
            End Set
        End Property
        
        Public Property POSDESC As String
            Get
                Return CType(Me(Me.tableVIEW_ALU_BILLDETAILS.POSDESCColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_ALU_BILLDETAILS.POSDESCColumn) = value
            End Set
        End Property
        
        Public Property DESCRIPTION As String
            Get
                Return CType(Me(Me.tableVIEW_ALU_BILLDETAILS.DESCRIPTIONColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_ALU_BILLDETAILS.DESCRIPTIONColumn) = value
            End Set
        End Property
        
        Public Function IsAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_ALU_BILLDETAILS.AMOUNTColumn)
        End Function
        
        Public Sub SetAMOUNTNull()
            Me(Me.tableVIEW_ALU_BILLDETAILS.AMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVATAMTNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_ALU_BILLDETAILS.VATAMTColumn)
        End Function
        
        Public Sub SetVATAMTNull()
            Me(Me.tableVIEW_ALU_BILLDETAILS.VATAMTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSERAMTNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_ALU_BILLDETAILS.SERAMTColumn)
        End Function
        
        Public Sub SetSERAMTNull()
            Me(Me.tableVIEW_ALU_BILLDETAILS.SERAMTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsACCHGNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_ALU_BILLDETAILS.ACCHGColumn)
        End Function
        
        Public Sub SetACCHGNull()
            Me(Me.tableVIEW_ALU_BILLDETAILS.ACCHGColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTOTAMTNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_ALU_BILLDETAILS.TOTAMTColumn)
        End Function
        
        Public Sub SetTOTAMTNull()
            Me(Me.tableVIEW_ALU_BILLDETAILS.TOTAMTColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_ALU_BILLDETAILSRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VIEW_ALU_BILLDETAILSRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VIEW_ALU_BILLDETAILSRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VIEW_ALU_BILLDETAILSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class View_Mem_MemberTypeConversionDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSNO As DataColumn
        
        Private columnMEM_NAME As DataColumn
        
        Private columnMCODE As DataColumn
        
        Private columnMNAME As DataColumn
        
        Private columnMEMBERTYPECODE As DataColumn
        
        Private columnMEMBERTYPE As DataColumn
        
        Private columnOMEMBERTYPECODE As DataColumn
        
        Private columnOMEMBERTYPE As DataColumn
        
        Private columnCURRENTSTATUS As DataColumn
        
        Private columnEFFECTFROM As DataColumn
        
        Private columnREASON As DataColumn
        
        Friend Sub New()
            MyBase.New("View_Mem_MemberTypeConversion")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property SNOColumn As DataColumn
            Get
                Return Me.columnSNO
            End Get
        End Property
        
        Friend ReadOnly Property MEM_NAMEColumn As DataColumn
            Get
                Return Me.columnMEM_NAME
            End Get
        End Property
        
        Friend ReadOnly Property MCODEColumn As DataColumn
            Get
                Return Me.columnMCODE
            End Get
        End Property
        
        Friend ReadOnly Property MNAMEColumn As DataColumn
            Get
                Return Me.columnMNAME
            End Get
        End Property
        
        Friend ReadOnly Property MEMBERTYPECODEColumn As DataColumn
            Get
                Return Me.columnMEMBERTYPECODE
            End Get
        End Property
        
        Friend ReadOnly Property MEMBERTYPEColumn As DataColumn
            Get
                Return Me.columnMEMBERTYPE
            End Get
        End Property
        
        Friend ReadOnly Property OMEMBERTYPECODEColumn As DataColumn
            Get
                Return Me.columnOMEMBERTYPECODE
            End Get
        End Property
        
        Friend ReadOnly Property OMEMBERTYPEColumn As DataColumn
            Get
                Return Me.columnOMEMBERTYPE
            End Get
        End Property
        
        Friend ReadOnly Property CURRENTSTATUSColumn As DataColumn
            Get
                Return Me.columnCURRENTSTATUS
            End Get
        End Property
        
        Friend ReadOnly Property EFFECTFROMColumn As DataColumn
            Get
                Return Me.columnEFFECTFROM
            End Get
        End Property
        
        Friend ReadOnly Property REASONColumn As DataColumn
            Get
                Return Me.columnREASON
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As View_Mem_MemberTypeConversionRow
            Get
                Return CType(Me.Rows(index),View_Mem_MemberTypeConversionRow)
            End Get
        End Property
        
        Public Event View_Mem_MemberTypeConversionRowChanged As View_Mem_MemberTypeConversionRowChangeEventHandler
        
        Public Event View_Mem_MemberTypeConversionRowChanging As View_Mem_MemberTypeConversionRowChangeEventHandler
        
        Public Event View_Mem_MemberTypeConversionRowDeleted As View_Mem_MemberTypeConversionRowChangeEventHandler
        
        Public Event View_Mem_MemberTypeConversionRowDeleting As View_Mem_MemberTypeConversionRowChangeEventHandler
        
        Public Overloads Sub AddView_Mem_MemberTypeConversionRow(ByVal row As View_Mem_MemberTypeConversionRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddView_Mem_MemberTypeConversionRow(ByVal SNO As Integer, ByVal MEM_NAME As String, ByVal MCODE As String, ByVal MNAME As String, ByVal MEMBERTYPECODE As String, ByVal MEMBERTYPE As String, ByVal OMEMBERTYPECODE As String, ByVal OMEMBERTYPE As String, ByVal CURRENTSTATUS As String, ByVal EFFECTFROM As Date, ByVal REASON As String) As View_Mem_MemberTypeConversionRow
            Dim rowView_Mem_MemberTypeConversionRow As View_Mem_MemberTypeConversionRow = CType(Me.NewRow,View_Mem_MemberTypeConversionRow)
            rowView_Mem_MemberTypeConversionRow.ItemArray = New Object() {SNO, MEM_NAME, MCODE, MNAME, MEMBERTYPECODE, MEMBERTYPE, OMEMBERTYPECODE, OMEMBERTYPE, CURRENTSTATUS, EFFECTFROM, REASON}
            Me.Rows.Add(rowView_Mem_MemberTypeConversionRow)
            Return rowView_Mem_MemberTypeConversionRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As View_Mem_MemberTypeConversionDataTable = CType(MyBase.Clone,View_Mem_MemberTypeConversionDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New View_Mem_MemberTypeConversionDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnSNO = Me.Columns("SNO")
            Me.columnMEM_NAME = Me.Columns("MEM_NAME")
            Me.columnMCODE = Me.Columns("MCODE")
            Me.columnMNAME = Me.Columns("MNAME")
            Me.columnMEMBERTYPECODE = Me.Columns("MEMBERTYPECODE")
            Me.columnMEMBERTYPE = Me.Columns("MEMBERTYPE")
            Me.columnOMEMBERTYPECODE = Me.Columns("OMEMBERTYPECODE")
            Me.columnOMEMBERTYPE = Me.Columns("OMEMBERTYPE")
            Me.columnCURRENTSTATUS = Me.Columns("CURRENTSTATUS")
            Me.columnEFFECTFROM = Me.Columns("EFFECTFROM")
            Me.columnREASON = Me.Columns("REASON")
        End Sub
        
        Private Sub InitClass()
            Me.columnSNO = New DataColumn("SNO", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSNO)
            Me.columnMEM_NAME = New DataColumn("MEM_NAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEM_NAME)
            Me.columnMCODE = New DataColumn("MCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMCODE)
            Me.columnMNAME = New DataColumn("MNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMNAME)
            Me.columnMEMBERTYPECODE = New DataColumn("MEMBERTYPECODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEMBERTYPECODE)
            Me.columnMEMBERTYPE = New DataColumn("MEMBERTYPE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEMBERTYPE)
            Me.columnOMEMBERTYPECODE = New DataColumn("OMEMBERTYPECODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOMEMBERTYPECODE)
            Me.columnOMEMBERTYPE = New DataColumn("OMEMBERTYPE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOMEMBERTYPE)
            Me.columnCURRENTSTATUS = New DataColumn("CURRENTSTATUS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCURRENTSTATUS)
            Me.columnEFFECTFROM = New DataColumn("EFFECTFROM", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEFFECTFROM)
            Me.columnREASON = New DataColumn("REASON", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnREASON)
            Me.columnSNO.ReadOnly = true
            Me.columnMEM_NAME.ReadOnly = true
            Me.columnMCODE.ReadOnly = true
            Me.columnMNAME.ReadOnly = true
            Me.columnMEMBERTYPECODE.ReadOnly = true
            Me.columnMEMBERTYPE.ReadOnly = true
            Me.columnOMEMBERTYPECODE.ReadOnly = true
            Me.columnOMEMBERTYPE.ReadOnly = true
            Me.columnCURRENTSTATUS.ReadOnly = true
            Me.columnEFFECTFROM.ReadOnly = true
            Me.columnREASON.ReadOnly = true
        End Sub
        
        Public Function NewView_Mem_MemberTypeConversionRow() As View_Mem_MemberTypeConversionRow
            Return CType(Me.NewRow,View_Mem_MemberTypeConversionRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New View_Mem_MemberTypeConversionRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(View_Mem_MemberTypeConversionRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.View_Mem_MemberTypeConversionRowChangedEvent) Is Nothing) Then
                RaiseEvent View_Mem_MemberTypeConversionRowChanged(Me, New View_Mem_MemberTypeConversionRowChangeEvent(CType(e.Row,View_Mem_MemberTypeConversionRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.View_Mem_MemberTypeConversionRowChangingEvent) Is Nothing) Then
                RaiseEvent View_Mem_MemberTypeConversionRowChanging(Me, New View_Mem_MemberTypeConversionRowChangeEvent(CType(e.Row,View_Mem_MemberTypeConversionRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.View_Mem_MemberTypeConversionRowDeletedEvent) Is Nothing) Then
                RaiseEvent View_Mem_MemberTypeConversionRowDeleted(Me, New View_Mem_MemberTypeConversionRowChangeEvent(CType(e.Row,View_Mem_MemberTypeConversionRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.View_Mem_MemberTypeConversionRowDeletingEvent) Is Nothing) Then
                RaiseEvent View_Mem_MemberTypeConversionRowDeleting(Me, New View_Mem_MemberTypeConversionRowChangeEvent(CType(e.Row,View_Mem_MemberTypeConversionRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveView_Mem_MemberTypeConversionRow(ByVal row As View_Mem_MemberTypeConversionRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class View_Mem_MemberTypeConversionRow
        Inherits DataRow
        
        Private tableView_Mem_MemberTypeConversion As View_Mem_MemberTypeConversionDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableView_Mem_MemberTypeConversion = CType(Me.Table,View_Mem_MemberTypeConversionDataTable)
        End Sub
        
        Public Property SNO As Integer
            Get
                Try 
                    Return CType(Me(Me.tableView_Mem_MemberTypeConversion.SNOColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableView_Mem_MemberTypeConversion.SNOColumn) = value
            End Set
        End Property
        
        Public Property MEM_NAME As String
            Get
                Try 
                    Return CType(Me(Me.tableView_Mem_MemberTypeConversion.MEM_NAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableView_Mem_MemberTypeConversion.MEM_NAMEColumn) = value
            End Set
        End Property
        
        Public Property MCODE As String
            Get
                Try 
                    Return CType(Me(Me.tableView_Mem_MemberTypeConversion.MCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableView_Mem_MemberTypeConversion.MCODEColumn) = value
            End Set
        End Property
        
        Public Property MNAME As String
            Get
                Try 
                    Return CType(Me(Me.tableView_Mem_MemberTypeConversion.MNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableView_Mem_MemberTypeConversion.MNAMEColumn) = value
            End Set
        End Property
        
        Public Property MEMBERTYPECODE As String
            Get
                Try 
                    Return CType(Me(Me.tableView_Mem_MemberTypeConversion.MEMBERTYPECODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableView_Mem_MemberTypeConversion.MEMBERTYPECODEColumn) = value
            End Set
        End Property
        
        Public Property MEMBERTYPE As String
            Get
                Try 
                    Return CType(Me(Me.tableView_Mem_MemberTypeConversion.MEMBERTYPEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableView_Mem_MemberTypeConversion.MEMBERTYPEColumn) = value
            End Set
        End Property
        
        Public Property OMEMBERTYPECODE As String
            Get
                Try 
                    Return CType(Me(Me.tableView_Mem_MemberTypeConversion.OMEMBERTYPECODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableView_Mem_MemberTypeConversion.OMEMBERTYPECODEColumn) = value
            End Set
        End Property
        
        Public Property OMEMBERTYPE As String
            Get
                Try 
                    Return CType(Me(Me.tableView_Mem_MemberTypeConversion.OMEMBERTYPEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableView_Mem_MemberTypeConversion.OMEMBERTYPEColumn) = value
            End Set
        End Property
        
        Public Property CURRENTSTATUS As String
            Get
                Try 
                    Return CType(Me(Me.tableView_Mem_MemberTypeConversion.CURRENTSTATUSColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableView_Mem_MemberTypeConversion.CURRENTSTATUSColumn) = value
            End Set
        End Property
        
        Public Property EFFECTFROM As Date
            Get
                Try 
                    Return CType(Me(Me.tableView_Mem_MemberTypeConversion.EFFECTFROMColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableView_Mem_MemberTypeConversion.EFFECTFROMColumn) = value
            End Set
        End Property
        
        Public Property REASON As String
            Get
                Try 
                    Return CType(Me(Me.tableView_Mem_MemberTypeConversion.REASONColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableView_Mem_MemberTypeConversion.REASONColumn) = value
            End Set
        End Property
        
        Public Function IsSNONull() As Boolean
            Return Me.IsNull(Me.tableView_Mem_MemberTypeConversion.SNOColumn)
        End Function
        
        Public Sub SetSNONull()
            Me(Me.tableView_Mem_MemberTypeConversion.SNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMEM_NAMENull() As Boolean
            Return Me.IsNull(Me.tableView_Mem_MemberTypeConversion.MEM_NAMEColumn)
        End Function
        
        Public Sub SetMEM_NAMENull()
            Me(Me.tableView_Mem_MemberTypeConversion.MEM_NAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMCODENull() As Boolean
            Return Me.IsNull(Me.tableView_Mem_MemberTypeConversion.MCODEColumn)
        End Function
        
        Public Sub SetMCODENull()
            Me(Me.tableView_Mem_MemberTypeConversion.MCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMNAMENull() As Boolean
            Return Me.IsNull(Me.tableView_Mem_MemberTypeConversion.MNAMEColumn)
        End Function
        
        Public Sub SetMNAMENull()
            Me(Me.tableView_Mem_MemberTypeConversion.MNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMEMBERTYPECODENull() As Boolean
            Return Me.IsNull(Me.tableView_Mem_MemberTypeConversion.MEMBERTYPECODEColumn)
        End Function
        
        Public Sub SetMEMBERTYPECODENull()
            Me(Me.tableView_Mem_MemberTypeConversion.MEMBERTYPECODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMEMBERTYPENull() As Boolean
            Return Me.IsNull(Me.tableView_Mem_MemberTypeConversion.MEMBERTYPEColumn)
        End Function
        
        Public Sub SetMEMBERTYPENull()
            Me(Me.tableView_Mem_MemberTypeConversion.MEMBERTYPEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOMEMBERTYPECODENull() As Boolean
            Return Me.IsNull(Me.tableView_Mem_MemberTypeConversion.OMEMBERTYPECODEColumn)
        End Function
        
        Public Sub SetOMEMBERTYPECODENull()
            Me(Me.tableView_Mem_MemberTypeConversion.OMEMBERTYPECODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOMEMBERTYPENull() As Boolean
            Return Me.IsNull(Me.tableView_Mem_MemberTypeConversion.OMEMBERTYPEColumn)
        End Function
        
        Public Sub SetOMEMBERTYPENull()
            Me(Me.tableView_Mem_MemberTypeConversion.OMEMBERTYPEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCURRENTSTATUSNull() As Boolean
            Return Me.IsNull(Me.tableView_Mem_MemberTypeConversion.CURRENTSTATUSColumn)
        End Function
        
        Public Sub SetCURRENTSTATUSNull()
            Me(Me.tableView_Mem_MemberTypeConversion.CURRENTSTATUSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEFFECTFROMNull() As Boolean
            Return Me.IsNull(Me.tableView_Mem_MemberTypeConversion.EFFECTFROMColumn)
        End Function
        
        Public Sub SetEFFECTFROMNull()
            Me(Me.tableView_Mem_MemberTypeConversion.EFFECTFROMColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsREASONNull() As Boolean
            Return Me.IsNull(Me.tableView_Mem_MemberTypeConversion.REASONColumn)
        End Function
        
        Public Sub SetREASONNull()
            Me(Me.tableView_Mem_MemberTypeConversion.REASONColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class View_Mem_MemberTypeConversionRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As View_Mem_MemberTypeConversionRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As View_Mem_MemberTypeConversionRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As View_Mem_MemberTypeConversionRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class View_Mem_MemberstatuslistDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSNO As DataColumn
        
        Private columnMEM_NAME As DataColumn
        
        Private columnMCODE As DataColumn
        
        Private columnMNAME As DataColumn
        
        Private columnMEMBERTYPECODE As DataColumn
        
        Private columnMEMBERTYPE As DataColumn
        
        Private columnCURRENTSTATUS As DataColumn
        
        Private columnOCURRENTSTATUS As DataColumn
        
        Private columnSTATUSDATEFROM As DataColumn
        
        Private columnSTATUSDATETO As DataColumn
        
        Friend Sub New()
            MyBase.New("View_Mem_Memberstatuslist")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property SNOColumn As DataColumn
            Get
                Return Me.columnSNO
            End Get
        End Property
        
        Friend ReadOnly Property MEM_NAMEColumn As DataColumn
            Get
                Return Me.columnMEM_NAME
            End Get
        End Property
        
        Friend ReadOnly Property MCODEColumn As DataColumn
            Get
                Return Me.columnMCODE
            End Get
        End Property
        
        Friend ReadOnly Property MNAMEColumn As DataColumn
            Get
                Return Me.columnMNAME
            End Get
        End Property
        
        Friend ReadOnly Property MEMBERTYPECODEColumn As DataColumn
            Get
                Return Me.columnMEMBERTYPECODE
            End Get
        End Property
        
        Friend ReadOnly Property MEMBERTYPEColumn As DataColumn
            Get
                Return Me.columnMEMBERTYPE
            End Get
        End Property
        
        Friend ReadOnly Property CURRENTSTATUSColumn As DataColumn
            Get
                Return Me.columnCURRENTSTATUS
            End Get
        End Property
        
        Friend ReadOnly Property OCURRENTSTATUSColumn As DataColumn
            Get
                Return Me.columnOCURRENTSTATUS
            End Get
        End Property
        
        Friend ReadOnly Property STATUSDATEFROMColumn As DataColumn
            Get
                Return Me.columnSTATUSDATEFROM
            End Get
        End Property
        
        Friend ReadOnly Property STATUSDATETOColumn As DataColumn
            Get
                Return Me.columnSTATUSDATETO
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As View_Mem_MemberstatuslistRow
            Get
                Return CType(Me.Rows(index),View_Mem_MemberstatuslistRow)
            End Get
        End Property
        
        Public Event View_Mem_MemberstatuslistRowChanged As View_Mem_MemberstatuslistRowChangeEventHandler
        
        Public Event View_Mem_MemberstatuslistRowChanging As View_Mem_MemberstatuslistRowChangeEventHandler
        
        Public Event View_Mem_MemberstatuslistRowDeleted As View_Mem_MemberstatuslistRowChangeEventHandler
        
        Public Event View_Mem_MemberstatuslistRowDeleting As View_Mem_MemberstatuslistRowChangeEventHandler
        
        Public Overloads Sub AddView_Mem_MemberstatuslistRow(ByVal row As View_Mem_MemberstatuslistRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddView_Mem_MemberstatuslistRow(ByVal SNO As Integer, ByVal MEM_NAME As String, ByVal MCODE As String, ByVal MNAME As String, ByVal MEMBERTYPECODE As String, ByVal MEMBERTYPE As String, ByVal CURRENTSTATUS As String, ByVal OCURRENTSTATUS As String, ByVal STATUSDATEFROM As Date, ByVal STATUSDATETO As Date) As View_Mem_MemberstatuslistRow
            Dim rowView_Mem_MemberstatuslistRow As View_Mem_MemberstatuslistRow = CType(Me.NewRow,View_Mem_MemberstatuslistRow)
            rowView_Mem_MemberstatuslistRow.ItemArray = New Object() {SNO, MEM_NAME, MCODE, MNAME, MEMBERTYPECODE, MEMBERTYPE, CURRENTSTATUS, OCURRENTSTATUS, STATUSDATEFROM, STATUSDATETO}
            Me.Rows.Add(rowView_Mem_MemberstatuslistRow)
            Return rowView_Mem_MemberstatuslistRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As View_Mem_MemberstatuslistDataTable = CType(MyBase.Clone,View_Mem_MemberstatuslistDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New View_Mem_MemberstatuslistDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnSNO = Me.Columns("SNO")
            Me.columnMEM_NAME = Me.Columns("MEM_NAME")
            Me.columnMCODE = Me.Columns("MCODE")
            Me.columnMNAME = Me.Columns("MNAME")
            Me.columnMEMBERTYPECODE = Me.Columns("MEMBERTYPECODE")
            Me.columnMEMBERTYPE = Me.Columns("MEMBERTYPE")
            Me.columnCURRENTSTATUS = Me.Columns("CURRENTSTATUS")
            Me.columnOCURRENTSTATUS = Me.Columns("OCURRENTSTATUS")
            Me.columnSTATUSDATEFROM = Me.Columns("STATUSDATEFROM")
            Me.columnSTATUSDATETO = Me.Columns("STATUSDATETO")
        End Sub
        
        Private Sub InitClass()
            Me.columnSNO = New DataColumn("SNO", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSNO)
            Me.columnMEM_NAME = New DataColumn("MEM_NAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEM_NAME)
            Me.columnMCODE = New DataColumn("MCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMCODE)
            Me.columnMNAME = New DataColumn("MNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMNAME)
            Me.columnMEMBERTYPECODE = New DataColumn("MEMBERTYPECODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEMBERTYPECODE)
            Me.columnMEMBERTYPE = New DataColumn("MEMBERTYPE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEMBERTYPE)
            Me.columnCURRENTSTATUS = New DataColumn("CURRENTSTATUS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCURRENTSTATUS)
            Me.columnOCURRENTSTATUS = New DataColumn("OCURRENTSTATUS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOCURRENTSTATUS)
            Me.columnSTATUSDATEFROM = New DataColumn("STATUSDATEFROM", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSTATUSDATEFROM)
            Me.columnSTATUSDATETO = New DataColumn("STATUSDATETO", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSTATUSDATETO)
            Me.columnSNO.ReadOnly = true
            Me.columnMEM_NAME.ReadOnly = true
            Me.columnMCODE.ReadOnly = true
            Me.columnMNAME.ReadOnly = true
            Me.columnMEMBERTYPECODE.ReadOnly = true
            Me.columnMEMBERTYPE.ReadOnly = true
            Me.columnCURRENTSTATUS.ReadOnly = true
            Me.columnOCURRENTSTATUS.ReadOnly = true
            Me.columnSTATUSDATEFROM.ReadOnly = true
            Me.columnSTATUSDATETO.ReadOnly = true
        End Sub
        
        Public Function NewView_Mem_MemberstatuslistRow() As View_Mem_MemberstatuslistRow
            Return CType(Me.NewRow,View_Mem_MemberstatuslistRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New View_Mem_MemberstatuslistRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(View_Mem_MemberstatuslistRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.View_Mem_MemberstatuslistRowChangedEvent) Is Nothing) Then
                RaiseEvent View_Mem_MemberstatuslistRowChanged(Me, New View_Mem_MemberstatuslistRowChangeEvent(CType(e.Row,View_Mem_MemberstatuslistRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.View_Mem_MemberstatuslistRowChangingEvent) Is Nothing) Then
                RaiseEvent View_Mem_MemberstatuslistRowChanging(Me, New View_Mem_MemberstatuslistRowChangeEvent(CType(e.Row,View_Mem_MemberstatuslistRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.View_Mem_MemberstatuslistRowDeletedEvent) Is Nothing) Then
                RaiseEvent View_Mem_MemberstatuslistRowDeleted(Me, New View_Mem_MemberstatuslistRowChangeEvent(CType(e.Row,View_Mem_MemberstatuslistRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.View_Mem_MemberstatuslistRowDeletingEvent) Is Nothing) Then
                RaiseEvent View_Mem_MemberstatuslistRowDeleting(Me, New View_Mem_MemberstatuslistRowChangeEvent(CType(e.Row,View_Mem_MemberstatuslistRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveView_Mem_MemberstatuslistRow(ByVal row As View_Mem_MemberstatuslistRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class View_Mem_MemberstatuslistRow
        Inherits DataRow
        
        Private tableView_Mem_Memberstatuslist As View_Mem_MemberstatuslistDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableView_Mem_Memberstatuslist = CType(Me.Table,View_Mem_MemberstatuslistDataTable)
        End Sub
        
        Public Property SNO As Integer
            Get
                Try 
                    Return CType(Me(Me.tableView_Mem_Memberstatuslist.SNOColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableView_Mem_Memberstatuslist.SNOColumn) = value
            End Set
        End Property
        
        Public Property MEM_NAME As String
            Get
                Try 
                    Return CType(Me(Me.tableView_Mem_Memberstatuslist.MEM_NAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableView_Mem_Memberstatuslist.MEM_NAMEColumn) = value
            End Set
        End Property
        
        Public Property MCODE As String
            Get
                Try 
                    Return CType(Me(Me.tableView_Mem_Memberstatuslist.MCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableView_Mem_Memberstatuslist.MCODEColumn) = value
            End Set
        End Property
        
        Public Property MNAME As String
            Get
                Try 
                    Return CType(Me(Me.tableView_Mem_Memberstatuslist.MNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableView_Mem_Memberstatuslist.MNAMEColumn) = value
            End Set
        End Property
        
        Public Property MEMBERTYPECODE As String
            Get
                Try 
                    Return CType(Me(Me.tableView_Mem_Memberstatuslist.MEMBERTYPECODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableView_Mem_Memberstatuslist.MEMBERTYPECODEColumn) = value
            End Set
        End Property
        
        Public Property MEMBERTYPE As String
            Get
                Try 
                    Return CType(Me(Me.tableView_Mem_Memberstatuslist.MEMBERTYPEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableView_Mem_Memberstatuslist.MEMBERTYPEColumn) = value
            End Set
        End Property
        
        Public Property CURRENTSTATUS As String
            Get
                Try 
                    Return CType(Me(Me.tableView_Mem_Memberstatuslist.CURRENTSTATUSColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableView_Mem_Memberstatuslist.CURRENTSTATUSColumn) = value
            End Set
        End Property
        
        Public Property OCURRENTSTATUS As String
            Get
                Try 
                    Return CType(Me(Me.tableView_Mem_Memberstatuslist.OCURRENTSTATUSColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableView_Mem_Memberstatuslist.OCURRENTSTATUSColumn) = value
            End Set
        End Property
        
        Public Property STATUSDATEFROM As Date
            Get
                Try 
                    Return CType(Me(Me.tableView_Mem_Memberstatuslist.STATUSDATEFROMColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableView_Mem_Memberstatuslist.STATUSDATEFROMColumn) = value
            End Set
        End Property
        
        Public Property STATUSDATETO As Date
            Get
                Try 
                    Return CType(Me(Me.tableView_Mem_Memberstatuslist.STATUSDATETOColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableView_Mem_Memberstatuslist.STATUSDATETOColumn) = value
            End Set
        End Property
        
        Public Function IsSNONull() As Boolean
            Return Me.IsNull(Me.tableView_Mem_Memberstatuslist.SNOColumn)
        End Function
        
        Public Sub SetSNONull()
            Me(Me.tableView_Mem_Memberstatuslist.SNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMEM_NAMENull() As Boolean
            Return Me.IsNull(Me.tableView_Mem_Memberstatuslist.MEM_NAMEColumn)
        End Function
        
        Public Sub SetMEM_NAMENull()
            Me(Me.tableView_Mem_Memberstatuslist.MEM_NAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMCODENull() As Boolean
            Return Me.IsNull(Me.tableView_Mem_Memberstatuslist.MCODEColumn)
        End Function
        
        Public Sub SetMCODENull()
            Me(Me.tableView_Mem_Memberstatuslist.MCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMNAMENull() As Boolean
            Return Me.IsNull(Me.tableView_Mem_Memberstatuslist.MNAMEColumn)
        End Function
        
        Public Sub SetMNAMENull()
            Me(Me.tableView_Mem_Memberstatuslist.MNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMEMBERTYPECODENull() As Boolean
            Return Me.IsNull(Me.tableView_Mem_Memberstatuslist.MEMBERTYPECODEColumn)
        End Function
        
        Public Sub SetMEMBERTYPECODENull()
            Me(Me.tableView_Mem_Memberstatuslist.MEMBERTYPECODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMEMBERTYPENull() As Boolean
            Return Me.IsNull(Me.tableView_Mem_Memberstatuslist.MEMBERTYPEColumn)
        End Function
        
        Public Sub SetMEMBERTYPENull()
            Me(Me.tableView_Mem_Memberstatuslist.MEMBERTYPEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCURRENTSTATUSNull() As Boolean
            Return Me.IsNull(Me.tableView_Mem_Memberstatuslist.CURRENTSTATUSColumn)
        End Function
        
        Public Sub SetCURRENTSTATUSNull()
            Me(Me.tableView_Mem_Memberstatuslist.CURRENTSTATUSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOCURRENTSTATUSNull() As Boolean
            Return Me.IsNull(Me.tableView_Mem_Memberstatuslist.OCURRENTSTATUSColumn)
        End Function
        
        Public Sub SetOCURRENTSTATUSNull()
            Me(Me.tableView_Mem_Memberstatuslist.OCURRENTSTATUSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSTATUSDATEFROMNull() As Boolean
            Return Me.IsNull(Me.tableView_Mem_Memberstatuslist.STATUSDATEFROMColumn)
        End Function
        
        Public Sub SetSTATUSDATEFROMNull()
            Me(Me.tableView_Mem_Memberstatuslist.STATUSDATEFROMColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSTATUSDATETONull() As Boolean
            Return Me.IsNull(Me.tableView_Mem_Memberstatuslist.STATUSDATETOColumn)
        End Function
        
        Public Sub SetSTATUSDATETONull()
            Me(Me.tableView_Mem_Memberstatuslist.STATUSDATETOColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class View_Mem_MemberstatuslistRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As View_Mem_MemberstatuslistRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As View_Mem_MemberstatuslistRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As View_Mem_MemberstatuslistRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class View_Rec_DetDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnbillno As DataColumn
        
        Private columnbilldate As DataColumn
        
        Private columnSLCODE As DataColumn
        
        Private columnDramount As DataColumn
        
        Private columnCramount As DataColumn
        
        Private columnlocdesc As DataColumn
        
        Private columnloccode As DataColumn
        
        Friend Sub New()
            MyBase.New("View_Rec_Det")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property billnoColumn As DataColumn
            Get
                Return Me.columnbillno
            End Get
        End Property
        
        Friend ReadOnly Property billdateColumn As DataColumn
            Get
                Return Me.columnbilldate
            End Get
        End Property
        
        Friend ReadOnly Property SLCODEColumn As DataColumn
            Get
                Return Me.columnSLCODE
            End Get
        End Property
        
        Friend ReadOnly Property DramountColumn As DataColumn
            Get
                Return Me.columnDramount
            End Get
        End Property
        
        Friend ReadOnly Property CramountColumn As DataColumn
            Get
                Return Me.columnCramount
            End Get
        End Property
        
        Friend ReadOnly Property locdescColumn As DataColumn
            Get
                Return Me.columnlocdesc
            End Get
        End Property
        
        Friend ReadOnly Property loccodeColumn As DataColumn
            Get
                Return Me.columnloccode
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As View_Rec_DetRow
            Get
                Return CType(Me.Rows(index),View_Rec_DetRow)
            End Get
        End Property
        
        Public Event View_Rec_DetRowChanged As View_Rec_DetRowChangeEventHandler
        
        Public Event View_Rec_DetRowChanging As View_Rec_DetRowChangeEventHandler
        
        Public Event View_Rec_DetRowDeleted As View_Rec_DetRowChangeEventHandler
        
        Public Event View_Rec_DetRowDeleting As View_Rec_DetRowChangeEventHandler
        
        Public Overloads Sub AddView_Rec_DetRow(ByVal row As View_Rec_DetRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddView_Rec_DetRow(ByVal billno As String, ByVal billdate As Date, ByVal SLCODE As String, ByVal Dramount As Decimal, ByVal Cramount As Decimal, ByVal locdesc As String, ByVal loccode As String) As View_Rec_DetRow
            Dim rowView_Rec_DetRow As View_Rec_DetRow = CType(Me.NewRow,View_Rec_DetRow)
            rowView_Rec_DetRow.ItemArray = New Object() {billno, billdate, SLCODE, Dramount, Cramount, locdesc, loccode}
            Me.Rows.Add(rowView_Rec_DetRow)
            Return rowView_Rec_DetRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As View_Rec_DetDataTable = CType(MyBase.Clone,View_Rec_DetDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New View_Rec_DetDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnbillno = Me.Columns("billno")
            Me.columnbilldate = Me.Columns("billdate")
            Me.columnSLCODE = Me.Columns("SLCODE")
            Me.columnDramount = Me.Columns("Dramount")
            Me.columnCramount = Me.Columns("Cramount")
            Me.columnlocdesc = Me.Columns("locdesc")
            Me.columnloccode = Me.Columns("loccode")
        End Sub
        
        Private Sub InitClass()
            Me.columnbillno = New DataColumn("billno", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnbillno)
            Me.columnbilldate = New DataColumn("billdate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnbilldate)
            Me.columnSLCODE = New DataColumn("SLCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSLCODE)
            Me.columnDramount = New DataColumn("Dramount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDramount)
            Me.columnCramount = New DataColumn("Cramount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCramount)
            Me.columnlocdesc = New DataColumn("locdesc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlocdesc)
            Me.columnloccode = New DataColumn("loccode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnloccode)
            Me.columnbillno.AllowDBNull = false
            Me.columnbilldate.AllowDBNull = false
            Me.columnlocdesc.AllowDBNull = false
            Me.columnloccode.AllowDBNull = false
        End Sub
        
        Public Function NewView_Rec_DetRow() As View_Rec_DetRow
            Return CType(Me.NewRow,View_Rec_DetRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New View_Rec_DetRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(View_Rec_DetRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.View_Rec_DetRowChangedEvent) Is Nothing) Then
                RaiseEvent View_Rec_DetRowChanged(Me, New View_Rec_DetRowChangeEvent(CType(e.Row,View_Rec_DetRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.View_Rec_DetRowChangingEvent) Is Nothing) Then
                RaiseEvent View_Rec_DetRowChanging(Me, New View_Rec_DetRowChangeEvent(CType(e.Row,View_Rec_DetRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.View_Rec_DetRowDeletedEvent) Is Nothing) Then
                RaiseEvent View_Rec_DetRowDeleted(Me, New View_Rec_DetRowChangeEvent(CType(e.Row,View_Rec_DetRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.View_Rec_DetRowDeletingEvent) Is Nothing) Then
                RaiseEvent View_Rec_DetRowDeleting(Me, New View_Rec_DetRowChangeEvent(CType(e.Row,View_Rec_DetRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveView_Rec_DetRow(ByVal row As View_Rec_DetRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class View_Rec_DetRow
        Inherits DataRow
        
        Private tableView_Rec_Det As View_Rec_DetDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableView_Rec_Det = CType(Me.Table,View_Rec_DetDataTable)
        End Sub
        
        Public Property billno As String
            Get
                Return CType(Me(Me.tableView_Rec_Det.billnoColumn),String)
            End Get
            Set
                Me(Me.tableView_Rec_Det.billnoColumn) = value
            End Set
        End Property
        
        Public Property billdate As Date
            Get
                Return CType(Me(Me.tableView_Rec_Det.billdateColumn),Date)
            End Get
            Set
                Me(Me.tableView_Rec_Det.billdateColumn) = value
            End Set
        End Property
        
        Public Property SLCODE As String
            Get
                Try 
                    Return CType(Me(Me.tableView_Rec_Det.SLCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableView_Rec_Det.SLCODEColumn) = value
            End Set
        End Property
        
        Public Property Dramount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableView_Rec_Det.DramountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableView_Rec_Det.DramountColumn) = value
            End Set
        End Property
        
        Public Property Cramount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableView_Rec_Det.CramountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableView_Rec_Det.CramountColumn) = value
            End Set
        End Property
        
        Public Property locdesc As String
            Get
                Return CType(Me(Me.tableView_Rec_Det.locdescColumn),String)
            End Get
            Set
                Me(Me.tableView_Rec_Det.locdescColumn) = value
            End Set
        End Property
        
        Public Property loccode As String
            Get
                Return CType(Me(Me.tableView_Rec_Det.loccodeColumn),String)
            End Get
            Set
                Me(Me.tableView_Rec_Det.loccodeColumn) = value
            End Set
        End Property
        
        Public Function IsSLCODENull() As Boolean
            Return Me.IsNull(Me.tableView_Rec_Det.SLCODEColumn)
        End Function
        
        Public Sub SetSLCODENull()
            Me(Me.tableView_Rec_Det.SLCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDramountNull() As Boolean
            Return Me.IsNull(Me.tableView_Rec_Det.DramountColumn)
        End Function
        
        Public Sub SetDramountNull()
            Me(Me.tableView_Rec_Det.DramountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCramountNull() As Boolean
            Return Me.IsNull(Me.tableView_Rec_Det.CramountColumn)
        End Function
        
        Public Sub SetCramountNull()
            Me(Me.tableView_Rec_Det.CramountColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class View_Rec_DetRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As View_Rec_DetRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As View_Rec_DetRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As View_Rec_DetRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MM_MEMBERSTRENGTHDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnMEMBERTYPECODE As DataColumn
        
        Private columnTYPEDESC As DataColumn
        
        Private columnVALUE As DataColumn
        
        Private columnMdescription As DataColumn
        
        Friend Sub New()
            MyBase.New("MM_MEMBERSTRENGTH")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property MEMBERTYPECODEColumn As DataColumn
            Get
                Return Me.columnMEMBERTYPECODE
            End Get
        End Property
        
        Friend ReadOnly Property TYPEDESCColumn As DataColumn
            Get
                Return Me.columnTYPEDESC
            End Get
        End Property
        
        Friend ReadOnly Property VALUEColumn As DataColumn
            Get
                Return Me.columnVALUE
            End Get
        End Property
        
        Friend ReadOnly Property MdescriptionColumn As DataColumn
            Get
                Return Me.columnMdescription
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As MM_MEMBERSTRENGTHRow
            Get
                Return CType(Me.Rows(index),MM_MEMBERSTRENGTHRow)
            End Get
        End Property
        
        Public Event MM_MEMBERSTRENGTHRowChanged As MM_MEMBERSTRENGTHRowChangeEventHandler
        
        Public Event MM_MEMBERSTRENGTHRowChanging As MM_MEMBERSTRENGTHRowChangeEventHandler
        
        Public Event MM_MEMBERSTRENGTHRowDeleted As MM_MEMBERSTRENGTHRowChangeEventHandler
        
        Public Event MM_MEMBERSTRENGTHRowDeleting As MM_MEMBERSTRENGTHRowChangeEventHandler
        
        Public Overloads Sub AddMM_MEMBERSTRENGTHRow(ByVal row As MM_MEMBERSTRENGTHRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddMM_MEMBERSTRENGTHRow(ByVal MEMBERTYPECODE As String, ByVal TYPEDESC As String, ByVal VALUE As Integer, ByVal Mdescription As String) As MM_MEMBERSTRENGTHRow
            Dim rowMM_MEMBERSTRENGTHRow As MM_MEMBERSTRENGTHRow = CType(Me.NewRow,MM_MEMBERSTRENGTHRow)
            rowMM_MEMBERSTRENGTHRow.ItemArray = New Object() {MEMBERTYPECODE, TYPEDESC, VALUE, Mdescription}
            Me.Rows.Add(rowMM_MEMBERSTRENGTHRow)
            Return rowMM_MEMBERSTRENGTHRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As MM_MEMBERSTRENGTHDataTable = CType(MyBase.Clone,MM_MEMBERSTRENGTHDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New MM_MEMBERSTRENGTHDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnMEMBERTYPECODE = Me.Columns("MEMBERTYPECODE")
            Me.columnTYPEDESC = Me.Columns("TYPEDESC")
            Me.columnVALUE = Me.Columns("VALUE")
            Me.columnMdescription = Me.Columns("Mdescription")
        End Sub
        
        Private Sub InitClass()
            Me.columnMEMBERTYPECODE = New DataColumn("MEMBERTYPECODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEMBERTYPECODE)
            Me.columnTYPEDESC = New DataColumn("TYPEDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTYPEDESC)
            Me.columnVALUE = New DataColumn("VALUE", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVALUE)
            Me.columnMdescription = New DataColumn("Mdescription", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMdescription)
            Me.columnTYPEDESC.AllowDBNull = false
        End Sub
        
        Public Function NewMM_MEMBERSTRENGTHRow() As MM_MEMBERSTRENGTHRow
            Return CType(Me.NewRow,MM_MEMBERSTRENGTHRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New MM_MEMBERSTRENGTHRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(MM_MEMBERSTRENGTHRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MM_MEMBERSTRENGTHRowChangedEvent) Is Nothing) Then
                RaiseEvent MM_MEMBERSTRENGTHRowChanged(Me, New MM_MEMBERSTRENGTHRowChangeEvent(CType(e.Row,MM_MEMBERSTRENGTHRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MM_MEMBERSTRENGTHRowChangingEvent) Is Nothing) Then
                RaiseEvent MM_MEMBERSTRENGTHRowChanging(Me, New MM_MEMBERSTRENGTHRowChangeEvent(CType(e.Row,MM_MEMBERSTRENGTHRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MM_MEMBERSTRENGTHRowDeletedEvent) Is Nothing) Then
                RaiseEvent MM_MEMBERSTRENGTHRowDeleted(Me, New MM_MEMBERSTRENGTHRowChangeEvent(CType(e.Row,MM_MEMBERSTRENGTHRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MM_MEMBERSTRENGTHRowDeletingEvent) Is Nothing) Then
                RaiseEvent MM_MEMBERSTRENGTHRowDeleting(Me, New MM_MEMBERSTRENGTHRowChangeEvent(CType(e.Row,MM_MEMBERSTRENGTHRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveMM_MEMBERSTRENGTHRow(ByVal row As MM_MEMBERSTRENGTHRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MM_MEMBERSTRENGTHRow
        Inherits DataRow
        
        Private tableMM_MEMBERSTRENGTH As MM_MEMBERSTRENGTHDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableMM_MEMBERSTRENGTH = CType(Me.Table,MM_MEMBERSTRENGTHDataTable)
        End Sub
        
        Public Property MEMBERTYPECODE As String
            Get
                Try 
                    Return CType(Me(Me.tableMM_MEMBERSTRENGTH.MEMBERTYPECODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMM_MEMBERSTRENGTH.MEMBERTYPECODEColumn) = value
            End Set
        End Property
        
        Public Property TYPEDESC As String
            Get
                Return CType(Me(Me.tableMM_MEMBERSTRENGTH.TYPEDESCColumn),String)
            End Get
            Set
                Me(Me.tableMM_MEMBERSTRENGTH.TYPEDESCColumn) = value
            End Set
        End Property
        
        Public Property VALUE As Integer
            Get
                Try 
                    Return CType(Me(Me.tableMM_MEMBERSTRENGTH.VALUEColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMM_MEMBERSTRENGTH.VALUEColumn) = value
            End Set
        End Property
        
        Public Property Mdescription As String
            Get
                Try 
                    Return CType(Me(Me.tableMM_MEMBERSTRENGTH.MdescriptionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMM_MEMBERSTRENGTH.MdescriptionColumn) = value
            End Set
        End Property
        
        Public Function IsMEMBERTYPECODENull() As Boolean
            Return Me.IsNull(Me.tableMM_MEMBERSTRENGTH.MEMBERTYPECODEColumn)
        End Function
        
        Public Sub SetMEMBERTYPECODENull()
            Me(Me.tableMM_MEMBERSTRENGTH.MEMBERTYPECODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVALUENull() As Boolean
            Return Me.IsNull(Me.tableMM_MEMBERSTRENGTH.VALUEColumn)
        End Function
        
        Public Sub SetVALUENull()
            Me(Me.tableMM_MEMBERSTRENGTH.VALUEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMdescriptionNull() As Boolean
            Return Me.IsNull(Me.tableMM_MEMBERSTRENGTH.MdescriptionColumn)
        End Function
        
        Public Sub SetMdescriptionNull()
            Me(Me.tableMM_MEMBERSTRENGTH.MdescriptionColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MM_MEMBERSTRENGTHRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As MM_MEMBERSTRENGTHRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As MM_MEMBERSTRENGTHRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As MM_MEMBERSTRENGTHRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VW_UNITWISE_MEMBERDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnmcode As DataColumn
        
        Private columnmname As DataColumn
        
        Private columndoj As DataColumn
        
        Private columnadd1 As DataColumn
        
        Private columnadd2 As DataColumn
        
        Private columnadd3 As DataColumn
        
        Private columncity As DataColumn
        
        Private columnstate As DataColumn
        
        Private columncountry As DataColumn
        
        Private columnpincode As DataColumn
        
        Private columnphone1 As DataColumn
        
        Private columnprefix As DataColumn
        
        Private columncontcell As DataColumn
        
        Private columnTypeDesc As DataColumn
        
        Private columncurentstatus As DataColumn
        
        Private columnunitno As DataColumn
        
        Private columnUNITNAME As DataColumn
        
        Private columnUNITDescription As DataColumn
        
        Friend Sub New()
            MyBase.New("VW_UNITWISE_MEMBER")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property mcodeColumn As DataColumn
            Get
                Return Me.columnmcode
            End Get
        End Property
        
        Friend ReadOnly Property mnameColumn As DataColumn
            Get
                Return Me.columnmname
            End Get
        End Property
        
        Friend ReadOnly Property dojColumn As DataColumn
            Get
                Return Me.columndoj
            End Get
        End Property
        
        Friend ReadOnly Property add1Column As DataColumn
            Get
                Return Me.columnadd1
            End Get
        End Property
        
        Friend ReadOnly Property add2Column As DataColumn
            Get
                Return Me.columnadd2
            End Get
        End Property
        
        Friend ReadOnly Property add3Column As DataColumn
            Get
                Return Me.columnadd3
            End Get
        End Property
        
        Friend ReadOnly Property cityColumn As DataColumn
            Get
                Return Me.columncity
            End Get
        End Property
        
        Friend ReadOnly Property stateColumn As DataColumn
            Get
                Return Me.columnstate
            End Get
        End Property
        
        Friend ReadOnly Property countryColumn As DataColumn
            Get
                Return Me.columncountry
            End Get
        End Property
        
        Friend ReadOnly Property pincodeColumn As DataColumn
            Get
                Return Me.columnpincode
            End Get
        End Property
        
        Friend ReadOnly Property phone1Column As DataColumn
            Get
                Return Me.columnphone1
            End Get
        End Property
        
        Friend ReadOnly Property prefixColumn As DataColumn
            Get
                Return Me.columnprefix
            End Get
        End Property
        
        Friend ReadOnly Property contcellColumn As DataColumn
            Get
                Return Me.columncontcell
            End Get
        End Property
        
        Friend ReadOnly Property TypeDescColumn As DataColumn
            Get
                Return Me.columnTypeDesc
            End Get
        End Property
        
        Friend ReadOnly Property curentstatusColumn As DataColumn
            Get
                Return Me.columncurentstatus
            End Get
        End Property
        
        Friend ReadOnly Property unitnoColumn As DataColumn
            Get
                Return Me.columnunitno
            End Get
        End Property
        
        Friend ReadOnly Property UNITNAMEColumn As DataColumn
            Get
                Return Me.columnUNITNAME
            End Get
        End Property
        
        Friend ReadOnly Property UNITDescriptionColumn As DataColumn
            Get
                Return Me.columnUNITDescription
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VW_UNITWISE_MEMBERRow
            Get
                Return CType(Me.Rows(index),VW_UNITWISE_MEMBERRow)
            End Get
        End Property
        
        Public Event VW_UNITWISE_MEMBERRowChanged As VW_UNITWISE_MEMBERRowChangeEventHandler
        
        Public Event VW_UNITWISE_MEMBERRowChanging As VW_UNITWISE_MEMBERRowChangeEventHandler
        
        Public Event VW_UNITWISE_MEMBERRowDeleted As VW_UNITWISE_MEMBERRowChangeEventHandler
        
        Public Event VW_UNITWISE_MEMBERRowDeleting As VW_UNITWISE_MEMBERRowChangeEventHandler
        
        Public Overloads Sub AddVW_UNITWISE_MEMBERRow(ByVal row As VW_UNITWISE_MEMBERRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVW_UNITWISE_MEMBERRow( _
                    ByVal mcode As String,  _
                    ByVal mname As String,  _
                    ByVal doj As Date,  _
                    ByVal add1 As String,  _
                    ByVal add2 As String,  _
                    ByVal add3 As String,  _
                    ByVal city As String,  _
                    ByVal state As String,  _
                    ByVal country As String,  _
                    ByVal pincode As String,  _
                    ByVal phone1 As String,  _
                    ByVal prefix As String,  _
                    ByVal contcell As String,  _
                    ByVal TypeDesc As String,  _
                    ByVal curentstatus As String,  _
                    ByVal unitno As String,  _
                    ByVal UNITNAME As String,  _
                    ByVal UNITDescription As String) As VW_UNITWISE_MEMBERRow
            Dim rowVW_UNITWISE_MEMBERRow As VW_UNITWISE_MEMBERRow = CType(Me.NewRow,VW_UNITWISE_MEMBERRow)
            rowVW_UNITWISE_MEMBERRow.ItemArray = New Object() {mcode, mname, doj, add1, add2, add3, city, state, country, pincode, phone1, prefix, contcell, TypeDesc, curentstatus, unitno, UNITNAME, UNITDescription}
            Me.Rows.Add(rowVW_UNITWISE_MEMBERRow)
            Return rowVW_UNITWISE_MEMBERRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VW_UNITWISE_MEMBERDataTable = CType(MyBase.Clone,VW_UNITWISE_MEMBERDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VW_UNITWISE_MEMBERDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnmcode = Me.Columns("mcode")
            Me.columnmname = Me.Columns("mname")
            Me.columndoj = Me.Columns("doj")
            Me.columnadd1 = Me.Columns("add1")
            Me.columnadd2 = Me.Columns("add2")
            Me.columnadd3 = Me.Columns("add3")
            Me.columncity = Me.Columns("city")
            Me.columnstate = Me.Columns("state")
            Me.columncountry = Me.Columns("country")
            Me.columnpincode = Me.Columns("pincode")
            Me.columnphone1 = Me.Columns("phone1")
            Me.columnprefix = Me.Columns("prefix")
            Me.columncontcell = Me.Columns("contcell")
            Me.columnTypeDesc = Me.Columns("TypeDesc")
            Me.columncurentstatus = Me.Columns("curentstatus")
            Me.columnunitno = Me.Columns("unitno")
            Me.columnUNITNAME = Me.Columns("UNITNAME")
            Me.columnUNITDescription = Me.Columns("UNITDescription")
        End Sub
        
        Private Sub InitClass()
            Me.columnmcode = New DataColumn("mcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmcode)
            Me.columnmname = New DataColumn("mname", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmname)
            Me.columndoj = New DataColumn("doj", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndoj)
            Me.columnadd1 = New DataColumn("add1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnadd1)
            Me.columnadd2 = New DataColumn("add2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnadd2)
            Me.columnadd3 = New DataColumn("add3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnadd3)
            Me.columncity = New DataColumn("city", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncity)
            Me.columnstate = New DataColumn("state", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstate)
            Me.columncountry = New DataColumn("country", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncountry)
            Me.columnpincode = New DataColumn("pincode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpincode)
            Me.columnphone1 = New DataColumn("phone1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphone1)
            Me.columnprefix = New DataColumn("prefix", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprefix)
            Me.columncontcell = New DataColumn("contcell", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncontcell)
            Me.columnTypeDesc = New DataColumn("TypeDesc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTypeDesc)
            Me.columncurentstatus = New DataColumn("curentstatus", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncurentstatus)
            Me.columnunitno = New DataColumn("unitno", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnunitno)
            Me.columnUNITNAME = New DataColumn("UNITNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUNITNAME)
            Me.columnUNITDescription = New DataColumn("UNITDescription", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUNITDescription)
            Me.columnmcode.ReadOnly = true
            Me.columnmname.ReadOnly = true
            Me.columndoj.ReadOnly = true
            Me.columnadd1.ReadOnly = true
            Me.columnadd2.ReadOnly = true
            Me.columnadd3.ReadOnly = true
            Me.columncity.ReadOnly = true
            Me.columnstate.ReadOnly = true
            Me.columncountry.ReadOnly = true
            Me.columnpincode.ReadOnly = true
            Me.columnphone1.ReadOnly = true
            Me.columnprefix.ReadOnly = true
            Me.columncontcell.ReadOnly = true
            Me.columnTypeDesc.ReadOnly = true
            Me.columncurentstatus.ReadOnly = true
            Me.columnunitno.ReadOnly = true
            Me.columnUNITNAME.ReadOnly = true
            Me.columnUNITDescription.ReadOnly = true
        End Sub
        
        Public Function NewVW_UNITWISE_MEMBERRow() As VW_UNITWISE_MEMBERRow
            Return CType(Me.NewRow,VW_UNITWISE_MEMBERRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VW_UNITWISE_MEMBERRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VW_UNITWISE_MEMBERRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VW_UNITWISE_MEMBERRowChangedEvent) Is Nothing) Then
                RaiseEvent VW_UNITWISE_MEMBERRowChanged(Me, New VW_UNITWISE_MEMBERRowChangeEvent(CType(e.Row,VW_UNITWISE_MEMBERRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VW_UNITWISE_MEMBERRowChangingEvent) Is Nothing) Then
                RaiseEvent VW_UNITWISE_MEMBERRowChanging(Me, New VW_UNITWISE_MEMBERRowChangeEvent(CType(e.Row,VW_UNITWISE_MEMBERRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VW_UNITWISE_MEMBERRowDeletedEvent) Is Nothing) Then
                RaiseEvent VW_UNITWISE_MEMBERRowDeleted(Me, New VW_UNITWISE_MEMBERRowChangeEvent(CType(e.Row,VW_UNITWISE_MEMBERRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VW_UNITWISE_MEMBERRowDeletingEvent) Is Nothing) Then
                RaiseEvent VW_UNITWISE_MEMBERRowDeleting(Me, New VW_UNITWISE_MEMBERRowChangeEvent(CType(e.Row,VW_UNITWISE_MEMBERRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVW_UNITWISE_MEMBERRow(ByVal row As VW_UNITWISE_MEMBERRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VW_UNITWISE_MEMBERRow
        Inherits DataRow
        
        Private tableVW_UNITWISE_MEMBER As VW_UNITWISE_MEMBERDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVW_UNITWISE_MEMBER = CType(Me.Table,VW_UNITWISE_MEMBERDataTable)
        End Sub
        
        Public Property mcode As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_UNITWISE_MEMBER.mcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_UNITWISE_MEMBER.mcodeColumn) = value
            End Set
        End Property
        
        Public Property mname As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_UNITWISE_MEMBER.mnameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_UNITWISE_MEMBER.mnameColumn) = value
            End Set
        End Property
        
        Public Property doj As Date
            Get
                Try 
                    Return CType(Me(Me.tableVW_UNITWISE_MEMBER.dojColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_UNITWISE_MEMBER.dojColumn) = value
            End Set
        End Property
        
        Public Property add1 As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_UNITWISE_MEMBER.add1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_UNITWISE_MEMBER.add1Column) = value
            End Set
        End Property
        
        Public Property add2 As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_UNITWISE_MEMBER.add2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_UNITWISE_MEMBER.add2Column) = value
            End Set
        End Property
        
        Public Property add3 As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_UNITWISE_MEMBER.add3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_UNITWISE_MEMBER.add3Column) = value
            End Set
        End Property
        
        Public Property city As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_UNITWISE_MEMBER.cityColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_UNITWISE_MEMBER.cityColumn) = value
            End Set
        End Property
        
        Public Property state As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_UNITWISE_MEMBER.stateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_UNITWISE_MEMBER.stateColumn) = value
            End Set
        End Property
        
        Public Property country As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_UNITWISE_MEMBER.countryColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_UNITWISE_MEMBER.countryColumn) = value
            End Set
        End Property
        
        Public Property pincode As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_UNITWISE_MEMBER.pincodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_UNITWISE_MEMBER.pincodeColumn) = value
            End Set
        End Property
        
        Public Property phone1 As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_UNITWISE_MEMBER.phone1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_UNITWISE_MEMBER.phone1Column) = value
            End Set
        End Property
        
        Public Property prefix As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_UNITWISE_MEMBER.prefixColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_UNITWISE_MEMBER.prefixColumn) = value
            End Set
        End Property
        
        Public Property contcell As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_UNITWISE_MEMBER.contcellColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_UNITWISE_MEMBER.contcellColumn) = value
            End Set
        End Property
        
        Public Property TypeDesc As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_UNITWISE_MEMBER.TypeDescColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_UNITWISE_MEMBER.TypeDescColumn) = value
            End Set
        End Property
        
        Public Property curentstatus As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_UNITWISE_MEMBER.curentstatusColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_UNITWISE_MEMBER.curentstatusColumn) = value
            End Set
        End Property
        
        Public Property unitno As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_UNITWISE_MEMBER.unitnoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_UNITWISE_MEMBER.unitnoColumn) = value
            End Set
        End Property
        
        Public Property UNITNAME As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_UNITWISE_MEMBER.UNITNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_UNITWISE_MEMBER.UNITNAMEColumn) = value
            End Set
        End Property
        
        Public Property UNITDescription As String
            Get
                Try 
                    Return CType(Me(Me.tableVW_UNITWISE_MEMBER.UNITDescriptionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVW_UNITWISE_MEMBER.UNITDescriptionColumn) = value
            End Set
        End Property
        
        Public Function IsmcodeNull() As Boolean
            Return Me.IsNull(Me.tableVW_UNITWISE_MEMBER.mcodeColumn)
        End Function
        
        Public Sub SetmcodeNull()
            Me(Me.tableVW_UNITWISE_MEMBER.mcodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsmnameNull() As Boolean
            Return Me.IsNull(Me.tableVW_UNITWISE_MEMBER.mnameColumn)
        End Function
        
        Public Sub SetmnameNull()
            Me(Me.tableVW_UNITWISE_MEMBER.mnameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdojNull() As Boolean
            Return Me.IsNull(Me.tableVW_UNITWISE_MEMBER.dojColumn)
        End Function
        
        Public Sub SetdojNull()
            Me(Me.tableVW_UNITWISE_MEMBER.dojColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isadd1Null() As Boolean
            Return Me.IsNull(Me.tableVW_UNITWISE_MEMBER.add1Column)
        End Function
        
        Public Sub Setadd1Null()
            Me(Me.tableVW_UNITWISE_MEMBER.add1Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isadd2Null() As Boolean
            Return Me.IsNull(Me.tableVW_UNITWISE_MEMBER.add2Column)
        End Function
        
        Public Sub Setadd2Null()
            Me(Me.tableVW_UNITWISE_MEMBER.add2Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isadd3Null() As Boolean
            Return Me.IsNull(Me.tableVW_UNITWISE_MEMBER.add3Column)
        End Function
        
        Public Sub Setadd3Null()
            Me(Me.tableVW_UNITWISE_MEMBER.add3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IscityNull() As Boolean
            Return Me.IsNull(Me.tableVW_UNITWISE_MEMBER.cityColumn)
        End Function
        
        Public Sub SetcityNull()
            Me(Me.tableVW_UNITWISE_MEMBER.cityColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsstateNull() As Boolean
            Return Me.IsNull(Me.tableVW_UNITWISE_MEMBER.stateColumn)
        End Function
        
        Public Sub SetstateNull()
            Me(Me.tableVW_UNITWISE_MEMBER.stateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscountryNull() As Boolean
            Return Me.IsNull(Me.tableVW_UNITWISE_MEMBER.countryColumn)
        End Function
        
        Public Sub SetcountryNull()
            Me(Me.tableVW_UNITWISE_MEMBER.countryColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IspincodeNull() As Boolean
            Return Me.IsNull(Me.tableVW_UNITWISE_MEMBER.pincodeColumn)
        End Function
        
        Public Sub SetpincodeNull()
            Me(Me.tableVW_UNITWISE_MEMBER.pincodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isphone1Null() As Boolean
            Return Me.IsNull(Me.tableVW_UNITWISE_MEMBER.phone1Column)
        End Function
        
        Public Sub Setphone1Null()
            Me(Me.tableVW_UNITWISE_MEMBER.phone1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsprefixNull() As Boolean
            Return Me.IsNull(Me.tableVW_UNITWISE_MEMBER.prefixColumn)
        End Function
        
        Public Sub SetprefixNull()
            Me(Me.tableVW_UNITWISE_MEMBER.prefixColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscontcellNull() As Boolean
            Return Me.IsNull(Me.tableVW_UNITWISE_MEMBER.contcellColumn)
        End Function
        
        Public Sub SetcontcellNull()
            Me(Me.tableVW_UNITWISE_MEMBER.contcellColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTypeDescNull() As Boolean
            Return Me.IsNull(Me.tableVW_UNITWISE_MEMBER.TypeDescColumn)
        End Function
        
        Public Sub SetTypeDescNull()
            Me(Me.tableVW_UNITWISE_MEMBER.TypeDescColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscurentstatusNull() As Boolean
            Return Me.IsNull(Me.tableVW_UNITWISE_MEMBER.curentstatusColumn)
        End Function
        
        Public Sub SetcurentstatusNull()
            Me(Me.tableVW_UNITWISE_MEMBER.curentstatusColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsunitnoNull() As Boolean
            Return Me.IsNull(Me.tableVW_UNITWISE_MEMBER.unitnoColumn)
        End Function
        
        Public Sub SetunitnoNull()
            Me(Me.tableVW_UNITWISE_MEMBER.unitnoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUNITNAMENull() As Boolean
            Return Me.IsNull(Me.tableVW_UNITWISE_MEMBER.UNITNAMEColumn)
        End Function
        
        Public Sub SetUNITNAMENull()
            Me(Me.tableVW_UNITWISE_MEMBER.UNITNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUNITDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableVW_UNITWISE_MEMBER.UNITDescriptionColumn)
        End Function
        
        Public Sub SetUNITDescriptionNull()
            Me(Me.tableVW_UNITWISE_MEMBER.UNITDescriptionColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VW_UNITWISE_MEMBERRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VW_UNITWISE_MEMBERRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VW_UNITWISE_MEMBERRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VW_UNITWISE_MEMBERRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class mm_membermasterDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSequenceNo As DataColumn
        
        Private columnTAG As DataColumn
        
        Private columnMEMBERTYPECODE As DataColumn
        
        Private columnCOMPANY As DataColumn
        
        Private columnSUBCD As DataColumn
        
        Private columnMCODE As DataColumn
        
        Private columnMNAME As DataColumn
        
        Private columnMID As DataColumn
        
        Private columnDOB As DataColumn
        
        Private columnDOJ As DataColumn
        
        Private columnSDOB As DataColumn
        
        Private columnSEX As DataColumn
        
        Private columnMARITALSTATUS As DataColumn
        
        Private columnSPOUSE As DataColumn
        
        Private columnBG As DataColumn
        
        Private columnOCCUPATION As DataColumn
        
        Private columnBANKER As DataColumn
        
        Private columnBANKACNO As DataColumn
        
        Private columnHOBBIES As DataColumn
        
        Private columnOTHERINFO As DataColumn
        
        Private columnRESIDENT As DataColumn
        
        Private columnEQUALIFICATION As DataColumn
        
        Private columnPQUALIFICATION As DataColumn
        
        Private columnPROPOSER As DataColumn
        
        Private columnPROPOSERNAME As DataColumn
        
        Private columnSECONDER As DataColumn
        
        Private columnSECONDERNAME As DataColumn
        
        Private columnPAcopyst As DataColumn
        
        Private columnPADD1 As DataColumn
        
        Private columnPADD2 As DataColumn
        
        Private columnPADD3 As DataColumn
        
        Private columnPCITY As DataColumn
        
        Private columnPSTATE As DataColumn
        
        Private columnPCOUNTRY As DataColumn
        
        Private columnPPIN As DataColumn
        
        Private columnPPHONE1 As DataColumn
        
        Private columnPPHONE2 As DataColumn
        
        Private columnPCELL As DataColumn
        
        Private columnPEMAIL As DataColumn
        
        Private columnRAcopyst As DataColumn
        
        Private columnCADD1 As DataColumn
        
        Private columnCADD2 As DataColumn
        
        Private columnCADD3 As DataColumn
        
        Private columnCCITY As DataColumn
        
        Private columnCSTATE As DataColumn
        
        Private columnCCOUNTRY As DataColumn
        
        Private columnCPIN As DataColumn
        
        Private columnCPHONE1 As DataColumn
        
        Private columnCPHONE2 As DataColumn
        
        Private columnCCELL As DataColumn
        
        Private columnCEMAIL As DataColumn
        
        Private columnCONTADD1 As DataColumn
        
        Private columnCONTADD2 As DataColumn
        
        Private columnCONTADD3 As DataColumn
        
        Private columnCONTCITY As DataColumn
        
        Private columnCONTSTATE As DataColumn
        
        Private columnCONTCOUNTRY As DataColumn
        
        Private columnCONTPIN As DataColumn
        
        Private columnCONTPHONE1 As DataColumn
        
        Private columnCONTPHONE2 As DataColumn
        
        Private columnCONTCELL As DataColumn
        
        Private columnCONTEMAIL As DataColumn
        
        Private columnEMPTYPE As DataColumn
        
        Private columnBUSINESSNAME As DataColumn
        
        Private columnBAcopyst As DataColumn
        
        Private columnOADD1 As DataColumn
        
        Private columnOADD2 As DataColumn
        
        Private columnOADD3 As DataColumn
        
        Private columnOCITY As DataColumn
        
        Private columnOSTATE As DataColumn
        
        Private columnOCOUNTRY As DataColumn
        
        Private columnOPIN As DataColumn
        
        Private columnOPHONE1 As DataColumn
        
        Private columnOPHONE2 As DataColumn
        
        Private columnOCELL As DataColumn
        
        Private columnOEMAIL As DataColumn
        
        Private columnDOEPROFESSION As DataColumn
        
        Private columnBUSINESSNATURE As DataColumn
        
        Private columnPOSITIONHELD As DataColumn
        
        Private columnSERVICENAME As DataColumn
        
        Private columnSERVICEYEAR As DataColumn
        
        Private columnPANO As DataColumn
        
        Private columnBBANKER As DataColumn
        
        Private columnCCNO As DataColumn
        
        Private columnANNUALINCOME As DataColumn
        
        Private columnUPDUSERID As DataColumn
        
        Private columnUPDDATETIME As DataColumn
        
        Private columnTERMINATION As DataColumn
        
        Private columnTRN_CON_DATE As DataColumn
        
        Private columnCON_MCODE As DataColumn
        
        Private columnPFAX As DataColumn
        
        Private columnCFAX As DataColumn
        
        Private columnCONTFAX As DataColumn
        
        Private columnREASON As DataColumn
        
        Private columnPHOTO As DataColumn
        
        Private columnCREDITLIMIT As DataColumn
        
        Private columnLIMITAMOUNT As DataColumn
        
        Private columnWEBSITE As DataColumn
        
        Private columnImagefile As DataColumn
        
        Private columnsizefield As DataColumn
        
        Private columnVdate As DataColumn
        
        Private columnVyear As DataColumn
        
        Private columnValiddate As DataColumn
        
        Private columnTempTermination As DataColumn
        
        Private columnTempTermDate As DataColumn
        
        Private columnTempTermReason As DataColumn
        
        Private columnMemberid As DataColumn
        
        Private columnEndingDate As DataColumn
        
        Private columnTotalYears As DataColumn
        
        Private columnCardNo As DataColumn
        
        Private columnCardExpDate As DataColumn
        
        Private columnValidity As DataColumn
        
        Private columnPeriod As DataColumn
        
        Private columnCreditcardno As DataColumn
        
        Private columnCreditExpDt As DataColumn
        
        Private columnType As DataColumn
        
        Private columnSTATUSDATEFROM As DataColumn
        
        Private columnSTATUSDATETO As DataColumn
        
        Private columnCurentStatus As DataColumn
        
        Private columnFirstName As DataColumn
        
        Private columnMiddleName As DataColumn
        
        Private columnSurname As DataColumn
        
        Private column_Alias As DataColumn
        
        Private columnPrefix As DataColumn
        
        Private columnBillType As DataColumn
        
        Private columnNationality As DataColumn
        
        Private columnNationalityAtbirth As DataColumn
        
        Private columnBillbasis As DataColumn
        
        Private columnBillHead As DataColumn
        
        Private columnGDRLocker As DataColumn
        
        Private columnLDRLocker As DataColumn
        
        Private columnHPLocker As DataColumn
        
        Private columnMembershipTo As DataColumn
        
        Private columnsalut As DataColumn
        
        Private columnEntranceFee As DataColumn
        
        Private columnDevelopmentFee As DataColumn
        
        Private columnCriditNumber As DataColumn
        
        Private columnSecurityDeposit As DataColumn
        
        Private columnPlaceOfBirth As DataColumn
        
        Private columnCountryOfBirth As DataColumn
        
        Private columnLastArrivalInCal As DataColumn
        
        Private columnPeriodOfStay_year As DataColumn
        
        Private columnPeriodOfStay_Month As DataColumn
        
        Private columnPreviouslyProposed As DataColumn
        
        Private columnNoOfTimesProposed As DataColumn
        
        Private columnDateOfProposal As DataColumn
        
        Private columnNoOfTimesSeconded As DataColumn
        
        Private columnDateOfSeconded As DataColumn
        
        Private columnResultOfProposal As DataColumn
        
        Private columnElected As DataColumn
        
        Private columnFatherName As DataColumn
        
        Private columnDOBfather As DataColumn
        
        Private columnWifeDOB As DataColumn
        
        Private columnMaidenNameWife As DataColumn
        
        Private columnNationalityWife As DataColumn
        
        Private columnWifesFatherName As DataColumn
        
        Private columnWifeFatherDOB As DataColumn
        
        Private columnApplNo As DataColumn
        
        Private columnApplDate As DataColumn
        
        Private columnCorporatest As DataColumn
        
        Private columnCorporateCode As DataColumn
        
        Private columnCompName As DataColumn
        
        Private columnDesignation As DataColumn
        
        Private columnProfessionInfo As DataColumn
        
        Private columnBuisnessInfo As DataColumn
        
        Private columnProducts As DataColumn
        
        Private columnAgentsDealers As DataColumn
        
        Private columnESTDdate As DataColumn
        
        Private columnNoOfEmp As DataColumn
        
        Private columnTurnover As DataColumn
        
        Private columnClient As DataColumn
        
        Private columnAppliedBut As DataColumn
        
        Private columnPositionInChamber As DataColumn
        
        Private columnQulificationstatus As DataColumn
        
        Private columnQualification1 As DataColumn
        
        Private columnDetails1 As DataColumn
        
        Private columnYearOfPassing1 As DataColumn
        
        Private columnInstitute1 As DataColumn
        
        Private columnDivision1 As DataColumn
        
        Private columnQualification2 As DataColumn
        
        Private columnDetails2 As DataColumn
        
        Private columnYearOfPassing2 As DataColumn
        
        Private columnInstitute2 As DataColumn
        
        Private columnDivision2 As DataColumn
        
        Private columnQualification3 As DataColumn
        
        Private columnDetails3 As DataColumn
        
        Private columnYearOfPassing3 As DataColumn
        
        Private columnInstitute3 As DataColumn
        
        Private columnDivision3 As DataColumn
        
        Private columnsportstatus As DataColumn
        
        Private columnGameType1 As DataColumn
        
        Private columnNameOfGame1 As DataColumn
        
        Private columnDescription1 As DataColumn
        
        Private columnGameType2 As DataColumn
        
        Private columnNameofGame2 As DataColumn
        
        Private columnDescription2 As DataColumn
        
        Private columnGameType3 As DataColumn
        
        Private columnNameOfGame3 As DataColumn
        
        Private columnDescription3 As DataColumn
        
        Private columnChildstatus As DataColumn
        
        Private columnChildName1 As DataColumn
        
        Private columnChildDob1 As DataColumn
        
        Private columnChildSex1 As DataColumn
        
        Private columnChildExpairy1 As DataColumn
        
        Private columnChildName2 As DataColumn
        
        Private columnChildDob2 As DataColumn
        
        Private columnChildSex2 As DataColumn
        
        Private columnChildExpairy2 As DataColumn
        
        Private columnChildName3 As DataColumn
        
        Private columnChildDob3 As DataColumn
        
        Private columnChildSex3 As DataColumn
        
        Private columnchildExpairy3 As DataColumn
        
        Private columnClubstatus As DataColumn
        
        Private columnOtherClubName1 As DataColumn
        
        Private columnOCAddress1 As DataColumn
        
        Private columnOCStatus1 As DataColumn
        
        Private columnOtherClubName2 As DataColumn
        
        Private columnOCAddress2 As DataColumn
        
        Private columnOCStatus2 As DataColumn
        
        Private columnOtherClubname3 As DataColumn
        
        Private columnOCAddress3 As DataColumn
        
        Private columnOCStataus As DataColumn
        
        Private columnadduser As DataColumn
        
        Private columnadddate As DataColumn
        
        Private columnfreeze As DataColumn
        
        Private columnRelativestatus As DataColumn
        
        Private columnRelativeName1 As DataColumn
        
        Private columnRelation1 As DataColumn
        
        Private columndateofbirth1 As DataColumn
        
        Private columnRelativeage1 As DataColumn
        
        Private columnRelativeSex1 As DataColumn
        
        Private columnRelativeaddress1 As DataColumn
        
        Private columnRelativeName2 As DataColumn
        
        Private columnRelation2 As DataColumn
        
        Private columndateofbirth2 As DataColumn
        
        Private columnRelativeage2 As DataColumn
        
        Private columnRelativeSex2 As DataColumn
        
        Private columnRelativeaddress2 As DataColumn
        
        Private columnRelativeName3 As DataColumn
        
        Private columnRelation3 As DataColumn
        
        Private columndateofbirth3 As DataColumn
        
        Private columnRelativeage3 As DataColumn
        
        Private columnRelativeSex3 As DataColumn
        
        Private columnRelativeaddress3 As DataColumn
        
        Private columnreferentialst As DataColumn
        
        Private columnmem_code1 As DataColumn
        
        Private columnmem_name1 As DataColumn
        
        Private columnrefmem_date1 As DataColumn
        
        Private columndeleted1 As DataColumn
        
        Private columnmem_code2 As DataColumn
        
        Private columnmem_name2 As DataColumn
        
        Private columnrefmem_date2 As DataColumn
        
        Private columndeleted2 As DataColumn
        
        Private columnmem_code3 As DataColumn
        
        Private columnmem_name3 As DataColumn
        
        Private columnrefmem_date3 As DataColumn
        
        Private columndeleted3 As DataColumn
        
        Private columnentrancefeest As DataColumn
        
        Private columnreceiptno1 As DataColumn
        
        Private columnstartdate1 As DataColumn
        
        Private columnamount1 As DataColumn
        
        Private columnreceiptno2 As DataColumn
        
        Private columnstartdate2 As DataColumn
        
        Private columnamount2 As DataColumn
        
        Private columnreceiptno3 As DataColumn
        
        Private columnstartdate3 As DataColumn
        
        Private columnamount3 As DataColumn
        
        Private columnOLD As DataColumn
        
        Private columnCardAmt As DataColumn
        
        Private columnMINIMUMUSAGE As DataColumn
        
        Private columnCREDITNO As DataColumn
        
        Private columnSPOUSEMOBILE As DataColumn
        
        Private columnPADD4 As DataColumn
        
        Private columnCADD4 As DataColumn
        
        Private columnplotno As DataColumn
        
        Private columnsocietyno As DataColumn
        
        Private columncreditstopflag As DataColumn
        
        Private columncreditstopdate As DataColumn
        
        Private columnMSORDERNO As DataColumn
        
        Private columnICNO As DataColumn
        
        Private columnUnitNo As DataColumn
        
        Private columnRankNo As DataColumn
        
        Private columnDateOfCommission As DataColumn
        
        Private columnDateOfRelease As DataColumn
        
        Private columnDateOfCreation As DataColumn
        
        Private columnBTGroup As DataColumn
        
        Private columnRIDCardNo As DataColumn
        
        Private columnArmService As DataColumn
        
        Private columnWO As DataColumn
        
        Private columnNoOfDependencies As DataColumn
        
        Private columnAnniversaryDate As DataColumn
        
        Private columnRByMemberNo As DataColumn
        
        Private columnRByName As DataColumn
        
        Private columnArmyNo As DataColumn
        
        Private columnRankName As DataColumn
        
        Private columnBarcodeNo As DataColumn
        
        Private columnDependentID As DataColumn
        
        Private columnMemberType As DataColumn
        
        Private columnMEMIMAGE As DataColumn
        
        Private columnMEMIMAGESIGN As DataColumn
        
        Private columnSPOUSEIMAGE As DataColumn
        
        Private columnCHILDFDOB1 As DataColumn
        
        Private columnEMAIL_FLAG As DataColumn
        
        Private columnEBILL As DataColumn
        
        Private columnWEDDING_DATE As DataColumn
        
        Private columnTAXFLAG As DataColumn
        
        Private columnMLEDGERNAME As DataColumn
        
        Private columnMDESCRIPTION As DataColumn
        
        Private columnPREFIXMCODE As DataColumn
        
        Private columnUNITDESC As DataColumn
        
        Private columnUNITNAME As DataColumn
        
        Private columnRBYMEMBERNO2 As DataColumn
        
        Private columnRBYMEMBERNAME2 As DataColumn
        
        Friend Sub New()
            MyBase.New("mm_membermaster")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property SequenceNoColumn As DataColumn
            Get
                Return Me.columnSequenceNo
            End Get
        End Property
        
        Friend ReadOnly Property TAGColumn As DataColumn
            Get
                Return Me.columnTAG
            End Get
        End Property
        
        Friend ReadOnly Property MEMBERTYPECODEColumn As DataColumn
            Get
                Return Me.columnMEMBERTYPECODE
            End Get
        End Property
        
        Friend ReadOnly Property COMPANYColumn As DataColumn
            Get
                Return Me.columnCOMPANY
            End Get
        End Property
        
        Friend ReadOnly Property SUBCDColumn As DataColumn
            Get
                Return Me.columnSUBCD
            End Get
        End Property
        
        Friend ReadOnly Property MCODEColumn As DataColumn
            Get
                Return Me.columnMCODE
            End Get
        End Property
        
        Friend ReadOnly Property MNAMEColumn As DataColumn
            Get
                Return Me.columnMNAME
            End Get
        End Property
        
        Friend ReadOnly Property MIDColumn As DataColumn
            Get
                Return Me.columnMID
            End Get
        End Property
        
        Friend ReadOnly Property DOBColumn As DataColumn
            Get
                Return Me.columnDOB
            End Get
        End Property
        
        Friend ReadOnly Property DOJColumn As DataColumn
            Get
                Return Me.columnDOJ
            End Get
        End Property
        
        Friend ReadOnly Property SDOBColumn As DataColumn
            Get
                Return Me.columnSDOB
            End Get
        End Property
        
        Friend ReadOnly Property SEXColumn As DataColumn
            Get
                Return Me.columnSEX
            End Get
        End Property
        
        Friend ReadOnly Property MARITALSTATUSColumn As DataColumn
            Get
                Return Me.columnMARITALSTATUS
            End Get
        End Property
        
        Friend ReadOnly Property SPOUSEColumn As DataColumn
            Get
                Return Me.columnSPOUSE
            End Get
        End Property
        
        Friend ReadOnly Property BGColumn As DataColumn
            Get
                Return Me.columnBG
            End Get
        End Property
        
        Friend ReadOnly Property OCCUPATIONColumn As DataColumn
            Get
                Return Me.columnOCCUPATION
            End Get
        End Property
        
        Friend ReadOnly Property BANKERColumn As DataColumn
            Get
                Return Me.columnBANKER
            End Get
        End Property
        
        Friend ReadOnly Property BANKACNOColumn As DataColumn
            Get
                Return Me.columnBANKACNO
            End Get
        End Property
        
        Friend ReadOnly Property HOBBIESColumn As DataColumn
            Get
                Return Me.columnHOBBIES
            End Get
        End Property
        
        Friend ReadOnly Property OTHERINFOColumn As DataColumn
            Get
                Return Me.columnOTHERINFO
            End Get
        End Property
        
        Friend ReadOnly Property RESIDENTColumn As DataColumn
            Get
                Return Me.columnRESIDENT
            End Get
        End Property
        
        Friend ReadOnly Property EQUALIFICATIONColumn As DataColumn
            Get
                Return Me.columnEQUALIFICATION
            End Get
        End Property
        
        Friend ReadOnly Property PQUALIFICATIONColumn As DataColumn
            Get
                Return Me.columnPQUALIFICATION
            End Get
        End Property
        
        Friend ReadOnly Property PROPOSERColumn As DataColumn
            Get
                Return Me.columnPROPOSER
            End Get
        End Property
        
        Friend ReadOnly Property PROPOSERNAMEColumn As DataColumn
            Get
                Return Me.columnPROPOSERNAME
            End Get
        End Property
        
        Friend ReadOnly Property SECONDERColumn As DataColumn
            Get
                Return Me.columnSECONDER
            End Get
        End Property
        
        Friend ReadOnly Property SECONDERNAMEColumn As DataColumn
            Get
                Return Me.columnSECONDERNAME
            End Get
        End Property
        
        Friend ReadOnly Property PAcopystColumn As DataColumn
            Get
                Return Me.columnPAcopyst
            End Get
        End Property
        
        Friend ReadOnly Property PADD1Column As DataColumn
            Get
                Return Me.columnPADD1
            End Get
        End Property
        
        Friend ReadOnly Property PADD2Column As DataColumn
            Get
                Return Me.columnPADD2
            End Get
        End Property
        
        Friend ReadOnly Property PADD3Column As DataColumn
            Get
                Return Me.columnPADD3
            End Get
        End Property
        
        Friend ReadOnly Property PCITYColumn As DataColumn
            Get
                Return Me.columnPCITY
            End Get
        End Property
        
        Friend ReadOnly Property PSTATEColumn As DataColumn
            Get
                Return Me.columnPSTATE
            End Get
        End Property
        
        Friend ReadOnly Property PCOUNTRYColumn As DataColumn
            Get
                Return Me.columnPCOUNTRY
            End Get
        End Property
        
        Friend ReadOnly Property PPINColumn As DataColumn
            Get
                Return Me.columnPPIN
            End Get
        End Property
        
        Friend ReadOnly Property PPHONE1Column As DataColumn
            Get
                Return Me.columnPPHONE1
            End Get
        End Property
        
        Friend ReadOnly Property PPHONE2Column As DataColumn
            Get
                Return Me.columnPPHONE2
            End Get
        End Property
        
        Friend ReadOnly Property PCELLColumn As DataColumn
            Get
                Return Me.columnPCELL
            End Get
        End Property
        
        Friend ReadOnly Property PEMAILColumn As DataColumn
            Get
                Return Me.columnPEMAIL
            End Get
        End Property
        
        Friend ReadOnly Property RAcopystColumn As DataColumn
            Get
                Return Me.columnRAcopyst
            End Get
        End Property
        
        Friend ReadOnly Property CADD1Column As DataColumn
            Get
                Return Me.columnCADD1
            End Get
        End Property
        
        Friend ReadOnly Property CADD2Column As DataColumn
            Get
                Return Me.columnCADD2
            End Get
        End Property
        
        Friend ReadOnly Property CADD3Column As DataColumn
            Get
                Return Me.columnCADD3
            End Get
        End Property
        
        Friend ReadOnly Property CCITYColumn As DataColumn
            Get
                Return Me.columnCCITY
            End Get
        End Property
        
        Friend ReadOnly Property CSTATEColumn As DataColumn
            Get
                Return Me.columnCSTATE
            End Get
        End Property
        
        Friend ReadOnly Property CCOUNTRYColumn As DataColumn
            Get
                Return Me.columnCCOUNTRY
            End Get
        End Property
        
        Friend ReadOnly Property CPINColumn As DataColumn
            Get
                Return Me.columnCPIN
            End Get
        End Property
        
        Friend ReadOnly Property CPHONE1Column As DataColumn
            Get
                Return Me.columnCPHONE1
            End Get
        End Property
        
        Friend ReadOnly Property CPHONE2Column As DataColumn
            Get
                Return Me.columnCPHONE2
            End Get
        End Property
        
        Friend ReadOnly Property CCELLColumn As DataColumn
            Get
                Return Me.columnCCELL
            End Get
        End Property
        
        Friend ReadOnly Property CEMAILColumn As DataColumn
            Get
                Return Me.columnCEMAIL
            End Get
        End Property
        
        Friend ReadOnly Property CONTADD1Column As DataColumn
            Get
                Return Me.columnCONTADD1
            End Get
        End Property
        
        Friend ReadOnly Property CONTADD2Column As DataColumn
            Get
                Return Me.columnCONTADD2
            End Get
        End Property
        
        Friend ReadOnly Property CONTADD3Column As DataColumn
            Get
                Return Me.columnCONTADD3
            End Get
        End Property
        
        Friend ReadOnly Property CONTCITYColumn As DataColumn
            Get
                Return Me.columnCONTCITY
            End Get
        End Property
        
        Friend ReadOnly Property CONTSTATEColumn As DataColumn
            Get
                Return Me.columnCONTSTATE
            End Get
        End Property
        
        Friend ReadOnly Property CONTCOUNTRYColumn As DataColumn
            Get
                Return Me.columnCONTCOUNTRY
            End Get
        End Property
        
        Friend ReadOnly Property CONTPINColumn As DataColumn
            Get
                Return Me.columnCONTPIN
            End Get
        End Property
        
        Friend ReadOnly Property CONTPHONE1Column As DataColumn
            Get
                Return Me.columnCONTPHONE1
            End Get
        End Property
        
        Friend ReadOnly Property CONTPHONE2Column As DataColumn
            Get
                Return Me.columnCONTPHONE2
            End Get
        End Property
        
        Friend ReadOnly Property CONTCELLColumn As DataColumn
            Get
                Return Me.columnCONTCELL
            End Get
        End Property
        
        Friend ReadOnly Property CONTEMAILColumn As DataColumn
            Get
                Return Me.columnCONTEMAIL
            End Get
        End Property
        
        Friend ReadOnly Property EMPTYPEColumn As DataColumn
            Get
                Return Me.columnEMPTYPE
            End Get
        End Property
        
        Friend ReadOnly Property BUSINESSNAMEColumn As DataColumn
            Get
                Return Me.columnBUSINESSNAME
            End Get
        End Property
        
        Friend ReadOnly Property BAcopystColumn As DataColumn
            Get
                Return Me.columnBAcopyst
            End Get
        End Property
        
        Friend ReadOnly Property OADD1Column As DataColumn
            Get
                Return Me.columnOADD1
            End Get
        End Property
        
        Friend ReadOnly Property OADD2Column As DataColumn
            Get
                Return Me.columnOADD2
            End Get
        End Property
        
        Friend ReadOnly Property OADD3Column As DataColumn
            Get
                Return Me.columnOADD3
            End Get
        End Property
        
        Friend ReadOnly Property OCITYColumn As DataColumn
            Get
                Return Me.columnOCITY
            End Get
        End Property
        
        Friend ReadOnly Property OSTATEColumn As DataColumn
            Get
                Return Me.columnOSTATE
            End Get
        End Property
        
        Friend ReadOnly Property OCOUNTRYColumn As DataColumn
            Get
                Return Me.columnOCOUNTRY
            End Get
        End Property
        
        Friend ReadOnly Property OPINColumn As DataColumn
            Get
                Return Me.columnOPIN
            End Get
        End Property
        
        Friend ReadOnly Property OPHONE1Column As DataColumn
            Get
                Return Me.columnOPHONE1
            End Get
        End Property
        
        Friend ReadOnly Property OPHONE2Column As DataColumn
            Get
                Return Me.columnOPHONE2
            End Get
        End Property
        
        Friend ReadOnly Property OCELLColumn As DataColumn
            Get
                Return Me.columnOCELL
            End Get
        End Property
        
        Friend ReadOnly Property OEMAILColumn As DataColumn
            Get
                Return Me.columnOEMAIL
            End Get
        End Property
        
        Friend ReadOnly Property DOEPROFESSIONColumn As DataColumn
            Get
                Return Me.columnDOEPROFESSION
            End Get
        End Property
        
        Friend ReadOnly Property BUSINESSNATUREColumn As DataColumn
            Get
                Return Me.columnBUSINESSNATURE
            End Get
        End Property
        
        Friend ReadOnly Property POSITIONHELDColumn As DataColumn
            Get
                Return Me.columnPOSITIONHELD
            End Get
        End Property
        
        Friend ReadOnly Property SERVICENAMEColumn As DataColumn
            Get
                Return Me.columnSERVICENAME
            End Get
        End Property
        
        Friend ReadOnly Property SERVICEYEARColumn As DataColumn
            Get
                Return Me.columnSERVICEYEAR
            End Get
        End Property
        
        Friend ReadOnly Property PANOColumn As DataColumn
            Get
                Return Me.columnPANO
            End Get
        End Property
        
        Friend ReadOnly Property BBANKERColumn As DataColumn
            Get
                Return Me.columnBBANKER
            End Get
        End Property
        
        Friend ReadOnly Property CCNOColumn As DataColumn
            Get
                Return Me.columnCCNO
            End Get
        End Property
        
        Friend ReadOnly Property ANNUALINCOMEColumn As DataColumn
            Get
                Return Me.columnANNUALINCOME
            End Get
        End Property
        
        Friend ReadOnly Property UPDUSERIDColumn As DataColumn
            Get
                Return Me.columnUPDUSERID
            End Get
        End Property
        
        Friend ReadOnly Property UPDDATETIMEColumn As DataColumn
            Get
                Return Me.columnUPDDATETIME
            End Get
        End Property
        
        Friend ReadOnly Property TERMINATIONColumn As DataColumn
            Get
                Return Me.columnTERMINATION
            End Get
        End Property
        
        Friend ReadOnly Property TRN_CON_DATEColumn As DataColumn
            Get
                Return Me.columnTRN_CON_DATE
            End Get
        End Property
        
        Friend ReadOnly Property CON_MCODEColumn As DataColumn
            Get
                Return Me.columnCON_MCODE
            End Get
        End Property
        
        Friend ReadOnly Property PFAXColumn As DataColumn
            Get
                Return Me.columnPFAX
            End Get
        End Property
        
        Friend ReadOnly Property CFAXColumn As DataColumn
            Get
                Return Me.columnCFAX
            End Get
        End Property
        
        Friend ReadOnly Property CONTFAXColumn As DataColumn
            Get
                Return Me.columnCONTFAX
            End Get
        End Property
        
        Friend ReadOnly Property REASONColumn As DataColumn
            Get
                Return Me.columnREASON
            End Get
        End Property
        
        Friend ReadOnly Property PHOTOColumn As DataColumn
            Get
                Return Me.columnPHOTO
            End Get
        End Property
        
        Friend ReadOnly Property CREDITLIMITColumn As DataColumn
            Get
                Return Me.columnCREDITLIMIT
            End Get
        End Property
        
        Friend ReadOnly Property LIMITAMOUNTColumn As DataColumn
            Get
                Return Me.columnLIMITAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property WEBSITEColumn As DataColumn
            Get
                Return Me.columnWEBSITE
            End Get
        End Property
        
        Friend ReadOnly Property ImagefileColumn As DataColumn
            Get
                Return Me.columnImagefile
            End Get
        End Property
        
        Friend ReadOnly Property sizefieldColumn As DataColumn
            Get
                Return Me.columnsizefield
            End Get
        End Property
        
        Friend ReadOnly Property VdateColumn As DataColumn
            Get
                Return Me.columnVdate
            End Get
        End Property
        
        Friend ReadOnly Property VyearColumn As DataColumn
            Get
                Return Me.columnVyear
            End Get
        End Property
        
        Friend ReadOnly Property ValiddateColumn As DataColumn
            Get
                Return Me.columnValiddate
            End Get
        End Property
        
        Friend ReadOnly Property TempTerminationColumn As DataColumn
            Get
                Return Me.columnTempTermination
            End Get
        End Property
        
        Friend ReadOnly Property TempTermDateColumn As DataColumn
            Get
                Return Me.columnTempTermDate
            End Get
        End Property
        
        Friend ReadOnly Property TempTermReasonColumn As DataColumn
            Get
                Return Me.columnTempTermReason
            End Get
        End Property
        
        Friend ReadOnly Property MemberidColumn As DataColumn
            Get
                Return Me.columnMemberid
            End Get
        End Property
        
        Friend ReadOnly Property EndingDateColumn As DataColumn
            Get
                Return Me.columnEndingDate
            End Get
        End Property
        
        Friend ReadOnly Property TotalYearsColumn As DataColumn
            Get
                Return Me.columnTotalYears
            End Get
        End Property
        
        Friend ReadOnly Property CardNoColumn As DataColumn
            Get
                Return Me.columnCardNo
            End Get
        End Property
        
        Friend ReadOnly Property CardExpDateColumn As DataColumn
            Get
                Return Me.columnCardExpDate
            End Get
        End Property
        
        Friend ReadOnly Property ValidityColumn As DataColumn
            Get
                Return Me.columnValidity
            End Get
        End Property
        
        Friend ReadOnly Property PeriodColumn As DataColumn
            Get
                Return Me.columnPeriod
            End Get
        End Property
        
        Friend ReadOnly Property CreditcardnoColumn As DataColumn
            Get
                Return Me.columnCreditcardno
            End Get
        End Property
        
        Friend ReadOnly Property CreditExpDtColumn As DataColumn
            Get
                Return Me.columnCreditExpDt
            End Get
        End Property
        
        Friend ReadOnly Property TypeColumn As DataColumn
            Get
                Return Me.columnType
            End Get
        End Property
        
        Friend ReadOnly Property STATUSDATEFROMColumn As DataColumn
            Get
                Return Me.columnSTATUSDATEFROM
            End Get
        End Property
        
        Friend ReadOnly Property STATUSDATETOColumn As DataColumn
            Get
                Return Me.columnSTATUSDATETO
            End Get
        End Property
        
        Friend ReadOnly Property CurentStatusColumn As DataColumn
            Get
                Return Me.columnCurentStatus
            End Get
        End Property
        
        Friend ReadOnly Property FirstNameColumn As DataColumn
            Get
                Return Me.columnFirstName
            End Get
        End Property
        
        Friend ReadOnly Property MiddleNameColumn As DataColumn
            Get
                Return Me.columnMiddleName
            End Get
        End Property
        
        Friend ReadOnly Property SurnameColumn As DataColumn
            Get
                Return Me.columnSurname
            End Get
        End Property
        
        Friend ReadOnly Property _AliasColumn As DataColumn
            Get
                Return Me.column_Alias
            End Get
        End Property
        
        Friend ReadOnly Property PrefixColumn As DataColumn
            Get
                Return Me.columnPrefix
            End Get
        End Property
        
        Friend ReadOnly Property BillTypeColumn As DataColumn
            Get
                Return Me.columnBillType
            End Get
        End Property
        
        Friend ReadOnly Property NationalityColumn As DataColumn
            Get
                Return Me.columnNationality
            End Get
        End Property
        
        Friend ReadOnly Property NationalityAtbirthColumn As DataColumn
            Get
                Return Me.columnNationalityAtbirth
            End Get
        End Property
        
        Friend ReadOnly Property BillbasisColumn As DataColumn
            Get
                Return Me.columnBillbasis
            End Get
        End Property
        
        Friend ReadOnly Property BillHeadColumn As DataColumn
            Get
                Return Me.columnBillHead
            End Get
        End Property
        
        Friend ReadOnly Property GDRLockerColumn As DataColumn
            Get
                Return Me.columnGDRLocker
            End Get
        End Property
        
        Friend ReadOnly Property LDRLockerColumn As DataColumn
            Get
                Return Me.columnLDRLocker
            End Get
        End Property
        
        Friend ReadOnly Property HPLockerColumn As DataColumn
            Get
                Return Me.columnHPLocker
            End Get
        End Property
        
        Friend ReadOnly Property MembershipToColumn As DataColumn
            Get
                Return Me.columnMembershipTo
            End Get
        End Property
        
        Friend ReadOnly Property salutColumn As DataColumn
            Get
                Return Me.columnsalut
            End Get
        End Property
        
        Friend ReadOnly Property EntranceFeeColumn As DataColumn
            Get
                Return Me.columnEntranceFee
            End Get
        End Property
        
        Friend ReadOnly Property DevelopmentFeeColumn As DataColumn
            Get
                Return Me.columnDevelopmentFee
            End Get
        End Property
        
        Friend ReadOnly Property CriditNumberColumn As DataColumn
            Get
                Return Me.columnCriditNumber
            End Get
        End Property
        
        Friend ReadOnly Property SecurityDepositColumn As DataColumn
            Get
                Return Me.columnSecurityDeposit
            End Get
        End Property
        
        Friend ReadOnly Property PlaceOfBirthColumn As DataColumn
            Get
                Return Me.columnPlaceOfBirth
            End Get
        End Property
        
        Friend ReadOnly Property CountryOfBirthColumn As DataColumn
            Get
                Return Me.columnCountryOfBirth
            End Get
        End Property
        
        Friend ReadOnly Property LastArrivalInCalColumn As DataColumn
            Get
                Return Me.columnLastArrivalInCal
            End Get
        End Property
        
        Friend ReadOnly Property PeriodOfStay_yearColumn As DataColumn
            Get
                Return Me.columnPeriodOfStay_year
            End Get
        End Property
        
        Friend ReadOnly Property PeriodOfStay_MonthColumn As DataColumn
            Get
                Return Me.columnPeriodOfStay_Month
            End Get
        End Property
        
        Friend ReadOnly Property PreviouslyProposedColumn As DataColumn
            Get
                Return Me.columnPreviouslyProposed
            End Get
        End Property
        
        Friend ReadOnly Property NoOfTimesProposedColumn As DataColumn
            Get
                Return Me.columnNoOfTimesProposed
            End Get
        End Property
        
        Friend ReadOnly Property DateOfProposalColumn As DataColumn
            Get
                Return Me.columnDateOfProposal
            End Get
        End Property
        
        Friend ReadOnly Property NoOfTimesSecondedColumn As DataColumn
            Get
                Return Me.columnNoOfTimesSeconded
            End Get
        End Property
        
        Friend ReadOnly Property DateOfSecondedColumn As DataColumn
            Get
                Return Me.columnDateOfSeconded
            End Get
        End Property
        
        Friend ReadOnly Property ResultOfProposalColumn As DataColumn
            Get
                Return Me.columnResultOfProposal
            End Get
        End Property
        
        Friend ReadOnly Property ElectedColumn As DataColumn
            Get
                Return Me.columnElected
            End Get
        End Property
        
        Friend ReadOnly Property FatherNameColumn As DataColumn
            Get
                Return Me.columnFatherName
            End Get
        End Property
        
        Friend ReadOnly Property DOBfatherColumn As DataColumn
            Get
                Return Me.columnDOBfather
            End Get
        End Property
        
        Friend ReadOnly Property WifeDOBColumn As DataColumn
            Get
                Return Me.columnWifeDOB
            End Get
        End Property
        
        Friend ReadOnly Property MaidenNameWifeColumn As DataColumn
            Get
                Return Me.columnMaidenNameWife
            End Get
        End Property
        
        Friend ReadOnly Property NationalityWifeColumn As DataColumn
            Get
                Return Me.columnNationalityWife
            End Get
        End Property
        
        Friend ReadOnly Property WifesFatherNameColumn As DataColumn
            Get
                Return Me.columnWifesFatherName
            End Get
        End Property
        
        Friend ReadOnly Property WifeFatherDOBColumn As DataColumn
            Get
                Return Me.columnWifeFatherDOB
            End Get
        End Property
        
        Friend ReadOnly Property ApplNoColumn As DataColumn
            Get
                Return Me.columnApplNo
            End Get
        End Property
        
        Friend ReadOnly Property ApplDateColumn As DataColumn
            Get
                Return Me.columnApplDate
            End Get
        End Property
        
        Friend ReadOnly Property CorporatestColumn As DataColumn
            Get
                Return Me.columnCorporatest
            End Get
        End Property
        
        Friend ReadOnly Property CorporateCodeColumn As DataColumn
            Get
                Return Me.columnCorporateCode
            End Get
        End Property
        
        Friend ReadOnly Property CompNameColumn As DataColumn
            Get
                Return Me.columnCompName
            End Get
        End Property
        
        Friend ReadOnly Property DesignationColumn As DataColumn
            Get
                Return Me.columnDesignation
            End Get
        End Property
        
        Friend ReadOnly Property ProfessionInfoColumn As DataColumn
            Get
                Return Me.columnProfessionInfo
            End Get
        End Property
        
        Friend ReadOnly Property BuisnessInfoColumn As DataColumn
            Get
                Return Me.columnBuisnessInfo
            End Get
        End Property
        
        Friend ReadOnly Property ProductsColumn As DataColumn
            Get
                Return Me.columnProducts
            End Get
        End Property
        
        Friend ReadOnly Property AgentsDealersColumn As DataColumn
            Get
                Return Me.columnAgentsDealers
            End Get
        End Property
        
        Friend ReadOnly Property ESTDdateColumn As DataColumn
            Get
                Return Me.columnESTDdate
            End Get
        End Property
        
        Friend ReadOnly Property NoOfEmpColumn As DataColumn
            Get
                Return Me.columnNoOfEmp
            End Get
        End Property
        
        Friend ReadOnly Property TurnoverColumn As DataColumn
            Get
                Return Me.columnTurnover
            End Get
        End Property
        
        Friend ReadOnly Property ClientColumn As DataColumn
            Get
                Return Me.columnClient
            End Get
        End Property
        
        Friend ReadOnly Property AppliedButColumn As DataColumn
            Get
                Return Me.columnAppliedBut
            End Get
        End Property
        
        Friend ReadOnly Property PositionInChamberColumn As DataColumn
            Get
                Return Me.columnPositionInChamber
            End Get
        End Property
        
        Friend ReadOnly Property QulificationstatusColumn As DataColumn
            Get
                Return Me.columnQulificationstatus
            End Get
        End Property
        
        Friend ReadOnly Property Qualification1Column As DataColumn
            Get
                Return Me.columnQualification1
            End Get
        End Property
        
        Friend ReadOnly Property Details1Column As DataColumn
            Get
                Return Me.columnDetails1
            End Get
        End Property
        
        Friend ReadOnly Property YearOfPassing1Column As DataColumn
            Get
                Return Me.columnYearOfPassing1
            End Get
        End Property
        
        Friend ReadOnly Property Institute1Column As DataColumn
            Get
                Return Me.columnInstitute1
            End Get
        End Property
        
        Friend ReadOnly Property Division1Column As DataColumn
            Get
                Return Me.columnDivision1
            End Get
        End Property
        
        Friend ReadOnly Property Qualification2Column As DataColumn
            Get
                Return Me.columnQualification2
            End Get
        End Property
        
        Friend ReadOnly Property Details2Column As DataColumn
            Get
                Return Me.columnDetails2
            End Get
        End Property
        
        Friend ReadOnly Property YearOfPassing2Column As DataColumn
            Get
                Return Me.columnYearOfPassing2
            End Get
        End Property
        
        Friend ReadOnly Property Institute2Column As DataColumn
            Get
                Return Me.columnInstitute2
            End Get
        End Property
        
        Friend ReadOnly Property Division2Column As DataColumn
            Get
                Return Me.columnDivision2
            End Get
        End Property
        
        Friend ReadOnly Property Qualification3Column As DataColumn
            Get
                Return Me.columnQualification3
            End Get
        End Property
        
        Friend ReadOnly Property Details3Column As DataColumn
            Get
                Return Me.columnDetails3
            End Get
        End Property
        
        Friend ReadOnly Property YearOfPassing3Column As DataColumn
            Get
                Return Me.columnYearOfPassing3
            End Get
        End Property
        
        Friend ReadOnly Property Institute3Column As DataColumn
            Get
                Return Me.columnInstitute3
            End Get
        End Property
        
        Friend ReadOnly Property Division3Column As DataColumn
            Get
                Return Me.columnDivision3
            End Get
        End Property
        
        Friend ReadOnly Property sportstatusColumn As DataColumn
            Get
                Return Me.columnsportstatus
            End Get
        End Property
        
        Friend ReadOnly Property GameType1Column As DataColumn
            Get
                Return Me.columnGameType1
            End Get
        End Property
        
        Friend ReadOnly Property NameOfGame1Column As DataColumn
            Get
                Return Me.columnNameOfGame1
            End Get
        End Property
        
        Friend ReadOnly Property Description1Column As DataColumn
            Get
                Return Me.columnDescription1
            End Get
        End Property
        
        Friend ReadOnly Property GameType2Column As DataColumn
            Get
                Return Me.columnGameType2
            End Get
        End Property
        
        Friend ReadOnly Property NameofGame2Column As DataColumn
            Get
                Return Me.columnNameofGame2
            End Get
        End Property
        
        Friend ReadOnly Property Description2Column As DataColumn
            Get
                Return Me.columnDescription2
            End Get
        End Property
        
        Friend ReadOnly Property GameType3Column As DataColumn
            Get
                Return Me.columnGameType3
            End Get
        End Property
        
        Friend ReadOnly Property NameOfGame3Column As DataColumn
            Get
                Return Me.columnNameOfGame3
            End Get
        End Property
        
        Friend ReadOnly Property Description3Column As DataColumn
            Get
                Return Me.columnDescription3
            End Get
        End Property
        
        Friend ReadOnly Property ChildstatusColumn As DataColumn
            Get
                Return Me.columnChildstatus
            End Get
        End Property
        
        Friend ReadOnly Property ChildName1Column As DataColumn
            Get
                Return Me.columnChildName1
            End Get
        End Property
        
        Friend ReadOnly Property ChildDob1Column As DataColumn
            Get
                Return Me.columnChildDob1
            End Get
        End Property
        
        Friend ReadOnly Property ChildSex1Column As DataColumn
            Get
                Return Me.columnChildSex1
            End Get
        End Property
        
        Friend ReadOnly Property ChildExpairy1Column As DataColumn
            Get
                Return Me.columnChildExpairy1
            End Get
        End Property
        
        Friend ReadOnly Property ChildName2Column As DataColumn
            Get
                Return Me.columnChildName2
            End Get
        End Property
        
        Friend ReadOnly Property ChildDob2Column As DataColumn
            Get
                Return Me.columnChildDob2
            End Get
        End Property
        
        Friend ReadOnly Property ChildSex2Column As DataColumn
            Get
                Return Me.columnChildSex2
            End Get
        End Property
        
        Friend ReadOnly Property ChildExpairy2Column As DataColumn
            Get
                Return Me.columnChildExpairy2
            End Get
        End Property
        
        Friend ReadOnly Property ChildName3Column As DataColumn
            Get
                Return Me.columnChildName3
            End Get
        End Property
        
        Friend ReadOnly Property ChildDob3Column As DataColumn
            Get
                Return Me.columnChildDob3
            End Get
        End Property
        
        Friend ReadOnly Property ChildSex3Column As DataColumn
            Get
                Return Me.columnChildSex3
            End Get
        End Property
        
        Friend ReadOnly Property childExpairy3Column As DataColumn
            Get
                Return Me.columnchildExpairy3
            End Get
        End Property
        
        Friend ReadOnly Property ClubstatusColumn As DataColumn
            Get
                Return Me.columnClubstatus
            End Get
        End Property
        
        Friend ReadOnly Property OtherClubName1Column As DataColumn
            Get
                Return Me.columnOtherClubName1
            End Get
        End Property
        
        Friend ReadOnly Property OCAddress1Column As DataColumn
            Get
                Return Me.columnOCAddress1
            End Get
        End Property
        
        Friend ReadOnly Property OCStatus1Column As DataColumn
            Get
                Return Me.columnOCStatus1
            End Get
        End Property
        
        Friend ReadOnly Property OtherClubName2Column As DataColumn
            Get
                Return Me.columnOtherClubName2
            End Get
        End Property
        
        Friend ReadOnly Property OCAddress2Column As DataColumn
            Get
                Return Me.columnOCAddress2
            End Get
        End Property
        
        Friend ReadOnly Property OCStatus2Column As DataColumn
            Get
                Return Me.columnOCStatus2
            End Get
        End Property
        
        Friend ReadOnly Property OtherClubname3Column As DataColumn
            Get
                Return Me.columnOtherClubname3
            End Get
        End Property
        
        Friend ReadOnly Property OCAddress3Column As DataColumn
            Get
                Return Me.columnOCAddress3
            End Get
        End Property
        
        Friend ReadOnly Property OCStatausColumn As DataColumn
            Get
                Return Me.columnOCStataus
            End Get
        End Property
        
        Friend ReadOnly Property adduserColumn As DataColumn
            Get
                Return Me.columnadduser
            End Get
        End Property
        
        Friend ReadOnly Property adddateColumn As DataColumn
            Get
                Return Me.columnadddate
            End Get
        End Property
        
        Friend ReadOnly Property freezeColumn As DataColumn
            Get
                Return Me.columnfreeze
            End Get
        End Property
        
        Friend ReadOnly Property RelativestatusColumn As DataColumn
            Get
                Return Me.columnRelativestatus
            End Get
        End Property
        
        Friend ReadOnly Property RelativeName1Column As DataColumn
            Get
                Return Me.columnRelativeName1
            End Get
        End Property
        
        Friend ReadOnly Property Relation1Column As DataColumn
            Get
                Return Me.columnRelation1
            End Get
        End Property
        
        Friend ReadOnly Property dateofbirth1Column As DataColumn
            Get
                Return Me.columndateofbirth1
            End Get
        End Property
        
        Friend ReadOnly Property Relativeage1Column As DataColumn
            Get
                Return Me.columnRelativeage1
            End Get
        End Property
        
        Friend ReadOnly Property RelativeSex1Column As DataColumn
            Get
                Return Me.columnRelativeSex1
            End Get
        End Property
        
        Friend ReadOnly Property Relativeaddress1Column As DataColumn
            Get
                Return Me.columnRelativeaddress1
            End Get
        End Property
        
        Friend ReadOnly Property RelativeName2Column As DataColumn
            Get
                Return Me.columnRelativeName2
            End Get
        End Property
        
        Friend ReadOnly Property Relation2Column As DataColumn
            Get
                Return Me.columnRelation2
            End Get
        End Property
        
        Friend ReadOnly Property dateofbirth2Column As DataColumn
            Get
                Return Me.columndateofbirth2
            End Get
        End Property
        
        Friend ReadOnly Property Relativeage2Column As DataColumn
            Get
                Return Me.columnRelativeage2
            End Get
        End Property
        
        Friend ReadOnly Property RelativeSex2Column As DataColumn
            Get
                Return Me.columnRelativeSex2
            End Get
        End Property
        
        Friend ReadOnly Property Relativeaddress2Column As DataColumn
            Get
                Return Me.columnRelativeaddress2
            End Get
        End Property
        
        Friend ReadOnly Property RelativeName3Column As DataColumn
            Get
                Return Me.columnRelativeName3
            End Get
        End Property
        
        Friend ReadOnly Property Relation3Column As DataColumn
            Get
                Return Me.columnRelation3
            End Get
        End Property
        
        Friend ReadOnly Property dateofbirth3Column As DataColumn
            Get
                Return Me.columndateofbirth3
            End Get
        End Property
        
        Friend ReadOnly Property Relativeage3Column As DataColumn
            Get
                Return Me.columnRelativeage3
            End Get
        End Property
        
        Friend ReadOnly Property RelativeSex3Column As DataColumn
            Get
                Return Me.columnRelativeSex3
            End Get
        End Property
        
        Friend ReadOnly Property Relativeaddress3Column As DataColumn
            Get
                Return Me.columnRelativeaddress3
            End Get
        End Property
        
        Friend ReadOnly Property referentialstColumn As DataColumn
            Get
                Return Me.columnreferentialst
            End Get
        End Property
        
        Friend ReadOnly Property mem_code1Column As DataColumn
            Get
                Return Me.columnmem_code1
            End Get
        End Property
        
        Friend ReadOnly Property mem_name1Column As DataColumn
            Get
                Return Me.columnmem_name1
            End Get
        End Property
        
        Friend ReadOnly Property refmem_date1Column As DataColumn
            Get
                Return Me.columnrefmem_date1
            End Get
        End Property
        
        Friend ReadOnly Property deleted1Column As DataColumn
            Get
                Return Me.columndeleted1
            End Get
        End Property
        
        Friend ReadOnly Property mem_code2Column As DataColumn
            Get
                Return Me.columnmem_code2
            End Get
        End Property
        
        Friend ReadOnly Property mem_name2Column As DataColumn
            Get
                Return Me.columnmem_name2
            End Get
        End Property
        
        Friend ReadOnly Property refmem_date2Column As DataColumn
            Get
                Return Me.columnrefmem_date2
            End Get
        End Property
        
        Friend ReadOnly Property deleted2Column As DataColumn
            Get
                Return Me.columndeleted2
            End Get
        End Property
        
        Friend ReadOnly Property mem_code3Column As DataColumn
            Get
                Return Me.columnmem_code3
            End Get
        End Property
        
        Friend ReadOnly Property mem_name3Column As DataColumn
            Get
                Return Me.columnmem_name3
            End Get
        End Property
        
        Friend ReadOnly Property refmem_date3Column As DataColumn
            Get
                Return Me.columnrefmem_date3
            End Get
        End Property
        
        Friend ReadOnly Property deleted3Column As DataColumn
            Get
                Return Me.columndeleted3
            End Get
        End Property
        
        Friend ReadOnly Property entrancefeestColumn As DataColumn
            Get
                Return Me.columnentrancefeest
            End Get
        End Property
        
        Friend ReadOnly Property receiptno1Column As DataColumn
            Get
                Return Me.columnreceiptno1
            End Get
        End Property
        
        Friend ReadOnly Property startdate1Column As DataColumn
            Get
                Return Me.columnstartdate1
            End Get
        End Property
        
        Friend ReadOnly Property amount1Column As DataColumn
            Get
                Return Me.columnamount1
            End Get
        End Property
        
        Friend ReadOnly Property receiptno2Column As DataColumn
            Get
                Return Me.columnreceiptno2
            End Get
        End Property
        
        Friend ReadOnly Property startdate2Column As DataColumn
            Get
                Return Me.columnstartdate2
            End Get
        End Property
        
        Friend ReadOnly Property amount2Column As DataColumn
            Get
                Return Me.columnamount2
            End Get
        End Property
        
        Friend ReadOnly Property receiptno3Column As DataColumn
            Get
                Return Me.columnreceiptno3
            End Get
        End Property
        
        Friend ReadOnly Property startdate3Column As DataColumn
            Get
                Return Me.columnstartdate3
            End Get
        End Property
        
        Friend ReadOnly Property amount3Column As DataColumn
            Get
                Return Me.columnamount3
            End Get
        End Property
        
        Friend ReadOnly Property OLDColumn As DataColumn
            Get
                Return Me.columnOLD
            End Get
        End Property
        
        Friend ReadOnly Property CardAmtColumn As DataColumn
            Get
                Return Me.columnCardAmt
            End Get
        End Property
        
        Friend ReadOnly Property MINIMUMUSAGEColumn As DataColumn
            Get
                Return Me.columnMINIMUMUSAGE
            End Get
        End Property
        
        Friend ReadOnly Property CREDITNOColumn As DataColumn
            Get
                Return Me.columnCREDITNO
            End Get
        End Property
        
        Friend ReadOnly Property SPOUSEMOBILEColumn As DataColumn
            Get
                Return Me.columnSPOUSEMOBILE
            End Get
        End Property
        
        Friend ReadOnly Property PADD4Column As DataColumn
            Get
                Return Me.columnPADD4
            End Get
        End Property
        
        Friend ReadOnly Property CADD4Column As DataColumn
            Get
                Return Me.columnCADD4
            End Get
        End Property
        
        Friend ReadOnly Property plotnoColumn As DataColumn
            Get
                Return Me.columnplotno
            End Get
        End Property
        
        Friend ReadOnly Property societynoColumn As DataColumn
            Get
                Return Me.columnsocietyno
            End Get
        End Property
        
        Friend ReadOnly Property creditstopflagColumn As DataColumn
            Get
                Return Me.columncreditstopflag
            End Get
        End Property
        
        Friend ReadOnly Property creditstopdateColumn As DataColumn
            Get
                Return Me.columncreditstopdate
            End Get
        End Property
        
        Friend ReadOnly Property MSORDERNOColumn As DataColumn
            Get
                Return Me.columnMSORDERNO
            End Get
        End Property
        
        Friend ReadOnly Property ICNOColumn As DataColumn
            Get
                Return Me.columnICNO
            End Get
        End Property
        
        Friend ReadOnly Property UnitNoColumn As DataColumn
            Get
                Return Me.columnUnitNo
            End Get
        End Property
        
        Friend ReadOnly Property RankNoColumn As DataColumn
            Get
                Return Me.columnRankNo
            End Get
        End Property
        
        Friend ReadOnly Property DateOfCommissionColumn As DataColumn
            Get
                Return Me.columnDateOfCommission
            End Get
        End Property
        
        Friend ReadOnly Property DateOfReleaseColumn As DataColumn
            Get
                Return Me.columnDateOfRelease
            End Get
        End Property
        
        Friend ReadOnly Property DateOfCreationColumn As DataColumn
            Get
                Return Me.columnDateOfCreation
            End Get
        End Property
        
        Friend ReadOnly Property BTGroupColumn As DataColumn
            Get
                Return Me.columnBTGroup
            End Get
        End Property
        
        Friend ReadOnly Property RIDCardNoColumn As DataColumn
            Get
                Return Me.columnRIDCardNo
            End Get
        End Property
        
        Friend ReadOnly Property ArmServiceColumn As DataColumn
            Get
                Return Me.columnArmService
            End Get
        End Property
        
        Friend ReadOnly Property WOColumn As DataColumn
            Get
                Return Me.columnWO
            End Get
        End Property
        
        Friend ReadOnly Property NoOfDependenciesColumn As DataColumn
            Get
                Return Me.columnNoOfDependencies
            End Get
        End Property
        
        Friend ReadOnly Property AnniversaryDateColumn As DataColumn
            Get
                Return Me.columnAnniversaryDate
            End Get
        End Property
        
        Friend ReadOnly Property RByMemberNoColumn As DataColumn
            Get
                Return Me.columnRByMemberNo
            End Get
        End Property
        
        Friend ReadOnly Property RByNameColumn As DataColumn
            Get
                Return Me.columnRByName
            End Get
        End Property
        
        Friend ReadOnly Property ArmyNoColumn As DataColumn
            Get
                Return Me.columnArmyNo
            End Get
        End Property
        
        Friend ReadOnly Property RankNameColumn As DataColumn
            Get
                Return Me.columnRankName
            End Get
        End Property
        
        Friend ReadOnly Property BarcodeNoColumn As DataColumn
            Get
                Return Me.columnBarcodeNo
            End Get
        End Property
        
        Friend ReadOnly Property DependentIDColumn As DataColumn
            Get
                Return Me.columnDependentID
            End Get
        End Property
        
        Friend ReadOnly Property MemberTypeColumn As DataColumn
            Get
                Return Me.columnMemberType
            End Get
        End Property
        
        Friend ReadOnly Property MEMIMAGEColumn As DataColumn
            Get
                Return Me.columnMEMIMAGE
            End Get
        End Property
        
        Friend ReadOnly Property MEMIMAGESIGNColumn As DataColumn
            Get
                Return Me.columnMEMIMAGESIGN
            End Get
        End Property
        
        Friend ReadOnly Property SPOUSEIMAGEColumn As DataColumn
            Get
                Return Me.columnSPOUSEIMAGE
            End Get
        End Property
        
        Friend ReadOnly Property CHILDFDOB1Column As DataColumn
            Get
                Return Me.columnCHILDFDOB1
            End Get
        End Property
        
        Friend ReadOnly Property EMAIL_FLAGColumn As DataColumn
            Get
                Return Me.columnEMAIL_FLAG
            End Get
        End Property
        
        Friend ReadOnly Property EBILLColumn As DataColumn
            Get
                Return Me.columnEBILL
            End Get
        End Property
        
        Friend ReadOnly Property WEDDING_DATEColumn As DataColumn
            Get
                Return Me.columnWEDDING_DATE
            End Get
        End Property
        
        Friend ReadOnly Property TAXFLAGColumn As DataColumn
            Get
                Return Me.columnTAXFLAG
            End Get
        End Property
        
        Friend ReadOnly Property MLEDGERNAMEColumn As DataColumn
            Get
                Return Me.columnMLEDGERNAME
            End Get
        End Property
        
        Friend ReadOnly Property MDESCRIPTIONColumn As DataColumn
            Get
                Return Me.columnMDESCRIPTION
            End Get
        End Property
        
        Friend ReadOnly Property PREFIXMCODEColumn As DataColumn
            Get
                Return Me.columnPREFIXMCODE
            End Get
        End Property
        
        Friend ReadOnly Property UNITDESCColumn As DataColumn
            Get
                Return Me.columnUNITDESC
            End Get
        End Property
        
        Friend ReadOnly Property UNITNAMEColumn As DataColumn
            Get
                Return Me.columnUNITNAME
            End Get
        End Property
        
        Friend ReadOnly Property RBYMEMBERNO2Column As DataColumn
            Get
                Return Me.columnRBYMEMBERNO2
            End Get
        End Property
        
        Friend ReadOnly Property RBYMEMBERNAME2Column As DataColumn
            Get
                Return Me.columnRBYMEMBERNAME2
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As mm_membermasterRow
            Get
                Return CType(Me.Rows(index),mm_membermasterRow)
            End Get
        End Property
        
        Public Event mm_membermasterRowChanged As mm_membermasterRowChangeEventHandler
        
        Public Event mm_membermasterRowChanging As mm_membermasterRowChangeEventHandler
        
        Public Event mm_membermasterRowDeleted As mm_membermasterRowChangeEventHandler
        
        Public Event mm_membermasterRowDeleting As mm_membermasterRowChangeEventHandler
        
        Public Overloads Sub Addmm_membermasterRow(ByVal row As mm_membermasterRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addmm_membermasterRow( _
                    ByVal SequenceNo As Decimal,  _
                    ByVal TAG As String,  _
                    ByVal MEMBERTYPECODE As String,  _
                    ByVal COMPANY As String,  _
                    ByVal SUBCD As String,  _
                    ByVal MCODE As String,  _
                    ByVal MNAME As String,  _
                    ByVal MID As String,  _
                    ByVal DOB As Date,  _
                    ByVal DOJ As Date,  _
                    ByVal SDOB As Date,  _
                    ByVal SEX As String,  _
                    ByVal MARITALSTATUS As String,  _
                    ByVal SPOUSE As String,  _
                    ByVal BG As String,  _
                    ByVal OCCUPATION As String,  _
                    ByVal BANKER As String,  _
                    ByVal BANKACNO As String,  _
                    ByVal HOBBIES As String,  _
                    ByVal OTHERINFO As String,  _
                    ByVal RESIDENT As String,  _
                    ByVal EQUALIFICATION As String,  _
                    ByVal PQUALIFICATION As String,  _
                    ByVal PROPOSER As String,  _
                    ByVal PROPOSERNAME As String,  _
                    ByVal SECONDER As String,  _
                    ByVal SECONDERNAME As String,  _
                    ByVal PAcopyst As String,  _
                    ByVal PADD1 As String,  _
                    ByVal PADD2 As String,  _
                    ByVal PADD3 As String,  _
                    ByVal PCITY As String,  _
                    ByVal PSTATE As String,  _
                    ByVal PCOUNTRY As String,  _
                    ByVal PPIN As String,  _
                    ByVal PPHONE1 As String,  _
                    ByVal PPHONE2 As String,  _
                    ByVal PCELL As String,  _
                    ByVal PEMAIL As String,  _
                    ByVal RAcopyst As String,  _
                    ByVal CADD1 As String,  _
                    ByVal CADD2 As String,  _
                    ByVal CADD3 As String,  _
                    ByVal CCITY As String,  _
                    ByVal CSTATE As String,  _
                    ByVal CCOUNTRY As String,  _
                    ByVal CPIN As String,  _
                    ByVal CPHONE1 As String,  _
                    ByVal CPHONE2 As String,  _
                    ByVal CCELL As String,  _
                    ByVal CEMAIL As String,  _
                    ByVal CONTADD1 As String,  _
                    ByVal CONTADD2 As String,  _
                    ByVal CONTADD3 As String,  _
                    ByVal CONTCITY As String,  _
                    ByVal CONTSTATE As String,  _
                    ByVal CONTCOUNTRY As String,  _
                    ByVal CONTPIN As String,  _
                    ByVal CONTPHONE1 As String,  _
                    ByVal CONTPHONE2 As String,  _
                    ByVal CONTCELL As String,  _
                    ByVal CONTEMAIL As String,  _
                    ByVal EMPTYPE As String,  _
                    ByVal BUSINESSNAME As String,  _
                    ByVal BAcopyst As String,  _
                    ByVal OADD1 As String,  _
                    ByVal OADD2 As String,  _
                    ByVal OADD3 As String,  _
                    ByVal OCITY As String,  _
                    ByVal OSTATE As String,  _
                    ByVal OCOUNTRY As String,  _
                    ByVal OPIN As String,  _
                    ByVal OPHONE1 As String,  _
                    ByVal OPHONE2 As String,  _
                    ByVal OCELL As String,  _
                    ByVal OEMAIL As String,  _
                    ByVal DOEPROFESSION As Date,  _
                    ByVal BUSINESSNATURE As String,  _
                    ByVal POSITIONHELD As String,  _
                    ByVal SERVICENAME As String,  _
                    ByVal SERVICEYEAR As Decimal,  _
                    ByVal PANO As String,  _
                    ByVal BBANKER As String,  _
                    ByVal CCNO As String,  _
                    ByVal ANNUALINCOME As Decimal,  _
                    ByVal UPDUSERID As String,  _
                    ByVal UPDDATETIME As Date,  _
                    ByVal TERMINATION As String,  _
                    ByVal TRN_CON_DATE As Date,  _
                    ByVal CON_MCODE As String,  _
                    ByVal PFAX As String,  _
                    ByVal CFAX As String,  _
                    ByVal CONTFAX As String,  _
                    ByVal REASON As String,  _
                    ByVal PHOTO As String,  _
                    ByVal CREDITLIMIT As Decimal,  _
                    ByVal LIMITAMOUNT As Decimal,  _
                    ByVal WEBSITE As String,  _
                    ByVal Imagefile() As Byte,  _
                    ByVal sizefield As Decimal,  _
                    ByVal Vdate As Date,  _
                    ByVal Vyear As Decimal,  _
                    ByVal Validdate As Date,  _
                    ByVal TempTermination As String,  _
                    ByVal TempTermDate As Date,  _
                    ByVal TempTermReason As String,  _
                    ByVal Memberid As String,  _
                    ByVal EndingDate As Date,  _
                    ByVal TotalYears As Decimal,  _
                    ByVal CardNo As String,  _
                    ByVal CardExpDate As Date,  _
                    ByVal Validity As String,  _
                    ByVal Period As String,  _
                    ByVal Creditcardno As String,  _
                    ByVal CreditExpDt As Date,  _
                    ByVal Type As String,  _
                    ByVal STATUSDATEFROM As Date,  _
                    ByVal STATUSDATETO As Date,  _
                    ByVal CurentStatus As String,  _
                    ByVal FirstName As String,  _
                    ByVal MiddleName As String,  _
                    ByVal Surname As String,  _
                    ByVal _Alias As String,  _
                    ByVal Prefix As String,  _
                    ByVal BillType As String,  _
                    ByVal Nationality As String,  _
                    ByVal NationalityAtbirth As String,  _
                    ByVal Billbasis As String,  _
                    ByVal BillHead As String,  _
                    ByVal GDRLocker As String,  _
                    ByVal LDRLocker As String,  _
                    ByVal HPLocker As String,  _
                    ByVal MembershipTo As Date,  _
                    ByVal salut As String,  _
                    ByVal EntranceFee As Double,  _
                    ByVal DevelopmentFee As Double,  _
                    ByVal CriditNumber As String,  _
                    ByVal SecurityDeposit As Decimal,  _
                    ByVal PlaceOfBirth As String,  _
                    ByVal CountryOfBirth As String,  _
                    ByVal LastArrivalInCal As Date,  _
                    ByVal PeriodOfStay_year As Decimal,  _
                    ByVal PeriodOfStay_Month As Decimal,  _
                    ByVal PreviouslyProposed As String,  _
                    ByVal NoOfTimesProposed As Decimal,  _
                    ByVal DateOfProposal As Date,  _
                    ByVal NoOfTimesSeconded As Decimal,  _
                    ByVal DateOfSeconded As Date,  _
                    ByVal ResultOfProposal As String,  _
                    ByVal Elected As String,  _
                    ByVal FatherName As String,  _
                    ByVal DOBfather As Date,  _
                    ByVal WifeDOB As Date,  _
                    ByVal MaidenNameWife As String,  _
                    ByVal NationalityWife As String,  _
                    ByVal WifesFatherName As String,  _
                    ByVal WifeFatherDOB As Date,  _
                    ByVal ApplNo As String,  _
                    ByVal ApplDate As Date,  _
                    ByVal Corporatest As String,  _
                    ByVal CorporateCode As String,  _
                    ByVal CompName As String,  _
                    ByVal Designation As String,  _
                    ByVal ProfessionInfo As String,  _
                    ByVal BuisnessInfo As String,  _
                    ByVal Products As String,  _
                    ByVal AgentsDealers As String,  _
                    ByVal ESTDdate As Date,  _
                    ByVal NoOfEmp As Decimal,  _
                    ByVal Turnover As Double,  _
                    ByVal Client As String,  _
                    ByVal AppliedBut As String,  _
                    ByVal PositionInChamber As String,  _
                    ByVal Qulificationstatus As String,  _
                    ByVal Qualification1 As String,  _
                    ByVal Details1 As String,  _
                    ByVal YearOfPassing1 As String,  _
                    ByVal Institute1 As String,  _
                    ByVal Division1 As String,  _
                    ByVal Qualification2 As String,  _
                    ByVal Details2 As String,  _
                    ByVal YearOfPassing2 As String,  _
                    ByVal Institute2 As String,  _
                    ByVal Division2 As String,  _
                    ByVal Qualification3 As String,  _
                    ByVal Details3 As String,  _
                    ByVal YearOfPassing3 As String,  _
                    ByVal Institute3 As String,  _
                    ByVal Division3 As String,  _
                    ByVal sportstatus As String,  _
                    ByVal GameType1 As String,  _
                    ByVal NameOfGame1 As String,  _
                    ByVal Description1 As String,  _
                    ByVal GameType2 As String,  _
                    ByVal NameofGame2 As String,  _
                    ByVal Description2 As String,  _
                    ByVal GameType3 As String,  _
                    ByVal NameOfGame3 As String,  _
                    ByVal Description3 As String,  _
                    ByVal Childstatus As String,  _
                    ByVal ChildName1 As String,  _
                    ByVal ChildDob1 As String,  _
                    ByVal ChildSex1 As String,  _
                    ByVal ChildExpairy1 As String,  _
                    ByVal ChildName2 As String,  _
                    ByVal ChildDob2 As String,  _
                    ByVal ChildSex2 As String,  _
                    ByVal ChildExpairy2 As String,  _
                    ByVal ChildName3 As String,  _
                    ByVal ChildDob3 As String,  _
                    ByVal ChildSex3 As String,  _
                    ByVal childExpairy3 As String,  _
                    ByVal Clubstatus As String,  _
                    ByVal OtherClubName1 As String,  _
                    ByVal OCAddress1 As String,  _
                    ByVal OCStatus1 As String,  _
                    ByVal OtherClubName2 As String,  _
                    ByVal OCAddress2 As String,  _
                    ByVal OCStatus2 As String,  _
                    ByVal OtherClubname3 As String,  _
                    ByVal OCAddress3 As String,  _
                    ByVal OCStataus As String,  _
                    ByVal adduser As String,  _
                    ByVal adddate As Date,  _
                    ByVal freeze As String,  _
                    ByVal Relativestatus As String,  _
                    ByVal RelativeName1 As String,  _
                    ByVal Relation1 As String,  _
                    ByVal dateofbirth1 As String,  _
                    ByVal Relativeage1 As String,  _
                    ByVal RelativeSex1 As String,  _
                    ByVal Relativeaddress1 As String,  _
                    ByVal RelativeName2 As String,  _
                    ByVal Relation2 As String,  _
                    ByVal dateofbirth2 As String,  _
                    ByVal Relativeage2 As String,  _
                    ByVal RelativeSex2 As String,  _
                    ByVal Relativeaddress2 As String,  _
                    ByVal RelativeName3 As String,  _
                    ByVal Relation3 As String,  _
                    ByVal dateofbirth3 As String,  _
                    ByVal Relativeage3 As String,  _
                    ByVal RelativeSex3 As String,  _
                    ByVal Relativeaddress3 As String,  _
                    ByVal referentialst As String,  _
                    ByVal mem_code1 As String,  _
                    ByVal mem_name1 As String,  _
                    ByVal refmem_date1 As String,  _
                    ByVal deleted1 As String,  _
                    ByVal mem_code2 As String,  _
                    ByVal mem_name2 As String,  _
                    ByVal refmem_date2 As String,  _
                    ByVal deleted2 As String,  _
                    ByVal mem_code3 As String,  _
                    ByVal mem_name3 As String,  _
                    ByVal refmem_date3 As String,  _
                    ByVal deleted3 As String,  _
                    ByVal entrancefeest As String,  _
                    ByVal receiptno1 As String,  _
                    ByVal startdate1 As String,  _
                    ByVal amount1 As String,  _
                    ByVal receiptno2 As String,  _
                    ByVal startdate2 As String,  _
                    ByVal amount2 As String,  _
                    ByVal receiptno3 As String,  _
                    ByVal startdate3 As String,  _
                    ByVal amount3 As String,  _
                    ByVal OLD As String,  _
                    ByVal CardAmt As Decimal,  _
                    ByVal MINIMUMUSAGE As Decimal,  _
                    ByVal CREDITNO As String,  _
                    ByVal SPOUSEMOBILE As String,  _
                    ByVal PADD4 As String,  _
                    ByVal CADD4 As String,  _
                    ByVal plotno As String,  _
                    ByVal societyno As String,  _
                    ByVal creditstopflag As String,  _
                    ByVal creditstopdate As Date,  _
                    ByVal MSORDERNO As Decimal,  _
                    ByVal ICNO As String,  _
                    ByVal UnitNo As String,  _
                    ByVal RankNo As String,  _
                    ByVal DateOfCommission As Date,  _
                    ByVal DateOfRelease As Date,  _
                    ByVal DateOfCreation As Date,  _
                    ByVal BTGroup As String,  _
                    ByVal RIDCardNo As String,  _
                    ByVal ArmService As String,  _
                    ByVal WO As String,  _
                    ByVal NoOfDependencies As String,  _
                    ByVal AnniversaryDate As Date,  _
                    ByVal RByMemberNo As String,  _
                    ByVal RByName As String,  _
                    ByVal ArmyNo As String,  _
                    ByVal RankName As String,  _
                    ByVal BarcodeNo As String,  _
                    ByVal DependentID As Decimal,  _
                    ByVal MemberType As String,  _
                    ByVal MEMIMAGE() As Byte,  _
                    ByVal MEMIMAGESIGN() As Byte,  _
                    ByVal SPOUSEIMAGE() As Byte,  _
                    ByVal CHILDFDOB1 As Date,  _
                    ByVal EMAIL_FLAG As String,  _
                    ByVal EBILL As String,  _
                    ByVal WEDDING_DATE As Date,  _
                    ByVal TAXFLAG As String,  _
                    ByVal MLEDGERNAME As String,  _
                    ByVal MDESCRIPTION As String,  _
                    ByVal PREFIXMCODE As String,  _
                    ByVal UNITDESC As String,  _
                    ByVal UNITNAME As String,  _
                    ByVal RBYMEMBERNO2 As String,  _
                    ByVal RBYMEMBERNAME2 As String) As mm_membermasterRow
            Dim rowmm_membermasterRow As mm_membermasterRow = CType(Me.NewRow,mm_membermasterRow)
            rowmm_membermasterRow.ItemArray = New Object() {SequenceNo, TAG, MEMBERTYPECODE, COMPANY, SUBCD, MCODE, MNAME, MID, DOB, DOJ, SDOB, SEX, MARITALSTATUS, SPOUSE, BG, OCCUPATION, BANKER, BANKACNO, HOBBIES, OTHERINFO, RESIDENT, EQUALIFICATION, PQUALIFICATION, PROPOSER, PROPOSERNAME, SECONDER, SECONDERNAME, PAcopyst, PADD1, PADD2, PADD3, PCITY, PSTATE, PCOUNTRY, PPIN, PPHONE1, PPHONE2, PCELL, PEMAIL, RAcopyst, CADD1, CADD2, CADD3, CCITY, CSTATE, CCOUNTRY, CPIN, CPHONE1, CPHONE2, CCELL, CEMAIL, CONTADD1, CONTADD2, CONTADD3, CONTCITY, CONTSTATE, CONTCOUNTRY, CONTPIN, CONTPHONE1, CONTPHONE2, CONTCELL, CONTEMAIL, EMPTYPE, BUSINESSNAME, BAcopyst, OADD1, OADD2, OADD3, OCITY, OSTATE, OCOUNTRY, OPIN, OPHONE1, OPHONE2, OCELL, OEMAIL, DOEPROFESSION, BUSINESSNATURE, POSITIONHELD, SERVICENAME, SERVICEYEAR, PANO, BBANKER, CCNO, ANNUALINCOME, UPDUSERID, UPDDATETIME, TERMINATION, TRN_CON_DATE, CON_MCODE, PFAX, CFAX, CONTFAX, REASON, PHOTO, CREDITLIMIT, LIMITAMOUNT, WEBSITE, Imagefile, sizefield, Vdate, Vyear, Validdate, TempTermination, TempTermDate, TempTermReason, Memberid, EndingDate, TotalYears, CardNo, CardExpDate, Validity, Period, Creditcardno, CreditExpDt, Type, STATUSDATEFROM, STATUSDATETO, CurentStatus, FirstName, MiddleName, Surname, _Alias, Prefix, BillType, Nationality, NationalityAtbirth, Billbasis, BillHead, GDRLocker, LDRLocker, HPLocker, MembershipTo, salut, EntranceFee, DevelopmentFee, CriditNumber, SecurityDeposit, PlaceOfBirth, CountryOfBirth, LastArrivalInCal, PeriodOfStay_year, PeriodOfStay_Month, PreviouslyProposed, NoOfTimesProposed, DateOfProposal, NoOfTimesSeconded, DateOfSeconded, ResultOfProposal, Elected, FatherName, DOBfather, WifeDOB, MaidenNameWife, NationalityWife, WifesFatherName, WifeFatherDOB, ApplNo, ApplDate, Corporatest, CorporateCode, CompName, Designation, ProfessionInfo, BuisnessInfo, Products, AgentsDealers, ESTDdate, NoOfEmp, Turnover, Client, AppliedBut, PositionInChamber, Qulificationstatus, Qualification1, Details1, YearOfPassing1, Institute1, Division1, Qualification2, Details2, YearOfPassing2, Institute2, Division2, Qualification3, Details3, YearOfPassing3, Institute3, Division3, sportstatus, GameType1, NameOfGame1, Description1, GameType2, NameofGame2, Description2, GameType3, NameOfGame3, Description3, Childstatus, ChildName1, ChildDob1, ChildSex1, ChildExpairy1, ChildName2, ChildDob2, ChildSex2, ChildExpairy2, ChildName3, ChildDob3, ChildSex3, childExpairy3, Clubstatus, OtherClubName1, OCAddress1, OCStatus1, OtherClubName2, OCAddress2, OCStatus2, OtherClubname3, OCAddress3, OCStataus, adduser, adddate, freeze, Relativestatus, RelativeName1, Relation1, dateofbirth1, Relativeage1, RelativeSex1, Relativeaddress1, RelativeName2, Relation2, dateofbirth2, Relativeage2, RelativeSex2, Relativeaddress2, RelativeName3, Relation3, dateofbirth3, Relativeage3, RelativeSex3, Relativeaddress3, referentialst, mem_code1, mem_name1, refmem_date1, deleted1, mem_code2, mem_name2, refmem_date2, deleted2, mem_code3, mem_name3, refmem_date3, deleted3, entrancefeest, receiptno1, startdate1, amount1, receiptno2, startdate2, amount2, receiptno3, startdate3, amount3, OLD, CardAmt, MINIMUMUSAGE, CREDITNO, SPOUSEMOBILE, PADD4, CADD4, plotno, societyno, creditstopflag, creditstopdate, MSORDERNO, ICNO, UnitNo, RankNo, DateOfCommission, DateOfRelease, DateOfCreation, BTGroup, RIDCardNo, ArmService, WO, NoOfDependencies, AnniversaryDate, RByMemberNo, RByName, ArmyNo, RankName, BarcodeNo, DependentID, MemberType, MEMIMAGE, MEMIMAGESIGN, SPOUSEIMAGE, CHILDFDOB1, EMAIL_FLAG, EBILL, WEDDING_DATE, TAXFLAG, MLEDGERNAME, MDESCRIPTION, PREFIXMCODE, UNITDESC, UNITNAME, RBYMEMBERNO2, RBYMEMBERNAME2}
            Me.Rows.Add(rowmm_membermasterRow)
            Return rowmm_membermasterRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As mm_membermasterDataTable = CType(MyBase.Clone,mm_membermasterDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New mm_membermasterDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnSequenceNo = Me.Columns("SequenceNo")
            Me.columnTAG = Me.Columns("TAG")
            Me.columnMEMBERTYPECODE = Me.Columns("MEMBERTYPECODE")
            Me.columnCOMPANY = Me.Columns("COMPANY")
            Me.columnSUBCD = Me.Columns("SUBCD")
            Me.columnMCODE = Me.Columns("MCODE")
            Me.columnMNAME = Me.Columns("MNAME")
            Me.columnMID = Me.Columns("MID")
            Me.columnDOB = Me.Columns("DOB")
            Me.columnDOJ = Me.Columns("DOJ")
            Me.columnSDOB = Me.Columns("SDOB")
            Me.columnSEX = Me.Columns("SEX")
            Me.columnMARITALSTATUS = Me.Columns("MARITALSTATUS")
            Me.columnSPOUSE = Me.Columns("SPOUSE")
            Me.columnBG = Me.Columns("BG")
            Me.columnOCCUPATION = Me.Columns("OCCUPATION")
            Me.columnBANKER = Me.Columns("BANKER")
            Me.columnBANKACNO = Me.Columns("BANKACNO")
            Me.columnHOBBIES = Me.Columns("HOBBIES")
            Me.columnOTHERINFO = Me.Columns("OTHERINFO")
            Me.columnRESIDENT = Me.Columns("RESIDENT")
            Me.columnEQUALIFICATION = Me.Columns("EQUALIFICATION")
            Me.columnPQUALIFICATION = Me.Columns("PQUALIFICATION")
            Me.columnPROPOSER = Me.Columns("PROPOSER")
            Me.columnPROPOSERNAME = Me.Columns("PROPOSERNAME")
            Me.columnSECONDER = Me.Columns("SECONDER")
            Me.columnSECONDERNAME = Me.Columns("SECONDERNAME")
            Me.columnPAcopyst = Me.Columns("PAcopyst")
            Me.columnPADD1 = Me.Columns("PADD1")
            Me.columnPADD2 = Me.Columns("PADD2")
            Me.columnPADD3 = Me.Columns("PADD3")
            Me.columnPCITY = Me.Columns("PCITY")
            Me.columnPSTATE = Me.Columns("PSTATE")
            Me.columnPCOUNTRY = Me.Columns("PCOUNTRY")
            Me.columnPPIN = Me.Columns("PPIN")
            Me.columnPPHONE1 = Me.Columns("PPHONE1")
            Me.columnPPHONE2 = Me.Columns("PPHONE2")
            Me.columnPCELL = Me.Columns("PCELL")
            Me.columnPEMAIL = Me.Columns("PEMAIL")
            Me.columnRAcopyst = Me.Columns("RAcopyst")
            Me.columnCADD1 = Me.Columns("CADD1")
            Me.columnCADD2 = Me.Columns("CADD2")
            Me.columnCADD3 = Me.Columns("CADD3")
            Me.columnCCITY = Me.Columns("CCITY")
            Me.columnCSTATE = Me.Columns("CSTATE")
            Me.columnCCOUNTRY = Me.Columns("CCOUNTRY")
            Me.columnCPIN = Me.Columns("CPIN")
            Me.columnCPHONE1 = Me.Columns("CPHONE1")
            Me.columnCPHONE2 = Me.Columns("CPHONE2")
            Me.columnCCELL = Me.Columns("CCELL")
            Me.columnCEMAIL = Me.Columns("CEMAIL")
            Me.columnCONTADD1 = Me.Columns("CONTADD1")
            Me.columnCONTADD2 = Me.Columns("CONTADD2")
            Me.columnCONTADD3 = Me.Columns("CONTADD3")
            Me.columnCONTCITY = Me.Columns("CONTCITY")
            Me.columnCONTSTATE = Me.Columns("CONTSTATE")
            Me.columnCONTCOUNTRY = Me.Columns("CONTCOUNTRY")
            Me.columnCONTPIN = Me.Columns("CONTPIN")
            Me.columnCONTPHONE1 = Me.Columns("CONTPHONE1")
            Me.columnCONTPHONE2 = Me.Columns("CONTPHONE2")
            Me.columnCONTCELL = Me.Columns("CONTCELL")
            Me.columnCONTEMAIL = Me.Columns("CONTEMAIL")
            Me.columnEMPTYPE = Me.Columns("EMPTYPE")
            Me.columnBUSINESSNAME = Me.Columns("BUSINESSNAME")
            Me.columnBAcopyst = Me.Columns("BAcopyst")
            Me.columnOADD1 = Me.Columns("OADD1")
            Me.columnOADD2 = Me.Columns("OADD2")
            Me.columnOADD3 = Me.Columns("OADD3")
            Me.columnOCITY = Me.Columns("OCITY")
            Me.columnOSTATE = Me.Columns("OSTATE")
            Me.columnOCOUNTRY = Me.Columns("OCOUNTRY")
            Me.columnOPIN = Me.Columns("OPIN")
            Me.columnOPHONE1 = Me.Columns("OPHONE1")
            Me.columnOPHONE2 = Me.Columns("OPHONE2")
            Me.columnOCELL = Me.Columns("OCELL")
            Me.columnOEMAIL = Me.Columns("OEMAIL")
            Me.columnDOEPROFESSION = Me.Columns("DOEPROFESSION")
            Me.columnBUSINESSNATURE = Me.Columns("BUSINESSNATURE")
            Me.columnPOSITIONHELD = Me.Columns("POSITIONHELD")
            Me.columnSERVICENAME = Me.Columns("SERVICENAME")
            Me.columnSERVICEYEAR = Me.Columns("SERVICEYEAR")
            Me.columnPANO = Me.Columns("PANO")
            Me.columnBBANKER = Me.Columns("BBANKER")
            Me.columnCCNO = Me.Columns("CCNO")
            Me.columnANNUALINCOME = Me.Columns("ANNUALINCOME")
            Me.columnUPDUSERID = Me.Columns("UPDUSERID")
            Me.columnUPDDATETIME = Me.Columns("UPDDATETIME")
            Me.columnTERMINATION = Me.Columns("TERMINATION")
            Me.columnTRN_CON_DATE = Me.Columns("TRN_CON_DATE")
            Me.columnCON_MCODE = Me.Columns("CON_MCODE")
            Me.columnPFAX = Me.Columns("PFAX")
            Me.columnCFAX = Me.Columns("CFAX")
            Me.columnCONTFAX = Me.Columns("CONTFAX")
            Me.columnREASON = Me.Columns("REASON")
            Me.columnPHOTO = Me.Columns("PHOTO")
            Me.columnCREDITLIMIT = Me.Columns("CREDITLIMIT")
            Me.columnLIMITAMOUNT = Me.Columns("LIMITAMOUNT")
            Me.columnWEBSITE = Me.Columns("WEBSITE")
            Me.columnImagefile = Me.Columns("Imagefile")
            Me.columnsizefield = Me.Columns("sizefield")
            Me.columnVdate = Me.Columns("Vdate")
            Me.columnVyear = Me.Columns("Vyear")
            Me.columnValiddate = Me.Columns("Validdate")
            Me.columnTempTermination = Me.Columns("TempTermination")
            Me.columnTempTermDate = Me.Columns("TempTermDate")
            Me.columnTempTermReason = Me.Columns("TempTermReason")
            Me.columnMemberid = Me.Columns("Memberid")
            Me.columnEndingDate = Me.Columns("EndingDate")
            Me.columnTotalYears = Me.Columns("TotalYears")
            Me.columnCardNo = Me.Columns("CardNo")
            Me.columnCardExpDate = Me.Columns("CardExpDate")
            Me.columnValidity = Me.Columns("Validity")
            Me.columnPeriod = Me.Columns("Period")
            Me.columnCreditcardno = Me.Columns("Creditcardno")
            Me.columnCreditExpDt = Me.Columns("CreditExpDt")
            Me.columnType = Me.Columns("Type")
            Me.columnSTATUSDATEFROM = Me.Columns("STATUSDATEFROM")
            Me.columnSTATUSDATETO = Me.Columns("STATUSDATETO")
            Me.columnCurentStatus = Me.Columns("CurentStatus")
            Me.columnFirstName = Me.Columns("FirstName")
            Me.columnMiddleName = Me.Columns("MiddleName")
            Me.columnSurname = Me.Columns("Surname")
            Me.column_Alias = Me.Columns("Alias")
            Me.columnPrefix = Me.Columns("Prefix")
            Me.columnBillType = Me.Columns("BillType")
            Me.columnNationality = Me.Columns("Nationality")
            Me.columnNationalityAtbirth = Me.Columns("NationalityAtbirth")
            Me.columnBillbasis = Me.Columns("Billbasis")
            Me.columnBillHead = Me.Columns("BillHead")
            Me.columnGDRLocker = Me.Columns("GDRLocker")
            Me.columnLDRLocker = Me.Columns("LDRLocker")
            Me.columnHPLocker = Me.Columns("HPLocker")
            Me.columnMembershipTo = Me.Columns("MembershipTo")
            Me.columnsalut = Me.Columns("salut")
            Me.columnEntranceFee = Me.Columns("EntranceFee")
            Me.columnDevelopmentFee = Me.Columns("DevelopmentFee")
            Me.columnCriditNumber = Me.Columns("CriditNumber")
            Me.columnSecurityDeposit = Me.Columns("SecurityDeposit")
            Me.columnPlaceOfBirth = Me.Columns("PlaceOfBirth")
            Me.columnCountryOfBirth = Me.Columns("CountryOfBirth")
            Me.columnLastArrivalInCal = Me.Columns("LastArrivalInCal")
            Me.columnPeriodOfStay_year = Me.Columns("PeriodOfStay_year")
            Me.columnPeriodOfStay_Month = Me.Columns("PeriodOfStay_Month")
            Me.columnPreviouslyProposed = Me.Columns("PreviouslyProposed")
            Me.columnNoOfTimesProposed = Me.Columns("NoOfTimesProposed")
            Me.columnDateOfProposal = Me.Columns("DateOfProposal")
            Me.columnNoOfTimesSeconded = Me.Columns("NoOfTimesSeconded")
            Me.columnDateOfSeconded = Me.Columns("DateOfSeconded")
            Me.columnResultOfProposal = Me.Columns("ResultOfProposal")
            Me.columnElected = Me.Columns("Elected")
            Me.columnFatherName = Me.Columns("FatherName")
            Me.columnDOBfather = Me.Columns("DOBfather")
            Me.columnWifeDOB = Me.Columns("WifeDOB")
            Me.columnMaidenNameWife = Me.Columns("MaidenNameWife")
            Me.columnNationalityWife = Me.Columns("NationalityWife")
            Me.columnWifesFatherName = Me.Columns("WifesFatherName")
            Me.columnWifeFatherDOB = Me.Columns("WifeFatherDOB")
            Me.columnApplNo = Me.Columns("ApplNo")
            Me.columnApplDate = Me.Columns("ApplDate")
            Me.columnCorporatest = Me.Columns("Corporatest")
            Me.columnCorporateCode = Me.Columns("CorporateCode")
            Me.columnCompName = Me.Columns("CompName")
            Me.columnDesignation = Me.Columns("Designation")
            Me.columnProfessionInfo = Me.Columns("ProfessionInfo")
            Me.columnBuisnessInfo = Me.Columns("BuisnessInfo")
            Me.columnProducts = Me.Columns("Products")
            Me.columnAgentsDealers = Me.Columns("AgentsDealers")
            Me.columnESTDdate = Me.Columns("ESTDdate")
            Me.columnNoOfEmp = Me.Columns("NoOfEmp")
            Me.columnTurnover = Me.Columns("Turnover")
            Me.columnClient = Me.Columns("Client")
            Me.columnAppliedBut = Me.Columns("AppliedBut")
            Me.columnPositionInChamber = Me.Columns("PositionInChamber")
            Me.columnQulificationstatus = Me.Columns("Qulificationstatus")
            Me.columnQualification1 = Me.Columns("Qualification1")
            Me.columnDetails1 = Me.Columns("Details1")
            Me.columnYearOfPassing1 = Me.Columns("YearOfPassing1")
            Me.columnInstitute1 = Me.Columns("Institute1")
            Me.columnDivision1 = Me.Columns("Division1")
            Me.columnQualification2 = Me.Columns("Qualification2")
            Me.columnDetails2 = Me.Columns("Details2")
            Me.columnYearOfPassing2 = Me.Columns("YearOfPassing2")
            Me.columnInstitute2 = Me.Columns("Institute2")
            Me.columnDivision2 = Me.Columns("Division2")
            Me.columnQualification3 = Me.Columns("Qualification3")
            Me.columnDetails3 = Me.Columns("Details3")
            Me.columnYearOfPassing3 = Me.Columns("YearOfPassing3")
            Me.columnInstitute3 = Me.Columns("Institute3")
            Me.columnDivision3 = Me.Columns("Division3")
            Me.columnsportstatus = Me.Columns("sportstatus")
            Me.columnGameType1 = Me.Columns("GameType1")
            Me.columnNameOfGame1 = Me.Columns("NameOfGame1")
            Me.columnDescription1 = Me.Columns("Description1")
            Me.columnGameType2 = Me.Columns("GameType2")
            Me.columnNameofGame2 = Me.Columns("NameofGame2")
            Me.columnDescription2 = Me.Columns("Description2")
            Me.columnGameType3 = Me.Columns("GameType3")
            Me.columnNameOfGame3 = Me.Columns("NameOfGame3")
            Me.columnDescription3 = Me.Columns("Description3")
            Me.columnChildstatus = Me.Columns("Childstatus")
            Me.columnChildName1 = Me.Columns("ChildName1")
            Me.columnChildDob1 = Me.Columns("ChildDob1")
            Me.columnChildSex1 = Me.Columns("ChildSex1")
            Me.columnChildExpairy1 = Me.Columns("ChildExpairy1")
            Me.columnChildName2 = Me.Columns("ChildName2")
            Me.columnChildDob2 = Me.Columns("ChildDob2")
            Me.columnChildSex2 = Me.Columns("ChildSex2")
            Me.columnChildExpairy2 = Me.Columns("ChildExpairy2")
            Me.columnChildName3 = Me.Columns("ChildName3")
            Me.columnChildDob3 = Me.Columns("ChildDob3")
            Me.columnChildSex3 = Me.Columns("ChildSex3")
            Me.columnchildExpairy3 = Me.Columns("childExpairy3")
            Me.columnClubstatus = Me.Columns("Clubstatus")
            Me.columnOtherClubName1 = Me.Columns("OtherClubName1")
            Me.columnOCAddress1 = Me.Columns("OCAddress1")
            Me.columnOCStatus1 = Me.Columns("OCStatus1")
            Me.columnOtherClubName2 = Me.Columns("OtherClubName2")
            Me.columnOCAddress2 = Me.Columns("OCAddress2")
            Me.columnOCStatus2 = Me.Columns("OCStatus2")
            Me.columnOtherClubname3 = Me.Columns("OtherClubname3")
            Me.columnOCAddress3 = Me.Columns("OCAddress3")
            Me.columnOCStataus = Me.Columns("OCStataus")
            Me.columnadduser = Me.Columns("adduser")
            Me.columnadddate = Me.Columns("adddate")
            Me.columnfreeze = Me.Columns("freeze")
            Me.columnRelativestatus = Me.Columns("Relativestatus")
            Me.columnRelativeName1 = Me.Columns("RelativeName1")
            Me.columnRelation1 = Me.Columns("Relation1")
            Me.columndateofbirth1 = Me.Columns("dateofbirth1")
            Me.columnRelativeage1 = Me.Columns("Relativeage1")
            Me.columnRelativeSex1 = Me.Columns("RelativeSex1")
            Me.columnRelativeaddress1 = Me.Columns("Relativeaddress1")
            Me.columnRelativeName2 = Me.Columns("RelativeName2")
            Me.columnRelation2 = Me.Columns("Relation2")
            Me.columndateofbirth2 = Me.Columns("dateofbirth2")
            Me.columnRelativeage2 = Me.Columns("Relativeage2")
            Me.columnRelativeSex2 = Me.Columns("RelativeSex2")
            Me.columnRelativeaddress2 = Me.Columns("Relativeaddress2")
            Me.columnRelativeName3 = Me.Columns("RelativeName3")
            Me.columnRelation3 = Me.Columns("Relation3")
            Me.columndateofbirth3 = Me.Columns("dateofbirth3")
            Me.columnRelativeage3 = Me.Columns("Relativeage3")
            Me.columnRelativeSex3 = Me.Columns("RelativeSex3")
            Me.columnRelativeaddress3 = Me.Columns("Relativeaddress3")
            Me.columnreferentialst = Me.Columns("referentialst")
            Me.columnmem_code1 = Me.Columns("mem_code1")
            Me.columnmem_name1 = Me.Columns("mem_name1")
            Me.columnrefmem_date1 = Me.Columns("refmem_date1")
            Me.columndeleted1 = Me.Columns("deleted1")
            Me.columnmem_code2 = Me.Columns("mem_code2")
            Me.columnmem_name2 = Me.Columns("mem_name2")
            Me.columnrefmem_date2 = Me.Columns("refmem_date2")
            Me.columndeleted2 = Me.Columns("deleted2")
            Me.columnmem_code3 = Me.Columns("mem_code3")
            Me.columnmem_name3 = Me.Columns("mem_name3")
            Me.columnrefmem_date3 = Me.Columns("refmem_date3")
            Me.columndeleted3 = Me.Columns("deleted3")
            Me.columnentrancefeest = Me.Columns("entrancefeest")
            Me.columnreceiptno1 = Me.Columns("receiptno1")
            Me.columnstartdate1 = Me.Columns("startdate1")
            Me.columnamount1 = Me.Columns("amount1")
            Me.columnreceiptno2 = Me.Columns("receiptno2")
            Me.columnstartdate2 = Me.Columns("startdate2")
            Me.columnamount2 = Me.Columns("amount2")
            Me.columnreceiptno3 = Me.Columns("receiptno3")
            Me.columnstartdate3 = Me.Columns("startdate3")
            Me.columnamount3 = Me.Columns("amount3")
            Me.columnOLD = Me.Columns("OLD")
            Me.columnCardAmt = Me.Columns("CardAmt")
            Me.columnMINIMUMUSAGE = Me.Columns("MINIMUMUSAGE")
            Me.columnCREDITNO = Me.Columns("CREDITNO")
            Me.columnSPOUSEMOBILE = Me.Columns("SPOUSEMOBILE")
            Me.columnPADD4 = Me.Columns("PADD4")
            Me.columnCADD4 = Me.Columns("CADD4")
            Me.columnplotno = Me.Columns("plotno")
            Me.columnsocietyno = Me.Columns("societyno")
            Me.columncreditstopflag = Me.Columns("creditstopflag")
            Me.columncreditstopdate = Me.Columns("creditstopdate")
            Me.columnMSORDERNO = Me.Columns("MSORDERNO")
            Me.columnICNO = Me.Columns("ICNO")
            Me.columnUnitNo = Me.Columns("UnitNo")
            Me.columnRankNo = Me.Columns("RankNo")
            Me.columnDateOfCommission = Me.Columns("DateOfCommission")
            Me.columnDateOfRelease = Me.Columns("DateOfRelease")
            Me.columnDateOfCreation = Me.Columns("DateOfCreation")
            Me.columnBTGroup = Me.Columns("BTGroup")
            Me.columnRIDCardNo = Me.Columns("RIDCardNo")
            Me.columnArmService = Me.Columns("ArmService")
            Me.columnWO = Me.Columns("WO")
            Me.columnNoOfDependencies = Me.Columns("NoOfDependencies")
            Me.columnAnniversaryDate = Me.Columns("AnniversaryDate")
            Me.columnRByMemberNo = Me.Columns("RByMemberNo")
            Me.columnRByName = Me.Columns("RByName")
            Me.columnArmyNo = Me.Columns("ArmyNo")
            Me.columnRankName = Me.Columns("RankName")
            Me.columnBarcodeNo = Me.Columns("BarcodeNo")
            Me.columnDependentID = Me.Columns("DependentID")
            Me.columnMemberType = Me.Columns("MemberType")
            Me.columnMEMIMAGE = Me.Columns("MEMIMAGE")
            Me.columnMEMIMAGESIGN = Me.Columns("MEMIMAGESIGN")
            Me.columnSPOUSEIMAGE = Me.Columns("SPOUSEIMAGE")
            Me.columnCHILDFDOB1 = Me.Columns("CHILDFDOB1")
            Me.columnEMAIL_FLAG = Me.Columns("EMAIL_FLAG")
            Me.columnEBILL = Me.Columns("EBILL")
            Me.columnWEDDING_DATE = Me.Columns("WEDDING_DATE")
            Me.columnTAXFLAG = Me.Columns("TAXFLAG")
            Me.columnMLEDGERNAME = Me.Columns("MLEDGERNAME")
            Me.columnMDESCRIPTION = Me.Columns("MDESCRIPTION")
            Me.columnPREFIXMCODE = Me.Columns("PREFIXMCODE")
            Me.columnUNITDESC = Me.Columns("UNITDESC")
            Me.columnUNITNAME = Me.Columns("UNITNAME")
            Me.columnRBYMEMBERNO2 = Me.Columns("RBYMEMBERNO2")
            Me.columnRBYMEMBERNAME2 = Me.Columns("RBYMEMBERNAME2")
        End Sub
        
        Private Sub InitClass()
            Me.columnSequenceNo = New DataColumn("SequenceNo", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSequenceNo)
            Me.columnTAG = New DataColumn("TAG", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTAG)
            Me.columnMEMBERTYPECODE = New DataColumn("MEMBERTYPECODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEMBERTYPECODE)
            Me.columnCOMPANY = New DataColumn("COMPANY", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCOMPANY)
            Me.columnSUBCD = New DataColumn("SUBCD", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSUBCD)
            Me.columnMCODE = New DataColumn("MCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMCODE)
            Me.columnMNAME = New DataColumn("MNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMNAME)
            Me.columnMID = New DataColumn("MID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMID)
            Me.columnDOB = New DataColumn("DOB", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDOB)
            Me.columnDOJ = New DataColumn("DOJ", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDOJ)
            Me.columnSDOB = New DataColumn("SDOB", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSDOB)
            Me.columnSEX = New DataColumn("SEX", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSEX)
            Me.columnMARITALSTATUS = New DataColumn("MARITALSTATUS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMARITALSTATUS)
            Me.columnSPOUSE = New DataColumn("SPOUSE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSPOUSE)
            Me.columnBG = New DataColumn("BG", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBG)
            Me.columnOCCUPATION = New DataColumn("OCCUPATION", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOCCUPATION)
            Me.columnBANKER = New DataColumn("BANKER", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBANKER)
            Me.columnBANKACNO = New DataColumn("BANKACNO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBANKACNO)
            Me.columnHOBBIES = New DataColumn("HOBBIES", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHOBBIES)
            Me.columnOTHERINFO = New DataColumn("OTHERINFO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOTHERINFO)
            Me.columnRESIDENT = New DataColumn("RESIDENT", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRESIDENT)
            Me.columnEQUALIFICATION = New DataColumn("EQUALIFICATION", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEQUALIFICATION)
            Me.columnPQUALIFICATION = New DataColumn("PQUALIFICATION", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPQUALIFICATION)
            Me.columnPROPOSER = New DataColumn("PROPOSER", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPROPOSER)
            Me.columnPROPOSERNAME = New DataColumn("PROPOSERNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPROPOSERNAME)
            Me.columnSECONDER = New DataColumn("SECONDER", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSECONDER)
            Me.columnSECONDERNAME = New DataColumn("SECONDERNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSECONDERNAME)
            Me.columnPAcopyst = New DataColumn("PAcopyst", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPAcopyst)
            Me.columnPADD1 = New DataColumn("PADD1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPADD1)
            Me.columnPADD2 = New DataColumn("PADD2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPADD2)
            Me.columnPADD3 = New DataColumn("PADD3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPADD3)
            Me.columnPCITY = New DataColumn("PCITY", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPCITY)
            Me.columnPSTATE = New DataColumn("PSTATE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPSTATE)
            Me.columnPCOUNTRY = New DataColumn("PCOUNTRY", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPCOUNTRY)
            Me.columnPPIN = New DataColumn("PPIN", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPPIN)
            Me.columnPPHONE1 = New DataColumn("PPHONE1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPPHONE1)
            Me.columnPPHONE2 = New DataColumn("PPHONE2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPPHONE2)
            Me.columnPCELL = New DataColumn("PCELL", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPCELL)
            Me.columnPEMAIL = New DataColumn("PEMAIL", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPEMAIL)
            Me.columnRAcopyst = New DataColumn("RAcopyst", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRAcopyst)
            Me.columnCADD1 = New DataColumn("CADD1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCADD1)
            Me.columnCADD2 = New DataColumn("CADD2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCADD2)
            Me.columnCADD3 = New DataColumn("CADD3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCADD3)
            Me.columnCCITY = New DataColumn("CCITY", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCCITY)
            Me.columnCSTATE = New DataColumn("CSTATE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCSTATE)
            Me.columnCCOUNTRY = New DataColumn("CCOUNTRY", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCCOUNTRY)
            Me.columnCPIN = New DataColumn("CPIN", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCPIN)
            Me.columnCPHONE1 = New DataColumn("CPHONE1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCPHONE1)
            Me.columnCPHONE2 = New DataColumn("CPHONE2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCPHONE2)
            Me.columnCCELL = New DataColumn("CCELL", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCCELL)
            Me.columnCEMAIL = New DataColumn("CEMAIL", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCEMAIL)
            Me.columnCONTADD1 = New DataColumn("CONTADD1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCONTADD1)
            Me.columnCONTADD2 = New DataColumn("CONTADD2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCONTADD2)
            Me.columnCONTADD3 = New DataColumn("CONTADD3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCONTADD3)
            Me.columnCONTCITY = New DataColumn("CONTCITY", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCONTCITY)
            Me.columnCONTSTATE = New DataColumn("CONTSTATE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCONTSTATE)
            Me.columnCONTCOUNTRY = New DataColumn("CONTCOUNTRY", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCONTCOUNTRY)
            Me.columnCONTPIN = New DataColumn("CONTPIN", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCONTPIN)
            Me.columnCONTPHONE1 = New DataColumn("CONTPHONE1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCONTPHONE1)
            Me.columnCONTPHONE2 = New DataColumn("CONTPHONE2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCONTPHONE2)
            Me.columnCONTCELL = New DataColumn("CONTCELL", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCONTCELL)
            Me.columnCONTEMAIL = New DataColumn("CONTEMAIL", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCONTEMAIL)
            Me.columnEMPTYPE = New DataColumn("EMPTYPE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEMPTYPE)
            Me.columnBUSINESSNAME = New DataColumn("BUSINESSNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBUSINESSNAME)
            Me.columnBAcopyst = New DataColumn("BAcopyst", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBAcopyst)
            Me.columnOADD1 = New DataColumn("OADD1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOADD1)
            Me.columnOADD2 = New DataColumn("OADD2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOADD2)
            Me.columnOADD3 = New DataColumn("OADD3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOADD3)
            Me.columnOCITY = New DataColumn("OCITY", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOCITY)
            Me.columnOSTATE = New DataColumn("OSTATE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOSTATE)
            Me.columnOCOUNTRY = New DataColumn("OCOUNTRY", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOCOUNTRY)
            Me.columnOPIN = New DataColumn("OPIN", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOPIN)
            Me.columnOPHONE1 = New DataColumn("OPHONE1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOPHONE1)
            Me.columnOPHONE2 = New DataColumn("OPHONE2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOPHONE2)
            Me.columnOCELL = New DataColumn("OCELL", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOCELL)
            Me.columnOEMAIL = New DataColumn("OEMAIL", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOEMAIL)
            Me.columnDOEPROFESSION = New DataColumn("DOEPROFESSION", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDOEPROFESSION)
            Me.columnBUSINESSNATURE = New DataColumn("BUSINESSNATURE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBUSINESSNATURE)
            Me.columnPOSITIONHELD = New DataColumn("POSITIONHELD", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPOSITIONHELD)
            Me.columnSERVICENAME = New DataColumn("SERVICENAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSERVICENAME)
            Me.columnSERVICEYEAR = New DataColumn("SERVICEYEAR", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSERVICEYEAR)
            Me.columnPANO = New DataColumn("PANO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPANO)
            Me.columnBBANKER = New DataColumn("BBANKER", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBBANKER)
            Me.columnCCNO = New DataColumn("CCNO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCCNO)
            Me.columnANNUALINCOME = New DataColumn("ANNUALINCOME", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnANNUALINCOME)
            Me.columnUPDUSERID = New DataColumn("UPDUSERID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUPDUSERID)
            Me.columnUPDDATETIME = New DataColumn("UPDDATETIME", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUPDDATETIME)
            Me.columnTERMINATION = New DataColumn("TERMINATION", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTERMINATION)
            Me.columnTRN_CON_DATE = New DataColumn("TRN_CON_DATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTRN_CON_DATE)
            Me.columnCON_MCODE = New DataColumn("CON_MCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCON_MCODE)
            Me.columnPFAX = New DataColumn("PFAX", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPFAX)
            Me.columnCFAX = New DataColumn("CFAX", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCFAX)
            Me.columnCONTFAX = New DataColumn("CONTFAX", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCONTFAX)
            Me.columnREASON = New DataColumn("REASON", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnREASON)
            Me.columnPHOTO = New DataColumn("PHOTO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPHOTO)
            Me.columnCREDITLIMIT = New DataColumn("CREDITLIMIT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCREDITLIMIT)
            Me.columnLIMITAMOUNT = New DataColumn("LIMITAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLIMITAMOUNT)
            Me.columnWEBSITE = New DataColumn("WEBSITE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnWEBSITE)
            Me.columnImagefile = New DataColumn("Imagefile", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnImagefile)
            Me.columnsizefield = New DataColumn("sizefield", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsizefield)
            Me.columnVdate = New DataColumn("Vdate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVdate)
            Me.columnVyear = New DataColumn("Vyear", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVyear)
            Me.columnValiddate = New DataColumn("Validdate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnValiddate)
            Me.columnTempTermination = New DataColumn("TempTermination", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTempTermination)
            Me.columnTempTermDate = New DataColumn("TempTermDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTempTermDate)
            Me.columnTempTermReason = New DataColumn("TempTermReason", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTempTermReason)
            Me.columnMemberid = New DataColumn("Memberid", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMemberid)
            Me.columnEndingDate = New DataColumn("EndingDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEndingDate)
            Me.columnTotalYears = New DataColumn("TotalYears", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTotalYears)
            Me.columnCardNo = New DataColumn("CardNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCardNo)
            Me.columnCardExpDate = New DataColumn("CardExpDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCardExpDate)
            Me.columnValidity = New DataColumn("Validity", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnValidity)
            Me.columnPeriod = New DataColumn("Period", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPeriod)
            Me.columnCreditcardno = New DataColumn("Creditcardno", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCreditcardno)
            Me.columnCreditExpDt = New DataColumn("CreditExpDt", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCreditExpDt)
            Me.columnType = New DataColumn("Type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnType)
            Me.columnSTATUSDATEFROM = New DataColumn("STATUSDATEFROM", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSTATUSDATEFROM)
            Me.columnSTATUSDATETO = New DataColumn("STATUSDATETO", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSTATUSDATETO)
            Me.columnCurentStatus = New DataColumn("CurentStatus", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCurentStatus)
            Me.columnFirstName = New DataColumn("FirstName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFirstName)
            Me.columnMiddleName = New DataColumn("MiddleName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMiddleName)
            Me.columnSurname = New DataColumn("Surname", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSurname)
            Me.column_Alias = New DataColumn("Alias", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column_Alias)
            Me.columnPrefix = New DataColumn("Prefix", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPrefix)
            Me.columnBillType = New DataColumn("BillType", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBillType)
            Me.columnNationality = New DataColumn("Nationality", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNationality)
            Me.columnNationalityAtbirth = New DataColumn("NationalityAtbirth", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNationalityAtbirth)
            Me.columnBillbasis = New DataColumn("Billbasis", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBillbasis)
            Me.columnBillHead = New DataColumn("BillHead", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBillHead)
            Me.columnGDRLocker = New DataColumn("GDRLocker", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGDRLocker)
            Me.columnLDRLocker = New DataColumn("LDRLocker", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLDRLocker)
            Me.columnHPLocker = New DataColumn("HPLocker", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHPLocker)
            Me.columnMembershipTo = New DataColumn("MembershipTo", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMembershipTo)
            Me.columnsalut = New DataColumn("salut", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsalut)
            Me.columnEntranceFee = New DataColumn("EntranceFee", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEntranceFee)
            Me.columnDevelopmentFee = New DataColumn("DevelopmentFee", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDevelopmentFee)
            Me.columnCriditNumber = New DataColumn("CriditNumber", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCriditNumber)
            Me.columnSecurityDeposit = New DataColumn("SecurityDeposit", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSecurityDeposit)
            Me.columnPlaceOfBirth = New DataColumn("PlaceOfBirth", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPlaceOfBirth)
            Me.columnCountryOfBirth = New DataColumn("CountryOfBirth", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCountryOfBirth)
            Me.columnLastArrivalInCal = New DataColumn("LastArrivalInCal", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLastArrivalInCal)
            Me.columnPeriodOfStay_year = New DataColumn("PeriodOfStay_year", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPeriodOfStay_year)
            Me.columnPeriodOfStay_Month = New DataColumn("PeriodOfStay_Month", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPeriodOfStay_Month)
            Me.columnPreviouslyProposed = New DataColumn("PreviouslyProposed", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPreviouslyProposed)
            Me.columnNoOfTimesProposed = New DataColumn("NoOfTimesProposed", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNoOfTimesProposed)
            Me.columnDateOfProposal = New DataColumn("DateOfProposal", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDateOfProposal)
            Me.columnNoOfTimesSeconded = New DataColumn("NoOfTimesSeconded", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNoOfTimesSeconded)
            Me.columnDateOfSeconded = New DataColumn("DateOfSeconded", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDateOfSeconded)
            Me.columnResultOfProposal = New DataColumn("ResultOfProposal", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnResultOfProposal)
            Me.columnElected = New DataColumn("Elected", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnElected)
            Me.columnFatherName = New DataColumn("FatherName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFatherName)
            Me.columnDOBfather = New DataColumn("DOBfather", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDOBfather)
            Me.columnWifeDOB = New DataColumn("WifeDOB", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnWifeDOB)
            Me.columnMaidenNameWife = New DataColumn("MaidenNameWife", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMaidenNameWife)
            Me.columnNationalityWife = New DataColumn("NationalityWife", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNationalityWife)
            Me.columnWifesFatherName = New DataColumn("WifesFatherName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnWifesFatherName)
            Me.columnWifeFatherDOB = New DataColumn("WifeFatherDOB", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnWifeFatherDOB)
            Me.columnApplNo = New DataColumn("ApplNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnApplNo)
            Me.columnApplDate = New DataColumn("ApplDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnApplDate)
            Me.columnCorporatest = New DataColumn("Corporatest", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCorporatest)
            Me.columnCorporateCode = New DataColumn("CorporateCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCorporateCode)
            Me.columnCompName = New DataColumn("CompName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCompName)
            Me.columnDesignation = New DataColumn("Designation", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDesignation)
            Me.columnProfessionInfo = New DataColumn("ProfessionInfo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnProfessionInfo)
            Me.columnBuisnessInfo = New DataColumn("BuisnessInfo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBuisnessInfo)
            Me.columnProducts = New DataColumn("Products", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnProducts)
            Me.columnAgentsDealers = New DataColumn("AgentsDealers", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAgentsDealers)
            Me.columnESTDdate = New DataColumn("ESTDdate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnESTDdate)
            Me.columnNoOfEmp = New DataColumn("NoOfEmp", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNoOfEmp)
            Me.columnTurnover = New DataColumn("Turnover", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTurnover)
            Me.columnClient = New DataColumn("Client", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnClient)
            Me.columnAppliedBut = New DataColumn("AppliedBut", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAppliedBut)
            Me.columnPositionInChamber = New DataColumn("PositionInChamber", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPositionInChamber)
            Me.columnQulificationstatus = New DataColumn("Qulificationstatus", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQulificationstatus)
            Me.columnQualification1 = New DataColumn("Qualification1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQualification1)
            Me.columnDetails1 = New DataColumn("Details1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDetails1)
            Me.columnYearOfPassing1 = New DataColumn("YearOfPassing1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnYearOfPassing1)
            Me.columnInstitute1 = New DataColumn("Institute1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnInstitute1)
            Me.columnDivision1 = New DataColumn("Division1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDivision1)
            Me.columnQualification2 = New DataColumn("Qualification2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQualification2)
            Me.columnDetails2 = New DataColumn("Details2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDetails2)
            Me.columnYearOfPassing2 = New DataColumn("YearOfPassing2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnYearOfPassing2)
            Me.columnInstitute2 = New DataColumn("Institute2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnInstitute2)
            Me.columnDivision2 = New DataColumn("Division2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDivision2)
            Me.columnQualification3 = New DataColumn("Qualification3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQualification3)
            Me.columnDetails3 = New DataColumn("Details3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDetails3)
            Me.columnYearOfPassing3 = New DataColumn("YearOfPassing3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnYearOfPassing3)
            Me.columnInstitute3 = New DataColumn("Institute3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnInstitute3)
            Me.columnDivision3 = New DataColumn("Division3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDivision3)
            Me.columnsportstatus = New DataColumn("sportstatus", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsportstatus)
            Me.columnGameType1 = New DataColumn("GameType1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGameType1)
            Me.columnNameOfGame1 = New DataColumn("NameOfGame1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNameOfGame1)
            Me.columnDescription1 = New DataColumn("Description1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescription1)
            Me.columnGameType2 = New DataColumn("GameType2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGameType2)
            Me.columnNameofGame2 = New DataColumn("NameofGame2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNameofGame2)
            Me.columnDescription2 = New DataColumn("Description2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescription2)
            Me.columnGameType3 = New DataColumn("GameType3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGameType3)
            Me.columnNameOfGame3 = New DataColumn("NameOfGame3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNameOfGame3)
            Me.columnDescription3 = New DataColumn("Description3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescription3)
            Me.columnChildstatus = New DataColumn("Childstatus", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnChildstatus)
            Me.columnChildName1 = New DataColumn("ChildName1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnChildName1)
            Me.columnChildDob1 = New DataColumn("ChildDob1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnChildDob1)
            Me.columnChildSex1 = New DataColumn("ChildSex1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnChildSex1)
            Me.columnChildExpairy1 = New DataColumn("ChildExpairy1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnChildExpairy1)
            Me.columnChildName2 = New DataColumn("ChildName2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnChildName2)
            Me.columnChildDob2 = New DataColumn("ChildDob2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnChildDob2)
            Me.columnChildSex2 = New DataColumn("ChildSex2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnChildSex2)
            Me.columnChildExpairy2 = New DataColumn("ChildExpairy2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnChildExpairy2)
            Me.columnChildName3 = New DataColumn("ChildName3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnChildName3)
            Me.columnChildDob3 = New DataColumn("ChildDob3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnChildDob3)
            Me.columnChildSex3 = New DataColumn("ChildSex3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnChildSex3)
            Me.columnchildExpairy3 = New DataColumn("childExpairy3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnchildExpairy3)
            Me.columnClubstatus = New DataColumn("Clubstatus", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnClubstatus)
            Me.columnOtherClubName1 = New DataColumn("OtherClubName1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOtherClubName1)
            Me.columnOCAddress1 = New DataColumn("OCAddress1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOCAddress1)
            Me.columnOCStatus1 = New DataColumn("OCStatus1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOCStatus1)
            Me.columnOtherClubName2 = New DataColumn("OtherClubName2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOtherClubName2)
            Me.columnOCAddress2 = New DataColumn("OCAddress2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOCAddress2)
            Me.columnOCStatus2 = New DataColumn("OCStatus2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOCStatus2)
            Me.columnOtherClubname3 = New DataColumn("OtherClubname3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOtherClubname3)
            Me.columnOCAddress3 = New DataColumn("OCAddress3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOCAddress3)
            Me.columnOCStataus = New DataColumn("OCStataus", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOCStataus)
            Me.columnadduser = New DataColumn("adduser", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnadduser)
            Me.columnadddate = New DataColumn("adddate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnadddate)
            Me.columnfreeze = New DataColumn("freeze", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfreeze)
            Me.columnRelativestatus = New DataColumn("Relativestatus", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRelativestatus)
            Me.columnRelativeName1 = New DataColumn("RelativeName1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRelativeName1)
            Me.columnRelation1 = New DataColumn("Relation1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRelation1)
            Me.columndateofbirth1 = New DataColumn("dateofbirth1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndateofbirth1)
            Me.columnRelativeage1 = New DataColumn("Relativeage1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRelativeage1)
            Me.columnRelativeSex1 = New DataColumn("RelativeSex1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRelativeSex1)
            Me.columnRelativeaddress1 = New DataColumn("Relativeaddress1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRelativeaddress1)
            Me.columnRelativeName2 = New DataColumn("RelativeName2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRelativeName2)
            Me.columnRelation2 = New DataColumn("Relation2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRelation2)
            Me.columndateofbirth2 = New DataColumn("dateofbirth2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndateofbirth2)
            Me.columnRelativeage2 = New DataColumn("Relativeage2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRelativeage2)
            Me.columnRelativeSex2 = New DataColumn("RelativeSex2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRelativeSex2)
            Me.columnRelativeaddress2 = New DataColumn("Relativeaddress2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRelativeaddress2)
            Me.columnRelativeName3 = New DataColumn("RelativeName3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRelativeName3)
            Me.columnRelation3 = New DataColumn("Relation3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRelation3)
            Me.columndateofbirth3 = New DataColumn("dateofbirth3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndateofbirth3)
            Me.columnRelativeage3 = New DataColumn("Relativeage3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRelativeage3)
            Me.columnRelativeSex3 = New DataColumn("RelativeSex3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRelativeSex3)
            Me.columnRelativeaddress3 = New DataColumn("Relativeaddress3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRelativeaddress3)
            Me.columnreferentialst = New DataColumn("referentialst", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnreferentialst)
            Me.columnmem_code1 = New DataColumn("mem_code1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmem_code1)
            Me.columnmem_name1 = New DataColumn("mem_name1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmem_name1)
            Me.columnrefmem_date1 = New DataColumn("refmem_date1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrefmem_date1)
            Me.columndeleted1 = New DataColumn("deleted1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndeleted1)
            Me.columnmem_code2 = New DataColumn("mem_code2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmem_code2)
            Me.columnmem_name2 = New DataColumn("mem_name2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmem_name2)
            Me.columnrefmem_date2 = New DataColumn("refmem_date2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrefmem_date2)
            Me.columndeleted2 = New DataColumn("deleted2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndeleted2)
            Me.columnmem_code3 = New DataColumn("mem_code3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmem_code3)
            Me.columnmem_name3 = New DataColumn("mem_name3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmem_name3)
            Me.columnrefmem_date3 = New DataColumn("refmem_date3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrefmem_date3)
            Me.columndeleted3 = New DataColumn("deleted3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndeleted3)
            Me.columnentrancefeest = New DataColumn("entrancefeest", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnentrancefeest)
            Me.columnreceiptno1 = New DataColumn("receiptno1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnreceiptno1)
            Me.columnstartdate1 = New DataColumn("startdate1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstartdate1)
            Me.columnamount1 = New DataColumn("amount1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount1)
            Me.columnreceiptno2 = New DataColumn("receiptno2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnreceiptno2)
            Me.columnstartdate2 = New DataColumn("startdate2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstartdate2)
            Me.columnamount2 = New DataColumn("amount2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount2)
            Me.columnreceiptno3 = New DataColumn("receiptno3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnreceiptno3)
            Me.columnstartdate3 = New DataColumn("startdate3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstartdate3)
            Me.columnamount3 = New DataColumn("amount3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount3)
            Me.columnOLD = New DataColumn("OLD", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOLD)
            Me.columnCardAmt = New DataColumn("CardAmt", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCardAmt)
            Me.columnMINIMUMUSAGE = New DataColumn("MINIMUMUSAGE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMINIMUMUSAGE)
            Me.columnCREDITNO = New DataColumn("CREDITNO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCREDITNO)
            Me.columnSPOUSEMOBILE = New DataColumn("SPOUSEMOBILE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSPOUSEMOBILE)
            Me.columnPADD4 = New DataColumn("PADD4", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPADD4)
            Me.columnCADD4 = New DataColumn("CADD4", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCADD4)
            Me.columnplotno = New DataColumn("plotno", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnplotno)
            Me.columnsocietyno = New DataColumn("societyno", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsocietyno)
            Me.columncreditstopflag = New DataColumn("creditstopflag", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncreditstopflag)
            Me.columncreditstopdate = New DataColumn("creditstopdate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncreditstopdate)
            Me.columnMSORDERNO = New DataColumn("MSORDERNO", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMSORDERNO)
            Me.columnICNO = New DataColumn("ICNO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnICNO)
            Me.columnUnitNo = New DataColumn("UnitNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUnitNo)
            Me.columnRankNo = New DataColumn("RankNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRankNo)
            Me.columnDateOfCommission = New DataColumn("DateOfCommission", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDateOfCommission)
            Me.columnDateOfRelease = New DataColumn("DateOfRelease", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDateOfRelease)
            Me.columnDateOfCreation = New DataColumn("DateOfCreation", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDateOfCreation)
            Me.columnBTGroup = New DataColumn("BTGroup", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBTGroup)
            Me.columnRIDCardNo = New DataColumn("RIDCardNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRIDCardNo)
            Me.columnArmService = New DataColumn("ArmService", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnArmService)
            Me.columnWO = New DataColumn("WO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnWO)
            Me.columnNoOfDependencies = New DataColumn("NoOfDependencies", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNoOfDependencies)
            Me.columnAnniversaryDate = New DataColumn("AnniversaryDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAnniversaryDate)
            Me.columnRByMemberNo = New DataColumn("RByMemberNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRByMemberNo)
            Me.columnRByName = New DataColumn("RByName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRByName)
            Me.columnArmyNo = New DataColumn("ArmyNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnArmyNo)
            Me.columnRankName = New DataColumn("RankName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRankName)
            Me.columnBarcodeNo = New DataColumn("BarcodeNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBarcodeNo)
            Me.columnDependentID = New DataColumn("DependentID", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDependentID)
            Me.columnMemberType = New DataColumn("MemberType", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMemberType)
            Me.columnMEMIMAGE = New DataColumn("MEMIMAGE", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEMIMAGE)
            Me.columnMEMIMAGESIGN = New DataColumn("MEMIMAGESIGN", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEMIMAGESIGN)
            Me.columnSPOUSEIMAGE = New DataColumn("SPOUSEIMAGE", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSPOUSEIMAGE)
            Me.columnCHILDFDOB1 = New DataColumn("CHILDFDOB1", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCHILDFDOB1)
            Me.columnEMAIL_FLAG = New DataColumn("EMAIL_FLAG", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEMAIL_FLAG)
            Me.columnEBILL = New DataColumn("EBILL", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEBILL)
            Me.columnWEDDING_DATE = New DataColumn("WEDDING_DATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnWEDDING_DATE)
            Me.columnTAXFLAG = New DataColumn("TAXFLAG", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTAXFLAG)
            Me.columnMLEDGERNAME = New DataColumn("MLEDGERNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMLEDGERNAME)
            Me.columnMDESCRIPTION = New DataColumn("MDESCRIPTION", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMDESCRIPTION)
            Me.columnPREFIXMCODE = New DataColumn("PREFIXMCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPREFIXMCODE)
            Me.columnUNITDESC = New DataColumn("UNITDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUNITDESC)
            Me.columnUNITNAME = New DataColumn("UNITNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUNITNAME)
            Me.columnRBYMEMBERNO2 = New DataColumn("RBYMEMBERNO2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRBYMEMBERNO2)
            Me.columnRBYMEMBERNAME2 = New DataColumn("RBYMEMBERNAME2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRBYMEMBERNAME2)
        End Sub
        
        Public Function Newmm_membermasterRow() As mm_membermasterRow
            Return CType(Me.NewRow,mm_membermasterRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New mm_membermasterRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(mm_membermasterRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.mm_membermasterRowChangedEvent) Is Nothing) Then
                RaiseEvent mm_membermasterRowChanged(Me, New mm_membermasterRowChangeEvent(CType(e.Row,mm_membermasterRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.mm_membermasterRowChangingEvent) Is Nothing) Then
                RaiseEvent mm_membermasterRowChanging(Me, New mm_membermasterRowChangeEvent(CType(e.Row,mm_membermasterRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.mm_membermasterRowDeletedEvent) Is Nothing) Then
                RaiseEvent mm_membermasterRowDeleted(Me, New mm_membermasterRowChangeEvent(CType(e.Row,mm_membermasterRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.mm_membermasterRowDeletingEvent) Is Nothing) Then
                RaiseEvent mm_membermasterRowDeleting(Me, New mm_membermasterRowChangeEvent(CType(e.Row,mm_membermasterRow), e.Action))
            End If
        End Sub
        
        Public Sub Removemm_membermasterRow(ByVal row As mm_membermasterRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class mm_membermasterRow
        Inherits DataRow
        
        Private tablemm_membermaster As mm_membermasterDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablemm_membermaster = CType(Me.Table,mm_membermasterDataTable)
        End Sub
        
        Public Property SequenceNo As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.SequenceNoColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.SequenceNoColumn) = value
            End Set
        End Property
        
        Public Property TAG As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.TAGColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.TAGColumn) = value
            End Set
        End Property
        
        Public Property MEMBERTYPECODE As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.MEMBERTYPECODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.MEMBERTYPECODEColumn) = value
            End Set
        End Property
        
        Public Property COMPANY As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.COMPANYColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.COMPANYColumn) = value
            End Set
        End Property
        
        Public Property SUBCD As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.SUBCDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.SUBCDColumn) = value
            End Set
        End Property
        
        Public Property MCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.MCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.MCODEColumn) = value
            End Set
        End Property
        
        Public Property MNAME As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.MNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.MNAMEColumn) = value
            End Set
        End Property
        
        Public Property MID As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.MIDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.MIDColumn) = value
            End Set
        End Property
        
        Public Property DOB As Date
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.DOBColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.DOBColumn) = value
            End Set
        End Property
        
        Public Property DOJ As Date
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.DOJColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.DOJColumn) = value
            End Set
        End Property
        
        Public Property SDOB As Date
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.SDOBColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.SDOBColumn) = value
            End Set
        End Property
        
        Public Property SEX As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.SEXColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.SEXColumn) = value
            End Set
        End Property
        
        Public Property MARITALSTATUS As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.MARITALSTATUSColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.MARITALSTATUSColumn) = value
            End Set
        End Property
        
        Public Property SPOUSE As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.SPOUSEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.SPOUSEColumn) = value
            End Set
        End Property
        
        Public Property BG As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.BGColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.BGColumn) = value
            End Set
        End Property
        
        Public Property OCCUPATION As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.OCCUPATIONColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.OCCUPATIONColumn) = value
            End Set
        End Property
        
        Public Property BANKER As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.BANKERColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.BANKERColumn) = value
            End Set
        End Property
        
        Public Property BANKACNO As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.BANKACNOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.BANKACNOColumn) = value
            End Set
        End Property
        
        Public Property HOBBIES As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.HOBBIESColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.HOBBIESColumn) = value
            End Set
        End Property
        
        Public Property OTHERINFO As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.OTHERINFOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.OTHERINFOColumn) = value
            End Set
        End Property
        
        Public Property RESIDENT As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.RESIDENTColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.RESIDENTColumn) = value
            End Set
        End Property
        
        Public Property EQUALIFICATION As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.EQUALIFICATIONColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.EQUALIFICATIONColumn) = value
            End Set
        End Property
        
        Public Property PQUALIFICATION As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.PQUALIFICATIONColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.PQUALIFICATIONColumn) = value
            End Set
        End Property
        
        Public Property PROPOSER As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.PROPOSERColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.PROPOSERColumn) = value
            End Set
        End Property
        
        Public Property PROPOSERNAME As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.PROPOSERNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.PROPOSERNAMEColumn) = value
            End Set
        End Property
        
        Public Property SECONDER As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.SECONDERColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.SECONDERColumn) = value
            End Set
        End Property
        
        Public Property SECONDERNAME As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.SECONDERNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.SECONDERNAMEColumn) = value
            End Set
        End Property
        
        Public Property PAcopyst As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.PAcopystColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.PAcopystColumn) = value
            End Set
        End Property
        
        Public Property PADD1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.PADD1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.PADD1Column) = value
            End Set
        End Property
        
        Public Property PADD2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.PADD2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.PADD2Column) = value
            End Set
        End Property
        
        Public Property PADD3 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.PADD3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.PADD3Column) = value
            End Set
        End Property
        
        Public Property PCITY As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.PCITYColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.PCITYColumn) = value
            End Set
        End Property
        
        Public Property PSTATE As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.PSTATEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.PSTATEColumn) = value
            End Set
        End Property
        
        Public Property PCOUNTRY As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.PCOUNTRYColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.PCOUNTRYColumn) = value
            End Set
        End Property
        
        Public Property PPIN As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.PPINColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.PPINColumn) = value
            End Set
        End Property
        
        Public Property PPHONE1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.PPHONE1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.PPHONE1Column) = value
            End Set
        End Property
        
        Public Property PPHONE2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.PPHONE2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.PPHONE2Column) = value
            End Set
        End Property
        
        Public Property PCELL As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.PCELLColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.PCELLColumn) = value
            End Set
        End Property
        
        Public Property PEMAIL As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.PEMAILColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.PEMAILColumn) = value
            End Set
        End Property
        
        Public Property RAcopyst As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.RAcopystColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.RAcopystColumn) = value
            End Set
        End Property
        
        Public Property CADD1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.CADD1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.CADD1Column) = value
            End Set
        End Property
        
        Public Property CADD2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.CADD2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.CADD2Column) = value
            End Set
        End Property
        
        Public Property CADD3 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.CADD3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.CADD3Column) = value
            End Set
        End Property
        
        Public Property CCITY As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.CCITYColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.CCITYColumn) = value
            End Set
        End Property
        
        Public Property CSTATE As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.CSTATEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.CSTATEColumn) = value
            End Set
        End Property
        
        Public Property CCOUNTRY As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.CCOUNTRYColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.CCOUNTRYColumn) = value
            End Set
        End Property
        
        Public Property CPIN As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.CPINColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.CPINColumn) = value
            End Set
        End Property
        
        Public Property CPHONE1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.CPHONE1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.CPHONE1Column) = value
            End Set
        End Property
        
        Public Property CPHONE2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.CPHONE2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.CPHONE2Column) = value
            End Set
        End Property
        
        Public Property CCELL As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.CCELLColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.CCELLColumn) = value
            End Set
        End Property
        
        Public Property CEMAIL As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.CEMAILColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.CEMAILColumn) = value
            End Set
        End Property
        
        Public Property CONTADD1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.CONTADD1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.CONTADD1Column) = value
            End Set
        End Property
        
        Public Property CONTADD2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.CONTADD2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.CONTADD2Column) = value
            End Set
        End Property
        
        Public Property CONTADD3 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.CONTADD3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.CONTADD3Column) = value
            End Set
        End Property
        
        Public Property CONTCITY As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.CONTCITYColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.CONTCITYColumn) = value
            End Set
        End Property
        
        Public Property CONTSTATE As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.CONTSTATEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.CONTSTATEColumn) = value
            End Set
        End Property
        
        Public Property CONTCOUNTRY As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.CONTCOUNTRYColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.CONTCOUNTRYColumn) = value
            End Set
        End Property
        
        Public Property CONTPIN As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.CONTPINColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.CONTPINColumn) = value
            End Set
        End Property
        
        Public Property CONTPHONE1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.CONTPHONE1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.CONTPHONE1Column) = value
            End Set
        End Property
        
        Public Property CONTPHONE2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.CONTPHONE2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.CONTPHONE2Column) = value
            End Set
        End Property
        
        Public Property CONTCELL As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.CONTCELLColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.CONTCELLColumn) = value
            End Set
        End Property
        
        Public Property CONTEMAIL As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.CONTEMAILColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.CONTEMAILColumn) = value
            End Set
        End Property
        
        Public Property EMPTYPE As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.EMPTYPEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.EMPTYPEColumn) = value
            End Set
        End Property
        
        Public Property BUSINESSNAME As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.BUSINESSNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.BUSINESSNAMEColumn) = value
            End Set
        End Property
        
        Public Property BAcopyst As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.BAcopystColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.BAcopystColumn) = value
            End Set
        End Property
        
        Public Property OADD1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.OADD1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.OADD1Column) = value
            End Set
        End Property
        
        Public Property OADD2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.OADD2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.OADD2Column) = value
            End Set
        End Property
        
        Public Property OADD3 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.OADD3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.OADD3Column) = value
            End Set
        End Property
        
        Public Property OCITY As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.OCITYColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.OCITYColumn) = value
            End Set
        End Property
        
        Public Property OSTATE As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.OSTATEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.OSTATEColumn) = value
            End Set
        End Property
        
        Public Property OCOUNTRY As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.OCOUNTRYColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.OCOUNTRYColumn) = value
            End Set
        End Property
        
        Public Property OPIN As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.OPINColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.OPINColumn) = value
            End Set
        End Property
        
        Public Property OPHONE1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.OPHONE1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.OPHONE1Column) = value
            End Set
        End Property
        
        Public Property OPHONE2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.OPHONE2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.OPHONE2Column) = value
            End Set
        End Property
        
        Public Property OCELL As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.OCELLColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.OCELLColumn) = value
            End Set
        End Property
        
        Public Property OEMAIL As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.OEMAILColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.OEMAILColumn) = value
            End Set
        End Property
        
        Public Property DOEPROFESSION As Date
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.DOEPROFESSIONColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.DOEPROFESSIONColumn) = value
            End Set
        End Property
        
        Public Property BUSINESSNATURE As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.BUSINESSNATUREColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.BUSINESSNATUREColumn) = value
            End Set
        End Property
        
        Public Property POSITIONHELD As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.POSITIONHELDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.POSITIONHELDColumn) = value
            End Set
        End Property
        
        Public Property SERVICENAME As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.SERVICENAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.SERVICENAMEColumn) = value
            End Set
        End Property
        
        Public Property SERVICEYEAR As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.SERVICEYEARColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.SERVICEYEARColumn) = value
            End Set
        End Property
        
        Public Property PANO As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.PANOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.PANOColumn) = value
            End Set
        End Property
        
        Public Property BBANKER As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.BBANKERColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.BBANKERColumn) = value
            End Set
        End Property
        
        Public Property CCNO As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.CCNOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.CCNOColumn) = value
            End Set
        End Property
        
        Public Property ANNUALINCOME As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.ANNUALINCOMEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.ANNUALINCOMEColumn) = value
            End Set
        End Property
        
        Public Property UPDUSERID As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.UPDUSERIDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.UPDUSERIDColumn) = value
            End Set
        End Property
        
        Public Property UPDDATETIME As Date
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.UPDDATETIMEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.UPDDATETIMEColumn) = value
            End Set
        End Property
        
        Public Property TERMINATION As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.TERMINATIONColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.TERMINATIONColumn) = value
            End Set
        End Property
        
        Public Property TRN_CON_DATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.TRN_CON_DATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.TRN_CON_DATEColumn) = value
            End Set
        End Property
        
        Public Property CON_MCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.CON_MCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.CON_MCODEColumn) = value
            End Set
        End Property
        
        Public Property PFAX As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.PFAXColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.PFAXColumn) = value
            End Set
        End Property
        
        Public Property CFAX As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.CFAXColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.CFAXColumn) = value
            End Set
        End Property
        
        Public Property CONTFAX As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.CONTFAXColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.CONTFAXColumn) = value
            End Set
        End Property
        
        Public Property REASON As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.REASONColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.REASONColumn) = value
            End Set
        End Property
        
        Public Property PHOTO As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.PHOTOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.PHOTOColumn) = value
            End Set
        End Property
        
        Public Property CREDITLIMIT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.CREDITLIMITColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.CREDITLIMITColumn) = value
            End Set
        End Property
        
        Public Property LIMITAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.LIMITAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.LIMITAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property WEBSITE As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.WEBSITEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.WEBSITEColumn) = value
            End Set
        End Property
        
        Public Property Imagefile As Byte()
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.ImagefileColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.ImagefileColumn) = value
            End Set
        End Property
        
        Public Property sizefield As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.sizefieldColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.sizefieldColumn) = value
            End Set
        End Property
        
        Public Property Vdate As Date
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.VdateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.VdateColumn) = value
            End Set
        End Property
        
        Public Property Vyear As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.VyearColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.VyearColumn) = value
            End Set
        End Property
        
        Public Property Validdate As Date
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.ValiddateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.ValiddateColumn) = value
            End Set
        End Property
        
        Public Property TempTermination As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.TempTerminationColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.TempTerminationColumn) = value
            End Set
        End Property
        
        Public Property TempTermDate As Date
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.TempTermDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.TempTermDateColumn) = value
            End Set
        End Property
        
        Public Property TempTermReason As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.TempTermReasonColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.TempTermReasonColumn) = value
            End Set
        End Property
        
        Public Property Memberid As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.MemberidColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.MemberidColumn) = value
            End Set
        End Property
        
        Public Property EndingDate As Date
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.EndingDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.EndingDateColumn) = value
            End Set
        End Property
        
        Public Property TotalYears As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.TotalYearsColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.TotalYearsColumn) = value
            End Set
        End Property
        
        Public Property CardNo As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.CardNoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.CardNoColumn) = value
            End Set
        End Property
        
        Public Property CardExpDate As Date
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.CardExpDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.CardExpDateColumn) = value
            End Set
        End Property
        
        Public Property Validity As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.ValidityColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.ValidityColumn) = value
            End Set
        End Property
        
        Public Property Period As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.PeriodColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.PeriodColumn) = value
            End Set
        End Property
        
        Public Property Creditcardno As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.CreditcardnoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.CreditcardnoColumn) = value
            End Set
        End Property
        
        Public Property CreditExpDt As Date
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.CreditExpDtColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.CreditExpDtColumn) = value
            End Set
        End Property
        
        Public Property Type As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.TypeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.TypeColumn) = value
            End Set
        End Property
        
        Public Property STATUSDATEFROM As Date
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.STATUSDATEFROMColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.STATUSDATEFROMColumn) = value
            End Set
        End Property
        
        Public Property STATUSDATETO As Date
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.STATUSDATETOColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.STATUSDATETOColumn) = value
            End Set
        End Property
        
        Public Property CurentStatus As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.CurentStatusColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.CurentStatusColumn) = value
            End Set
        End Property
        
        Public Property FirstName As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.FirstNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.FirstNameColumn) = value
            End Set
        End Property
        
        Public Property MiddleName As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.MiddleNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.MiddleNameColumn) = value
            End Set
        End Property
        
        Public Property Surname As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.SurnameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.SurnameColumn) = value
            End Set
        End Property
        
        Public Property _Alias As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster._AliasColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster._AliasColumn) = value
            End Set
        End Property
        
        Public Property Prefix As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.PrefixColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.PrefixColumn) = value
            End Set
        End Property
        
        Public Property BillType As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.BillTypeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.BillTypeColumn) = value
            End Set
        End Property
        
        Public Property Nationality As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.NationalityColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.NationalityColumn) = value
            End Set
        End Property
        
        Public Property NationalityAtbirth As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.NationalityAtbirthColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.NationalityAtbirthColumn) = value
            End Set
        End Property
        
        Public Property Billbasis As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.BillbasisColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.BillbasisColumn) = value
            End Set
        End Property
        
        Public Property BillHead As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.BillHeadColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.BillHeadColumn) = value
            End Set
        End Property
        
        Public Property GDRLocker As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.GDRLockerColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.GDRLockerColumn) = value
            End Set
        End Property
        
        Public Property LDRLocker As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.LDRLockerColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.LDRLockerColumn) = value
            End Set
        End Property
        
        Public Property HPLocker As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.HPLockerColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.HPLockerColumn) = value
            End Set
        End Property
        
        Public Property MembershipTo As Date
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.MembershipToColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.MembershipToColumn) = value
            End Set
        End Property
        
        Public Property salut As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.salutColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.salutColumn) = value
            End Set
        End Property
        
        Public Property EntranceFee As Double
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.EntranceFeeColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.EntranceFeeColumn) = value
            End Set
        End Property
        
        Public Property DevelopmentFee As Double
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.DevelopmentFeeColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.DevelopmentFeeColumn) = value
            End Set
        End Property
        
        Public Property CriditNumber As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.CriditNumberColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.CriditNumberColumn) = value
            End Set
        End Property
        
        Public Property SecurityDeposit As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.SecurityDepositColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.SecurityDepositColumn) = value
            End Set
        End Property
        
        Public Property PlaceOfBirth As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.PlaceOfBirthColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.PlaceOfBirthColumn) = value
            End Set
        End Property
        
        Public Property CountryOfBirth As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.CountryOfBirthColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.CountryOfBirthColumn) = value
            End Set
        End Property
        
        Public Property LastArrivalInCal As Date
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.LastArrivalInCalColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.LastArrivalInCalColumn) = value
            End Set
        End Property
        
        Public Property PeriodOfStay_year As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.PeriodOfStay_yearColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.PeriodOfStay_yearColumn) = value
            End Set
        End Property
        
        Public Property PeriodOfStay_Month As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.PeriodOfStay_MonthColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.PeriodOfStay_MonthColumn) = value
            End Set
        End Property
        
        Public Property PreviouslyProposed As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.PreviouslyProposedColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.PreviouslyProposedColumn) = value
            End Set
        End Property
        
        Public Property NoOfTimesProposed As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.NoOfTimesProposedColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.NoOfTimesProposedColumn) = value
            End Set
        End Property
        
        Public Property DateOfProposal As Date
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.DateOfProposalColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.DateOfProposalColumn) = value
            End Set
        End Property
        
        Public Property NoOfTimesSeconded As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.NoOfTimesSecondedColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.NoOfTimesSecondedColumn) = value
            End Set
        End Property
        
        Public Property DateOfSeconded As Date
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.DateOfSecondedColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.DateOfSecondedColumn) = value
            End Set
        End Property
        
        Public Property ResultOfProposal As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.ResultOfProposalColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.ResultOfProposalColumn) = value
            End Set
        End Property
        
        Public Property Elected As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.ElectedColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.ElectedColumn) = value
            End Set
        End Property
        
        Public Property FatherName As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.FatherNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.FatherNameColumn) = value
            End Set
        End Property
        
        Public Property DOBfather As Date
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.DOBfatherColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.DOBfatherColumn) = value
            End Set
        End Property
        
        Public Property WifeDOB As Date
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.WifeDOBColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.WifeDOBColumn) = value
            End Set
        End Property
        
        Public Property MaidenNameWife As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.MaidenNameWifeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.MaidenNameWifeColumn) = value
            End Set
        End Property
        
        Public Property NationalityWife As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.NationalityWifeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.NationalityWifeColumn) = value
            End Set
        End Property
        
        Public Property WifesFatherName As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.WifesFatherNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.WifesFatherNameColumn) = value
            End Set
        End Property
        
        Public Property WifeFatherDOB As Date
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.WifeFatherDOBColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.WifeFatherDOBColumn) = value
            End Set
        End Property
        
        Public Property ApplNo As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.ApplNoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.ApplNoColumn) = value
            End Set
        End Property
        
        Public Property ApplDate As Date
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.ApplDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.ApplDateColumn) = value
            End Set
        End Property
        
        Public Property Corporatest As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.CorporatestColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.CorporatestColumn) = value
            End Set
        End Property
        
        Public Property CorporateCode As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.CorporateCodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.CorporateCodeColumn) = value
            End Set
        End Property
        
        Public Property CompName As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.CompNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.CompNameColumn) = value
            End Set
        End Property
        
        Public Property Designation As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.DesignationColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.DesignationColumn) = value
            End Set
        End Property
        
        Public Property ProfessionInfo As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.ProfessionInfoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.ProfessionInfoColumn) = value
            End Set
        End Property
        
        Public Property BuisnessInfo As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.BuisnessInfoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.BuisnessInfoColumn) = value
            End Set
        End Property
        
        Public Property Products As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.ProductsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.ProductsColumn) = value
            End Set
        End Property
        
        Public Property AgentsDealers As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.AgentsDealersColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.AgentsDealersColumn) = value
            End Set
        End Property
        
        Public Property ESTDdate As Date
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.ESTDdateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.ESTDdateColumn) = value
            End Set
        End Property
        
        Public Property NoOfEmp As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.NoOfEmpColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.NoOfEmpColumn) = value
            End Set
        End Property
        
        Public Property Turnover As Double
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.TurnoverColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.TurnoverColumn) = value
            End Set
        End Property
        
        Public Property Client As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.ClientColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.ClientColumn) = value
            End Set
        End Property
        
        Public Property AppliedBut As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.AppliedButColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.AppliedButColumn) = value
            End Set
        End Property
        
        Public Property PositionInChamber As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.PositionInChamberColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.PositionInChamberColumn) = value
            End Set
        End Property
        
        Public Property Qulificationstatus As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.QulificationstatusColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.QulificationstatusColumn) = value
            End Set
        End Property
        
        Public Property Qualification1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.Qualification1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.Qualification1Column) = value
            End Set
        End Property
        
        Public Property Details1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.Details1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.Details1Column) = value
            End Set
        End Property
        
        Public Property YearOfPassing1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.YearOfPassing1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.YearOfPassing1Column) = value
            End Set
        End Property
        
        Public Property Institute1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.Institute1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.Institute1Column) = value
            End Set
        End Property
        
        Public Property Division1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.Division1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.Division1Column) = value
            End Set
        End Property
        
        Public Property Qualification2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.Qualification2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.Qualification2Column) = value
            End Set
        End Property
        
        Public Property Details2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.Details2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.Details2Column) = value
            End Set
        End Property
        
        Public Property YearOfPassing2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.YearOfPassing2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.YearOfPassing2Column) = value
            End Set
        End Property
        
        Public Property Institute2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.Institute2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.Institute2Column) = value
            End Set
        End Property
        
        Public Property Division2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.Division2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.Division2Column) = value
            End Set
        End Property
        
        Public Property Qualification3 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.Qualification3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.Qualification3Column) = value
            End Set
        End Property
        
        Public Property Details3 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.Details3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.Details3Column) = value
            End Set
        End Property
        
        Public Property YearOfPassing3 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.YearOfPassing3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.YearOfPassing3Column) = value
            End Set
        End Property
        
        Public Property Institute3 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.Institute3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.Institute3Column) = value
            End Set
        End Property
        
        Public Property Division3 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.Division3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.Division3Column) = value
            End Set
        End Property
        
        Public Property sportstatus As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.sportstatusColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.sportstatusColumn) = value
            End Set
        End Property
        
        Public Property GameType1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.GameType1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.GameType1Column) = value
            End Set
        End Property
        
        Public Property NameOfGame1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.NameOfGame1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.NameOfGame1Column) = value
            End Set
        End Property
        
        Public Property Description1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.Description1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.Description1Column) = value
            End Set
        End Property
        
        Public Property GameType2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.GameType2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.GameType2Column) = value
            End Set
        End Property
        
        Public Property NameofGame2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.NameofGame2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.NameofGame2Column) = value
            End Set
        End Property
        
        Public Property Description2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.Description2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.Description2Column) = value
            End Set
        End Property
        
        Public Property GameType3 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.GameType3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.GameType3Column) = value
            End Set
        End Property
        
        Public Property NameOfGame3 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.NameOfGame3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.NameOfGame3Column) = value
            End Set
        End Property
        
        Public Property Description3 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.Description3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.Description3Column) = value
            End Set
        End Property
        
        Public Property Childstatus As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.ChildstatusColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.ChildstatusColumn) = value
            End Set
        End Property
        
        Public Property ChildName1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.ChildName1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.ChildName1Column) = value
            End Set
        End Property
        
        Public Property ChildDob1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.ChildDob1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.ChildDob1Column) = value
            End Set
        End Property
        
        Public Property ChildSex1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.ChildSex1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.ChildSex1Column) = value
            End Set
        End Property
        
        Public Property ChildExpairy1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.ChildExpairy1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.ChildExpairy1Column) = value
            End Set
        End Property
        
        Public Property ChildName2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.ChildName2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.ChildName2Column) = value
            End Set
        End Property
        
        Public Property ChildDob2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.ChildDob2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.ChildDob2Column) = value
            End Set
        End Property
        
        Public Property ChildSex2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.ChildSex2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.ChildSex2Column) = value
            End Set
        End Property
        
        Public Property ChildExpairy2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.ChildExpairy2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.ChildExpairy2Column) = value
            End Set
        End Property
        
        Public Property ChildName3 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.ChildName3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.ChildName3Column) = value
            End Set
        End Property
        
        Public Property ChildDob3 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.ChildDob3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.ChildDob3Column) = value
            End Set
        End Property
        
        Public Property ChildSex3 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.ChildSex3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.ChildSex3Column) = value
            End Set
        End Property
        
        Public Property childExpairy3 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.childExpairy3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.childExpairy3Column) = value
            End Set
        End Property
        
        Public Property Clubstatus As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.ClubstatusColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.ClubstatusColumn) = value
            End Set
        End Property
        
        Public Property OtherClubName1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.OtherClubName1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.OtherClubName1Column) = value
            End Set
        End Property
        
        Public Property OCAddress1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.OCAddress1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.OCAddress1Column) = value
            End Set
        End Property
        
        Public Property OCStatus1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.OCStatus1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.OCStatus1Column) = value
            End Set
        End Property
        
        Public Property OtherClubName2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.OtherClubName2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.OtherClubName2Column) = value
            End Set
        End Property
        
        Public Property OCAddress2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.OCAddress2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.OCAddress2Column) = value
            End Set
        End Property
        
        Public Property OCStatus2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.OCStatus2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.OCStatus2Column) = value
            End Set
        End Property
        
        Public Property OtherClubname3 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.OtherClubname3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.OtherClubname3Column) = value
            End Set
        End Property
        
        Public Property OCAddress3 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.OCAddress3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.OCAddress3Column) = value
            End Set
        End Property
        
        Public Property OCStataus As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.OCStatausColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.OCStatausColumn) = value
            End Set
        End Property
        
        Public Property adduser As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.adduserColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.adduserColumn) = value
            End Set
        End Property
        
        Public Property adddate As Date
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.adddateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.adddateColumn) = value
            End Set
        End Property
        
        Public Property freeze As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.freezeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.freezeColumn) = value
            End Set
        End Property
        
        Public Property Relativestatus As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.RelativestatusColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.RelativestatusColumn) = value
            End Set
        End Property
        
        Public Property RelativeName1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.RelativeName1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.RelativeName1Column) = value
            End Set
        End Property
        
        Public Property Relation1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.Relation1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.Relation1Column) = value
            End Set
        End Property
        
        Public Property dateofbirth1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.dateofbirth1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.dateofbirth1Column) = value
            End Set
        End Property
        
        Public Property Relativeage1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.Relativeage1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.Relativeage1Column) = value
            End Set
        End Property
        
        Public Property RelativeSex1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.RelativeSex1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.RelativeSex1Column) = value
            End Set
        End Property
        
        Public Property Relativeaddress1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.Relativeaddress1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.Relativeaddress1Column) = value
            End Set
        End Property
        
        Public Property RelativeName2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.RelativeName2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.RelativeName2Column) = value
            End Set
        End Property
        
        Public Property Relation2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.Relation2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.Relation2Column) = value
            End Set
        End Property
        
        Public Property dateofbirth2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.dateofbirth2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.dateofbirth2Column) = value
            End Set
        End Property
        
        Public Property Relativeage2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.Relativeage2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.Relativeage2Column) = value
            End Set
        End Property
        
        Public Property RelativeSex2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.RelativeSex2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.RelativeSex2Column) = value
            End Set
        End Property
        
        Public Property Relativeaddress2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.Relativeaddress2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.Relativeaddress2Column) = value
            End Set
        End Property
        
        Public Property RelativeName3 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.RelativeName3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.RelativeName3Column) = value
            End Set
        End Property
        
        Public Property Relation3 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.Relation3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.Relation3Column) = value
            End Set
        End Property
        
        Public Property dateofbirth3 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.dateofbirth3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.dateofbirth3Column) = value
            End Set
        End Property
        
        Public Property Relativeage3 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.Relativeage3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.Relativeage3Column) = value
            End Set
        End Property
        
        Public Property RelativeSex3 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.RelativeSex3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.RelativeSex3Column) = value
            End Set
        End Property
        
        Public Property Relativeaddress3 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.Relativeaddress3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.Relativeaddress3Column) = value
            End Set
        End Property
        
        Public Property referentialst As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.referentialstColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.referentialstColumn) = value
            End Set
        End Property
        
        Public Property mem_code1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.mem_code1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.mem_code1Column) = value
            End Set
        End Property
        
        Public Property mem_name1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.mem_name1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.mem_name1Column) = value
            End Set
        End Property
        
        Public Property refmem_date1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.refmem_date1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.refmem_date1Column) = value
            End Set
        End Property
        
        Public Property deleted1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.deleted1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.deleted1Column) = value
            End Set
        End Property
        
        Public Property mem_code2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.mem_code2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.mem_code2Column) = value
            End Set
        End Property
        
        Public Property mem_name2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.mem_name2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.mem_name2Column) = value
            End Set
        End Property
        
        Public Property refmem_date2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.refmem_date2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.refmem_date2Column) = value
            End Set
        End Property
        
        Public Property deleted2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.deleted2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.deleted2Column) = value
            End Set
        End Property
        
        Public Property mem_code3 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.mem_code3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.mem_code3Column) = value
            End Set
        End Property
        
        Public Property mem_name3 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.mem_name3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.mem_name3Column) = value
            End Set
        End Property
        
        Public Property refmem_date3 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.refmem_date3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.refmem_date3Column) = value
            End Set
        End Property
        
        Public Property deleted3 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.deleted3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.deleted3Column) = value
            End Set
        End Property
        
        Public Property entrancefeest As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.entrancefeestColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.entrancefeestColumn) = value
            End Set
        End Property
        
        Public Property receiptno1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.receiptno1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.receiptno1Column) = value
            End Set
        End Property
        
        Public Property startdate1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.startdate1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.startdate1Column) = value
            End Set
        End Property
        
        Public Property amount1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.amount1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.amount1Column) = value
            End Set
        End Property
        
        Public Property receiptno2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.receiptno2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.receiptno2Column) = value
            End Set
        End Property
        
        Public Property startdate2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.startdate2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.startdate2Column) = value
            End Set
        End Property
        
        Public Property amount2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.amount2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.amount2Column) = value
            End Set
        End Property
        
        Public Property receiptno3 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.receiptno3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.receiptno3Column) = value
            End Set
        End Property
        
        Public Property startdate3 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.startdate3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.startdate3Column) = value
            End Set
        End Property
        
        Public Property amount3 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.amount3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.amount3Column) = value
            End Set
        End Property
        
        Public Property OLD As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.OLDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.OLDColumn) = value
            End Set
        End Property
        
        Public Property CardAmt As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.CardAmtColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.CardAmtColumn) = value
            End Set
        End Property
        
        Public Property MINIMUMUSAGE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.MINIMUMUSAGEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.MINIMUMUSAGEColumn) = value
            End Set
        End Property
        
        Public Property CREDITNO As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.CREDITNOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.CREDITNOColumn) = value
            End Set
        End Property
        
        Public Property SPOUSEMOBILE As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.SPOUSEMOBILEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.SPOUSEMOBILEColumn) = value
            End Set
        End Property
        
        Public Property PADD4 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.PADD4Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.PADD4Column) = value
            End Set
        End Property
        
        Public Property CADD4 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.CADD4Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.CADD4Column) = value
            End Set
        End Property
        
        Public Property plotno As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.plotnoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.plotnoColumn) = value
            End Set
        End Property
        
        Public Property societyno As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.societynoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.societynoColumn) = value
            End Set
        End Property
        
        Public Property creditstopflag As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.creditstopflagColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.creditstopflagColumn) = value
            End Set
        End Property
        
        Public Property creditstopdate As Date
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.creditstopdateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.creditstopdateColumn) = value
            End Set
        End Property
        
        Public Property MSORDERNO As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.MSORDERNOColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.MSORDERNOColumn) = value
            End Set
        End Property
        
        Public Property ICNO As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.ICNOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.ICNOColumn) = value
            End Set
        End Property
        
        Public Property UnitNo As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.UnitNoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.UnitNoColumn) = value
            End Set
        End Property
        
        Public Property RankNo As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.RankNoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.RankNoColumn) = value
            End Set
        End Property
        
        Public Property DateOfCommission As Date
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.DateOfCommissionColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.DateOfCommissionColumn) = value
            End Set
        End Property
        
        Public Property DateOfRelease As Date
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.DateOfReleaseColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.DateOfReleaseColumn) = value
            End Set
        End Property
        
        Public Property DateOfCreation As Date
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.DateOfCreationColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.DateOfCreationColumn) = value
            End Set
        End Property
        
        Public Property BTGroup As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.BTGroupColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.BTGroupColumn) = value
            End Set
        End Property
        
        Public Property RIDCardNo As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.RIDCardNoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.RIDCardNoColumn) = value
            End Set
        End Property
        
        Public Property ArmService As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.ArmServiceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.ArmServiceColumn) = value
            End Set
        End Property
        
        Public Property WO As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.WOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.WOColumn) = value
            End Set
        End Property
        
        Public Property NoOfDependencies As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.NoOfDependenciesColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.NoOfDependenciesColumn) = value
            End Set
        End Property
        
        Public Property AnniversaryDate As Date
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.AnniversaryDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.AnniversaryDateColumn) = value
            End Set
        End Property
        
        Public Property RByMemberNo As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.RByMemberNoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.RByMemberNoColumn) = value
            End Set
        End Property
        
        Public Property RByName As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.RByNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.RByNameColumn) = value
            End Set
        End Property
        
        Public Property ArmyNo As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.ArmyNoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.ArmyNoColumn) = value
            End Set
        End Property
        
        Public Property RankName As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.RankNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.RankNameColumn) = value
            End Set
        End Property
        
        Public Property BarcodeNo As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.BarcodeNoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.BarcodeNoColumn) = value
            End Set
        End Property
        
        Public Property DependentID As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.DependentIDColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.DependentIDColumn) = value
            End Set
        End Property
        
        Public Property MemberType As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.MemberTypeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.MemberTypeColumn) = value
            End Set
        End Property
        
        Public Property MEMIMAGE As Byte()
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.MEMIMAGEColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.MEMIMAGEColumn) = value
            End Set
        End Property
        
        Public Property MEMIMAGESIGN As Byte()
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.MEMIMAGESIGNColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.MEMIMAGESIGNColumn) = value
            End Set
        End Property
        
        Public Property SPOUSEIMAGE As Byte()
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.SPOUSEIMAGEColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.SPOUSEIMAGEColumn) = value
            End Set
        End Property
        
        Public Property CHILDFDOB1 As Date
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.CHILDFDOB1Column),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.CHILDFDOB1Column) = value
            End Set
        End Property
        
        Public Property EMAIL_FLAG As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.EMAIL_FLAGColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.EMAIL_FLAGColumn) = value
            End Set
        End Property
        
        Public Property EBILL As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.EBILLColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.EBILLColumn) = value
            End Set
        End Property
        
        Public Property WEDDING_DATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.WEDDING_DATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.WEDDING_DATEColumn) = value
            End Set
        End Property
        
        Public Property TAXFLAG As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.TAXFLAGColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.TAXFLAGColumn) = value
            End Set
        End Property
        
        Public Property MLEDGERNAME As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.MLEDGERNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.MLEDGERNAMEColumn) = value
            End Set
        End Property
        
        Public Property MDESCRIPTION As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.MDESCRIPTIONColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.MDESCRIPTIONColumn) = value
            End Set
        End Property
        
        Public Property PREFIXMCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.PREFIXMCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.PREFIXMCODEColumn) = value
            End Set
        End Property
        
        Public Property UNITDESC As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.UNITDESCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.UNITDESCColumn) = value
            End Set
        End Property
        
        Public Property UNITNAME As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.UNITNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.UNITNAMEColumn) = value
            End Set
        End Property
        
        Public Property RBYMEMBERNO2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.RBYMEMBERNO2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.RBYMEMBERNO2Column) = value
            End Set
        End Property
        
        Public Property RBYMEMBERNAME2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemm_membermaster.RBYMEMBERNAME2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemm_membermaster.RBYMEMBERNAME2Column) = value
            End Set
        End Property
        
        Public Function IsSequenceNoNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.SequenceNoColumn)
        End Function
        
        Public Sub SetSequenceNoNull()
            Me(Me.tablemm_membermaster.SequenceNoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTAGNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.TAGColumn)
        End Function
        
        Public Sub SetTAGNull()
            Me(Me.tablemm_membermaster.TAGColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMEMBERTYPECODENull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.MEMBERTYPECODEColumn)
        End Function
        
        Public Sub SetMEMBERTYPECODENull()
            Me(Me.tablemm_membermaster.MEMBERTYPECODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCOMPANYNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.COMPANYColumn)
        End Function
        
        Public Sub SetCOMPANYNull()
            Me(Me.tablemm_membermaster.COMPANYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSUBCDNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.SUBCDColumn)
        End Function
        
        Public Sub SetSUBCDNull()
            Me(Me.tablemm_membermaster.SUBCDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMCODENull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.MCODEColumn)
        End Function
        
        Public Sub SetMCODENull()
            Me(Me.tablemm_membermaster.MCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMNAMENull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.MNAMEColumn)
        End Function
        
        Public Sub SetMNAMENull()
            Me(Me.tablemm_membermaster.MNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMIDNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.MIDColumn)
        End Function
        
        Public Sub SetMIDNull()
            Me(Me.tablemm_membermaster.MIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDOBNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.DOBColumn)
        End Function
        
        Public Sub SetDOBNull()
            Me(Me.tablemm_membermaster.DOBColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDOJNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.DOJColumn)
        End Function
        
        Public Sub SetDOJNull()
            Me(Me.tablemm_membermaster.DOJColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSDOBNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.SDOBColumn)
        End Function
        
        Public Sub SetSDOBNull()
            Me(Me.tablemm_membermaster.SDOBColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSEXNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.SEXColumn)
        End Function
        
        Public Sub SetSEXNull()
            Me(Me.tablemm_membermaster.SEXColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMARITALSTATUSNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.MARITALSTATUSColumn)
        End Function
        
        Public Sub SetMARITALSTATUSNull()
            Me(Me.tablemm_membermaster.MARITALSTATUSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSPOUSENull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.SPOUSEColumn)
        End Function
        
        Public Sub SetSPOUSENull()
            Me(Me.tablemm_membermaster.SPOUSEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBGNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.BGColumn)
        End Function
        
        Public Sub SetBGNull()
            Me(Me.tablemm_membermaster.BGColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOCCUPATIONNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.OCCUPATIONColumn)
        End Function
        
        Public Sub SetOCCUPATIONNull()
            Me(Me.tablemm_membermaster.OCCUPATIONColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBANKERNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.BANKERColumn)
        End Function
        
        Public Sub SetBANKERNull()
            Me(Me.tablemm_membermaster.BANKERColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBANKACNONull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.BANKACNOColumn)
        End Function
        
        Public Sub SetBANKACNONull()
            Me(Me.tablemm_membermaster.BANKACNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHOBBIESNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.HOBBIESColumn)
        End Function
        
        Public Sub SetHOBBIESNull()
            Me(Me.tablemm_membermaster.HOBBIESColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOTHERINFONull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.OTHERINFOColumn)
        End Function
        
        Public Sub SetOTHERINFONull()
            Me(Me.tablemm_membermaster.OTHERINFOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRESIDENTNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.RESIDENTColumn)
        End Function
        
        Public Sub SetRESIDENTNull()
            Me(Me.tablemm_membermaster.RESIDENTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEQUALIFICATIONNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.EQUALIFICATIONColumn)
        End Function
        
        Public Sub SetEQUALIFICATIONNull()
            Me(Me.tablemm_membermaster.EQUALIFICATIONColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPQUALIFICATIONNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.PQUALIFICATIONColumn)
        End Function
        
        Public Sub SetPQUALIFICATIONNull()
            Me(Me.tablemm_membermaster.PQUALIFICATIONColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPROPOSERNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.PROPOSERColumn)
        End Function
        
        Public Sub SetPROPOSERNull()
            Me(Me.tablemm_membermaster.PROPOSERColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPROPOSERNAMENull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.PROPOSERNAMEColumn)
        End Function
        
        Public Sub SetPROPOSERNAMENull()
            Me(Me.tablemm_membermaster.PROPOSERNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSECONDERNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.SECONDERColumn)
        End Function
        
        Public Sub SetSECONDERNull()
            Me(Me.tablemm_membermaster.SECONDERColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSECONDERNAMENull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.SECONDERNAMEColumn)
        End Function
        
        Public Sub SetSECONDERNAMENull()
            Me(Me.tablemm_membermaster.SECONDERNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPAcopystNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.PAcopystColumn)
        End Function
        
        Public Sub SetPAcopystNull()
            Me(Me.tablemm_membermaster.PAcopystColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPADD1Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.PADD1Column)
        End Function
        
        Public Sub SetPADD1Null()
            Me(Me.tablemm_membermaster.PADD1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsPADD2Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.PADD2Column)
        End Function
        
        Public Sub SetPADD2Null()
            Me(Me.tablemm_membermaster.PADD2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsPADD3Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.PADD3Column)
        End Function
        
        Public Sub SetPADD3Null()
            Me(Me.tablemm_membermaster.PADD3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsPCITYNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.PCITYColumn)
        End Function
        
        Public Sub SetPCITYNull()
            Me(Me.tablemm_membermaster.PCITYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPSTATENull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.PSTATEColumn)
        End Function
        
        Public Sub SetPSTATENull()
            Me(Me.tablemm_membermaster.PSTATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPCOUNTRYNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.PCOUNTRYColumn)
        End Function
        
        Public Sub SetPCOUNTRYNull()
            Me(Me.tablemm_membermaster.PCOUNTRYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPPINNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.PPINColumn)
        End Function
        
        Public Sub SetPPINNull()
            Me(Me.tablemm_membermaster.PPINColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPPHONE1Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.PPHONE1Column)
        End Function
        
        Public Sub SetPPHONE1Null()
            Me(Me.tablemm_membermaster.PPHONE1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsPPHONE2Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.PPHONE2Column)
        End Function
        
        Public Sub SetPPHONE2Null()
            Me(Me.tablemm_membermaster.PPHONE2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsPCELLNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.PCELLColumn)
        End Function
        
        Public Sub SetPCELLNull()
            Me(Me.tablemm_membermaster.PCELLColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPEMAILNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.PEMAILColumn)
        End Function
        
        Public Sub SetPEMAILNull()
            Me(Me.tablemm_membermaster.PEMAILColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRAcopystNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.RAcopystColumn)
        End Function
        
        Public Sub SetRAcopystNull()
            Me(Me.tablemm_membermaster.RAcopystColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCADD1Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.CADD1Column)
        End Function
        
        Public Sub SetCADD1Null()
            Me(Me.tablemm_membermaster.CADD1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsCADD2Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.CADD2Column)
        End Function
        
        Public Sub SetCADD2Null()
            Me(Me.tablemm_membermaster.CADD2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsCADD3Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.CADD3Column)
        End Function
        
        Public Sub SetCADD3Null()
            Me(Me.tablemm_membermaster.CADD3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsCCITYNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.CCITYColumn)
        End Function
        
        Public Sub SetCCITYNull()
            Me(Me.tablemm_membermaster.CCITYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCSTATENull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.CSTATEColumn)
        End Function
        
        Public Sub SetCSTATENull()
            Me(Me.tablemm_membermaster.CSTATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCCOUNTRYNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.CCOUNTRYColumn)
        End Function
        
        Public Sub SetCCOUNTRYNull()
            Me(Me.tablemm_membermaster.CCOUNTRYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCPINNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.CPINColumn)
        End Function
        
        Public Sub SetCPINNull()
            Me(Me.tablemm_membermaster.CPINColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCPHONE1Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.CPHONE1Column)
        End Function
        
        Public Sub SetCPHONE1Null()
            Me(Me.tablemm_membermaster.CPHONE1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsCPHONE2Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.CPHONE2Column)
        End Function
        
        Public Sub SetCPHONE2Null()
            Me(Me.tablemm_membermaster.CPHONE2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsCCELLNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.CCELLColumn)
        End Function
        
        Public Sub SetCCELLNull()
            Me(Me.tablemm_membermaster.CCELLColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCEMAILNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.CEMAILColumn)
        End Function
        
        Public Sub SetCEMAILNull()
            Me(Me.tablemm_membermaster.CEMAILColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCONTADD1Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.CONTADD1Column)
        End Function
        
        Public Sub SetCONTADD1Null()
            Me(Me.tablemm_membermaster.CONTADD1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsCONTADD2Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.CONTADD2Column)
        End Function
        
        Public Sub SetCONTADD2Null()
            Me(Me.tablemm_membermaster.CONTADD2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsCONTADD3Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.CONTADD3Column)
        End Function
        
        Public Sub SetCONTADD3Null()
            Me(Me.tablemm_membermaster.CONTADD3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsCONTCITYNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.CONTCITYColumn)
        End Function
        
        Public Sub SetCONTCITYNull()
            Me(Me.tablemm_membermaster.CONTCITYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCONTSTATENull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.CONTSTATEColumn)
        End Function
        
        Public Sub SetCONTSTATENull()
            Me(Me.tablemm_membermaster.CONTSTATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCONTCOUNTRYNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.CONTCOUNTRYColumn)
        End Function
        
        Public Sub SetCONTCOUNTRYNull()
            Me(Me.tablemm_membermaster.CONTCOUNTRYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCONTPINNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.CONTPINColumn)
        End Function
        
        Public Sub SetCONTPINNull()
            Me(Me.tablemm_membermaster.CONTPINColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCONTPHONE1Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.CONTPHONE1Column)
        End Function
        
        Public Sub SetCONTPHONE1Null()
            Me(Me.tablemm_membermaster.CONTPHONE1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsCONTPHONE2Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.CONTPHONE2Column)
        End Function
        
        Public Sub SetCONTPHONE2Null()
            Me(Me.tablemm_membermaster.CONTPHONE2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsCONTCELLNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.CONTCELLColumn)
        End Function
        
        Public Sub SetCONTCELLNull()
            Me(Me.tablemm_membermaster.CONTCELLColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCONTEMAILNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.CONTEMAILColumn)
        End Function
        
        Public Sub SetCONTEMAILNull()
            Me(Me.tablemm_membermaster.CONTEMAILColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEMPTYPENull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.EMPTYPEColumn)
        End Function
        
        Public Sub SetEMPTYPENull()
            Me(Me.tablemm_membermaster.EMPTYPEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBUSINESSNAMENull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.BUSINESSNAMEColumn)
        End Function
        
        Public Sub SetBUSINESSNAMENull()
            Me(Me.tablemm_membermaster.BUSINESSNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBAcopystNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.BAcopystColumn)
        End Function
        
        Public Sub SetBAcopystNull()
            Me(Me.tablemm_membermaster.BAcopystColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOADD1Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.OADD1Column)
        End Function
        
        Public Sub SetOADD1Null()
            Me(Me.tablemm_membermaster.OADD1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsOADD2Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.OADD2Column)
        End Function
        
        Public Sub SetOADD2Null()
            Me(Me.tablemm_membermaster.OADD2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsOADD3Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.OADD3Column)
        End Function
        
        Public Sub SetOADD3Null()
            Me(Me.tablemm_membermaster.OADD3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsOCITYNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.OCITYColumn)
        End Function
        
        Public Sub SetOCITYNull()
            Me(Me.tablemm_membermaster.OCITYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOSTATENull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.OSTATEColumn)
        End Function
        
        Public Sub SetOSTATENull()
            Me(Me.tablemm_membermaster.OSTATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOCOUNTRYNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.OCOUNTRYColumn)
        End Function
        
        Public Sub SetOCOUNTRYNull()
            Me(Me.tablemm_membermaster.OCOUNTRYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOPINNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.OPINColumn)
        End Function
        
        Public Sub SetOPINNull()
            Me(Me.tablemm_membermaster.OPINColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOPHONE1Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.OPHONE1Column)
        End Function
        
        Public Sub SetOPHONE1Null()
            Me(Me.tablemm_membermaster.OPHONE1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsOPHONE2Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.OPHONE2Column)
        End Function
        
        Public Sub SetOPHONE2Null()
            Me(Me.tablemm_membermaster.OPHONE2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsOCELLNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.OCELLColumn)
        End Function
        
        Public Sub SetOCELLNull()
            Me(Me.tablemm_membermaster.OCELLColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOEMAILNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.OEMAILColumn)
        End Function
        
        Public Sub SetOEMAILNull()
            Me(Me.tablemm_membermaster.OEMAILColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDOEPROFESSIONNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.DOEPROFESSIONColumn)
        End Function
        
        Public Sub SetDOEPROFESSIONNull()
            Me(Me.tablemm_membermaster.DOEPROFESSIONColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBUSINESSNATURENull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.BUSINESSNATUREColumn)
        End Function
        
        Public Sub SetBUSINESSNATURENull()
            Me(Me.tablemm_membermaster.BUSINESSNATUREColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPOSITIONHELDNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.POSITIONHELDColumn)
        End Function
        
        Public Sub SetPOSITIONHELDNull()
            Me(Me.tablemm_membermaster.POSITIONHELDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSERVICENAMENull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.SERVICENAMEColumn)
        End Function
        
        Public Sub SetSERVICENAMENull()
            Me(Me.tablemm_membermaster.SERVICENAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSERVICEYEARNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.SERVICEYEARColumn)
        End Function
        
        Public Sub SetSERVICEYEARNull()
            Me(Me.tablemm_membermaster.SERVICEYEARColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPANONull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.PANOColumn)
        End Function
        
        Public Sub SetPANONull()
            Me(Me.tablemm_membermaster.PANOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBBANKERNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.BBANKERColumn)
        End Function
        
        Public Sub SetBBANKERNull()
            Me(Me.tablemm_membermaster.BBANKERColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCCNONull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.CCNOColumn)
        End Function
        
        Public Sub SetCCNONull()
            Me(Me.tablemm_membermaster.CCNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsANNUALINCOMENull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.ANNUALINCOMEColumn)
        End Function
        
        Public Sub SetANNUALINCOMENull()
            Me(Me.tablemm_membermaster.ANNUALINCOMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUPDUSERIDNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.UPDUSERIDColumn)
        End Function
        
        Public Sub SetUPDUSERIDNull()
            Me(Me.tablemm_membermaster.UPDUSERIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUPDDATETIMENull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.UPDDATETIMEColumn)
        End Function
        
        Public Sub SetUPDDATETIMENull()
            Me(Me.tablemm_membermaster.UPDDATETIMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTERMINATIONNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.TERMINATIONColumn)
        End Function
        
        Public Sub SetTERMINATIONNull()
            Me(Me.tablemm_membermaster.TERMINATIONColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTRN_CON_DATENull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.TRN_CON_DATEColumn)
        End Function
        
        Public Sub SetTRN_CON_DATENull()
            Me(Me.tablemm_membermaster.TRN_CON_DATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCON_MCODENull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.CON_MCODEColumn)
        End Function
        
        Public Sub SetCON_MCODENull()
            Me(Me.tablemm_membermaster.CON_MCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPFAXNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.PFAXColumn)
        End Function
        
        Public Sub SetPFAXNull()
            Me(Me.tablemm_membermaster.PFAXColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCFAXNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.CFAXColumn)
        End Function
        
        Public Sub SetCFAXNull()
            Me(Me.tablemm_membermaster.CFAXColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCONTFAXNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.CONTFAXColumn)
        End Function
        
        Public Sub SetCONTFAXNull()
            Me(Me.tablemm_membermaster.CONTFAXColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsREASONNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.REASONColumn)
        End Function
        
        Public Sub SetREASONNull()
            Me(Me.tablemm_membermaster.REASONColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPHOTONull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.PHOTOColumn)
        End Function
        
        Public Sub SetPHOTONull()
            Me(Me.tablemm_membermaster.PHOTOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCREDITLIMITNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.CREDITLIMITColumn)
        End Function
        
        Public Sub SetCREDITLIMITNull()
            Me(Me.tablemm_membermaster.CREDITLIMITColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLIMITAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.LIMITAMOUNTColumn)
        End Function
        
        Public Sub SetLIMITAMOUNTNull()
            Me(Me.tablemm_membermaster.LIMITAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsWEBSITENull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.WEBSITEColumn)
        End Function
        
        Public Sub SetWEBSITENull()
            Me(Me.tablemm_membermaster.WEBSITEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsImagefileNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.ImagefileColumn)
        End Function
        
        Public Sub SetImagefileNull()
            Me(Me.tablemm_membermaster.ImagefileColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IssizefieldNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.sizefieldColumn)
        End Function
        
        Public Sub SetsizefieldNull()
            Me(Me.tablemm_membermaster.sizefieldColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVdateNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.VdateColumn)
        End Function
        
        Public Sub SetVdateNull()
            Me(Me.tablemm_membermaster.VdateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVyearNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.VyearColumn)
        End Function
        
        Public Sub SetVyearNull()
            Me(Me.tablemm_membermaster.VyearColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsValiddateNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.ValiddateColumn)
        End Function
        
        Public Sub SetValiddateNull()
            Me(Me.tablemm_membermaster.ValiddateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTempTerminationNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.TempTerminationColumn)
        End Function
        
        Public Sub SetTempTerminationNull()
            Me(Me.tablemm_membermaster.TempTerminationColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTempTermDateNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.TempTermDateColumn)
        End Function
        
        Public Sub SetTempTermDateNull()
            Me(Me.tablemm_membermaster.TempTermDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTempTermReasonNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.TempTermReasonColumn)
        End Function
        
        Public Sub SetTempTermReasonNull()
            Me(Me.tablemm_membermaster.TempTermReasonColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMemberidNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.MemberidColumn)
        End Function
        
        Public Sub SetMemberidNull()
            Me(Me.tablemm_membermaster.MemberidColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEndingDateNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.EndingDateColumn)
        End Function
        
        Public Sub SetEndingDateNull()
            Me(Me.tablemm_membermaster.EndingDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTotalYearsNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.TotalYearsColumn)
        End Function
        
        Public Sub SetTotalYearsNull()
            Me(Me.tablemm_membermaster.TotalYearsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCardNoNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.CardNoColumn)
        End Function
        
        Public Sub SetCardNoNull()
            Me(Me.tablemm_membermaster.CardNoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCardExpDateNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.CardExpDateColumn)
        End Function
        
        Public Sub SetCardExpDateNull()
            Me(Me.tablemm_membermaster.CardExpDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsValidityNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.ValidityColumn)
        End Function
        
        Public Sub SetValidityNull()
            Me(Me.tablemm_membermaster.ValidityColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPeriodNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.PeriodColumn)
        End Function
        
        Public Sub SetPeriodNull()
            Me(Me.tablemm_membermaster.PeriodColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCreditcardnoNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.CreditcardnoColumn)
        End Function
        
        Public Sub SetCreditcardnoNull()
            Me(Me.tablemm_membermaster.CreditcardnoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCreditExpDtNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.CreditExpDtColumn)
        End Function
        
        Public Sub SetCreditExpDtNull()
            Me(Me.tablemm_membermaster.CreditExpDtColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTypeNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.TypeColumn)
        End Function
        
        Public Sub SetTypeNull()
            Me(Me.tablemm_membermaster.TypeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSTATUSDATEFROMNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.STATUSDATEFROMColumn)
        End Function
        
        Public Sub SetSTATUSDATEFROMNull()
            Me(Me.tablemm_membermaster.STATUSDATEFROMColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSTATUSDATETONull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.STATUSDATETOColumn)
        End Function
        
        Public Sub SetSTATUSDATETONull()
            Me(Me.tablemm_membermaster.STATUSDATETOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCurentStatusNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.CurentStatusColumn)
        End Function
        
        Public Sub SetCurentStatusNull()
            Me(Me.tablemm_membermaster.CurentStatusColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFirstNameNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.FirstNameColumn)
        End Function
        
        Public Sub SetFirstNameNull()
            Me(Me.tablemm_membermaster.FirstNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMiddleNameNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.MiddleNameColumn)
        End Function
        
        Public Sub SetMiddleNameNull()
            Me(Me.tablemm_membermaster.MiddleNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSurnameNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.SurnameColumn)
        End Function
        
        Public Sub SetSurnameNull()
            Me(Me.tablemm_membermaster.SurnameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Is_AliasNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster._AliasColumn)
        End Function
        
        Public Sub Set_AliasNull()
            Me(Me.tablemm_membermaster._AliasColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPrefixNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.PrefixColumn)
        End Function
        
        Public Sub SetPrefixNull()
            Me(Me.tablemm_membermaster.PrefixColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBillTypeNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.BillTypeColumn)
        End Function
        
        Public Sub SetBillTypeNull()
            Me(Me.tablemm_membermaster.BillTypeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNationalityNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.NationalityColumn)
        End Function
        
        Public Sub SetNationalityNull()
            Me(Me.tablemm_membermaster.NationalityColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNationalityAtbirthNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.NationalityAtbirthColumn)
        End Function
        
        Public Sub SetNationalityAtbirthNull()
            Me(Me.tablemm_membermaster.NationalityAtbirthColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBillbasisNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.BillbasisColumn)
        End Function
        
        Public Sub SetBillbasisNull()
            Me(Me.tablemm_membermaster.BillbasisColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBillHeadNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.BillHeadColumn)
        End Function
        
        Public Sub SetBillHeadNull()
            Me(Me.tablemm_membermaster.BillHeadColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGDRLockerNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.GDRLockerColumn)
        End Function
        
        Public Sub SetGDRLockerNull()
            Me(Me.tablemm_membermaster.GDRLockerColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLDRLockerNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.LDRLockerColumn)
        End Function
        
        Public Sub SetLDRLockerNull()
            Me(Me.tablemm_membermaster.LDRLockerColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHPLockerNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.HPLockerColumn)
        End Function
        
        Public Sub SetHPLockerNull()
            Me(Me.tablemm_membermaster.HPLockerColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMembershipToNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.MembershipToColumn)
        End Function
        
        Public Sub SetMembershipToNull()
            Me(Me.tablemm_membermaster.MembershipToColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IssalutNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.salutColumn)
        End Function
        
        Public Sub SetsalutNull()
            Me(Me.tablemm_membermaster.salutColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEntranceFeeNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.EntranceFeeColumn)
        End Function
        
        Public Sub SetEntranceFeeNull()
            Me(Me.tablemm_membermaster.EntranceFeeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDevelopmentFeeNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.DevelopmentFeeColumn)
        End Function
        
        Public Sub SetDevelopmentFeeNull()
            Me(Me.tablemm_membermaster.DevelopmentFeeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCriditNumberNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.CriditNumberColumn)
        End Function
        
        Public Sub SetCriditNumberNull()
            Me(Me.tablemm_membermaster.CriditNumberColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSecurityDepositNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.SecurityDepositColumn)
        End Function
        
        Public Sub SetSecurityDepositNull()
            Me(Me.tablemm_membermaster.SecurityDepositColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPlaceOfBirthNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.PlaceOfBirthColumn)
        End Function
        
        Public Sub SetPlaceOfBirthNull()
            Me(Me.tablemm_membermaster.PlaceOfBirthColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCountryOfBirthNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.CountryOfBirthColumn)
        End Function
        
        Public Sub SetCountryOfBirthNull()
            Me(Me.tablemm_membermaster.CountryOfBirthColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLastArrivalInCalNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.LastArrivalInCalColumn)
        End Function
        
        Public Sub SetLastArrivalInCalNull()
            Me(Me.tablemm_membermaster.LastArrivalInCalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPeriodOfStay_yearNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.PeriodOfStay_yearColumn)
        End Function
        
        Public Sub SetPeriodOfStay_yearNull()
            Me(Me.tablemm_membermaster.PeriodOfStay_yearColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPeriodOfStay_MonthNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.PeriodOfStay_MonthColumn)
        End Function
        
        Public Sub SetPeriodOfStay_MonthNull()
            Me(Me.tablemm_membermaster.PeriodOfStay_MonthColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPreviouslyProposedNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.PreviouslyProposedColumn)
        End Function
        
        Public Sub SetPreviouslyProposedNull()
            Me(Me.tablemm_membermaster.PreviouslyProposedColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNoOfTimesProposedNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.NoOfTimesProposedColumn)
        End Function
        
        Public Sub SetNoOfTimesProposedNull()
            Me(Me.tablemm_membermaster.NoOfTimesProposedColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDateOfProposalNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.DateOfProposalColumn)
        End Function
        
        Public Sub SetDateOfProposalNull()
            Me(Me.tablemm_membermaster.DateOfProposalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNoOfTimesSecondedNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.NoOfTimesSecondedColumn)
        End Function
        
        Public Sub SetNoOfTimesSecondedNull()
            Me(Me.tablemm_membermaster.NoOfTimesSecondedColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDateOfSecondedNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.DateOfSecondedColumn)
        End Function
        
        Public Sub SetDateOfSecondedNull()
            Me(Me.tablemm_membermaster.DateOfSecondedColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsResultOfProposalNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.ResultOfProposalColumn)
        End Function
        
        Public Sub SetResultOfProposalNull()
            Me(Me.tablemm_membermaster.ResultOfProposalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsElectedNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.ElectedColumn)
        End Function
        
        Public Sub SetElectedNull()
            Me(Me.tablemm_membermaster.ElectedColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFatherNameNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.FatherNameColumn)
        End Function
        
        Public Sub SetFatherNameNull()
            Me(Me.tablemm_membermaster.FatherNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDOBfatherNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.DOBfatherColumn)
        End Function
        
        Public Sub SetDOBfatherNull()
            Me(Me.tablemm_membermaster.DOBfatherColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsWifeDOBNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.WifeDOBColumn)
        End Function
        
        Public Sub SetWifeDOBNull()
            Me(Me.tablemm_membermaster.WifeDOBColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMaidenNameWifeNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.MaidenNameWifeColumn)
        End Function
        
        Public Sub SetMaidenNameWifeNull()
            Me(Me.tablemm_membermaster.MaidenNameWifeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNationalityWifeNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.NationalityWifeColumn)
        End Function
        
        Public Sub SetNationalityWifeNull()
            Me(Me.tablemm_membermaster.NationalityWifeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsWifesFatherNameNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.WifesFatherNameColumn)
        End Function
        
        Public Sub SetWifesFatherNameNull()
            Me(Me.tablemm_membermaster.WifesFatherNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsWifeFatherDOBNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.WifeFatherDOBColumn)
        End Function
        
        Public Sub SetWifeFatherDOBNull()
            Me(Me.tablemm_membermaster.WifeFatherDOBColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsApplNoNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.ApplNoColumn)
        End Function
        
        Public Sub SetApplNoNull()
            Me(Me.tablemm_membermaster.ApplNoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsApplDateNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.ApplDateColumn)
        End Function
        
        Public Sub SetApplDateNull()
            Me(Me.tablemm_membermaster.ApplDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCorporatestNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.CorporatestColumn)
        End Function
        
        Public Sub SetCorporatestNull()
            Me(Me.tablemm_membermaster.CorporatestColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCorporateCodeNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.CorporateCodeColumn)
        End Function
        
        Public Sub SetCorporateCodeNull()
            Me(Me.tablemm_membermaster.CorporateCodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCompNameNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.CompNameColumn)
        End Function
        
        Public Sub SetCompNameNull()
            Me(Me.tablemm_membermaster.CompNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDesignationNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.DesignationColumn)
        End Function
        
        Public Sub SetDesignationNull()
            Me(Me.tablemm_membermaster.DesignationColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsProfessionInfoNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.ProfessionInfoColumn)
        End Function
        
        Public Sub SetProfessionInfoNull()
            Me(Me.tablemm_membermaster.ProfessionInfoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBuisnessInfoNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.BuisnessInfoColumn)
        End Function
        
        Public Sub SetBuisnessInfoNull()
            Me(Me.tablemm_membermaster.BuisnessInfoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsProductsNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.ProductsColumn)
        End Function
        
        Public Sub SetProductsNull()
            Me(Me.tablemm_membermaster.ProductsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAgentsDealersNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.AgentsDealersColumn)
        End Function
        
        Public Sub SetAgentsDealersNull()
            Me(Me.tablemm_membermaster.AgentsDealersColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsESTDdateNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.ESTDdateColumn)
        End Function
        
        Public Sub SetESTDdateNull()
            Me(Me.tablemm_membermaster.ESTDdateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNoOfEmpNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.NoOfEmpColumn)
        End Function
        
        Public Sub SetNoOfEmpNull()
            Me(Me.tablemm_membermaster.NoOfEmpColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTurnoverNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.TurnoverColumn)
        End Function
        
        Public Sub SetTurnoverNull()
            Me(Me.tablemm_membermaster.TurnoverColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsClientNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.ClientColumn)
        End Function
        
        Public Sub SetClientNull()
            Me(Me.tablemm_membermaster.ClientColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAppliedButNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.AppliedButColumn)
        End Function
        
        Public Sub SetAppliedButNull()
            Me(Me.tablemm_membermaster.AppliedButColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPositionInChamberNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.PositionInChamberColumn)
        End Function
        
        Public Sub SetPositionInChamberNull()
            Me(Me.tablemm_membermaster.PositionInChamberColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsQulificationstatusNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.QulificationstatusColumn)
        End Function
        
        Public Sub SetQulificationstatusNull()
            Me(Me.tablemm_membermaster.QulificationstatusColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsQualification1Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.Qualification1Column)
        End Function
        
        Public Sub SetQualification1Null()
            Me(Me.tablemm_membermaster.Qualification1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsDetails1Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.Details1Column)
        End Function
        
        Public Sub SetDetails1Null()
            Me(Me.tablemm_membermaster.Details1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsYearOfPassing1Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.YearOfPassing1Column)
        End Function
        
        Public Sub SetYearOfPassing1Null()
            Me(Me.tablemm_membermaster.YearOfPassing1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsInstitute1Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.Institute1Column)
        End Function
        
        Public Sub SetInstitute1Null()
            Me(Me.tablemm_membermaster.Institute1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsDivision1Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.Division1Column)
        End Function
        
        Public Sub SetDivision1Null()
            Me(Me.tablemm_membermaster.Division1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsQualification2Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.Qualification2Column)
        End Function
        
        Public Sub SetQualification2Null()
            Me(Me.tablemm_membermaster.Qualification2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsDetails2Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.Details2Column)
        End Function
        
        Public Sub SetDetails2Null()
            Me(Me.tablemm_membermaster.Details2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsYearOfPassing2Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.YearOfPassing2Column)
        End Function
        
        Public Sub SetYearOfPassing2Null()
            Me(Me.tablemm_membermaster.YearOfPassing2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsInstitute2Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.Institute2Column)
        End Function
        
        Public Sub SetInstitute2Null()
            Me(Me.tablemm_membermaster.Institute2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsDivision2Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.Division2Column)
        End Function
        
        Public Sub SetDivision2Null()
            Me(Me.tablemm_membermaster.Division2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsQualification3Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.Qualification3Column)
        End Function
        
        Public Sub SetQualification3Null()
            Me(Me.tablemm_membermaster.Qualification3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsDetails3Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.Details3Column)
        End Function
        
        Public Sub SetDetails3Null()
            Me(Me.tablemm_membermaster.Details3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsYearOfPassing3Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.YearOfPassing3Column)
        End Function
        
        Public Sub SetYearOfPassing3Null()
            Me(Me.tablemm_membermaster.YearOfPassing3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsInstitute3Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.Institute3Column)
        End Function
        
        Public Sub SetInstitute3Null()
            Me(Me.tablemm_membermaster.Institute3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsDivision3Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.Division3Column)
        End Function
        
        Public Sub SetDivision3Null()
            Me(Me.tablemm_membermaster.Division3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IssportstatusNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.sportstatusColumn)
        End Function
        
        Public Sub SetsportstatusNull()
            Me(Me.tablemm_membermaster.sportstatusColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGameType1Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.GameType1Column)
        End Function
        
        Public Sub SetGameType1Null()
            Me(Me.tablemm_membermaster.GameType1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsNameOfGame1Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.NameOfGame1Column)
        End Function
        
        Public Sub SetNameOfGame1Null()
            Me(Me.tablemm_membermaster.NameOfGame1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsDescription1Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.Description1Column)
        End Function
        
        Public Sub SetDescription1Null()
            Me(Me.tablemm_membermaster.Description1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsGameType2Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.GameType2Column)
        End Function
        
        Public Sub SetGameType2Null()
            Me(Me.tablemm_membermaster.GameType2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsNameofGame2Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.NameofGame2Column)
        End Function
        
        Public Sub SetNameofGame2Null()
            Me(Me.tablemm_membermaster.NameofGame2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsDescription2Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.Description2Column)
        End Function
        
        Public Sub SetDescription2Null()
            Me(Me.tablemm_membermaster.Description2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsGameType3Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.GameType3Column)
        End Function
        
        Public Sub SetGameType3Null()
            Me(Me.tablemm_membermaster.GameType3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsNameOfGame3Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.NameOfGame3Column)
        End Function
        
        Public Sub SetNameOfGame3Null()
            Me(Me.tablemm_membermaster.NameOfGame3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsDescription3Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.Description3Column)
        End Function
        
        Public Sub SetDescription3Null()
            Me(Me.tablemm_membermaster.Description3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsChildstatusNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.ChildstatusColumn)
        End Function
        
        Public Sub SetChildstatusNull()
            Me(Me.tablemm_membermaster.ChildstatusColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsChildName1Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.ChildName1Column)
        End Function
        
        Public Sub SetChildName1Null()
            Me(Me.tablemm_membermaster.ChildName1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsChildDob1Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.ChildDob1Column)
        End Function
        
        Public Sub SetChildDob1Null()
            Me(Me.tablemm_membermaster.ChildDob1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsChildSex1Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.ChildSex1Column)
        End Function
        
        Public Sub SetChildSex1Null()
            Me(Me.tablemm_membermaster.ChildSex1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsChildExpairy1Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.ChildExpairy1Column)
        End Function
        
        Public Sub SetChildExpairy1Null()
            Me(Me.tablemm_membermaster.ChildExpairy1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsChildName2Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.ChildName2Column)
        End Function
        
        Public Sub SetChildName2Null()
            Me(Me.tablemm_membermaster.ChildName2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsChildDob2Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.ChildDob2Column)
        End Function
        
        Public Sub SetChildDob2Null()
            Me(Me.tablemm_membermaster.ChildDob2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsChildSex2Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.ChildSex2Column)
        End Function
        
        Public Sub SetChildSex2Null()
            Me(Me.tablemm_membermaster.ChildSex2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsChildExpairy2Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.ChildExpairy2Column)
        End Function
        
        Public Sub SetChildExpairy2Null()
            Me(Me.tablemm_membermaster.ChildExpairy2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsChildName3Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.ChildName3Column)
        End Function
        
        Public Sub SetChildName3Null()
            Me(Me.tablemm_membermaster.ChildName3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsChildDob3Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.ChildDob3Column)
        End Function
        
        Public Sub SetChildDob3Null()
            Me(Me.tablemm_membermaster.ChildDob3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsChildSex3Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.ChildSex3Column)
        End Function
        
        Public Sub SetChildSex3Null()
            Me(Me.tablemm_membermaster.ChildSex3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IschildExpairy3Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.childExpairy3Column)
        End Function
        
        Public Sub SetchildExpairy3Null()
            Me(Me.tablemm_membermaster.childExpairy3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsClubstatusNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.ClubstatusColumn)
        End Function
        
        Public Sub SetClubstatusNull()
            Me(Me.tablemm_membermaster.ClubstatusColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOtherClubName1Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.OtherClubName1Column)
        End Function
        
        Public Sub SetOtherClubName1Null()
            Me(Me.tablemm_membermaster.OtherClubName1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsOCAddress1Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.OCAddress1Column)
        End Function
        
        Public Sub SetOCAddress1Null()
            Me(Me.tablemm_membermaster.OCAddress1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsOCStatus1Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.OCStatus1Column)
        End Function
        
        Public Sub SetOCStatus1Null()
            Me(Me.tablemm_membermaster.OCStatus1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsOtherClubName2Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.OtherClubName2Column)
        End Function
        
        Public Sub SetOtherClubName2Null()
            Me(Me.tablemm_membermaster.OtherClubName2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsOCAddress2Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.OCAddress2Column)
        End Function
        
        Public Sub SetOCAddress2Null()
            Me(Me.tablemm_membermaster.OCAddress2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsOCStatus2Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.OCStatus2Column)
        End Function
        
        Public Sub SetOCStatus2Null()
            Me(Me.tablemm_membermaster.OCStatus2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsOtherClubname3Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.OtherClubname3Column)
        End Function
        
        Public Sub SetOtherClubname3Null()
            Me(Me.tablemm_membermaster.OtherClubname3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsOCAddress3Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.OCAddress3Column)
        End Function
        
        Public Sub SetOCAddress3Null()
            Me(Me.tablemm_membermaster.OCAddress3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsOCStatausNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.OCStatausColumn)
        End Function
        
        Public Sub SetOCStatausNull()
            Me(Me.tablemm_membermaster.OCStatausColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsadduserNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.adduserColumn)
        End Function
        
        Public Sub SetadduserNull()
            Me(Me.tablemm_membermaster.adduserColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsadddateNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.adddateColumn)
        End Function
        
        Public Sub SetadddateNull()
            Me(Me.tablemm_membermaster.adddateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsfreezeNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.freezeColumn)
        End Function
        
        Public Sub SetfreezeNull()
            Me(Me.tablemm_membermaster.freezeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRelativestatusNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.RelativestatusColumn)
        End Function
        
        Public Sub SetRelativestatusNull()
            Me(Me.tablemm_membermaster.RelativestatusColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRelativeName1Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.RelativeName1Column)
        End Function
        
        Public Sub SetRelativeName1Null()
            Me(Me.tablemm_membermaster.RelativeName1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsRelation1Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.Relation1Column)
        End Function
        
        Public Sub SetRelation1Null()
            Me(Me.tablemm_membermaster.Relation1Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isdateofbirth1Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.dateofbirth1Column)
        End Function
        
        Public Sub Setdateofbirth1Null()
            Me(Me.tablemm_membermaster.dateofbirth1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsRelativeage1Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.Relativeage1Column)
        End Function
        
        Public Sub SetRelativeage1Null()
            Me(Me.tablemm_membermaster.Relativeage1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsRelativeSex1Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.RelativeSex1Column)
        End Function
        
        Public Sub SetRelativeSex1Null()
            Me(Me.tablemm_membermaster.RelativeSex1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsRelativeaddress1Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.Relativeaddress1Column)
        End Function
        
        Public Sub SetRelativeaddress1Null()
            Me(Me.tablemm_membermaster.Relativeaddress1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsRelativeName2Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.RelativeName2Column)
        End Function
        
        Public Sub SetRelativeName2Null()
            Me(Me.tablemm_membermaster.RelativeName2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsRelation2Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.Relation2Column)
        End Function
        
        Public Sub SetRelation2Null()
            Me(Me.tablemm_membermaster.Relation2Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isdateofbirth2Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.dateofbirth2Column)
        End Function
        
        Public Sub Setdateofbirth2Null()
            Me(Me.tablemm_membermaster.dateofbirth2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsRelativeage2Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.Relativeage2Column)
        End Function
        
        Public Sub SetRelativeage2Null()
            Me(Me.tablemm_membermaster.Relativeage2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsRelativeSex2Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.RelativeSex2Column)
        End Function
        
        Public Sub SetRelativeSex2Null()
            Me(Me.tablemm_membermaster.RelativeSex2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsRelativeaddress2Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.Relativeaddress2Column)
        End Function
        
        Public Sub SetRelativeaddress2Null()
            Me(Me.tablemm_membermaster.Relativeaddress2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsRelativeName3Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.RelativeName3Column)
        End Function
        
        Public Sub SetRelativeName3Null()
            Me(Me.tablemm_membermaster.RelativeName3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsRelation3Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.Relation3Column)
        End Function
        
        Public Sub SetRelation3Null()
            Me(Me.tablemm_membermaster.Relation3Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isdateofbirth3Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.dateofbirth3Column)
        End Function
        
        Public Sub Setdateofbirth3Null()
            Me(Me.tablemm_membermaster.dateofbirth3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsRelativeage3Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.Relativeage3Column)
        End Function
        
        Public Sub SetRelativeage3Null()
            Me(Me.tablemm_membermaster.Relativeage3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsRelativeSex3Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.RelativeSex3Column)
        End Function
        
        Public Sub SetRelativeSex3Null()
            Me(Me.tablemm_membermaster.RelativeSex3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsRelativeaddress3Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.Relativeaddress3Column)
        End Function
        
        Public Sub SetRelativeaddress3Null()
            Me(Me.tablemm_membermaster.Relativeaddress3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsreferentialstNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.referentialstColumn)
        End Function
        
        Public Sub SetreferentialstNull()
            Me(Me.tablemm_membermaster.referentialstColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ismem_code1Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.mem_code1Column)
        End Function
        
        Public Sub Setmem_code1Null()
            Me(Me.tablemm_membermaster.mem_code1Column) = System.Convert.DBNull
        End Sub
        
        Public Function Ismem_name1Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.mem_name1Column)
        End Function
        
        Public Sub Setmem_name1Null()
            Me(Me.tablemm_membermaster.mem_name1Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isrefmem_date1Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.refmem_date1Column)
        End Function
        
        Public Sub Setrefmem_date1Null()
            Me(Me.tablemm_membermaster.refmem_date1Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isdeleted1Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.deleted1Column)
        End Function
        
        Public Sub Setdeleted1Null()
            Me(Me.tablemm_membermaster.deleted1Column) = System.Convert.DBNull
        End Sub
        
        Public Function Ismem_code2Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.mem_code2Column)
        End Function
        
        Public Sub Setmem_code2Null()
            Me(Me.tablemm_membermaster.mem_code2Column) = System.Convert.DBNull
        End Sub
        
        Public Function Ismem_name2Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.mem_name2Column)
        End Function
        
        Public Sub Setmem_name2Null()
            Me(Me.tablemm_membermaster.mem_name2Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isrefmem_date2Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.refmem_date2Column)
        End Function
        
        Public Sub Setrefmem_date2Null()
            Me(Me.tablemm_membermaster.refmem_date2Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isdeleted2Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.deleted2Column)
        End Function
        
        Public Sub Setdeleted2Null()
            Me(Me.tablemm_membermaster.deleted2Column) = System.Convert.DBNull
        End Sub
        
        Public Function Ismem_code3Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.mem_code3Column)
        End Function
        
        Public Sub Setmem_code3Null()
            Me(Me.tablemm_membermaster.mem_code3Column) = System.Convert.DBNull
        End Sub
        
        Public Function Ismem_name3Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.mem_name3Column)
        End Function
        
        Public Sub Setmem_name3Null()
            Me(Me.tablemm_membermaster.mem_name3Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isrefmem_date3Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.refmem_date3Column)
        End Function
        
        Public Sub Setrefmem_date3Null()
            Me(Me.tablemm_membermaster.refmem_date3Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isdeleted3Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.deleted3Column)
        End Function
        
        Public Sub Setdeleted3Null()
            Me(Me.tablemm_membermaster.deleted3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsentrancefeestNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.entrancefeestColumn)
        End Function
        
        Public Sub SetentrancefeestNull()
            Me(Me.tablemm_membermaster.entrancefeestColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isreceiptno1Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.receiptno1Column)
        End Function
        
        Public Sub Setreceiptno1Null()
            Me(Me.tablemm_membermaster.receiptno1Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isstartdate1Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.startdate1Column)
        End Function
        
        Public Sub Setstartdate1Null()
            Me(Me.tablemm_membermaster.startdate1Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isamount1Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.amount1Column)
        End Function
        
        Public Sub Setamount1Null()
            Me(Me.tablemm_membermaster.amount1Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isreceiptno2Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.receiptno2Column)
        End Function
        
        Public Sub Setreceiptno2Null()
            Me(Me.tablemm_membermaster.receiptno2Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isstartdate2Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.startdate2Column)
        End Function
        
        Public Sub Setstartdate2Null()
            Me(Me.tablemm_membermaster.startdate2Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isamount2Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.amount2Column)
        End Function
        
        Public Sub Setamount2Null()
            Me(Me.tablemm_membermaster.amount2Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isreceiptno3Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.receiptno3Column)
        End Function
        
        Public Sub Setreceiptno3Null()
            Me(Me.tablemm_membermaster.receiptno3Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isstartdate3Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.startdate3Column)
        End Function
        
        Public Sub Setstartdate3Null()
            Me(Me.tablemm_membermaster.startdate3Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isamount3Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.amount3Column)
        End Function
        
        Public Sub Setamount3Null()
            Me(Me.tablemm_membermaster.amount3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsOLDNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.OLDColumn)
        End Function
        
        Public Sub SetOLDNull()
            Me(Me.tablemm_membermaster.OLDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCardAmtNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.CardAmtColumn)
        End Function
        
        Public Sub SetCardAmtNull()
            Me(Me.tablemm_membermaster.CardAmtColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMINIMUMUSAGENull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.MINIMUMUSAGEColumn)
        End Function
        
        Public Sub SetMINIMUMUSAGENull()
            Me(Me.tablemm_membermaster.MINIMUMUSAGEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCREDITNONull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.CREDITNOColumn)
        End Function
        
        Public Sub SetCREDITNONull()
            Me(Me.tablemm_membermaster.CREDITNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSPOUSEMOBILENull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.SPOUSEMOBILEColumn)
        End Function
        
        Public Sub SetSPOUSEMOBILENull()
            Me(Me.tablemm_membermaster.SPOUSEMOBILEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPADD4Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.PADD4Column)
        End Function
        
        Public Sub SetPADD4Null()
            Me(Me.tablemm_membermaster.PADD4Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsCADD4Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.CADD4Column)
        End Function
        
        Public Sub SetCADD4Null()
            Me(Me.tablemm_membermaster.CADD4Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsplotnoNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.plotnoColumn)
        End Function
        
        Public Sub SetplotnoNull()
            Me(Me.tablemm_membermaster.plotnoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IssocietynoNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.societynoColumn)
        End Function
        
        Public Sub SetsocietynoNull()
            Me(Me.tablemm_membermaster.societynoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscreditstopflagNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.creditstopflagColumn)
        End Function
        
        Public Sub SetcreditstopflagNull()
            Me(Me.tablemm_membermaster.creditstopflagColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscreditstopdateNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.creditstopdateColumn)
        End Function
        
        Public Sub SetcreditstopdateNull()
            Me(Me.tablemm_membermaster.creditstopdateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMSORDERNONull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.MSORDERNOColumn)
        End Function
        
        Public Sub SetMSORDERNONull()
            Me(Me.tablemm_membermaster.MSORDERNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsICNONull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.ICNOColumn)
        End Function
        
        Public Sub SetICNONull()
            Me(Me.tablemm_membermaster.ICNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUnitNoNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.UnitNoColumn)
        End Function
        
        Public Sub SetUnitNoNull()
            Me(Me.tablemm_membermaster.UnitNoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRankNoNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.RankNoColumn)
        End Function
        
        Public Sub SetRankNoNull()
            Me(Me.tablemm_membermaster.RankNoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDateOfCommissionNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.DateOfCommissionColumn)
        End Function
        
        Public Sub SetDateOfCommissionNull()
            Me(Me.tablemm_membermaster.DateOfCommissionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDateOfReleaseNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.DateOfReleaseColumn)
        End Function
        
        Public Sub SetDateOfReleaseNull()
            Me(Me.tablemm_membermaster.DateOfReleaseColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDateOfCreationNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.DateOfCreationColumn)
        End Function
        
        Public Sub SetDateOfCreationNull()
            Me(Me.tablemm_membermaster.DateOfCreationColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBTGroupNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.BTGroupColumn)
        End Function
        
        Public Sub SetBTGroupNull()
            Me(Me.tablemm_membermaster.BTGroupColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRIDCardNoNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.RIDCardNoColumn)
        End Function
        
        Public Sub SetRIDCardNoNull()
            Me(Me.tablemm_membermaster.RIDCardNoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsArmServiceNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.ArmServiceColumn)
        End Function
        
        Public Sub SetArmServiceNull()
            Me(Me.tablemm_membermaster.ArmServiceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsWONull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.WOColumn)
        End Function
        
        Public Sub SetWONull()
            Me(Me.tablemm_membermaster.WOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNoOfDependenciesNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.NoOfDependenciesColumn)
        End Function
        
        Public Sub SetNoOfDependenciesNull()
            Me(Me.tablemm_membermaster.NoOfDependenciesColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAnniversaryDateNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.AnniversaryDateColumn)
        End Function
        
        Public Sub SetAnniversaryDateNull()
            Me(Me.tablemm_membermaster.AnniversaryDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRByMemberNoNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.RByMemberNoColumn)
        End Function
        
        Public Sub SetRByMemberNoNull()
            Me(Me.tablemm_membermaster.RByMemberNoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRByNameNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.RByNameColumn)
        End Function
        
        Public Sub SetRByNameNull()
            Me(Me.tablemm_membermaster.RByNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsArmyNoNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.ArmyNoColumn)
        End Function
        
        Public Sub SetArmyNoNull()
            Me(Me.tablemm_membermaster.ArmyNoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRankNameNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.RankNameColumn)
        End Function
        
        Public Sub SetRankNameNull()
            Me(Me.tablemm_membermaster.RankNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBarcodeNoNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.BarcodeNoColumn)
        End Function
        
        Public Sub SetBarcodeNoNull()
            Me(Me.tablemm_membermaster.BarcodeNoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDependentIDNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.DependentIDColumn)
        End Function
        
        Public Sub SetDependentIDNull()
            Me(Me.tablemm_membermaster.DependentIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMemberTypeNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.MemberTypeColumn)
        End Function
        
        Public Sub SetMemberTypeNull()
            Me(Me.tablemm_membermaster.MemberTypeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMEMIMAGENull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.MEMIMAGEColumn)
        End Function
        
        Public Sub SetMEMIMAGENull()
            Me(Me.tablemm_membermaster.MEMIMAGEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMEMIMAGESIGNNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.MEMIMAGESIGNColumn)
        End Function
        
        Public Sub SetMEMIMAGESIGNNull()
            Me(Me.tablemm_membermaster.MEMIMAGESIGNColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSPOUSEIMAGENull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.SPOUSEIMAGEColumn)
        End Function
        
        Public Sub SetSPOUSEIMAGENull()
            Me(Me.tablemm_membermaster.SPOUSEIMAGEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCHILDFDOB1Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.CHILDFDOB1Column)
        End Function
        
        Public Sub SetCHILDFDOB1Null()
            Me(Me.tablemm_membermaster.CHILDFDOB1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsEMAIL_FLAGNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.EMAIL_FLAGColumn)
        End Function
        
        Public Sub SetEMAIL_FLAGNull()
            Me(Me.tablemm_membermaster.EMAIL_FLAGColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEBILLNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.EBILLColumn)
        End Function
        
        Public Sub SetEBILLNull()
            Me(Me.tablemm_membermaster.EBILLColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsWEDDING_DATENull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.WEDDING_DATEColumn)
        End Function
        
        Public Sub SetWEDDING_DATENull()
            Me(Me.tablemm_membermaster.WEDDING_DATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTAXFLAGNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.TAXFLAGColumn)
        End Function
        
        Public Sub SetTAXFLAGNull()
            Me(Me.tablemm_membermaster.TAXFLAGColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMLEDGERNAMENull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.MLEDGERNAMEColumn)
        End Function
        
        Public Sub SetMLEDGERNAMENull()
            Me(Me.tablemm_membermaster.MLEDGERNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMDESCRIPTIONNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.MDESCRIPTIONColumn)
        End Function
        
        Public Sub SetMDESCRIPTIONNull()
            Me(Me.tablemm_membermaster.MDESCRIPTIONColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPREFIXMCODENull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.PREFIXMCODEColumn)
        End Function
        
        Public Sub SetPREFIXMCODENull()
            Me(Me.tablemm_membermaster.PREFIXMCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUNITDESCNull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.UNITDESCColumn)
        End Function
        
        Public Sub SetUNITDESCNull()
            Me(Me.tablemm_membermaster.UNITDESCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUNITNAMENull() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.UNITNAMEColumn)
        End Function
        
        Public Sub SetUNITNAMENull()
            Me(Me.tablemm_membermaster.UNITNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRBYMEMBERNO2Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.RBYMEMBERNO2Column)
        End Function
        
        Public Sub SetRBYMEMBERNO2Null()
            Me(Me.tablemm_membermaster.RBYMEMBERNO2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsRBYMEMBERNAME2Null() As Boolean
            Return Me.IsNull(Me.tablemm_membermaster.RBYMEMBERNAME2Column)
        End Function
        
        Public Sub SetRBYMEMBERNAME2Null()
            Me(Me.tablemm_membermaster.RBYMEMBERNAME2Column) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class mm_membermasterRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As mm_membermasterRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As mm_membermasterRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As mm_membermasterRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_POS_SUMMARYDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnbilldate As DataColumn
        
        Private columnSNO As DataColumn
        
        Private columnSLCODE As DataColumn
        
        Private columnHEADDESC As DataColumn
        
        Private columnDRAMOUNT As DataColumn
        
        Private columnCRAMOUNT As DataColumn
        
        Friend Sub New()
            MyBase.New("VIEW_POS_SUMMARY")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property billdateColumn As DataColumn
            Get
                Return Me.columnbilldate
            End Get
        End Property
        
        Friend ReadOnly Property SNOColumn As DataColumn
            Get
                Return Me.columnSNO
            End Get
        End Property
        
        Friend ReadOnly Property SLCODEColumn As DataColumn
            Get
                Return Me.columnSLCODE
            End Get
        End Property
        
        Friend ReadOnly Property HEADDESCColumn As DataColumn
            Get
                Return Me.columnHEADDESC
            End Get
        End Property
        
        Friend ReadOnly Property DRAMOUNTColumn As DataColumn
            Get
                Return Me.columnDRAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property CRAMOUNTColumn As DataColumn
            Get
                Return Me.columnCRAMOUNT
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VIEW_POS_SUMMARYRow
            Get
                Return CType(Me.Rows(index),VIEW_POS_SUMMARYRow)
            End Get
        End Property
        
        Public Event VIEW_POS_SUMMARYRowChanged As VIEW_POS_SUMMARYRowChangeEventHandler
        
        Public Event VIEW_POS_SUMMARYRowChanging As VIEW_POS_SUMMARYRowChangeEventHandler
        
        Public Event VIEW_POS_SUMMARYRowDeleted As VIEW_POS_SUMMARYRowChangeEventHandler
        
        Public Event VIEW_POS_SUMMARYRowDeleting As VIEW_POS_SUMMARYRowChangeEventHandler
        
        Public Overloads Sub AddVIEW_POS_SUMMARYRow(ByVal row As VIEW_POS_SUMMARYRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVIEW_POS_SUMMARYRow(ByVal billdate As Date, ByVal SNO As String, ByVal SLCODE As String, ByVal HEADDESC As String, ByVal DRAMOUNT As Decimal, ByVal CRAMOUNT As Decimal) As VIEW_POS_SUMMARYRow
            Dim rowVIEW_POS_SUMMARYRow As VIEW_POS_SUMMARYRow = CType(Me.NewRow,VIEW_POS_SUMMARYRow)
            rowVIEW_POS_SUMMARYRow.ItemArray = New Object() {billdate, SNO, SLCODE, HEADDESC, DRAMOUNT, CRAMOUNT}
            Me.Rows.Add(rowVIEW_POS_SUMMARYRow)
            Return rowVIEW_POS_SUMMARYRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VIEW_POS_SUMMARYDataTable = CType(MyBase.Clone,VIEW_POS_SUMMARYDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VIEW_POS_SUMMARYDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnbilldate = Me.Columns("billdate")
            Me.columnSNO = Me.Columns("SNO")
            Me.columnSLCODE = Me.Columns("SLCODE")
            Me.columnHEADDESC = Me.Columns("HEADDESC")
            Me.columnDRAMOUNT = Me.Columns("DRAMOUNT")
            Me.columnCRAMOUNT = Me.Columns("CRAMOUNT")
        End Sub
        
        Private Sub InitClass()
            Me.columnbilldate = New DataColumn("billdate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnbilldate)
            Me.columnSNO = New DataColumn("SNO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSNO)
            Me.columnSLCODE = New DataColumn("SLCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSLCODE)
            Me.columnHEADDESC = New DataColumn("HEADDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHEADDESC)
            Me.columnDRAMOUNT = New DataColumn("DRAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDRAMOUNT)
            Me.columnCRAMOUNT = New DataColumn("CRAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCRAMOUNT)
            Me.columnSNO.AllowDBNull = false
        End Sub
        
        Public Function NewVIEW_POS_SUMMARYRow() As VIEW_POS_SUMMARYRow
            Return CType(Me.NewRow,VIEW_POS_SUMMARYRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VIEW_POS_SUMMARYRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VIEW_POS_SUMMARYRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VIEW_POS_SUMMARYRowChangedEvent) Is Nothing) Then
                RaiseEvent VIEW_POS_SUMMARYRowChanged(Me, New VIEW_POS_SUMMARYRowChangeEvent(CType(e.Row,VIEW_POS_SUMMARYRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VIEW_POS_SUMMARYRowChangingEvent) Is Nothing) Then
                RaiseEvent VIEW_POS_SUMMARYRowChanging(Me, New VIEW_POS_SUMMARYRowChangeEvent(CType(e.Row,VIEW_POS_SUMMARYRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VIEW_POS_SUMMARYRowDeletedEvent) Is Nothing) Then
                RaiseEvent VIEW_POS_SUMMARYRowDeleted(Me, New VIEW_POS_SUMMARYRowChangeEvent(CType(e.Row,VIEW_POS_SUMMARYRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VIEW_POS_SUMMARYRowDeletingEvent) Is Nothing) Then
                RaiseEvent VIEW_POS_SUMMARYRowDeleting(Me, New VIEW_POS_SUMMARYRowChangeEvent(CType(e.Row,VIEW_POS_SUMMARYRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVIEW_POS_SUMMARYRow(ByVal row As VIEW_POS_SUMMARYRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_POS_SUMMARYRow
        Inherits DataRow
        
        Private tableVIEW_POS_SUMMARY As VIEW_POS_SUMMARYDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVIEW_POS_SUMMARY = CType(Me.Table,VIEW_POS_SUMMARYDataTable)
        End Sub
        
        Public Property billdate As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_POS_SUMMARY.billdateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_POS_SUMMARY.billdateColumn) = value
            End Set
        End Property
        
        Public Property SNO As String
            Get
                Return CType(Me(Me.tableVIEW_POS_SUMMARY.SNOColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_POS_SUMMARY.SNOColumn) = value
            End Set
        End Property
        
        Public Property SLCODE As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_POS_SUMMARY.SLCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_POS_SUMMARY.SLCODEColumn) = value
            End Set
        End Property
        
        Public Property HEADDESC As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_POS_SUMMARY.HEADDESCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_POS_SUMMARY.HEADDESCColumn) = value
            End Set
        End Property
        
        Public Property DRAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_POS_SUMMARY.DRAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_POS_SUMMARY.DRAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property CRAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_POS_SUMMARY.CRAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_POS_SUMMARY.CRAMOUNTColumn) = value
            End Set
        End Property
        
        Public Function IsbilldateNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_POS_SUMMARY.billdateColumn)
        End Function
        
        Public Sub SetbilldateNull()
            Me(Me.tableVIEW_POS_SUMMARY.billdateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSLCODENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_POS_SUMMARY.SLCODEColumn)
        End Function
        
        Public Sub SetSLCODENull()
            Me(Me.tableVIEW_POS_SUMMARY.SLCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHEADDESCNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_POS_SUMMARY.HEADDESCColumn)
        End Function
        
        Public Sub SetHEADDESCNull()
            Me(Me.tableVIEW_POS_SUMMARY.HEADDESCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDRAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_POS_SUMMARY.DRAMOUNTColumn)
        End Function
        
        Public Sub SetDRAMOUNTNull()
            Me(Me.tableVIEW_POS_SUMMARY.DRAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCRAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_POS_SUMMARY.CRAMOUNTColumn)
        End Function
        
        Public Sub SetCRAMOUNTNull()
            Me(Me.tableVIEW_POS_SUMMARY.CRAMOUNTColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_POS_SUMMARYRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VIEW_POS_SUMMARYRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VIEW_POS_SUMMARYRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VIEW_POS_SUMMARYRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_MEM_CREDIT_DEFAULTERDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSNO As DataColumn
        
        Private columnMEM_NAME As DataColumn
        
        Private columnMCODE As DataColumn
        
        Private columnMNAME As DataColumn
        
        Private columnMEMBERTYPECODE As DataColumn
        
        Private columnCURRENTSTATUS As DataColumn
        
        Private columnMEMBERTYPE As DataColumn
        
        Private columnCDR As DataColumn
        
        Private columnCCR As DataColumn
        
        Private columnUSAGE As DataColumn
        
        Private columnFLAG As DataColumn
        
        Private columnCONTACTNO As DataColumn
        
        Private columnEMAIL As DataColumn
        
        Friend Sub New()
            MyBase.New("VIEW_MEM_CREDIT_DEFAULTER")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property SNOColumn As DataColumn
            Get
                Return Me.columnSNO
            End Get
        End Property
        
        Friend ReadOnly Property MEM_NAMEColumn As DataColumn
            Get
                Return Me.columnMEM_NAME
            End Get
        End Property
        
        Friend ReadOnly Property MCODEColumn As DataColumn
            Get
                Return Me.columnMCODE
            End Get
        End Property
        
        Friend ReadOnly Property MNAMEColumn As DataColumn
            Get
                Return Me.columnMNAME
            End Get
        End Property
        
        Friend ReadOnly Property MEMBERTYPECODEColumn As DataColumn
            Get
                Return Me.columnMEMBERTYPECODE
            End Get
        End Property
        
        Friend ReadOnly Property CURRENTSTATUSColumn As DataColumn
            Get
                Return Me.columnCURRENTSTATUS
            End Get
        End Property
        
        Friend ReadOnly Property MEMBERTYPEColumn As DataColumn
            Get
                Return Me.columnMEMBERTYPE
            End Get
        End Property
        
        Friend ReadOnly Property CDRColumn As DataColumn
            Get
                Return Me.columnCDR
            End Get
        End Property
        
        Friend ReadOnly Property CCRColumn As DataColumn
            Get
                Return Me.columnCCR
            End Get
        End Property
        
        Friend ReadOnly Property USAGEColumn As DataColumn
            Get
                Return Me.columnUSAGE
            End Get
        End Property
        
        Friend ReadOnly Property FLAGColumn As DataColumn
            Get
                Return Me.columnFLAG
            End Get
        End Property
        
        Friend ReadOnly Property CONTACTNOColumn As DataColumn
            Get
                Return Me.columnCONTACTNO
            End Get
        End Property
        
        Friend ReadOnly Property EMAILColumn As DataColumn
            Get
                Return Me.columnEMAIL
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VIEW_MEM_CREDIT_DEFAULTERRow
            Get
                Return CType(Me.Rows(index),VIEW_MEM_CREDIT_DEFAULTERRow)
            End Get
        End Property
        
        Public Event VIEW_MEM_CREDIT_DEFAULTERRowChanged As VIEW_MEM_CREDIT_DEFAULTERRowChangeEventHandler
        
        Public Event VIEW_MEM_CREDIT_DEFAULTERRowChanging As VIEW_MEM_CREDIT_DEFAULTERRowChangeEventHandler
        
        Public Event VIEW_MEM_CREDIT_DEFAULTERRowDeleted As VIEW_MEM_CREDIT_DEFAULTERRowChangeEventHandler
        
        Public Event VIEW_MEM_CREDIT_DEFAULTERRowDeleting As VIEW_MEM_CREDIT_DEFAULTERRowChangeEventHandler
        
        Public Overloads Sub AddVIEW_MEM_CREDIT_DEFAULTERRow(ByVal row As VIEW_MEM_CREDIT_DEFAULTERRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVIEW_MEM_CREDIT_DEFAULTERRow(ByVal SNO As Integer, ByVal MEM_NAME As String, ByVal MCODE As String, ByVal MNAME As String, ByVal MEMBERTYPECODE As String, ByVal CURRENTSTATUS As String, ByVal MEMBERTYPE As String, ByVal CDR As Decimal, ByVal CCR As Decimal, ByVal USAGE As Decimal, ByVal FLAG As String, ByVal CONTACTNO As String, ByVal EMAIL As String) As VIEW_MEM_CREDIT_DEFAULTERRow
            Dim rowVIEW_MEM_CREDIT_DEFAULTERRow As VIEW_MEM_CREDIT_DEFAULTERRow = CType(Me.NewRow,VIEW_MEM_CREDIT_DEFAULTERRow)
            rowVIEW_MEM_CREDIT_DEFAULTERRow.ItemArray = New Object() {SNO, MEM_NAME, MCODE, MNAME, MEMBERTYPECODE, CURRENTSTATUS, MEMBERTYPE, CDR, CCR, USAGE, FLAG, CONTACTNO, EMAIL}
            Me.Rows.Add(rowVIEW_MEM_CREDIT_DEFAULTERRow)
            Return rowVIEW_MEM_CREDIT_DEFAULTERRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VIEW_MEM_CREDIT_DEFAULTERDataTable = CType(MyBase.Clone,VIEW_MEM_CREDIT_DEFAULTERDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VIEW_MEM_CREDIT_DEFAULTERDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnSNO = Me.Columns("SNO")
            Me.columnMEM_NAME = Me.Columns("MEM_NAME")
            Me.columnMCODE = Me.Columns("MCODE")
            Me.columnMNAME = Me.Columns("MNAME")
            Me.columnMEMBERTYPECODE = Me.Columns("MEMBERTYPECODE")
            Me.columnCURRENTSTATUS = Me.Columns("CURRENTSTATUS")
            Me.columnMEMBERTYPE = Me.Columns("MEMBERTYPE")
            Me.columnCDR = Me.Columns("CDR")
            Me.columnCCR = Me.Columns("CCR")
            Me.columnUSAGE = Me.Columns("USAGE")
            Me.columnFLAG = Me.Columns("FLAG")
            Me.columnCONTACTNO = Me.Columns("CONTACTNO")
            Me.columnEMAIL = Me.Columns("EMAIL")
        End Sub
        
        Private Sub InitClass()
            Me.columnSNO = New DataColumn("SNO", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSNO)
            Me.columnMEM_NAME = New DataColumn("MEM_NAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEM_NAME)
            Me.columnMCODE = New DataColumn("MCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMCODE)
            Me.columnMNAME = New DataColumn("MNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMNAME)
            Me.columnMEMBERTYPECODE = New DataColumn("MEMBERTYPECODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEMBERTYPECODE)
            Me.columnCURRENTSTATUS = New DataColumn("CURRENTSTATUS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCURRENTSTATUS)
            Me.columnMEMBERTYPE = New DataColumn("MEMBERTYPE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEMBERTYPE)
            Me.columnCDR = New DataColumn("CDR", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCDR)
            Me.columnCCR = New DataColumn("CCR", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCCR)
            Me.columnUSAGE = New DataColumn("USAGE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUSAGE)
            Me.columnFLAG = New DataColumn("FLAG", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFLAG)
            Me.columnCONTACTNO = New DataColumn("CONTACTNO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCONTACTNO)
            Me.columnEMAIL = New DataColumn("EMAIL", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEMAIL)
            Me.columnSNO.ReadOnly = true
            Me.columnMEM_NAME.ReadOnly = true
            Me.columnMCODE.ReadOnly = true
            Me.columnMNAME.ReadOnly = true
            Me.columnMEMBERTYPECODE.ReadOnly = true
            Me.columnCURRENTSTATUS.ReadOnly = true
            Me.columnMEMBERTYPE.ReadOnly = true
            Me.columnCDR.ReadOnly = true
            Me.columnCCR.ReadOnly = true
            Me.columnUSAGE.ReadOnly = true
            Me.columnFLAG.ReadOnly = true
            Me.columnCONTACTNO.ReadOnly = true
            Me.columnEMAIL.ReadOnly = true
        End Sub
        
        Public Function NewVIEW_MEM_CREDIT_DEFAULTERRow() As VIEW_MEM_CREDIT_DEFAULTERRow
            Return CType(Me.NewRow,VIEW_MEM_CREDIT_DEFAULTERRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VIEW_MEM_CREDIT_DEFAULTERRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VIEW_MEM_CREDIT_DEFAULTERRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VIEW_MEM_CREDIT_DEFAULTERRowChangedEvent) Is Nothing) Then
                RaiseEvent VIEW_MEM_CREDIT_DEFAULTERRowChanged(Me, New VIEW_MEM_CREDIT_DEFAULTERRowChangeEvent(CType(e.Row,VIEW_MEM_CREDIT_DEFAULTERRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VIEW_MEM_CREDIT_DEFAULTERRowChangingEvent) Is Nothing) Then
                RaiseEvent VIEW_MEM_CREDIT_DEFAULTERRowChanging(Me, New VIEW_MEM_CREDIT_DEFAULTERRowChangeEvent(CType(e.Row,VIEW_MEM_CREDIT_DEFAULTERRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VIEW_MEM_CREDIT_DEFAULTERRowDeletedEvent) Is Nothing) Then
                RaiseEvent VIEW_MEM_CREDIT_DEFAULTERRowDeleted(Me, New VIEW_MEM_CREDIT_DEFAULTERRowChangeEvent(CType(e.Row,VIEW_MEM_CREDIT_DEFAULTERRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VIEW_MEM_CREDIT_DEFAULTERRowDeletingEvent) Is Nothing) Then
                RaiseEvent VIEW_MEM_CREDIT_DEFAULTERRowDeleting(Me, New VIEW_MEM_CREDIT_DEFAULTERRowChangeEvent(CType(e.Row,VIEW_MEM_CREDIT_DEFAULTERRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVIEW_MEM_CREDIT_DEFAULTERRow(ByVal row As VIEW_MEM_CREDIT_DEFAULTERRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_MEM_CREDIT_DEFAULTERRow
        Inherits DataRow
        
        Private tableVIEW_MEM_CREDIT_DEFAULTER As VIEW_MEM_CREDIT_DEFAULTERDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVIEW_MEM_CREDIT_DEFAULTER = CType(Me.Table,VIEW_MEM_CREDIT_DEFAULTERDataTable)
        End Sub
        
        Public Property SNO As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_CREDIT_DEFAULTER.SNOColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_CREDIT_DEFAULTER.SNOColumn) = value
            End Set
        End Property
        
        Public Property MEM_NAME As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_CREDIT_DEFAULTER.MEM_NAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_CREDIT_DEFAULTER.MEM_NAMEColumn) = value
            End Set
        End Property
        
        Public Property MCODE As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_CREDIT_DEFAULTER.MCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_CREDIT_DEFAULTER.MCODEColumn) = value
            End Set
        End Property
        
        Public Property MNAME As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_CREDIT_DEFAULTER.MNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_CREDIT_DEFAULTER.MNAMEColumn) = value
            End Set
        End Property
        
        Public Property MEMBERTYPECODE As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_CREDIT_DEFAULTER.MEMBERTYPECODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_CREDIT_DEFAULTER.MEMBERTYPECODEColumn) = value
            End Set
        End Property
        
        Public Property CURRENTSTATUS As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_CREDIT_DEFAULTER.CURRENTSTATUSColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_CREDIT_DEFAULTER.CURRENTSTATUSColumn) = value
            End Set
        End Property
        
        Public Property MEMBERTYPE As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_CREDIT_DEFAULTER.MEMBERTYPEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_CREDIT_DEFAULTER.MEMBERTYPEColumn) = value
            End Set
        End Property
        
        Public Property CDR As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_CREDIT_DEFAULTER.CDRColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_CREDIT_DEFAULTER.CDRColumn) = value
            End Set
        End Property
        
        Public Property CCR As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_CREDIT_DEFAULTER.CCRColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_CREDIT_DEFAULTER.CCRColumn) = value
            End Set
        End Property
        
        Public Property USAGE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_CREDIT_DEFAULTER.USAGEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_CREDIT_DEFAULTER.USAGEColumn) = value
            End Set
        End Property
        
        Public Property FLAG As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_CREDIT_DEFAULTER.FLAGColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_CREDIT_DEFAULTER.FLAGColumn) = value
            End Set
        End Property
        
        Public Property CONTACTNO As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_CREDIT_DEFAULTER.CONTACTNOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_CREDIT_DEFAULTER.CONTACTNOColumn) = value
            End Set
        End Property
        
        Public Property EMAIL As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEM_CREDIT_DEFAULTER.EMAILColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEM_CREDIT_DEFAULTER.EMAILColumn) = value
            End Set
        End Property
        
        Public Function IsSNONull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_CREDIT_DEFAULTER.SNOColumn)
        End Function
        
        Public Sub SetSNONull()
            Me(Me.tableVIEW_MEM_CREDIT_DEFAULTER.SNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMEM_NAMENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_CREDIT_DEFAULTER.MEM_NAMEColumn)
        End Function
        
        Public Sub SetMEM_NAMENull()
            Me(Me.tableVIEW_MEM_CREDIT_DEFAULTER.MEM_NAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMCODENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_CREDIT_DEFAULTER.MCODEColumn)
        End Function
        
        Public Sub SetMCODENull()
            Me(Me.tableVIEW_MEM_CREDIT_DEFAULTER.MCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMNAMENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_CREDIT_DEFAULTER.MNAMEColumn)
        End Function
        
        Public Sub SetMNAMENull()
            Me(Me.tableVIEW_MEM_CREDIT_DEFAULTER.MNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMEMBERTYPECODENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_CREDIT_DEFAULTER.MEMBERTYPECODEColumn)
        End Function
        
        Public Sub SetMEMBERTYPECODENull()
            Me(Me.tableVIEW_MEM_CREDIT_DEFAULTER.MEMBERTYPECODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCURRENTSTATUSNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_CREDIT_DEFAULTER.CURRENTSTATUSColumn)
        End Function
        
        Public Sub SetCURRENTSTATUSNull()
            Me(Me.tableVIEW_MEM_CREDIT_DEFAULTER.CURRENTSTATUSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMEMBERTYPENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_CREDIT_DEFAULTER.MEMBERTYPEColumn)
        End Function
        
        Public Sub SetMEMBERTYPENull()
            Me(Me.tableVIEW_MEM_CREDIT_DEFAULTER.MEMBERTYPEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCDRNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_CREDIT_DEFAULTER.CDRColumn)
        End Function
        
        Public Sub SetCDRNull()
            Me(Me.tableVIEW_MEM_CREDIT_DEFAULTER.CDRColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCCRNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_CREDIT_DEFAULTER.CCRColumn)
        End Function
        
        Public Sub SetCCRNull()
            Me(Me.tableVIEW_MEM_CREDIT_DEFAULTER.CCRColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUSAGENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_CREDIT_DEFAULTER.USAGEColumn)
        End Function
        
        Public Sub SetUSAGENull()
            Me(Me.tableVIEW_MEM_CREDIT_DEFAULTER.USAGEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFLAGNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_CREDIT_DEFAULTER.FLAGColumn)
        End Function
        
        Public Sub SetFLAGNull()
            Me(Me.tableVIEW_MEM_CREDIT_DEFAULTER.FLAGColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCONTACTNONull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_CREDIT_DEFAULTER.CONTACTNOColumn)
        End Function
        
        Public Sub SetCONTACTNONull()
            Me(Me.tableVIEW_MEM_CREDIT_DEFAULTER.CONTACTNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEMAILNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEM_CREDIT_DEFAULTER.EMAILColumn)
        End Function
        
        Public Sub SetEMAILNull()
            Me(Me.tableVIEW_MEM_CREDIT_DEFAULTER.EMAILColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_MEM_CREDIT_DEFAULTERRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VIEW_MEM_CREDIT_DEFAULTERRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VIEW_MEM_CREDIT_DEFAULTERRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VIEW_MEM_CREDIT_DEFAULTERRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class month_billDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnamount As DataColumn
        
        Private columndescription As DataColumn
        
        Private columnmcode As DataColumn
        
        Private columnorder_no As DataColumn
        
        Private column_date As DataColumn
        
        Friend Sub New()
            MyBase.New("month_bill")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property amountColumn As DataColumn
            Get
                Return Me.columnamount
            End Get
        End Property
        
        Friend ReadOnly Property descriptionColumn As DataColumn
            Get
                Return Me.columndescription
            End Get
        End Property
        
        Friend ReadOnly Property mcodeColumn As DataColumn
            Get
                Return Me.columnmcode
            End Get
        End Property
        
        Friend ReadOnly Property order_noColumn As DataColumn
            Get
                Return Me.columnorder_no
            End Get
        End Property
        
        Friend ReadOnly Property _dateColumn As DataColumn
            Get
                Return Me.column_date
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As month_billRow
            Get
                Return CType(Me.Rows(index),month_billRow)
            End Get
        End Property
        
        Public Event month_billRowChanged As month_billRowChangeEventHandler
        
        Public Event month_billRowChanging As month_billRowChangeEventHandler
        
        Public Event month_billRowDeleted As month_billRowChangeEventHandler
        
        Public Event month_billRowDeleting As month_billRowChangeEventHandler
        
        Public Overloads Sub Addmonth_billRow(ByVal row As month_billRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addmonth_billRow(ByVal amount As Decimal, ByVal description As String, ByVal mcode As String, ByVal order_no As Decimal, ByVal _date As Date) As month_billRow
            Dim rowmonth_billRow As month_billRow = CType(Me.NewRow,month_billRow)
            rowmonth_billRow.ItemArray = New Object() {amount, description, mcode, order_no, _date}
            Me.Rows.Add(rowmonth_billRow)
            Return rowmonth_billRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As month_billDataTable = CType(MyBase.Clone,month_billDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New month_billDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnamount = Me.Columns("amount")
            Me.columndescription = Me.Columns("description")
            Me.columnmcode = Me.Columns("mcode")
            Me.columnorder_no = Me.Columns("order_no")
            Me.column_date = Me.Columns("date")
        End Sub
        
        Private Sub InitClass()
            Me.columnamount = New DataColumn("amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount)
            Me.columndescription = New DataColumn("description", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndescription)
            Me.columnmcode = New DataColumn("mcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmcode)
            Me.columnorder_no = New DataColumn("order_no", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnorder_no)
            Me.column_date = New DataColumn("date", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column_date)
            Me.column_date.AllowDBNull = false
        End Sub
        
        Public Function Newmonth_billRow() As month_billRow
            Return CType(Me.NewRow,month_billRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New month_billRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(month_billRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.month_billRowChangedEvent) Is Nothing) Then
                RaiseEvent month_billRowChanged(Me, New month_billRowChangeEvent(CType(e.Row,month_billRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.month_billRowChangingEvent) Is Nothing) Then
                RaiseEvent month_billRowChanging(Me, New month_billRowChangeEvent(CType(e.Row,month_billRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.month_billRowDeletedEvent) Is Nothing) Then
                RaiseEvent month_billRowDeleted(Me, New month_billRowChangeEvent(CType(e.Row,month_billRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.month_billRowDeletingEvent) Is Nothing) Then
                RaiseEvent month_billRowDeleting(Me, New month_billRowChangeEvent(CType(e.Row,month_billRow), e.Action))
            End If
        End Sub
        
        Public Sub Removemonth_billRow(ByVal row As month_billRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class month_billRow
        Inherits DataRow
        
        Private tablemonth_bill As month_billDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablemonth_bill = CType(Me.Table,month_billDataTable)
        End Sub
        
        Public Property amount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablemonth_bill.amountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemonth_bill.amountColumn) = value
            End Set
        End Property
        
        Public Property description As String
            Get
                Try 
                    Return CType(Me(Me.tablemonth_bill.descriptionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemonth_bill.descriptionColumn) = value
            End Set
        End Property
        
        Public Property mcode As String
            Get
                Try 
                    Return CType(Me(Me.tablemonth_bill.mcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemonth_bill.mcodeColumn) = value
            End Set
        End Property
        
        Public Property order_no As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablemonth_bill.order_noColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemonth_bill.order_noColumn) = value
            End Set
        End Property
        
        Public Property _date As Date
            Get
                Return CType(Me(Me.tablemonth_bill._dateColumn),Date)
            End Get
            Set
                Me(Me.tablemonth_bill._dateColumn) = value
            End Set
        End Property
        
        Public Function IsamountNull() As Boolean
            Return Me.IsNull(Me.tablemonth_bill.amountColumn)
        End Function
        
        Public Sub SetamountNull()
            Me(Me.tablemonth_bill.amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdescriptionNull() As Boolean
            Return Me.IsNull(Me.tablemonth_bill.descriptionColumn)
        End Function
        
        Public Sub SetdescriptionNull()
            Me(Me.tablemonth_bill.descriptionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsmcodeNull() As Boolean
            Return Me.IsNull(Me.tablemonth_bill.mcodeColumn)
        End Function
        
        Public Sub SetmcodeNull()
            Me(Me.tablemonth_bill.mcodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isorder_noNull() As Boolean
            Return Me.IsNull(Me.tablemonth_bill.order_noColumn)
        End Function
        
        Public Sub Setorder_noNull()
            Me(Me.tablemonth_bill.order_noColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class month_billRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As month_billRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As month_billRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As month_billRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
